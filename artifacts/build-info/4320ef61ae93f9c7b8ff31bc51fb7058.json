{"id":"4320ef61ae93f9c7b8ff31bc51fb7058","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.22;\n\ninterface IPoints {\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            accounts[i].sendValue(amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {LimitedOCPointsMerkleClaim} from \"../../payment/LimitedOCPointsMerkleClaim.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract LimitedOCPointsMerkleClaimMock is LimitedOCPointsMerkleClaim {\n    constructor(address ecpContractAddress, IForwarderRegistry forwarderRegistry) LimitedOCPointsMerkleClaim(ecpContractAddress, forwarderRegistry) {}\n\n    /// @notice Internal function to access the current msg.sender.\n    /// @return The current msg.sender value.\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/payment/LimitedOCPointsMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {InconsistentArrayLengths} from \"@animoca/ethereum-contracts/contracts/CommonErrors.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IPoints} from \"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\";\n\n/// @title LimitedOCPointsMerkleClaim\n/// @notice This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.\n/// @notice Each epoch has a fixed total amount that gets depleted as users claim their allocations.\n/// @notice Claims are based on merkle proofs and are subject to time constraints and pool availability.\ncontract LimitedOCPointsMerkleClaim is TokenRecovery, ForwarderRegistryContext {\n    /// @notice Thrown when the reward contract address is invalid.\n    /// @param InvalidRewardContractAddress The address of the invalid reward contract.\n    error InvalidRewardContractAddress(address InvalidRewardContractAddress);\n\n    /// @notice Thrown when trying to claim outside the valid time epoch.\n    /// @param currentTime The current block timestamp.\n    /// @param startTime The start time of the claiming epoch.\n    /// @param endTime The end time of the claiming epoch.\n    error ClaimingEpochNotActive(uint256 currentTime, uint256 startTime, uint256 endTime);\n\n    /// @notice Thrown when trying to claim the same allocation more than once.\n    /// @param recipient The recipient of the claim.\n    /// @param amount The amount being claimed.\n    /// @param reasonCode The reason code for the deposit.\n    /// @param epochId The epoch identifier.\n    error AlreadyClaimed(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\n\n    /// @notice Thrown when a proof cannot be verified.\n    /// @param recipient The recipient of the claim.\n    /// @param amount The amount being claimed.\n    /// @param reasonCode The reason code for the deposit.\n    /// @param epochId The epoch identifier.\n    error InvalidProof(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\n\n    /// @notice Thrown when the pool doesn't have enough tokens for the claim.\n    /// @param amountRequested The amount requested to claim.\n    /// @param amountAvailable The amount available in the pool.\n    error InsufficientPoolAmount(uint256 amountRequested, uint256 amountAvailable);\n\n    /// @notice Thrown when trying to access a non-existent epoch.\n    /// @param epochId The epoch identifier.\n    error ClaimEpochNotFound(uint256 epochId);\n\n    /// @notice Thrown when the start time is not before the end time.\n    /// @param startTime The start time.\n    /// @param endTime The end time.\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime);\n\n    /// @notice Enum representing different claim validation errors.\n    enum ClaimError {\n        NoError,\n        ClaimEpochNotFound,\n        ClaimingEpochNotActive,\n        AlreadyClaimed,\n        InsufficientPoolAmount\n    }\n\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    /// @notice The role identifier for the operator role.\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n    /// @notice A reference to the reward contract.\n    IPoints public immutable POINTS_CONTRACT;\n\n    /// @notice Struct representing a claiming epoch.\n    struct ClaimEpoch {\n        bytes32 merkleRoot;      // Merkle root for this epoch\n        uint256 totalAmount;     // Total amount available for claiming\n        uint256 amountLeft;      // Amount left to be claimed\n        uint256 startTime;       // Start time for claiming\n        uint256 endTime;         // End time for claiming\n    }\n\n    /// @notice Current epoch counter.\n    uint256 public currentEpochId;\n\n    /// @notice Mapping from epoch ID to claiming epoch data.\n    mapping(uint256 => ClaimEpoch) public claimEpochs;\n\n    /// @notice Mapping from epoch ID to user address to claimed status.\n    mapping(uint256 => mapping(address => bool)) public claimed;\n\n    /// @notice Emitted when a new merkle root is set for an epoch.\n    /// @param epochId The epoch identifier.\n    /// @param merkleRoot The merkle root for this epoch.\n    /// @param totalAmount The total amount available for claiming.\n    /// @param startTime The start time for claiming.\n    /// @param endTime The end time for claiming.\n    event MerkleRootSet(uint256 indexed epochId, bytes32 merkleRoot, uint256 totalAmount, uint256 startTime, uint256 endTime);\n\n    /// @notice Emitted when a reward is claimed.\n    /// @param epochId The epoch identifier.\n    /// @param recipient The recipient of the claim.\n    /// @param amount The amount claimed.\n    /// @param amountLeft The amount left in the pool after this claim.\n    event RewardClaimed(uint256 indexed epochId, address indexed recipient, uint256 amount, uint256 amountLeft);\n\n    /// @notice Constructor\n    /// @param rewardContractAddress The address of the reward contract.\n    /// @param forwarderRegistry The address of the forwarder registry.\n    /// @dev Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address.\n    constructor(\n        address rewardContractAddress,\n        IForwarderRegistry forwarderRegistry\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\n        if (rewardContractAddress == address(0)) {\n            revert InvalidRewardContractAddress(rewardContractAddress);\n        }\n        POINTS_CONTRACT = IPoints(rewardContractAddress);\n    }\n\n    /// @notice Sets a new merkle root for a claiming epoch.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InvalidClaimWindow} if startTime is not before endTime.\n    /// @dev Emits a {MerkleRootSet} event.\n    /// @param merkleRoot The merkle root for this epoch.\n    /// @param totalAmount The total amount available for claiming in this epoch.\n    /// @param startTime The start time for claiming.\n    /// @param endTime The end time for claiming.\n    function setMerkleRoot(\n        bytes32 merkleRoot,\n        uint256 totalAmount,\n        uint256 startTime,\n        uint256 endTime\n    ) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        \n        if (startTime >= endTime) {\n            revert InvalidClaimWindow(startTime, endTime);\n        }\n\n        uint256 epochId = currentEpochId;\n        claimEpochs[epochId] = ClaimEpoch({\n            merkleRoot: merkleRoot,\n            totalAmount: totalAmount,\n            amountLeft: totalAmount,\n            startTime: startTime,\n            endTime: endTime\n        });\n\n        unchecked {\n            ++currentEpochId;\n        }\n\n        emit MerkleRootSet(epochId, merkleRoot, totalAmount, startTime, endTime);\n    }\n\n    /// @notice Claims rewards for a given recipient address.\n    /// @dev Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.\n    /// @dev Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.\n    /// @dev Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.\n    /// @dev Reverts with {InvalidProof} if the merkle proof verification fails.\n    /// @dev Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.\n    /// @dev Emits a {RewardClaimed} event.\n    /// @param epochId The epoch identifier.\n    /// @param recipient The recipient for this claim.\n    /// @param amount The amount to be claimed.\n    /// @param reasonCode The reason code for the deposit.\n    /// @param proof The merkle proof for verification.\n    function claim(\n        uint256 epochId,\n        address recipient,\n        uint256 amount,\n        bytes32 reasonCode,\n        bytes32[] calldata proof\n    ) external {\n        ClaimEpoch storage epoch = claimEpochs[epochId];\n        \n        if (epoch.merkleRoot == bytes32(0)) {\n            revert ClaimEpochNotFound(epochId);\n        }\n\n        uint256 currentTime = block.timestamp;\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\n            revert ClaimingEpochNotActive(currentTime, epoch.startTime, epoch.endTime);\n        }\n\n        if (claimed[epochId][recipient]) {\n            revert AlreadyClaimed(recipient, amount, reasonCode, epochId);\n        }\n\n        if (epoch.amountLeft < amount) {\n            revert InsufficientPoolAmount(amount, epoch.amountLeft);\n        }\n\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount, reasonCode, epochId));\n        if (!proof.verifyCalldata(epoch.merkleRoot, leaf)) {\n            revert InvalidProof(recipient, amount, reasonCode, epochId);\n        }\n\n        claimed[epochId][recipient] = true;\n        epoch.amountLeft -= amount;\n\n        POINTS_CONTRACT.deposit(recipient, amount, reasonCode);\n\n        emit RewardClaimed(epochId, recipient, amount, epoch.amountLeft);\n    }\n\n    /// @notice Checks if a user can claim rewards for a given epoch.\n    /// @dev Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.\n    /// @dev Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.\n    /// @dev Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.\n    /// @dev Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.\n    /// @dev Returns ClaimError.NoError if basic validation passes.\n    /// @param epochId The epoch identifier.\n    /// @param recipient The recipient address.\n    /// @param amount The amount to be claimed.\n    /// @return error The claim validation result.\n    function canClaim(\n        uint256 epochId,\n        address recipient,\n        uint256 amount\n    ) public view returns (ClaimError error) {\n        ClaimEpoch storage epoch = claimEpochs[epochId];\n        \n        if (epoch.merkleRoot == bytes32(0)) {\n            return ClaimError.ClaimEpochNotFound;\n        }\n\n        uint256 currentTime = block.timestamp;\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\n            return ClaimError.ClaimingEpochNotActive;\n        }\n\n        if (claimed[epochId][recipient]) {\n            return ClaimError.AlreadyClaimed;\n        }\n\n        if (epoch.amountLeft < amount) {\n            return ClaimError.InsufficientPoolAmount;\n        }\n\n        return ClaimError.NoError;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n} "}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol":{"ast":{"absolutePath":"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol","exportedSymbols":{"IPoints":[11]},"id":12,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"45:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IPoints","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":11,"linearizedBaseContracts":[11],"name":"IPoints","nameLocation":"80:7:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"26b3293f","id":10,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"103:7:0","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3,"mutability":"mutable","name":"holder","nameLocation":"119:6:0","nodeType":"VariableDeclaration","scope":10,"src":"111:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2,"name":"address","nodeType":"ElementaryTypeName","src":"111:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5,"mutability":"mutable","name":"amount","nameLocation":"135:6:0","nodeType":"VariableDeclaration","scope":10,"src":"127:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"127:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"depositReasonCode","nameLocation":"151:17:0","nodeType":"VariableDeclaration","scope":10,"src":"143:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6,"name":"bytes32","nodeType":"ElementaryTypeName","src":"143:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"110:59:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"178:0:0"},"scope":11,"src":"94:85:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":12,"src":"70:111:0","usedErrors":[],"usedEvents":[]}],"src":"45:137:0"},"id":0},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[16],"InconsistentArrayLengths":[19],"TransferFailed":[22]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":13,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"58:84:1","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":16,"name":"EtherReceptionDisabled","nameLocation":"148:22:1","nodeType":"ErrorDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"170:2:1"},"src":"142:31:1"},{"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"175:76:1","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":19,"name":"InconsistentArrayLengths","nameLocation":"257:24:1","nodeType":"ErrorDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"281:2:1"},"src":"251:33:1"},{"documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"286:52:1","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":22,"name":"TransferFailed","nameLocation":"344:14:1","nodeType":"ErrorDefinition","parameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"358:2:1"},"src":"338:23:1"}],"src":"32:330:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[55],"ContractOwnershipBase":[103],"ContractOwnershipStorage":[407],"InterfaceDetection":[437]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":408,"src":"58:82:2","symbolAliases":[{"foreign":{"id":25,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":28,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":104,"src":"141:71:2","symbolAliases":[{"foreign":{"id":27,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":438,"src":"213:77:2","symbolAliases":[{"foreign":{"id":29,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":32,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":103,"src":"549:21:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":34,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":437,"src":"572:18:2"},"id":35,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":55,"linearizedBaseContracts":[55,437,454,103,1996,149],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":39,"libraryName":{"id":36,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":407,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"632:31:2"},"referencedDeclaration":180,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":49,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":250,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":54,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":55,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":56,"src":"510:570:2","usedErrors":[117,442],"usedEvents":[133]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1996],"ContractOwnershipBase":[103],"ContractOwnershipStorage":[407],"IERC173":[149]},"id":104,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":104,"sourceUnit":150,"src":"58:52:3","symbolAliases":[{"foreign":{"id":58,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"66:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":61,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":104,"sourceUnit":408,"src":"111:85:3","symbolAliases":[{"foreign":{"id":60,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"119:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":63,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":104,"sourceUnit":1997,"src":"197:66:3","symbolAliases":[{"foreign":{"id":62,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"205:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":65,"name":"IERC173","nameLocations":["586:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":149,"src":"586:7:3"},"id":66,"nodeType":"InheritanceSpecifier","src":"586:7:3"},{"baseName":{"id":67,"name":"Context","nameLocations":["595:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1996,"src":"595:7:3"},"id":68,"nodeType":"InheritanceSpecifier","src":"595:7:3"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"265:278:3","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":103,"linearizedBaseContracts":[103,1996,149],"name":"ContractOwnershipBase","nameLocation":"561:21:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":72,"libraryName":{"id":69,"name":"ContractOwnershipStorage","nameLocations":["615:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":407,"src":"615:24:3"},"nodeType":"UsingForDirective","src":"609:67:3","typeName":{"id":71,"nodeType":"UserDefinedTypeName","pathNode":{"id":70,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:3","669:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"644:31:3"},"referencedDeclaration":180,"src":"644:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[148],"body":{"id":84,"nodeType":"Block","src":"765:65:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":78,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"782:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"782:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":81,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":327,"src":"782:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$180_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":77,"id":83,"nodeType":"Return","src":"775:48:3"}]},"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"682:23:3","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":85,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:3","nodeType":"FunctionDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"724:2:3"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":85,"src":"756:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:3"},"scope":103,"src":"710:120:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[142],"body":{"id":101,"nodeType":"Block","src":"924:92:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":96,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"986:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":98,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1000:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":91,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"934:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"934:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:3","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":314,"src":"934:51:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$180_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":100,"nodeType":"ExpressionStatement","src":"934:75:3"}]},"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"836:23:3","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":102,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:3","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:3","nodeType":"VariableDeclaration","scope":102,"src":"891:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:3"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[],"src":"924:0:3"},"scope":103,"src":"864:152:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":104,"src":"543:475:3","usedErrors":[117],"usedEvents":[133]}],"src":"32:987:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":105,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"58:128:4","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":110,"name":"TargetIsNotAContract","nameLocation":"192:20:4","nodeType":"ErrorDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:4","nodeType":"VariableDeclaration","scope":110,"src":"213:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:4"},"src":"186:51:4"}],"src":"32:206:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[117],"NotTargetContractOwner":[124]},"id":125,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:130:5","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":117,"name":"NotContractOwner","nameLocation":"194:16:5","nodeType":"ErrorDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"219:7:5","nodeType":"VariableDeclaration","scope":117,"src":"211:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:5"},"src":"188:40:5"},{"documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"230:194:5","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":124,"name":"NotTargetContractOwner","nameLocation":"430:22:5","nodeType":"ErrorDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:5","nodeType":"VariableDeclaration","scope":124,"src":"453:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"account","nameLocation":"485:7:5","nodeType":"VariableDeclaration","scope":124,"src":"477:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:5"},"src":"424:70:5"}],"src":"32:463:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[133]},"id":134,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":126,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"anonymous":false,"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"58:155:6","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":133,"name":"OwnershipTransferred","nameLocation":"219:20:6","nodeType":"EventDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:6","nodeType":"VariableDeclaration","scope":133,"src":"240:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":131,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:6","nodeType":"VariableDeclaration","scope":133,"src":"271:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:6"},"src":"213:84:6"}],"src":"32:269:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[149]},"id":150,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":135,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"58:182:7","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":149,"linearizedBaseContracts":[149],"name":"IERC173","nameLocation":"250:7:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"264:342:7","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":142,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:7","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:7","nodeType":"VariableDeclaration","scope":142,"src":"638:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:7"},"returnParameters":{"id":141,"nodeType":"ParameterList","parameters":[],"src":"664:0:7"},"scope":149,"src":"611:54:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"671:116:7","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:7","nodeType":"FunctionDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"806:2:7"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:7","nodeType":"VariableDeclaration","scope":148,"src":"832:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:7"},"scope":149,"src":"792:63:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":150,"src":"240:617:7","usedErrors":[],"usedEvents":[]}],"src":"32:826:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1974],"ContractOwnershipStorage":[407],"IERC173":[149],"InterfaceDetectionStorage":[555],"NotContractOwner":[117],"NotTargetContractOwner":[124],"OwnershipTransferred":[133],"ProxyInitialization":[835],"TargetIsNotAContract":[110]},"id":408,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":151,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":125,"src":"58:97:8","symbolAliases":[{"foreign":{"id":152,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"66:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":153,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"84:22:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":111,"src":"156:60:8","symbolAliases":[{"foreign":{"id":155,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"164:20:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":134,"src":"217:66:8","symbolAliases":[{"foreign":{"id":157,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"225:20:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":160,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":150,"src":"284:52:8","symbolAliases":[{"foreign":{"id":159,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"292:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":162,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":1975,"src":"337:66:8","symbolAliases":[{"foreign":{"id":161,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"345:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":164,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":836,"src":"404:84:8","symbolAliases":[{"foreign":{"id":163,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"412:19:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":408,"sourceUnit":556,"src":"489:104:8","symbolAliases":[{"foreign":{"id":165,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"497:25:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":407,"linearizedBaseContracts":[407],"name":"ContractOwnershipStorage","nameLocation":"603:24:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":169,"libraryName":{"id":167,"name":"Address","nameLocations":["640:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1974,"src":"640:7:8"},"nodeType":"UsingForDirective","src":"634:26:8","typeName":{"id":168,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":173,"libraryName":{"id":170,"name":"ContractOwnershipStorage","nameLocations":["671:24:8"],"nodeType":"IdentifierPath","referencedDeclaration":407,"src":"671:24:8"},"nodeType":"UsingForDirective","src":"665:67:8","typeName":{"id":172,"nodeType":"UserDefinedTypeName","pathNode":{"id":171,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:8","725:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"700:31:8"},"referencedDeclaration":180,"src":"700:31:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":177,"libraryName":{"id":174,"name":"InterfaceDetectionStorage","nameLocations":["743:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"743:25:8"},"nodeType":"UsingForDirective","src":"737:69:8","typeName":{"id":176,"nodeType":"UserDefinedTypeName","pathNode":{"id":175,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:8","799:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"773:32:8"},"referencedDeclaration":465,"src":"773:32:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":180,"members":[{"constant":false,"id":179,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:8","nodeType":"VariableDeclaration","scope":180,"src":"836:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:8","nodeType":"StructDefinition","scope":407,"src":"812:52:8","visibility":"public"},{"constant":true,"id":193,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:8","nodeType":"VariableDeclaration","scope":407,"src":"870:128:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":186,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:8","typeDescriptions":{}}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:8","typeDescriptions":{}}},"id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":206,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:8","nodeType":"VariableDeclaration","scope":407,"src":"1004:128:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":199,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:8","typeDescriptions":{}}},"id":202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":195,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:8","typeDescriptions":{}}},"id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"1641:267:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":215,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1655:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:8","typeDescriptions":{}}},"id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":236,"nodeType":"IfStatement","src":"1651:152:8","trueBody":{"id":235,"nodeType":"Block","src":"1683:120:8","statements":[{"expression":{"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":221,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1697:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:8","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":179,"src":"1697:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":224,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1715:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":226,"nodeType":"ExpressionStatement","src":"1697:30:8"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:8","typeDescriptions":{}}},"id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":232,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1779:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"1746:20:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":234,"nodeType":"EmitStatement","src":"1741:51:8"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":243,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"1874:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$149_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$149_$","typeString":"type(contract IERC173)"}],"id":242,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$149","typeString":"type(contract IERC173)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":237,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"1812:25:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$555_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"1812:32:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$465_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:8","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":508,"src":"1812:56:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$465_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$465_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"1812:89:8"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"1139:423:8","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:8","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"s","nameLocation":"1607:1:8","nodeType":"VariableDeclaration","scope":250,"src":"1592:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"Layout","nameLocations":["1592:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"1592:6:8"},"referencedDeclaration":180,"src":"1592:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:8","nodeType":"VariableDeclaration","scope":250,"src":"1610:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:8"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"1641:0:8"},"scope":407,"src":"1567:341:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":272,"nodeType":"Block","src":"2573:112:8","statements":[{"expression":{"arguments":[{"id":262,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2612:21:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":259,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"2583:19:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$835_$","typeString":"type(library ProxyInitialization)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:8","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":834,"src":"2583:28:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"ExpressionStatement","src":"2583:54:8"},{"expression":{"arguments":[{"id":269,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"2665:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":266,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"2647:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:8","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":250,"src":"2647:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":271,"nodeType":"ExpressionStatement","src":"2647:31:8"}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"1914:586:8","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":273,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:8","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"2539:1:8","nodeType":"VariableDeclaration","scope":273,"src":"2524:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["2524:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"2524:6:8"},"referencedDeclaration":180,"src":"2524:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:8","nodeType":"VariableDeclaration","scope":273,"src":"2542:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:8"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"2573:0:8"},"scope":407,"src":"2505:180:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"3148:281:8","statements":[{"assignments":[285],"declarations":[{"constant":false,"id":285,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:8","nodeType":"VariableDeclaration","scope":313,"src":"3158:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":288,"initialValue":{"expression":{"id":286,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"3182:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:8","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":179,"src":"3182:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":289,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3211:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":290,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3221:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"3207:60:8","trueBody":{"errorCall":{"arguments":[{"id":293,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3260:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":292,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3243:16:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"RevertStatement","src":"3236:31:8"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":297,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3281:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":298,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3298:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":312,"nodeType":"IfStatement","src":"3277:146:8","trueBody":{"id":311,"nodeType":"Block","src":"3308:115:8","statements":[{"expression":{"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"3322:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:8","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":179,"src":"3322:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":303,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3340:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":305,"nodeType":"ExpressionStatement","src":"3322:26:8"},{"eventCall":{"arguments":[{"id":307,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3388:13:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":308,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3403:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3367:20:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"EmitStatement","src":"3362:50:8"}]}}]},"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"2691:364:8","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:8","nodeType":"FunctionDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"s","nameLocation":"3102:1:8","nodeType":"VariableDeclaration","scope":314,"src":"3087:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":276,"nodeType":"UserDefinedTypeName","pathNode":{"id":275,"name":"Layout","nameLocations":["3087:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"3087:6:8"},"referencedDeclaration":180,"src":"3087:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"sender","nameLocation":"3113:6:8","nodeType":"VariableDeclaration","scope":314,"src":"3105:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:8","nodeType":"VariableDeclaration","scope":314,"src":"3121:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:8"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"3148:0:8"},"scope":407,"src":"3060:369:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":326,"nodeType":"Block","src":"3635:39:8","statements":[{"expression":{"expression":{"id":323,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3652:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":324,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:8","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":179,"src":"3652:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":322,"id":325,"nodeType":"Return","src":"3645:22:8"}]},"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"3435:116:8","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":327,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:8","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"s","nameLocation":"3586:1:8","nodeType":"VariableDeclaration","scope":327,"src":"3571:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":317,"nodeType":"UserDefinedTypeName","pathNode":{"id":316,"name":"Layout","nameLocations":["3571:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"3571:6:8"},"referencedDeclaration":180,"src":"3571:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:8"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:8","nodeType":"VariableDeclaration","scope":327,"src":"3612:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:8"},"scope":407,"src":"3556:118:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":354,"nodeType":"Block","src":"4070:153:8","statements":[{"condition":{"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:8","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":337,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4085:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"4085:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":345,"nodeType":"IfStatement","src":"4080:77:8","trueBody":{"errorCall":{"arguments":[{"id":342,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4142:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":341,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4121:20:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"RevertStatement","src":"4114:43:8"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":347,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4182:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":346,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4174:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$149_$","typeString":"type(contract IERC173)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$149","typeString":"contract IERC173"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:8","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":148,"src":"4174:29:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4209:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":336,"id":353,"nodeType":"Return","src":"4167:49:8"}]},"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"3680:261:8","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":355,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:8","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:8","nodeType":"VariableDeclaration","scope":355,"src":"3977:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":332,"mutability":"mutable","name":"account","nameLocation":"4009:7:8","nodeType":"VariableDeclaration","scope":355,"src":"4001:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:8"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:8","nodeType":"VariableDeclaration","scope":355,"src":"4041:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":334,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:8"},"scope":407,"src":"3946:277:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":373,"nodeType":"Block","src":"4494:81:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":364,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"4508:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":365,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"4519:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:8","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":179,"src":"4519:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":372,"nodeType":"IfStatement","src":"4504:64:8","trueBody":{"errorCall":{"arguments":[{"id":369,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"4560:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":368,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"4543:16:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":371,"nodeType":"RevertStatement","src":"4536:32:8"}}]},"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"4229:179:8","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":374,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:8","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"s","nameLocation":"4460:1:8","nodeType":"VariableDeclaration","scope":374,"src":"4445:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":358,"nodeType":"UserDefinedTypeName","pathNode":{"id":357,"name":"Layout","nameLocations":["4445:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"4445:6:8"},"referencedDeclaration":180,"src":"4445:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"account","nameLocation":"4471:7:8","nodeType":"VariableDeclaration","scope":374,"src":"4463:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:8"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"4494:0:8"},"scope":407,"src":"4413:162:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":393,"nodeType":"Block","src":"4935:124:8","statements":[{"condition":{"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:8","subExpression":{"arguments":[{"id":383,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"4972:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":384,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"4988:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":382,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"4950:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":392,"nodeType":"IfStatement","src":"4945:107:8","trueBody":{"errorCall":{"arguments":[{"id":388,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"5028:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":389,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"5044:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":387,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"5005:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":391,"nodeType":"RevertStatement","src":"4998:54:8"}}]},"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"4581:256:8","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":394,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:8","nodeType":"FunctionDefinition","parameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:8","nodeType":"VariableDeclaration","scope":394,"src":"4880:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"account","nameLocation":"4912:7:8","nodeType":"VariableDeclaration","scope":394,"src":"4904:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:8"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"4935:0:8"},"scope":407,"src":"4842:217:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":405,"nodeType":"Block","src":"5124:115:8","statements":[{"assignments":[401],"declarations":[{"constant":false,"id":401,"mutability":"mutable","name":"position","nameLocation":"5142:8:8","nodeType":"VariableDeclaration","scope":405,"src":"5134:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":403,"initialValue":{"id":402,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"5153:19:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:8"},{"AST":{"nativeSrc":"5191:42:8","nodeType":"YulBlock","src":"5191:42:8","statements":[{"nativeSrc":"5205:18:8","nodeType":"YulAssignment","src":"5205:18:8","value":{"name":"position","nativeSrc":"5215:8:8","nodeType":"YulIdentifier","src":"5215:8:8"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:8","nodeType":"YulIdentifier","src":"5205:6:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":401,"isOffset":false,"isSlot":false,"src":"5215:8:8","valueSize":1},{"declaration":398,"isOffset":false,"isSlot":true,"src":"5205:6:8","suffix":"slot","valueSize":1}],"id":404,"nodeType":"InlineAssembly","src":"5182:51:8"}]},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:8","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"5080:2:8"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":398,"mutability":"mutable","name":"s","nameLocation":"5121:1:8","nodeType":"VariableDeclaration","scope":406,"src":"5106:16:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":397,"nodeType":"UserDefinedTypeName","pathNode":{"id":396,"name":"Layout","nameLocations":["5106:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"5106:6:8"},"referencedDeclaration":180,"src":"5106:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:8"},"scope":407,"src":"5065:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":408,"src":"595:4646:8","usedErrors":[],"usedEvents":[]}],"src":"32:5210:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[454],"InterfaceDetection":[437],"InterfaceDetectionStorage":[555]},"id":438,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":409,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":438,"sourceUnit":455,"src":"58:49:9","symbolAliases":[{"foreign":{"id":410,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"66:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":413,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":438,"sourceUnit":556,"src":"108:84:9","symbolAliases":[{"foreign":{"id":412,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"116:25:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":415,"name":"IERC165","nameLocations":["425:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":454,"src":"425:7:9"},"id":416,"nodeType":"InheritanceSpecifier","src":"425:7:9"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"194:191:9","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":437,"linearizedBaseContracts":[437,454],"name":"InterfaceDetection","nameLocation":"403:18:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":420,"libraryName":{"id":417,"name":"InterfaceDetectionStorage","nameLocations":["445:25:9"],"nodeType":"IdentifierPath","referencedDeclaration":555,"src":"445:25:9"},"nodeType":"UsingForDirective","src":"439:69:9","typeName":{"id":419,"nodeType":"UserDefinedTypeName","pathNode":{"id":418,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:9","501:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"475:32:9"},"referencedDeclaration":465,"src":"475:32:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[453],"body":{"id":435,"nodeType":"Block","src":"618:89:9","statements":[{"expression":{"arguments":[{"id":432,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"688:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":428,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"635:25:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$555_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:9","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":554,"src":"635:32:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$465_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:9","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":542,"src":"635:52:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$465_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$465_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":427,"id":434,"nodeType":"Return","src":"628:72:9"}]},"documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"514:23:9","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":436,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:9","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:9","nodeType":"VariableDeclaration","scope":436,"src":"569:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":422,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:9"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":436,"src":"612:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":425,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:9"},"scope":437,"src":"542:165:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":438,"src":"385:324:9","usedErrors":[],"usedEvents":[]}],"src":"32:678:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[442]},"id":443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":439,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"58:68:10","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":442,"name":"IllegalInterfaceId","nameLocation":"132:18:10","nodeType":"ErrorDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[],"src":"150:2:10"},"src":"126:27:10"}],"src":"32:122:10"},"id":10},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[454]},"id":455,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":444,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"58:173:11","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":454,"linearizedBaseContracts":[454],"name":"IERC165","nameLocation":"241:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"255:340:11","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":453,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:11","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:11","nodeType":"VariableDeclaration","scope":453,"src":"627:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":447,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:11"},"returnParameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"supported","nameLocation":"675:9:11","nodeType":"VariableDeclaration","scope":453,"src":"670:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":450,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:11"},"scope":454,"src":"600:86:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":455,"src":"231:457:11","usedErrors":[],"usedEvents":[]}],"src":"32:657:11"},"id":11},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[454],"IllegalInterfaceId":[442],"InterfaceDetectionStorage":[555]},"id":556,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":456,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":443,"src":"58:76:12","symbolAliases":[{"foreign":{"id":457,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":460,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":556,"sourceUnit":455,"src":"135:52:12","symbolAliases":[{"foreign":{"id":459,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"143:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":555,"linearizedBaseContracts":[555],"name":"InterfaceDetectionStorage","nameLocation":"197:25:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":465,"members":[{"constant":false,"id":464,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:12","nodeType":"VariableDeclaration","scope":465,"src":"253:43:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":463,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":461,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":462,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:12","nodeType":"StructDefinition","scope":555,"src":"229:74:12","visibility":"public"},{"constant":true,"id":478,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:12","nodeType":"VariableDeclaration","scope":555,"src":"309:136:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":471,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":469,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:12","typeDescriptions":{}}},"id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:12","typeDescriptions":{}}},"id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":481,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:12","nodeType":"VariableDeclaration","scope":555,"src":"452:58:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":479,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:12","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":507,"nodeType":"Block","src":"867:141:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":492,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"881:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":493,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"896:20:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":498,"nodeType":"IfStatement","src":"877:68:12","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":495,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"925:18:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"RevertStatement","src":"918:27:12"}},{"expression":{"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":499,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"955:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:12","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":464,"src":"955:21:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":503,"indexExpression":{"id":501,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"977:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":504,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"992:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":506,"nodeType":"ExpressionStatement","src":"955:46:12"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"517:251:12","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":508,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:12","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"s","nameLocation":"819:1:12","nodeType":"VariableDeclaration","scope":508,"src":"804:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":484,"nodeType":"UserDefinedTypeName","pathNode":{"id":483,"name":"Layout","nameLocations":["804:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"804:6:12"},"referencedDeclaration":465,"src":"804:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:12","nodeType":"VariableDeclaration","scope":508,"src":"822:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":486,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"supported","nameLocation":"847:9:12","nodeType":"VariableDeclaration","scope":508,"src":"842:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":488,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:12"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[],"src":"867:0:12"},"scope":555,"src":"773:235:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":541,"nodeType":"Block","src":"1463:236:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":519,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"1477:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":520,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"1492:20:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":525,"nodeType":"IfStatement","src":"1473:78:12","trueBody":{"id":524,"nodeType":"Block","src":"1514:37:12","statements":[{"expression":{"hexValue":"66616c7365","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":518,"id":523,"nodeType":"Return","src":"1528:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":526,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"1564:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":528,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"1584:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$454_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$454_$","typeString":"type(contract IERC165)"}],"id":527,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$454","typeString":"type(contract IERC165)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":535,"nodeType":"IfStatement","src":"1560:82:12","trueBody":{"id":534,"nodeType":"Block","src":"1606:36:12","statements":[{"expression":{"hexValue":"74727565","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":518,"id":533,"nodeType":"Return","src":"1620:11:12"}]}},{"expression":{"baseExpression":{"expression":{"id":536,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"1658:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:12","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":464,"src":"1658:21:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":539,"indexExpression":{"id":538,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"1680:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":518,"id":540,"nodeType":"Return","src":"1651:41:12"}]},"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"1014:340:12","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":542,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:12","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"s","nameLocation":"1401:1:12","nodeType":"VariableDeclaration","scope":542,"src":"1386:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":511,"nodeType":"UserDefinedTypeName","pathNode":{"id":510,"name":"Layout","nameLocations":["1386:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"1386:6:12"},"referencedDeclaration":465,"src":"1386:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:12","nodeType":"VariableDeclaration","scope":542,"src":"1404:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":513,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:12"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"supported","nameLocation":"1452:9:12","nodeType":"VariableDeclaration","scope":542,"src":"1447:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":516,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:12"},"scope":555,"src":"1359:340:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":553,"nodeType":"Block","src":"1764:115:12","statements":[{"assignments":[549],"declarations":[{"constant":false,"id":549,"mutability":"mutable","name":"position","nameLocation":"1782:8:12","nodeType":"VariableDeclaration","scope":553,"src":"1774:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":551,"initialValue":{"id":550,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"1793:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:12"},{"AST":{"nativeSrc":"1831:42:12","nodeType":"YulBlock","src":"1831:42:12","statements":[{"nativeSrc":"1845:18:12","nodeType":"YulAssignment","src":"1845:18:12","value":{"name":"position","nativeSrc":"1855:8:12","nodeType":"YulIdentifier","src":"1855:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:12","nodeType":"YulIdentifier","src":"1845:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":549,"isOffset":false,"isSlot":false,"src":"1855:8:12","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":true,"src":"1845:6:12","suffix":"slot","valueSize":1}],"id":552,"nodeType":"InlineAssembly","src":"1822:51:12"}]},"id":554,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:12","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"1720:2:12"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"s","nameLocation":"1761:1:12","nodeType":"VariableDeclaration","scope":554,"src":"1746:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":545,"nodeType":"UserDefinedTypeName","pathNode":{"id":544,"name":"Layout","nameLocations":["1746:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"1746:6:12"},"referencedDeclaration":465,"src":"1746:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$465_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:12"},"scope":555,"src":"1705:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":556,"src":"189:1692:12","usedErrors":[],"usedEvents":[]}],"src":"32:1850:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[604],"ForwarderRegistryContextBase":[724],"IERC2771":[736],"IForwarderRegistry":[750]},"id":605,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":557,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":751,"src":"58:71:13","symbolAliases":[{"foreign":{"id":558,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"66:18:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":737,"src":"130:51:13","symbolAliases":[{"foreign":{"id":560,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"138:8:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":563,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":605,"sourceUnit":725,"src":"182:85:13","symbolAliases":[{"foreign":{"id":562,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"190:28:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":565,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:13"],"nodeType":"IdentifierPath","referencedDeclaration":724,"src":"575:28:13"},"id":566,"nodeType":"InheritanceSpecifier","src":"575:28:13"},{"baseName":{"id":567,"name":"IERC2771","nameLocations":["605:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":736,"src":"605:8:13"},"id":568,"nodeType":"InheritanceSpecifier","src":"605:8:13"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":564,"nodeType":"StructuredDocumentation","src":"269:260:13","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":604,"linearizedBaseContracts":[604,736,724],"name":"ForwarderRegistryContext","nameLocation":"547:24:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":577,"nodeType":"Block","src":"720:2:13","statements":[]},"id":578,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":574,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"700:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"id":575,"kind":"baseConstructorSpecifier","modifierName":{"id":573,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:13"],"nodeType":"IdentifierPath","referencedDeclaration":724,"src":"671:28:13"},"nodeType":"ModifierInvocation","src":"671:48:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:13","nodeType":"VariableDeclaration","scope":578,"src":"632:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":570,"nodeType":"UserDefinedTypeName","pathNode":{"id":569,"name":"IForwarderRegistry","nameLocations":["632:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"632:18:13"},"referencedDeclaration":750,"src":"632:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:13"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"720:0:13"},"scope":604,"src":"620:102:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":586,"nodeType":"Block","src":"800:43:13","statements":[{"expression":{"id":584,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"817:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":583,"id":585,"nodeType":"Return","src":"810:26:13"}]},"functionSelector":"2b4c9f16","id":587,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:13","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[],"src":"754:2:13"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":587,"src":"780:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":581,"nodeType":"UserDefinedTypeName","pathNode":{"id":580,"name":"IForwarderRegistry","nameLocations":["780:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"780:18:13"},"referencedDeclaration":750,"src":"780:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:13"},"scope":604,"src":"728:115:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[735],"body":{"id":602,"nodeType":"Block","src":"962:65:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":595,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"979:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":598,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"1000:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}],"id":597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:13","typeDescriptions":{}}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":594,"id":601,"nodeType":"Return","src":"972:48:13"}]},"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"849:24:13","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":603,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:13","nodeType":"FunctionDefinition","parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:13","nodeType":"VariableDeclaration","scope":603,"src":"906:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:13"},"returnParameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":603,"src":"956:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":592,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:13"},"scope":604,"src":"878:149:13","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":605,"src":"529:500:13","usedErrors":[],"usedEvents":[]}],"src":"32:998:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[779],"ForwarderRegistryContextBase":[724],"IForwarderRegistry":[750]},"id":725,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":606,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":608,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":725,"sourceUnit":751,"src":"58:74:14","symbolAliases":[{"foreign":{"id":607,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"66:18:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":610,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":725,"sourceUnit":780,"src":"133:67:14","symbolAliases":[{"foreign":{"id":609,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"141:15:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"202:243:14","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":724,"linearizedBaseContracts":[724],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:14","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":614,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:14","nodeType":"VariableDeclaration","scope":724,"src":"498:57:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":613,"nodeType":"UserDefinedTypeName","pathNode":{"id":612,"name":"IForwarderRegistry","nameLocations":["498:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"498:18:14"},"referencedDeclaration":750,"src":"498:18:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":624,"nodeType":"Block","src":"612:56:14","statements":[{"expression":{"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":620,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"622:19:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":621,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"644:17:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"src":"622:39:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"id":623,"nodeType":"ExpressionStatement","src":"622:39:14"}]},"id":625,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":617,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:14","nodeType":"VariableDeclaration","scope":625,"src":"574:36:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":616,"nodeType":"UserDefinedTypeName","pathNode":{"id":615,"name":"IForwarderRegistry","nameLocations":["574:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"574:18:14"},"referencedDeclaration":750,"src":"574:18:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:14"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[],"src":"612:0:14"},"scope":724,"src":"562:106:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":674,"nodeType":"Block","src":"846:683:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":631,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":633,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:14","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:14","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":636,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:14","memberName":"data","nodeType":"MemberAccess","src":"1074:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:14","memberName":"length","nodeType":"MemberAccess","src":"1074:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:14","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":646,"nodeType":"IfStatement","src":"1043:95:14","trueBody":{"id":645,"nodeType":"Block","src":"1096:42:14","statements":[{"expression":{"expression":{"id":642,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":630,"id":644,"nodeType":"Return","src":"1110:17:14"}]}},{"assignments":[648],"declarations":[{"constant":false,"id":648,"mutability":"mutable","name":"sender","nameLocation":"1156:6:14","nodeType":"VariableDeclaration","scope":674,"src":"1148:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":652,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":649,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"1165:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$779_$","typeString":"type(library ERC2771Calldata)"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:14","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":761,"src":"1165:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":653,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":657,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"1372:19:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}],"id":656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":655,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:14","typeDescriptions":{}}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":662,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1436:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":660,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"1396:19:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:14","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":749,"src":"1396:39:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":670,"nodeType":"IfStatement","src":"1346:149:14","trueBody":{"id":669,"nodeType":"Block","src":"1457:38:14","statements":[{"expression":{"id":667,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1478:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":630,"id":668,"nodeType":"Return","src":"1471:13:14"}]}},{"expression":{"expression":{"id":671,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":630,"id":673,"nodeType":"Return","src":"1505:17:14"}]},"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"674:105:14","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":675,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:14","nodeType":"FunctionDefinition","parameters":{"id":627,"nodeType":"ParameterList","parameters":[],"src":"803:2:14"},"returnParameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":675,"src":"837:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:14"},"scope":724,"src":"784:745:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":722,"nodeType":"Block","src":"1710:668:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":681,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":683,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:14","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:14","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:14","memberName":"data","nodeType":"MemberAccess","src":"1938:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:14","memberName":"length","nodeType":"MemberAccess","src":"1938:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:14","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":696,"nodeType":"IfStatement","src":"1907:93:14","trueBody":{"id":695,"nodeType":"Block","src":"1960:40:14","statements":[{"expression":{"expression":{"id":692,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:14","memberName":"data","nodeType":"MemberAccess","src":"1981:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":680,"id":694,"nodeType":"Return","src":"1974:15:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":697,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:14","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":701,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2183:19:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}],"id":700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:14","typeDescriptions":{}}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":706,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2247:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$779_$","typeString":"type(library ERC2771Calldata)"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:14","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":761,"src":"2247:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":709,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:14","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":704,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2207:19:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:14","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":749,"src":"2207:39:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":718,"nodeType":"IfStatement","src":"2157:189:14","trueBody":{"id":717,"nodeType":"Block","src":"2289:57:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":713,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"2310:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$779_$","typeString":"type(library ERC2771Calldata)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:14","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":778,"src":"2310:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":680,"id":716,"nodeType":"Return","src":"2303:32:14"}]}},{"expression":{"expression":{"id":719,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:14","memberName":"data","nodeType":"MemberAccess","src":"2363:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":680,"id":721,"nodeType":"Return","src":"2356:15:14"}]},"documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"1535:103:14","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":723,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:14","nodeType":"FunctionDefinition","parameters":{"id":677,"nodeType":"ParameterList","parameters":[],"src":"1660:2:14"},"returnParameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":723,"src":"1694:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":678,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:14"},"scope":724,"src":"1643:735:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":725,"src":"445:1935:14","usedErrors":[],"usedEvents":[]}],"src":"32:2349:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[736]},"id":737,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":726,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"58:110:15","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":736,"linearizedBaseContracts":[736],"name":"IERC2771","nameLocation":"178:8:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":728,"nodeType":"StructuredDocumentation","src":"193:171:15","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":735,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:15","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:15","nodeType":"VariableDeclaration","scope":735,"src":"397:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:15"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:15","nodeType":"VariableDeclaration","scope":735,"src":"439:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":732,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:15"},"scope":736,"src":"369:86:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":737,"src":"168:289:15","usedErrors":[],"usedEvents":[]}],"src":"32:426:15"},"id":15},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[750]},"id":751,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":738,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"58:143:16","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":750,"linearizedBaseContracts":[750],"name":"IForwarderRegistry","nameLocation":"211:18:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"236:314:16","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":749,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:16","nodeType":"FunctionDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"sender","nameLocation":"592:6:16","nodeType":"VariableDeclaration","scope":749,"src":"584:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:16","nodeType":"VariableDeclaration","scope":749,"src":"600:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:16"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:16","nodeType":"VariableDeclaration","scope":749,"src":"642:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":746,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:16"},"scope":750,"src":"555:104:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":751,"src":"201:460:16","usedErrors":[],"usedEvents":[]}],"src":"32:630:16"},"id":16},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[779]},"id":780,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":752,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"58:144:17","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":779,"linearizedBaseContracts":[779],"name":"ERC2771Calldata","nameLocation":"210:15:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":760,"nodeType":"Block","src":"398:105:17","statements":[{"AST":{"nativeSrc":"417:80:17","nodeType":"YulBlock","src":"417:80:17","statements":[{"nativeSrc":"431:56:17","nodeType":"YulAssignment","src":"431:56:17","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:17","nodeType":"YulLiteral","src":"445:2:17","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:17","nodeType":"YulIdentifier","src":"466:12:17"},"nativeSrc":"466:14:17","nodeType":"YulFunctionCall","src":"466:14:17"},{"kind":"number","nativeSrc":"482:2:17","nodeType":"YulLiteral","src":"482:2:17","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:17","nodeType":"YulIdentifier","src":"462:3:17"},"nativeSrc":"462:23:17","nodeType":"YulFunctionCall","src":"462:23:17"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:17","nodeType":"YulIdentifier","src":"449:12:17"},"nativeSrc":"449:37:17","nodeType":"YulFunctionCall","src":"449:37:17"}],"functionName":{"name":"shr","nativeSrc":"441:3:17","nodeType":"YulIdentifier","src":"441:3:17"},"nativeSrc":"441:46:17","nodeType":"YulFunctionCall","src":"441:46:17"},"variableNames":[{"name":"sender","nativeSrc":"431:6:17","nodeType":"YulIdentifier","src":"431:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":757,"isOffset":false,"isSlot":false,"src":"431:6:17","valueSize":1}],"id":759,"nodeType":"InlineAssembly","src":"408:89:17"}]},"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"232:101:17","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":761,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:17","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[],"src":"356:2:17"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"sender","nameLocation":"390:6:17","nodeType":"VariableDeclaration","scope":761,"src":"382:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:17"},"scope":779,"src":"338:165:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":777,"nodeType":"Block","src":"679:89:17","statements":[{"id":776,"nodeType":"UncheckedBlock","src":"689:73:17","statements":[{"expression":{"baseExpression":{"expression":{"id":767,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:17","memberName":"data","nodeType":"MemberAccess","src":"720:8:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:17","memberName":"data","nodeType":"MemberAccess","src":"730:8:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:17","memberName":"length","nodeType":"MemberAccess","src":"730:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:17","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":766,"id":775,"nodeType":"Return","src":"713:38:17"}]}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"509:102:17","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":778,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:17","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[],"src":"632:2:17"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"data","nameLocation":"673:4:17","nodeType":"VariableDeclaration","scope":778,"src":"658:19:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":764,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:17"},"scope":779,"src":"616:152:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":780,"src":"202:568:17","usedErrors":[],"usedEvents":[]}],"src":"32:739:17"},"id":17},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[788]},"id":789,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":781,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"documentation":{"id":782,"nodeType":"StructuredDocumentation","src":"58:179:18","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":788,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:18","nodeType":"ErrorDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:18","nodeType":"VariableDeclaration","scope":788,"src":"277:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:18","nodeType":"VariableDeclaration","scope":788,"src":"299:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:18"},"src":"237:80:18"}],"src":"32:286:18"},"id":18},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[788],"ProxyInitialization":[835],"StorageSlot":[2106]},"id":836,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":790,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":792,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":836,"sourceUnit":789,"src":"58:92:19","symbolAliases":[{"foreign":{"id":791,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"66:33:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":794,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":836,"sourceUnit":2107,"src":"151:74:19","symbolAliases":[{"foreign":{"id":793,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"159:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"227:92:19","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":835,"linearizedBaseContracts":[835],"name":"ProxyInitialization","nameLocation":"327:19:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":833,"nodeType":"Block","src":"735:294:19","statements":[{"assignments":[807],"declarations":[{"constant":false,"id":807,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:19","nodeType":"VariableDeclaration","scope":833,"src":"745:46:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":806,"nodeType":"UserDefinedTypeName","pathNode":{"id":805,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:19","757:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2011,"src":"745:23:19"},"referencedDeclaration":2011,"src":"745:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":812,"initialValue":{"arguments":[{"id":810,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"821:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":808,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"794:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2106_$","typeString":"type(library StorageSlot)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:19","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2061,"src":"794:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2011_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:19"},{"assignments":[814],"declarations":[{"constant":false,"id":814,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:19","nodeType":"VariableDeclaration","scope":833,"src":"843:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":817,"initialValue":{"expression":{"id":815,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"866:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":816,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2010,"src":"866:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"900:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":819,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"916:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":826,"nodeType":"IfStatement","src":"896:88:19","trueBody":{"errorCall":{"arguments":[{"id":822,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"964:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":823,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"978:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":821,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"930:33:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":825,"nodeType":"RevertStatement","src":"923:61:19"}},{"expression":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":827,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"994:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2010,"src":"994:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":830,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"1017:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":832,"nodeType":"ExpressionStatement","src":"994:28:19"}]},"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"353:314:19","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:19","nodeType":"FunctionDefinition","parameters":{"id":801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:19","nodeType":"VariableDeclaration","scope":834,"src":"690:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":800,"mutability":"mutable","name":"phase","nameLocation":"719:5:19","nodeType":"VariableDeclaration","scope":834,"src":"711:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:19"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[],"src":"735:0:19"},"scope":835,"src":"672:357:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":836,"src":"319:712:19","usedErrors":[],"usedEvents":[]}],"src":"32:1000:19"},"id":19},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[55],"TokenRecovery":[847],"TokenRecoveryBase":[1065]},"id":848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":837,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":1066,"src":"58:63:20","symbolAliases":[{"foreign":{"id":838,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"66:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":56,"src":"122:68:20","symbolAliases":[{"foreign":{"id":840,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":843,"name":"TokenRecoveryBase","nameLocations":["440:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":1065,"src":"440:17:20"},"id":844,"nodeType":"InheritanceSpecifier","src":"440:17:20"},{"baseName":{"id":845,"name":"ContractOwnership","nameLocations":["459:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"459:17:20"},"id":846,"nodeType":"InheritanceSpecifier","src":"459:17:20"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":842,"nodeType":"StructuredDocumentation","src":"192:213:20","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":847,"linearizedBaseContracts":[847,55,437,454,103,1065,1996,149],"name":"TokenRecovery","nameLocation":"423:13:20","nodeType":"ContractDefinition","nodes":[],"scope":848,"src":"405:76:20","usedErrors":[19,117,442],"usedEvents":[133]}],"src":"32:450:20"},"id":20},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[1974],"Context":[1996],"ContractOwnershipStorage":[407],"IERC20":[1232],"IERC721":[1151],"InconsistentArrayLengths":[19],"SafeERC20":[1644],"TokenRecoveryBase":[1065]},"id":1066,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":849,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":851,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":23,"src":"58:66:21","symbolAliases":[{"foreign":{"id":850,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"66:24:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":853,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":1155,"src":"125:69:21","symbolAliases":[{"foreign":{"id":852,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"133:6:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":1152,"src":"195:68:21","symbolAliases":[{"foreign":{"id":854,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"203:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":408,"src":"264:95:21","symbolAliases":[{"foreign":{"id":856,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"272:24:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":1645,"src":"360:82:21","symbolAliases":[{"foreign":{"id":858,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"368:9:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":1997,"src":"443:66:21","symbolAliases":[{"foreign":{"id":860,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"451:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1066,"sourceUnit":1975,"src":"510:66:21","symbolAliases":[{"foreign":{"id":862,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"518:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":865,"name":"Context","nameLocations":["889:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":1996,"src":"889:7:21"},"id":866,"nodeType":"InheritanceSpecifier","src":"889:7:21"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":864,"nodeType":"StructuredDocumentation","src":"578:272:21","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1065,"linearizedBaseContracts":[1065,1996],"name":"TokenRecoveryBase","nameLocation":"868:17:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":870,"libraryName":{"id":867,"name":"ContractOwnershipStorage","nameLocations":["909:24:21"],"nodeType":"IdentifierPath","referencedDeclaration":407,"src":"909:24:21"},"nodeType":"UsingForDirective","src":"903:67:21","typeName":{"id":869,"nodeType":"UserDefinedTypeName","pathNode":{"id":868,"name":"ContractOwnershipStorage.Layout","nameLocations":["938:24:21","963:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"938:31:21"},"referencedDeclaration":180,"src":"938:31:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":874,"libraryName":{"id":871,"name":"SafeERC20","nameLocations":["981:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":1644,"src":"981:9:21"},"nodeType":"UsingForDirective","src":"975:27:21","typeName":{"id":873,"nodeType":"UserDefinedTypeName","pathNode":{"id":872,"name":"IERC20","nameLocations":["995:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"995:6:21"},"referencedDeclaration":1232,"src":"995:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}}},{"global":false,"id":877,"libraryName":{"id":875,"name":"Address","nameLocations":["1013:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":1974,"src":"1013:7:21"},"nodeType":"UsingForDirective","src":"1007:34:21","typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"1025:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":929,"nodeType":"Block","src":"2042:302:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":892,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"2109:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2109:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":887,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"2052:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2077:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"2052:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2086:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":374,"src":"2052:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":895,"nodeType":"ExpressionStatement","src":"2052:70:21"},{"assignments":[897],"declarations":[{"constant":false,"id":897,"mutability":"mutable","name":"length","nameLocation":"2140:6:21","nodeType":"VariableDeclaration","scope":929,"src":"2132:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":900,"initialValue":{"expression":{"id":898,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"2149:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2158:6:21","memberName":"length","nodeType":"MemberAccess","src":"2149:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2132:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":901,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2178:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":902,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2188:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2196:6:21","memberName":"length","nodeType":"MemberAccess","src":"2188:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2178:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":908,"nodeType":"IfStatement","src":"2174:63:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":905,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"2211:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2211:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":907,"nodeType":"RevertStatement","src":"2204:33:21"}},{"body":{"id":927,"nodeType":"Block","src":"2280:58:21","statements":[{"expression":{"arguments":[{"baseExpression":{"id":922,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2316:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":924,"indexExpression":{"id":923,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2324:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2316:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":918,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"2294:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":920,"indexExpression":{"id":919,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2303:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2294:11:21","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2306:9:21","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1696,"src":"2294:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":926,"nodeType":"ExpressionStatement","src":"2294:33:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":912,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2263:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":913,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2267:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2263:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":928,"initializationExpression":{"assignments":[910],"declarations":[{"constant":false,"id":910,"mutability":"mutable","name":"i","nameLocation":"2260:1:21","nodeType":"VariableDeclaration","scope":928,"src":"2252:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2252:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":911,"nodeType":"VariableDeclarationStatement","src":"2252:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2275:3:21","subExpression":{"id":915,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2277:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":917,"nodeType":"ExpressionStatement","src":"2275:3:21"},"nodeType":"ForStatement","src":"2247:91:21"}]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"1047:890:21","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":930,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1951:10:21","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"accounts","nameLocation":"1989:8:21","nodeType":"VariableDeclaration","scope":930,"src":"1962:35:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"1962:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":880,"nodeType":"ArrayTypeName","src":"1962:17:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"amounts","nameLocation":"2018:7:21","nodeType":"VariableDeclaration","scope":930,"src":"1999:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":883,"nodeType":"ArrayTypeName","src":"1999:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1961:65:21"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"2042:0:21"},"scope":1065,"src":"1942:402:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":994,"nodeType":"Block","src":"3234:343:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":949,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"3301:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3301:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":944,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"3244:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3269:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"3244:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":948,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3278:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":374,"src":"3244:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":952,"nodeType":"ExpressionStatement","src":"3244:70:21"},{"assignments":[954],"declarations":[{"constant":false,"id":954,"mutability":"mutable","name":"length","nameLocation":"3332:6:21","nodeType":"VariableDeclaration","scope":994,"src":"3324:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"3324:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":957,"initialValue":{"expression":{"id":955,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3341:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3350:6:21","memberName":"length","nodeType":"MemberAccess","src":"3341:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3324:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":958,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3370:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":959,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3380:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3387:6:21","memberName":"length","nodeType":"MemberAccess","src":"3380:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3370:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":962,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3397:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":963,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"3407:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3415:6:21","memberName":"length","nodeType":"MemberAccess","src":"3407:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3397:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3370:51:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":970,"nodeType":"IfStatement","src":"3366:90:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":967,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"3430:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3430:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":969,"nodeType":"RevertStatement","src":"3423:33:21"}},{"body":{"id":992,"nodeType":"Block","src":"3499:72:21","statements":[{"expression":{"arguments":[{"baseExpression":{"id":984,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3536:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":986,"indexExpression":{"id":985,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3545:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3536:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":987,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"3549:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":989,"indexExpression":{"id":988,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3557:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3549:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":980,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"3513:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":982,"indexExpression":{"id":981,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3520:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3513:9:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3523:12:21","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1301,"src":"3513:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1232_$","typeString":"function (contract IERC20,address,uint256)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3513:47:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"3513:47:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3482:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":975,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3486:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3482:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":993,"initializationExpression":{"assignments":[972],"declarations":[{"constant":false,"id":972,"mutability":"mutable","name":"i","nameLocation":"3479:1:21","nodeType":"VariableDeclaration","scope":993,"src":"3471:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":971,"name":"uint256","nodeType":"ElementaryTypeName","src":"3471:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":973,"nodeType":"VariableDeclarationStatement","src":"3471:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3494:3:21","subExpression":{"id":977,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"3496:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":979,"nodeType":"ExpressionStatement","src":"3494:3:21"},"nodeType":"ForStatement","src":"3466:105:21"}]},"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"2350:758:21","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":995,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"3122:13:21","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"accounts","nameLocation":"3155:8:21","nodeType":"VariableDeclaration","scope":995,"src":"3136:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"3136:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":933,"nodeType":"ArrayTypeName","src":"3136:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"tokens","nameLocation":"3183:6:21","nodeType":"VariableDeclaration","scope":995,"src":"3165:24:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":936,"nodeType":"UserDefinedTypeName","pathNode":{"id":935,"name":"IERC20","nameLocations":["3165:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"3165:6:21"},"referencedDeclaration":1232,"src":"3165:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":937,"nodeType":"ArrayTypeName","src":"3165:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1232_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"amounts","nameLocation":"3210:7:21","nodeType":"VariableDeclaration","scope":995,"src":"3191:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"3191:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":940,"nodeType":"ArrayTypeName","src":"3191:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3135:83:21"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[],"src":"3234:0:21"},"scope":1065,"src":"3113:464:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1063,"nodeType":"Block","src":"4482:366:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1014,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"4549:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4549:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1009,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4492:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4517:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"4492:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4526:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":374,"src":"4492:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1017,"nodeType":"ExpressionStatement","src":"4492:70:21"},{"assignments":[1019],"declarations":[{"constant":false,"id":1019,"mutability":"mutable","name":"length","nameLocation":"4580:6:21","nodeType":"VariableDeclaration","scope":1063,"src":"4572:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1018,"name":"uint256","nodeType":"ElementaryTypeName","src":"4572:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1022,"initialValue":{"expression":{"id":1020,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"4589:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4598:6:21","memberName":"length","nodeType":"MemberAccess","src":"4589:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4572:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1023,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4618:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1024,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"4628:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4638:6:21","memberName":"length","nodeType":"MemberAccess","src":"4628:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4618:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4648:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1028,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"4658:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4667:6:21","memberName":"length","nodeType":"MemberAccess","src":"4658:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4648:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4618:55:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1035,"nodeType":"IfStatement","src":"4614:94:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1032,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"4682:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4682:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1034,"nodeType":"RevertStatement","src":"4675:33:21"}},{"body":{"id":1061,"nodeType":"Block","src":"4751:91:21","statements":[{"expression":{"arguments":[{"arguments":[{"id":1051,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4799:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1065","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1065","typeString":"contract TokenRecoveryBase"}],"id":1050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4791:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"4791:7:21","typeDescriptions":{}}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4791:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1053,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"4806:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1055,"indexExpression":{"id":1054,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4815:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4806:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1056,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"4819:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1058,"indexExpression":{"id":1057,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4828:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4819:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1045,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"4765:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1047,"indexExpression":{"id":1046,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4775:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4765:12:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1151","typeString":"contract IERC721"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4778:12:21","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1094,"src":"4765:25:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4765:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1060,"nodeType":"ExpressionStatement","src":"4765:66:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4734:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1040,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4738:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4734:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1062,"initializationExpression":{"assignments":[1037],"declarations":[{"constant":false,"id":1037,"mutability":"mutable","name":"i","nameLocation":"4731:1:21","nodeType":"VariableDeclaration","scope":1062,"src":"4723:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"4723:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"nodeType":"VariableDeclarationStatement","src":"4723:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4746:3:21","subExpression":{"id":1042,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4748:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1044,"nodeType":"ExpressionStatement","src":"4746:3:21"},"nodeType":"ForStatement","src":"4718:124:21"}]},"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"3583:767:21","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1064,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4364:14:21","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"accounts","nameLocation":"4398:8:21","nodeType":"VariableDeclaration","scope":1064,"src":"4379:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"4379:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":998,"nodeType":"ArrayTypeName","src":"4379:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"contracts","nameLocation":"4427:9:21","nodeType":"VariableDeclaration","scope":1064,"src":"4408:28:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1001,"nodeType":"UserDefinedTypeName","pathNode":{"id":1000,"name":"IERC721","nameLocations":["4408:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":1151,"src":"4408:7:21"},"referencedDeclaration":1151,"src":"4408:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1151","typeString":"contract IERC721"}},"id":1002,"nodeType":"ArrayTypeName","src":"4408:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1151_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"tokenIds","nameLocation":"4457:8:21","nodeType":"VariableDeclaration","scope":1064,"src":"4438:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1005,"nodeType":"ArrayTypeName","src":"4438:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4378:88:21"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[],"src":"4482:0:21"},"scope":1065,"src":"4355:493:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1066,"src":"850:4000:21","usedErrors":[19,117],"usedEvents":[]}],"src":"32:4819:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1151]},"id":1152,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1067,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1068,"nodeType":"StructuredDocumentation","src":"58:296:22","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1151,"linearizedBaseContracts":[1151],"name":"IERC721","nameLocation":"364:7:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"378:684:22","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1076,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:22","nodeType":"FunctionDefinition","parameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"mutability":"mutable","name":"to","nameLocation":"1092:2:22","nodeType":"VariableDeclaration","scope":1076,"src":"1084:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:22","nodeType":"VariableDeclaration","scope":1076,"src":"1096:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:22"},"returnParameters":{"id":1075,"nodeType":"ParameterList","parameters":[],"src":"1121:0:22"},"scope":1151,"src":"1067:55:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"1128:341:22","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1084,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:22","nodeType":"FunctionDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"operator","nameLocation":"1509:8:22","nodeType":"VariableDeclaration","scope":1084,"src":"1501:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1078,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1081,"mutability":"mutable","name":"approved","nameLocation":"1524:8:22","nodeType":"VariableDeclaration","scope":1084,"src":"1519:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1080,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:22"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[],"src":"1542:0:22"},"scope":1151,"src":"1474:69:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"1549:667:22","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1094,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:22","nodeType":"FunctionDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"from","nameLocation":"2251:4:22","nodeType":"VariableDeclaration","scope":1094,"src":"2243:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"to","nameLocation":"2265:2:22","nodeType":"VariableDeclaration","scope":1094,"src":"2257:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:22","nodeType":"VariableDeclaration","scope":1094,"src":"2269:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:22"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[],"src":"2294:0:22"},"scope":1151,"src":"2221:74:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1095,"nodeType":"StructuredDocumentation","src":"2301:663:22","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1104,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:22","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"from","nameLocation":"3003:4:22","nodeType":"VariableDeclaration","scope":1104,"src":"2995:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1096,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1099,"mutability":"mutable","name":"to","nameLocation":"3017:2:22","nodeType":"VariableDeclaration","scope":1104,"src":"3009:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:22","nodeType":"VariableDeclaration","scope":1104,"src":"3021:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:22"},"returnParameters":{"id":1103,"nodeType":"ParameterList","parameters":[],"src":"3046:0:22"},"scope":1151,"src":"2969:78:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1105,"nodeType":"StructuredDocumentation","src":"3053:735:22","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1116,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:22","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1107,"mutability":"mutable","name":"from","nameLocation":"3827:4:22","nodeType":"VariableDeclaration","scope":1116,"src":"3819:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1106,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"to","nameLocation":"3841:2:22","nodeType":"VariableDeclaration","scope":1116,"src":"3833:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:22","nodeType":"VariableDeclaration","scope":1116,"src":"3845:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"data","nameLocation":"3877:4:22","nodeType":"VariableDeclaration","scope":1116,"src":"3862:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1112,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:22"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[],"src":"3891:0:22"},"scope":1151,"src":"3793:99:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1117,"nodeType":"StructuredDocumentation","src":"3898:209:22","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1124,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:22","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"owner","nameLocation":"4139:5:22","nodeType":"VariableDeclaration","scope":1124,"src":"4131:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1118,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:22"},"returnParameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"balance","nameLocation":"4177:7:22","nodeType":"VariableDeclaration","scope":1124,"src":"4169:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:22"},"scope":1151,"src":"4112:74:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1125,"nodeType":"StructuredDocumentation","src":"4192:217:22","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1132,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:22","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:22","nodeType":"VariableDeclaration","scope":1132,"src":"4431:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:22"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:22","nodeType":"VariableDeclaration","scope":1132,"src":"4471:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:22"},"scope":1151,"src":"4414:77:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"4497:285:22","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1140,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:22","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:22","nodeType":"VariableDeclaration","scope":1140,"src":"4808:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:22"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"approved","nameLocation":"4856:8:22","nodeType":"VariableDeclaration","scope":1140,"src":"4848:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:22"},"scope":1151,"src":"4787:79:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"4872:323:22","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1150,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:22","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"owner","nameLocation":"5234:5:22","nodeType":"VariableDeclaration","scope":1150,"src":"5226:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1142,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"operator","nameLocation":"5249:8:22","nodeType":"VariableDeclaration","scope":1150,"src":"5241:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:22"},"returnParameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:22","nodeType":"VariableDeclaration","scope":1150,"src":"5282:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1147,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:22"},"scope":1151,"src":"5200:103:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1152,"src":"354:4951:22","usedErrors":[],"usedEvents":[]}],"src":"32:5274:22"},"id":22},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1232]},"id":1155,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1153,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1155,"sourceUnit":1233,"src":"115:35:23","symbolAliases":[],"unitAlias":""}],"src":"90:61:23"},"id":23},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1232]},"id":1233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1156,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"131:70:24","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1232,"linearizedBaseContracts":[1232],"name":"IERC20","nameLocation":"212:6:24","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"225:158:24","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1166,"name":"Transfer","nameLocation":"394:8:24","nodeType":"EventDefinition","parameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:24","nodeType":"VariableDeclaration","scope":1166,"src":"403:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1162,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:24","nodeType":"VariableDeclaration","scope":1166,"src":"425:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1161,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1164,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:24","nodeType":"VariableDeclaration","scope":1166,"src":"445:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1163,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:24"},"src":"388:72:24"},{"anonymous":false,"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"466:148:24","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1175,"name":"Approval","nameLocation":"625:8:24","nodeType":"EventDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:24","nodeType":"VariableDeclaration","scope":1175,"src":"634:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:24","nodeType":"VariableDeclaration","scope":1175,"src":"657:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:24","nodeType":"VariableDeclaration","scope":1175,"src":"682:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:24"},"src":"619:78:24"},{"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"703:66:24","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1181,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:24","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"794:2:24"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1181,"src":"820:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:24"},"scope":1232,"src":"774:55:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1182,"nodeType":"StructuredDocumentation","src":"835:72:24","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1189,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:24","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"account","nameLocation":"939:7:24","nodeType":"VariableDeclaration","scope":1189,"src":"931:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:24"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1189,"src":"971:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:24"},"scope":1232,"src":"912:68:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"986:202:24","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1199,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:24","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"to","nameLocation":"1219:2:24","nodeType":"VariableDeclaration","scope":1199,"src":"1211:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"amount","nameLocation":"1231:6:24","nodeType":"VariableDeclaration","scope":1199,"src":"1223:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:24"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1199,"src":"1257:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1196,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:24"},"scope":1232,"src":"1193:70:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1200,"nodeType":"StructuredDocumentation","src":"1269:264:24","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1209,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:24","nodeType":"FunctionDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"owner","nameLocation":"1565:5:24","nodeType":"VariableDeclaration","scope":1209,"src":"1557:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1204,"mutability":"mutable","name":"spender","nameLocation":"1580:7:24","nodeType":"VariableDeclaration","scope":1209,"src":"1572:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:24"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1209,"src":"1612:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:24"},"scope":1232,"src":"1538:83:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"1627:642:24","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1219,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:24","nodeType":"FunctionDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"spender","nameLocation":"2299:7:24","nodeType":"VariableDeclaration","scope":1219,"src":"2291:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1214,"mutability":"mutable","name":"amount","nameLocation":"2316:6:24","nodeType":"VariableDeclaration","scope":1219,"src":"2308:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:24"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1219,"src":"2342:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1216,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:24"},"scope":1232,"src":"2274:74:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"2354:287:24","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1231,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:24","nodeType":"FunctionDefinition","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"from","nameLocation":"2676:4:24","nodeType":"VariableDeclaration","scope":1231,"src":"2668:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"to","nameLocation":"2690:2:24","nodeType":"VariableDeclaration","scope":1231,"src":"2682:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"amount","nameLocation":"2702:6:24","nodeType":"VariableDeclaration","scope":1231,"src":"2694:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:24"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"2728:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1228,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:24"},"scope":1232,"src":"2646:88:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1233,"src":"202:2534:24","usedErrors":[],"usedEvents":[1166,1175]}],"src":"106:2631:24"},"id":24},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1268]},"id":1269,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1234,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1235,"nodeType":"StructuredDocumentation","src":"148:480:25","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1268,"linearizedBaseContracts":[1268],"name":"IERC20Permit","nameLocation":"639:12:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"658:792:25","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1253,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:25","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"owner","nameLocation":"1488:5:25","nodeType":"VariableDeclaration","scope":1253,"src":"1480:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"spender","nameLocation":"1511:7:25","nodeType":"VariableDeclaration","scope":1253,"src":"1503:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1239,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"value","nameLocation":"1536:5:25","nodeType":"VariableDeclaration","scope":1253,"src":"1528:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:25","nodeType":"VariableDeclaration","scope":1253,"src":"1551:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"v","nameLocation":"1583:1:25","nodeType":"VariableDeclaration","scope":1253,"src":"1577:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1245,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"r","nameLocation":"1602:1:25","nodeType":"VariableDeclaration","scope":1253,"src":"1594:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"s","nameLocation":"1621:1:25","nodeType":"VariableDeclaration","scope":1253,"src":"1613:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:25"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"1637:0:25"},"scope":1268,"src":"1455:183:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"1644:294:25","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1261,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:25","nodeType":"FunctionDefinition","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"owner","nameLocation":"1967:5:25","nodeType":"VariableDeclaration","scope":1261,"src":"1959:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:25"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1261,"src":"1997:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:25"},"scope":1268,"src":"1943:63:25","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"2012:128:25","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1267,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:25","nodeType":"FunctionDefinition","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[],"src":"2223:2:25"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1267,"src":"2249:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:25"},"scope":1268,"src":"2198:60:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1269,"src":"629:1631:25","usedErrors":[],"usedEvents":[]}],"src":"123:2138:25"},"id":25},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1974],"IERC20":[1232],"IERC20Permit":[1268],"SafeERC20":[1644]},"id":1645,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1270,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:26"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1645,"sourceUnit":1233,"src":"140:23:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":1272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1645,"sourceUnit":1269,"src":"164:40:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1645,"sourceUnit":1975,"src":"205:36:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"243:457:26","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1644,"linearizedBaseContracts":[1644],"name":"SafeERC20","nameLocation":"709:9:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1277,"libraryName":{"id":1275,"name":"Address","nameLocations":["731:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":1974,"src":"731:7:26"},"nodeType":"UsingForDirective","src":"725:26:26","typeName":{"id":1276,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1300,"nodeType":"Block","src":"1013:103:26","statements":[{"expression":{"arguments":[{"id":1289,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"1043:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1292,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"1073:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:26","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1199,"src":"1073:14:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:26","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1295,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"1098:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"1102:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1290,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1288,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"1023:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1299,"nodeType":"ExpressionStatement","src":"1023:86:26"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"757:179:26","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1301,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:26","nodeType":"FunctionDefinition","parameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"token","nameLocation":"970:5:26","nodeType":"VariableDeclaration","scope":1301,"src":"963:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1280,"nodeType":"UserDefinedTypeName","pathNode":{"id":1279,"name":"IERC20","nameLocations":["963:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"963:6:26"},"referencedDeclaration":1232,"src":"963:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"to","nameLocation":"985:2:26","nodeType":"VariableDeclaration","scope":1301,"src":"977:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"value","nameLocation":"997:5:26","nodeType":"VariableDeclaration","scope":1301,"src":"989:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:26"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"1013:0:26"},"scope":1644,"src":"941:175:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1327,"nodeType":"Block","src":"1445:113:26","statements":[{"expression":{"arguments":[{"id":1315,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"1475:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1318,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"1505:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:26","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"1505:18:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:26","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1321,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"1534:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1322,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"1540:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"1544:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1316,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1314,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"1455:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"ExpressionStatement","src":"1455:96:26"}]},"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"1122:228:26","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1328,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:26","nodeType":"FunctionDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"token","nameLocation":"1388:5:26","nodeType":"VariableDeclaration","scope":1328,"src":"1381:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1304,"nodeType":"UserDefinedTypeName","pathNode":{"id":1303,"name":"IERC20","nameLocations":["1381:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"1381:6:26"},"referencedDeclaration":1232,"src":"1381:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"from","nameLocation":"1403:4:26","nodeType":"VariableDeclaration","scope":1328,"src":"1395:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"to","nameLocation":"1417:2:26","nodeType":"VariableDeclaration","scope":1328,"src":"1409:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"value","nameLocation":"1429:5:26","nodeType":"VariableDeclaration","scope":1328,"src":"1421:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:26"},"returnParameters":{"id":1313,"nodeType":"ParameterList","parameters":[],"src":"1445:0:26"},"scope":1644,"src":"1355:203:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"1894:497:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"2143:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1343,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1348,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}],"id":1347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:26","typeDescriptions":{}}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1350,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"2190:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1344,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"2159:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1209,"src":"2159:15:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1354,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1358,"nodeType":"ExpressionStatement","src":"2121:163:26"},{"expression":{"arguments":[{"id":1360,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"2314:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1363,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"2344:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1219,"src":"2344:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:26","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1366,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"2368:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"2377:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1361,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1359,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"2294:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"ExpressionStatement","src":"2294:90:26"}]},"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"1564:249:26","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:26","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"token","nameLocation":"1846:5:26","nodeType":"VariableDeclaration","scope":1372,"src":"1839:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1331,"nodeType":"UserDefinedTypeName","pathNode":{"id":1330,"name":"IERC20","nameLocations":["1839:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"1839:6:26"},"referencedDeclaration":1232,"src":"1839:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"spender","nameLocation":"1861:7:26","nodeType":"VariableDeclaration","scope":1372,"src":"1853:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1333,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1336,"mutability":"mutable","name":"value","nameLocation":"1878:5:26","nodeType":"VariableDeclaration","scope":1372,"src":"1870:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:26"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[],"src":"1894:0:26"},"scope":1644,"src":"1818:573:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1408,"nodeType":"Block","src":"2668:194:26","statements":[{"assignments":[1384],"declarations":[{"constant":false,"id":1384,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:26","nodeType":"VariableDeclaration","scope":1408,"src":"2678:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1393,"initialValue":{"arguments":[{"arguments":[{"id":1389,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}],"id":1388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1387,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:26","typeDescriptions":{}}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1391,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"2732:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1385,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"2701:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1209,"src":"2701:15:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:26"},{"expression":{"arguments":[{"id":1395,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"2770:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1398,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"2800:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1219,"src":"2800:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:26","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1401,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"2824:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1402,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"2833:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"2848:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1396,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1394,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"2750:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1407,"nodeType":"ExpressionStatement","src":"2750:105:26"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"2397:180:26","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1409,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:26","nodeType":"FunctionDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"token","nameLocation":"2620:5:26","nodeType":"VariableDeclaration","scope":1409,"src":"2613:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1375,"nodeType":"UserDefinedTypeName","pathNode":{"id":1374,"name":"IERC20","nameLocations":["2613:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"2613:6:26"},"referencedDeclaration":1232,"src":"2613:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"spender","nameLocation":"2635:7:26","nodeType":"VariableDeclaration","scope":1409,"src":"2627:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"value","nameLocation":"2652:5:26","nodeType":"VariableDeclaration","scope":1409,"src":"2644:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1379,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:26"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[],"src":"2668:0:26"},"scope":1644,"src":"2582:280:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1453,"nodeType":"Block","src":"3139:321:26","statements":[{"id":1452,"nodeType":"UncheckedBlock","src":"3149:305:26","statements":[{"assignments":[1421],"declarations":[{"constant":false,"id":1421,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:26","nodeType":"VariableDeclaration","scope":1452,"src":"3173:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1420,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1430,"initialValue":{"arguments":[{"arguments":[{"id":1426,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1644","typeString":"library SafeERC20"}],"id":1425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:26","typeDescriptions":{}}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1428,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"3227:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1422,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"3196:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1209,"src":"3196:15:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1432,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"3257:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3273:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1431,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1437,"nodeType":"ExpressionStatement","src":"3249:75:26"},{"expression":{"arguments":[{"id":1439,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"3358:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1442,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"3388:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1219,"src":"3388:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:26","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1445,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"3412:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1446,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"3421:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3436:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1440,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1438,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"3338:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"ExpressionStatement","src":"3338:105:26"}]}]},"documentation":{"id":1410,"nodeType":"StructuredDocumentation","src":"2868:180:26","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1454,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:26","nodeType":"FunctionDefinition","parameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"token","nameLocation":"3091:5:26","nodeType":"VariableDeclaration","scope":1454,"src":"3084:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1412,"nodeType":"UserDefinedTypeName","pathNode":{"id":1411,"name":"IERC20","nameLocations":["3084:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"3084:6:26"},"referencedDeclaration":1232,"src":"3084:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"spender","nameLocation":"3106:7:26","nodeType":"VariableDeclaration","scope":1454,"src":"3098:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"value","nameLocation":"3123:5:26","nodeType":"VariableDeclaration","scope":1454,"src":"3115:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:26"},"returnParameters":{"id":1419,"nodeType":"ParameterList","parameters":[],"src":"3139:0:26"},"scope":1644,"src":"3053:407:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1500,"nodeType":"Block","src":"3856:333:26","statements":[{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:26","nodeType":"VariableDeclaration","scope":1500,"src":"3866:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1465,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1475,"initialValue":{"arguments":[{"expression":{"expression":{"id":1469,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"3917:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1219,"src":"3917:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:26","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1472,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"3941:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"3950:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1467,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:26"},{"condition":{"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:26","subExpression":{"arguments":[{"id":1477,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"3996:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"id":1478,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"4003:12:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1476,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"3972:23:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1499,"nodeType":"IfStatement","src":"3967:216:26","trueBody":{"id":1498,"nodeType":"Block","src":"4018:165:26","statements":[{"expression":{"arguments":[{"id":1482,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4052:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1485,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4082:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1219,"src":"4082:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:26","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1488,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"4106:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1483,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:26","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1481,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4032:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1492,"nodeType":"ExpressionStatement","src":"4032:86:26"},{"expression":{"arguments":[{"id":1494,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4152:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},{"id":1495,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"4159:12:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1493,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4132:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1232_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1497,"nodeType":"ExpressionStatement","src":"4132:40:26"}]}}]},"documentation":{"id":1455,"nodeType":"StructuredDocumentation","src":"3466:308:26","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":1501,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:26","nodeType":"FunctionDefinition","parameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"token","nameLocation":"3808:5:26","nodeType":"VariableDeclaration","scope":1501,"src":"3801:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1457,"nodeType":"UserDefinedTypeName","pathNode":{"id":1456,"name":"IERC20","nameLocations":["3801:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"3801:6:26"},"referencedDeclaration":1232,"src":"3801:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"spender","nameLocation":"3823:7:26","nodeType":"VariableDeclaration","scope":1501,"src":"3815:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"value","nameLocation":"3840:5:26","nodeType":"VariableDeclaration","scope":1501,"src":"3832:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:26"},"returnParameters":{"id":1464,"nodeType":"ParameterList","parameters":[],"src":"3856:0:26"},"scope":1644,"src":"3779:410:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1557,"nodeType":"Block","src":"4556:257:26","statements":[{"assignments":[1523],"declarations":[{"constant":false,"id":1523,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:26","nodeType":"VariableDeclaration","scope":1557,"src":"4566:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1522,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1528,"initialValue":{"arguments":[{"id":1526,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"4601:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1524,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"4588:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1268","typeString":"contract IERC20Permit"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:26","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1261,"src":"4588:12:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:26"},{"expression":{"arguments":[{"id":1532,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"4630:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1533,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"4637:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"4646:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1535,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"4653:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1536,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"4663:1:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1537,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"4666:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1538,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"4669:1:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1529,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"4617:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1268","typeString":"contract IERC20Permit"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:26","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1253,"src":"4617:12:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1540,"nodeType":"ExpressionStatement","src":"4617:54:26"},{"assignments":[1542],"declarations":[{"constant":false,"id":1542,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:26","nodeType":"VariableDeclaration","scope":1557,"src":"4681:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1547,"initialValue":{"arguments":[{"id":1545,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"4715:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1543,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"4702:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1268","typeString":"contract IERC20Permit"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:26","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1261,"src":"4702:12:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1549,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"4739:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1550,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"4753:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1548,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1556,"nodeType":"ExpressionStatement","src":"4731:75:26"}]},"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"4195:141:26","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1558,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:26","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"token","nameLocation":"4383:5:26","nodeType":"VariableDeclaration","scope":1558,"src":"4370:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1268","typeString":"contract IERC20Permit"},"typeName":{"id":1504,"nodeType":"UserDefinedTypeName","pathNode":{"id":1503,"name":"IERC20Permit","nameLocations":["4370:12:26"],"nodeType":"IdentifierPath","referencedDeclaration":1268,"src":"4370:12:26"},"referencedDeclaration":1268,"src":"4370:12:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1268","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"owner","nameLocation":"4406:5:26","nodeType":"VariableDeclaration","scope":1558,"src":"4398:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"spender","nameLocation":"4429:7:26","nodeType":"VariableDeclaration","scope":1558,"src":"4421:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1508,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"value","nameLocation":"4454:5:26","nodeType":"VariableDeclaration","scope":1558,"src":"4446:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1510,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:26","nodeType":"VariableDeclaration","scope":1558,"src":"4469:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1515,"mutability":"mutable","name":"v","nameLocation":"4501:1:26","nodeType":"VariableDeclaration","scope":1558,"src":"4495:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1514,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"r","nameLocation":"4520:1:26","nodeType":"VariableDeclaration","scope":1558,"src":"4512:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"s","nameLocation":"4539:1:26","nodeType":"VariableDeclaration","scope":1558,"src":"4531:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:26"},"returnParameters":{"id":1521,"nodeType":"ParameterList","parameters":[],"src":"4556:0:26"},"scope":1644,"src":"4341:472:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1594,"nodeType":"Block","src":"5266:572:26","statements":[{"assignments":[1568],"declarations":[{"constant":false,"id":1568,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:26","nodeType":"VariableDeclaration","scope":1594,"src":"5615:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1567,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1577,"initialValue":{"arguments":[{"id":1574,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"5669:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1571,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"5649:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}],"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:26","typeDescriptions":{}}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:26","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1734,"src":"5641:27:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1579,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"5728:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:26","memberName":"length","nodeType":"MemberAccess","src":"5728:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1585,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"5765:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1586,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:26","typeDescriptions":{}}}],"id":1588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1583,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:26","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1593,"nodeType":"ExpressionStatement","src":"5720:111:26"}]},"documentation":{"id":1559,"nodeType":"StructuredDocumentation","src":"4819:372:26","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:26","nodeType":"FunctionDefinition","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"token","nameLocation":"5232:5:26","nodeType":"VariableDeclaration","scope":1595,"src":"5225:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1561,"nodeType":"UserDefinedTypeName","pathNode":{"id":1560,"name":"IERC20","nameLocations":["5225:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"5225:6:26"},"referencedDeclaration":1232,"src":"5225:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"data","nameLocation":"5252:4:26","nodeType":"VariableDeclaration","scope":1595,"src":"5239:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1563,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:26"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"5266:0:26"},"scope":1644,"src":"5196:642:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1642,"nodeType":"Block","src":"6428:505:26","statements":[{"assignments":[1607,1609],"declarations":[{"constant":false,"id":1607,"mutability":"mutable","name":"success","nameLocation":"6729:7:26","nodeType":"VariableDeclaration","scope":1642,"src":"6724:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1606,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1609,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:26","nodeType":"VariableDeclaration","scope":1642,"src":"6738:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1608,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1617,"initialValue":{"arguments":[{"id":1615,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"6785:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1612,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"6773:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}],"id":1611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:26","typeDescriptions":{}}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:26","memberName":"call","nodeType":"MemberAccess","src":"6765:19:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:26"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1618,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"6819:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1619,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"6831:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:26","memberName":"length","nodeType":"MemberAccess","src":"6831:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1625,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"6868:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1626,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:26","typeDescriptions":{}}}],"id":1628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1623,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:26","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1631,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1637,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"6919:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}],"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1635,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:26","typeDescriptions":{}}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1633,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"6892:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1974_$","typeString":"type(library Address)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:26","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"6892:18:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1605,"id":1641,"nodeType":"Return","src":"6800:126:26"}]},"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"5844:490:26","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:26","nodeType":"FunctionDefinition","parameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"token","nameLocation":"6379:5:26","nodeType":"VariableDeclaration","scope":1643,"src":"6372:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"},"typeName":{"id":1598,"nodeType":"UserDefinedTypeName","pathNode":{"id":1597,"name":"IERC20","nameLocations":["6372:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1232,"src":"6372:6:26"},"referencedDeclaration":1232,"src":"6372:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1232","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1601,"mutability":"mutable","name":"data","nameLocation":"6399:4:26","nodeType":"VariableDeclaration","scope":1643,"src":"6386:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1600,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:26"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"6422:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1603,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:26"},"scope":1644,"src":"6339:594:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1645,"src":"701:6234:26","usedErrors":[],"usedEvents":[]}],"src":"115:6821:26"},"id":26},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1974]},"id":1975,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1646,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"126:67:27","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1974,"linearizedBaseContracts":[1974],"name":"Address","nameLocation":"202:7:27","nodeType":"ContractDefinition","nodes":[{"body":{"id":1661,"nodeType":"Block","src":"1478:254:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1655,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"1702:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:27","memberName":"code","nodeType":"MemberAccess","src":"1702:12:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:27","memberName":"length","nodeType":"MemberAccess","src":"1702:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1654,"id":1660,"nodeType":"Return","src":"1695:30:27"}]},"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"216:1191:27","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1662,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:27","nodeType":"FunctionDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"account","nameLocation":"1440:7:27","nodeType":"VariableDeclaration","scope":1662,"src":"1432:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:27"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1662,"src":"1472:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1652,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:27"},"scope":1974,"src":"1412:320:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1695,"nodeType":"Block","src":"2718:241:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1673,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1974","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1974","typeString":"library Address"}],"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:27","typeDescriptions":{}}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:27","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1676,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"2761:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1670,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1680,"nodeType":"ExpressionStatement","src":"2728:73:27"},{"assignments":[1682,null],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"success","nameLocation":"2818:7:27","nodeType":"VariableDeclaration","scope":1695,"src":"2813:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1681,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1689,"initialValue":{"arguments":[{"hexValue":"","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1683,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"2831:9:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:27","memberName":"call","nodeType":"MemberAccess","src":"2831:14:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1685,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"2853:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:27"},{"expression":{"arguments":[{"id":1691,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"2882:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1690,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"2874:78:27"}]},"documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"1738:904:27","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1696,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:27","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:27","nodeType":"VariableDeclaration","scope":1696,"src":"2666:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1664,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"amount","nameLocation":"2701:6:27","nodeType":"VariableDeclaration","scope":1696,"src":"2693:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:27"},"returnParameters":{"id":1669,"nodeType":"ParameterList","parameters":[],"src":"2718:0:27"},"scope":1974,"src":"2647:312:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1713,"nodeType":"Block","src":"3790:96:27","statements":[{"expression":{"arguments":[{"id":1707,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3829:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1708,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"3837:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1706,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1754,1798],"referencedDeclaration":1798,"src":"3807:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1705,"id":1712,"nodeType":"Return","src":"3800:79:27"}]},"documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"2965:731:27","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:27","nodeType":"FunctionDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1699,"mutability":"mutable","name":"target","nameLocation":"3731:6:27","nodeType":"VariableDeclaration","scope":1714,"src":"3723:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1698,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1701,"mutability":"mutable","name":"data","nameLocation":"3752:4:27","nodeType":"VariableDeclaration","scope":1714,"src":"3739:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1700,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:27"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"3776:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1703,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:27"},"scope":1974,"src":"3701:185:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1733,"nodeType":"Block","src":"4255:76:27","statements":[{"expression":{"arguments":[{"id":1727,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"4294:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1728,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"4302:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1730,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"4311:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1726,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1754,1798],"referencedDeclaration":1798,"src":"4272:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1725,"id":1732,"nodeType":"Return","src":"4265:59:27"}]},"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"3892:211:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1734,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:27","nodeType":"FunctionDefinition","parameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"target","nameLocation":"4147:6:27","nodeType":"VariableDeclaration","scope":1734,"src":"4139:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1716,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"data","nameLocation":"4176:4:27","nodeType":"VariableDeclaration","scope":1734,"src":"4163:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1718,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:27","nodeType":"VariableDeclaration","scope":1734,"src":"4190:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1720,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:27"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1734,"src":"4241:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1723,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:27"},"scope":1974,"src":"4108:223:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1753,"nodeType":"Block","src":"4806:111:27","statements":[{"expression":{"arguments":[{"id":1747,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"4845:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1748,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"4853:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"4859:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1746,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1754,1798],"referencedDeclaration":1798,"src":"4823:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1745,"id":1752,"nodeType":"Return","src":"4816:94:27"}]},"documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"4337:351:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1754,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:27","nodeType":"FunctionDefinition","parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1737,"mutability":"mutable","name":"target","nameLocation":"4732:6:27","nodeType":"VariableDeclaration","scope":1754,"src":"4724:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1739,"mutability":"mutable","name":"data","nameLocation":"4753:4:27","nodeType":"VariableDeclaration","scope":1754,"src":"4740:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1738,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"value","nameLocation":"4767:5:27","nodeType":"VariableDeclaration","scope":1754,"src":"4759:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:27"},"returnParameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1754,"src":"4792:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1743,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:27"},"scope":1974,"src":"4693:224:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1797,"nodeType":"Block","src":"5344:267:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1771,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1974","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1974","typeString":"library Address"}],"id":1770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:27","typeDescriptions":{}}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:27","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"5387:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1768,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"5354:81:27"},{"assignments":[1780,1782],"declarations":[{"constant":false,"id":1780,"mutability":"mutable","name":"success","nameLocation":"5451:7:27","nodeType":"VariableDeclaration","scope":1797,"src":"5446:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1779,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:27","nodeType":"VariableDeclaration","scope":1797,"src":"5460:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1781,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1789,"initialValue":{"arguments":[{"id":1787,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"5513:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1783,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"5487:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:27","memberName":"call","nodeType":"MemberAccess","src":"5487:11:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"5506:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:27"},{"expression":{"arguments":[{"id":1791,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"5562:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1792,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"5570:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1793,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"5579:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1794,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"5591:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1790,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"5535:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1767,"id":1796,"nodeType":"Return","src":"5528:76:27"}]},"documentation":{"id":1755,"nodeType":"StructuredDocumentation","src":"4923:237:27","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1798,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:27","nodeType":"FunctionDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"target","nameLocation":"5213:6:27","nodeType":"VariableDeclaration","scope":1798,"src":"5205:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"data","nameLocation":"5242:4:27","nodeType":"VariableDeclaration","scope":1798,"src":"5229:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1758,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"value","nameLocation":"5264:5:27","nodeType":"VariableDeclaration","scope":1798,"src":"5256:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:27","nodeType":"VariableDeclaration","scope":1798,"src":"5279:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1762,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:27"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"5330:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1765,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:27"},"scope":1974,"src":"5165:446:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1814,"nodeType":"Block","src":"5888:97:27","statements":[{"expression":{"arguments":[{"id":1809,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"5924:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1810,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"5932:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1808,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1815,1844],"referencedDeclaration":1844,"src":"5905:18:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1807,"id":1813,"nodeType":"Return","src":"5898:80:27"}]},"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"5617:166:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1815,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:27","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"target","nameLocation":"5824:6:27","nodeType":"VariableDeclaration","scope":1815,"src":"5816:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"data","nameLocation":"5845:4:27","nodeType":"VariableDeclaration","scope":1815,"src":"5832:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1802,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:27"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1815,"src":"5874:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1805,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:27"},"scope":1974,"src":"5788:197:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1843,"nodeType":"Block","src":"6327:168:27","statements":[{"assignments":[1828,1830],"declarations":[{"constant":false,"id":1828,"mutability":"mutable","name":"success","nameLocation":"6343:7:27","nodeType":"VariableDeclaration","scope":1843,"src":"6338:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1827,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:27","nodeType":"VariableDeclaration","scope":1843,"src":"6352:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1829,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1835,"initialValue":{"arguments":[{"id":1833,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6397:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1831,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6379:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:27","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:27","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:27"},{"expression":{"arguments":[{"id":1837,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6446:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1838,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"6454:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1839,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"6463:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1840,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"6475:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1836,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"6419:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1826,"id":1842,"nodeType":"Return","src":"6412:76:27"}]},"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"5991:173:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:27","nodeType":"FunctionDefinition","parameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"target","nameLocation":"6214:6:27","nodeType":"VariableDeclaration","scope":1844,"src":"6206:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1817,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"data","nameLocation":"6243:4:27","nodeType":"VariableDeclaration","scope":1844,"src":"6230:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1819,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1822,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:27","nodeType":"VariableDeclaration","scope":1844,"src":"6257:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1821,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:27"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"6313:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1824,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:27"},"scope":1974,"src":"6169:326:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1860,"nodeType":"Block","src":"6771:101:27","statements":[{"expression":{"arguments":[{"id":1855,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"6809:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1856,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6817:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1854,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1861,1890],"referencedDeclaration":1890,"src":"6788:20:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1853,"id":1859,"nodeType":"Return","src":"6781:84:27"}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"6501:168:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:27","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"target","nameLocation":"6712:6:27","nodeType":"VariableDeclaration","scope":1861,"src":"6704:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"data","nameLocation":"6733:4:27","nodeType":"VariableDeclaration","scope":1861,"src":"6720:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1848,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:27"},"returnParameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"6757:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1851,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:27"},"scope":1974,"src":"6674:198:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"7213:170:27","statements":[{"assignments":[1874,1876],"declarations":[{"constant":false,"id":1874,"mutability":"mutable","name":"success","nameLocation":"7229:7:27","nodeType":"VariableDeclaration","scope":1889,"src":"7224:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1873,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:27","nodeType":"VariableDeclaration","scope":1889,"src":"7238:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1875,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1881,"initialValue":{"arguments":[{"id":1879,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"7285:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1877,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7265:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:27","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:27","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:27"},{"expression":{"arguments":[{"id":1883,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7334:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1884,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"7342:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1885,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"7351:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1886,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"7363:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1882,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"7307:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1872,"id":1888,"nodeType":"Return","src":"7300:76:27"}]},"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"6878:175:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:27","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"target","nameLocation":"7105:6:27","nodeType":"VariableDeclaration","scope":1890,"src":"7097:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1863,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"data","nameLocation":"7134:4:27","nodeType":"VariableDeclaration","scope":1890,"src":"7121:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1865,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1868,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:27","nodeType":"VariableDeclaration","scope":1890,"src":"7148:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1867,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:27"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1890,"src":"7199:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1870,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:27"},"scope":1974,"src":"7058:325:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1928,"nodeType":"Block","src":"7865:434:27","statements":[{"condition":{"id":1904,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"7879:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1926,"nodeType":"Block","src":"8235:58:27","statements":[{"expression":{"arguments":[{"id":1922,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"8257:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1923,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"8269:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1921,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"8249:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1925,"nodeType":"ExpressionStatement","src":"8249:33:27"}]},"id":1927,"nodeType":"IfStatement","src":"7875:418:27","trueBody":{"id":1920,"nodeType":"Block","src":"7888:341:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1905,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"7906:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:27","memberName":"length","nodeType":"MemberAccess","src":"7906:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1917,"nodeType":"IfStatement","src":"7902:286:27","trueBody":{"id":1916,"nodeType":"Block","src":"7930:258:27","statements":[{"expression":{"arguments":[{"arguments":[{"id":1911,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"8132:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1910,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"8121:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1915,"nodeType":"ExpressionStatement","src":"8113:60:27"}]}},{"expression":{"id":1918,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"8208:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1903,"id":1919,"nodeType":"Return","src":"8201:17:27"}]}}]},"documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"7389:277:27","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1929,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:27","nodeType":"FunctionDefinition","parameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"target","nameLocation":"7724:6:27","nodeType":"VariableDeclaration","scope":1929,"src":"7716:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1892,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"success","nameLocation":"7745:7:27","nodeType":"VariableDeclaration","scope":1929,"src":"7740:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1894,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1897,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:27","nodeType":"VariableDeclaration","scope":1929,"src":"7762:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1896,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:27","nodeType":"VariableDeclaration","scope":1929,"src":"7795:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1898,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:27"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1929,"src":"7851:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1901,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:27"},"scope":1974,"src":"7671:628:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1952,"nodeType":"Block","src":"8680:135:27","statements":[{"condition":{"id":1941,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"8694:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1950,"nodeType":"Block","src":"8751:58:27","statements":[{"expression":{"arguments":[{"id":1946,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"8773:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1947,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"8785:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1945,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"8765:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1949,"nodeType":"ExpressionStatement","src":"8765:33:27"}]},"id":1951,"nodeType":"IfStatement","src":"8690:119:27","trueBody":{"id":1944,"nodeType":"Block","src":"8703:42:27","statements":[{"expression":{"id":1942,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"8724:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1940,"id":1943,"nodeType":"Return","src":"8717:17:27"}]}}]},"documentation":{"id":1930,"nodeType":"StructuredDocumentation","src":"8305:210:27","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1953,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:27","nodeType":"FunctionDefinition","parameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"success","nameLocation":"8560:7:27","nodeType":"VariableDeclaration","scope":1953,"src":"8555:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1931,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1934,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:27","nodeType":"VariableDeclaration","scope":1953,"src":"8577:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1933,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:27","nodeType":"VariableDeclaration","scope":1953,"src":"8610:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1935,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:27"},"returnParameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1953,"src":"8666:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1938,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:27"},"scope":1974,"src":"8520:295:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1972,"nodeType":"Block","src":"8904:457:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1960,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"8980:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:27","memberName":"length","nodeType":"MemberAccess","src":"8980:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1970,"nodeType":"Block","src":"9310:45:27","statements":[{"expression":{"arguments":[{"id":1967,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"9331:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1966,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1969,"nodeType":"ExpressionStatement","src":"9324:20:27"}]},"id":1971,"nodeType":"IfStatement","src":"8976:379:27","trueBody":{"id":1965,"nodeType":"Block","src":"9003:301:27","statements":[{"AST":{"nativeSrc":"9161:133:27","nodeType":"YulBlock","src":"9161:133:27","statements":[{"nativeSrc":"9179:40:27","nodeType":"YulVariableDeclaration","src":"9179:40:27","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:27","nodeType":"YulIdentifier","src":"9208:10:27"}],"functionName":{"name":"mload","nativeSrc":"9202:5:27","nodeType":"YulIdentifier","src":"9202:5:27"},"nativeSrc":"9202:17:27","nodeType":"YulFunctionCall","src":"9202:17:27"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:27","nodeType":"YulTypedName","src":"9183:15:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:27","nodeType":"YulLiteral","src":"9247:2:27","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:27","nodeType":"YulIdentifier","src":"9251:10:27"}],"functionName":{"name":"add","nativeSrc":"9243:3:27","nodeType":"YulIdentifier","src":"9243:3:27"},"nativeSrc":"9243:19:27","nodeType":"YulFunctionCall","src":"9243:19:27"},{"name":"returndata_size","nativeSrc":"9264:15:27","nodeType":"YulIdentifier","src":"9264:15:27"}],"functionName":{"name":"revert","nativeSrc":"9236:6:27","nodeType":"YulIdentifier","src":"9236:6:27"},"nativeSrc":"9236:44:27","nodeType":"YulFunctionCall","src":"9236:44:27"},"nativeSrc":"9236:44:27","nodeType":"YulExpressionStatement","src":"9236:44:27"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1955,"isOffset":false,"isSlot":false,"src":"9208:10:27","valueSize":1},{"declaration":1955,"isOffset":false,"isSlot":false,"src":"9251:10:27","valueSize":1}],"id":1964,"nodeType":"InlineAssembly","src":"9152:142:27"}]}}]},"id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:27","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:27","nodeType":"VariableDeclaration","scope":1973,"src":"8838:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:27","nodeType":"VariableDeclaration","scope":1973,"src":"8863:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1956,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:27"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[],"src":"8904:0:27"},"scope":1974,"src":"8821:540:27","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1975,"src":"194:9169:27","usedErrors":[],"usedEvents":[]}],"src":"101:9263:27"},"id":27},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1996]},"id":1997,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1976,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:28"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1977,"nodeType":"StructuredDocumentation","src":"111:496:28","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1996,"linearizedBaseContracts":[1996],"name":"Context","nameLocation":"626:7:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":1985,"nodeType":"Block","src":"702:34:28","statements":[{"expression":{"expression":{"id":1982,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:28","memberName":"sender","nodeType":"MemberAccess","src":"719:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1981,"id":1984,"nodeType":"Return","src":"712:17:28"}]},"id":1986,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:28","nodeType":"FunctionDefinition","parameters":{"id":1978,"nodeType":"ParameterList","parameters":[],"src":"659:2:28"},"returnParameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1986,"src":"693:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:28"},"scope":1996,"src":"640:96:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1994,"nodeType":"Block","src":"809:32:28","statements":[{"expression":{"expression":{"id":1991,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:28","memberName":"data","nodeType":"MemberAccess","src":"826:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1990,"id":1993,"nodeType":"Return","src":"819:15:28"}]},"id":1995,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:28","nodeType":"FunctionDefinition","parameters":{"id":1987,"nodeType":"ParameterList","parameters":[],"src":"759:2:28"},"returnParameters":{"id":1990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1995,"src":"793:14:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1988,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:28"},"scope":1996,"src":"742:99:28","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1997,"src":"608:235:28","usedErrors":[],"usedEvents":[]}],"src":"86:758:28"},"id":28},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2106]},"id":2107,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1998,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"218:1201:29","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2106,"linearizedBaseContracts":[2106],"name":"StorageSlot","nameLocation":"1428:11:29","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2002,"members":[{"constant":false,"id":2001,"mutability":"mutable","name":"value","nameLocation":"1483:5:29","nodeType":"VariableDeclaration","scope":2002,"src":"1475:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2000,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:29","nodeType":"StructDefinition","scope":2106,"src":"1446:49:29","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2005,"members":[{"constant":false,"id":2004,"mutability":"mutable","name":"value","nameLocation":"1535:5:29","nodeType":"VariableDeclaration","scope":2005,"src":"1530:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2003,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:29","nodeType":"StructDefinition","scope":2106,"src":"1501:46:29","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2008,"members":[{"constant":false,"id":2007,"mutability":"mutable","name":"value","nameLocation":"1590:5:29","nodeType":"VariableDeclaration","scope":2008,"src":"1582:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2006,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:29","nodeType":"StructDefinition","scope":2106,"src":"1553:49:29","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2011,"members":[{"constant":false,"id":2010,"mutability":"mutable","name":"value","nameLocation":"1645:5:29","nodeType":"VariableDeclaration","scope":2011,"src":"1637:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:29","nodeType":"StructDefinition","scope":2106,"src":"1608:49:29","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2014,"members":[{"constant":false,"id":2013,"mutability":"mutable","name":"value","nameLocation":"1698:5:29","nodeType":"VariableDeclaration","scope":2014,"src":"1691:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2012,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:29","nodeType":"StructDefinition","scope":2106,"src":"1663:47:29","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2017,"members":[{"constant":false,"id":2016,"mutability":"mutable","name":"value","nameLocation":"1749:5:29","nodeType":"VariableDeclaration","scope":2017,"src":"1743:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2015,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:29","nodeType":"StructDefinition","scope":2106,"src":"1716:45:29","visibility":"public"},{"body":{"id":2027,"nodeType":"Block","src":"1943:106:29","statements":[{"AST":{"nativeSrc":"2005:38:29","nodeType":"YulBlock","src":"2005:38:29","statements":[{"nativeSrc":"2019:14:29","nodeType":"YulAssignment","src":"2019:14:29","value":{"name":"slot","nativeSrc":"2029:4:29","nodeType":"YulIdentifier","src":"2029:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:29","nodeType":"YulIdentifier","src":"2019:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2024,"isOffset":false,"isSlot":true,"src":"2019:6:29","suffix":"slot","valueSize":1},{"declaration":2020,"isOffset":false,"isSlot":false,"src":"2029:4:29","valueSize":1}],"id":2026,"nodeType":"InlineAssembly","src":"1996:47:29"}]},"documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"1767:87:29","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2028,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:29","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"slot","nameLocation":"1891:4:29","nodeType":"VariableDeclaration","scope":2028,"src":"1883:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:29"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"r","nameLocation":"1940:1:29","nodeType":"VariableDeclaration","scope":2028,"src":"1920:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2002_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2023,"nodeType":"UserDefinedTypeName","pathNode":{"id":2022,"name":"AddressSlot","nameLocations":["1920:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"1920:11:29"},"referencedDeclaration":2002,"src":"1920:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2002_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:29"},"scope":2106,"src":"1859:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2038,"nodeType":"Block","src":"2231:106:29","statements":[{"AST":{"nativeSrc":"2293:38:29","nodeType":"YulBlock","src":"2293:38:29","statements":[{"nativeSrc":"2307:14:29","nodeType":"YulAssignment","src":"2307:14:29","value":{"name":"slot","nativeSrc":"2317:4:29","nodeType":"YulIdentifier","src":"2317:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:29","nodeType":"YulIdentifier","src":"2307:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2035,"isOffset":false,"isSlot":true,"src":"2307:6:29","suffix":"slot","valueSize":1},{"declaration":2031,"isOffset":false,"isSlot":false,"src":"2317:4:29","valueSize":1}],"id":2037,"nodeType":"InlineAssembly","src":"2284:47:29"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"2055:87:29","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:29","nodeType":"FunctionDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"slot","nameLocation":"2179:4:29","nodeType":"VariableDeclaration","scope":2039,"src":"2171:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:29"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"r","nameLocation":"2228:1:29","nodeType":"VariableDeclaration","scope":2039,"src":"2208:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2005_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2034,"nodeType":"UserDefinedTypeName","pathNode":{"id":2033,"name":"BooleanSlot","nameLocations":["2208:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"2208:11:29"},"referencedDeclaration":2005,"src":"2208:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2005_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:29"},"scope":2106,"src":"2147:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2049,"nodeType":"Block","src":"2519:106:29","statements":[{"AST":{"nativeSrc":"2581:38:29","nodeType":"YulBlock","src":"2581:38:29","statements":[{"nativeSrc":"2595:14:29","nodeType":"YulAssignment","src":"2595:14:29","value":{"name":"slot","nativeSrc":"2605:4:29","nodeType":"YulIdentifier","src":"2605:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:29","nodeType":"YulIdentifier","src":"2595:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2046,"isOffset":false,"isSlot":true,"src":"2595:6:29","suffix":"slot","valueSize":1},{"declaration":2042,"isOffset":false,"isSlot":false,"src":"2605:4:29","valueSize":1}],"id":2048,"nodeType":"InlineAssembly","src":"2572:47:29"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"2343:87:29","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:29","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"slot","nameLocation":"2467:4:29","nodeType":"VariableDeclaration","scope":2050,"src":"2459:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:29"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"r","nameLocation":"2516:1:29","nodeType":"VariableDeclaration","scope":2050,"src":"2496:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2008_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2045,"nodeType":"UserDefinedTypeName","pathNode":{"id":2044,"name":"Bytes32Slot","nameLocations":["2496:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":2008,"src":"2496:11:29"},"referencedDeclaration":2008,"src":"2496:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2008_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:29"},"scope":2106,"src":"2435:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2060,"nodeType":"Block","src":"2807:106:29","statements":[{"AST":{"nativeSrc":"2869:38:29","nodeType":"YulBlock","src":"2869:38:29","statements":[{"nativeSrc":"2883:14:29","nodeType":"YulAssignment","src":"2883:14:29","value":{"name":"slot","nativeSrc":"2893:4:29","nodeType":"YulIdentifier","src":"2893:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:29","nodeType":"YulIdentifier","src":"2883:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2057,"isOffset":false,"isSlot":true,"src":"2883:6:29","suffix":"slot","valueSize":1},{"declaration":2053,"isOffset":false,"isSlot":false,"src":"2893:4:29","valueSize":1}],"id":2059,"nodeType":"InlineAssembly","src":"2860:47:29"}]},"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"2631:87:29","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2061,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:29","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"slot","nameLocation":"2755:4:29","nodeType":"VariableDeclaration","scope":2061,"src":"2747:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:29"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"r","nameLocation":"2804:1:29","nodeType":"VariableDeclaration","scope":2061,"src":"2784:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2056,"nodeType":"UserDefinedTypeName","pathNode":{"id":2055,"name":"Uint256Slot","nameLocations":["2784:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":2011,"src":"2784:11:29"},"referencedDeclaration":2011,"src":"2784:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2011_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:29"},"scope":2106,"src":"2723:190:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2071,"nodeType":"Block","src":"3092:106:29","statements":[{"AST":{"nativeSrc":"3154:38:29","nodeType":"YulBlock","src":"3154:38:29","statements":[{"nativeSrc":"3168:14:29","nodeType":"YulAssignment","src":"3168:14:29","value":{"name":"slot","nativeSrc":"3178:4:29","nodeType":"YulIdentifier","src":"3178:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:29","nodeType":"YulIdentifier","src":"3168:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2068,"isOffset":false,"isSlot":true,"src":"3168:6:29","suffix":"slot","valueSize":1},{"declaration":2064,"isOffset":false,"isSlot":false,"src":"3178:4:29","valueSize":1}],"id":2070,"nodeType":"InlineAssembly","src":"3145:47:29"}]},"documentation":{"id":2062,"nodeType":"StructuredDocumentation","src":"2919:86:29","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2072,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:29","nodeType":"FunctionDefinition","parameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"slot","nameLocation":"3041:4:29","nodeType":"VariableDeclaration","scope":2072,"src":"3033:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:29"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"r","nameLocation":"3089:1:29","nodeType":"VariableDeclaration","scope":2072,"src":"3070:20:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2014_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2067,"nodeType":"UserDefinedTypeName","pathNode":{"id":2066,"name":"StringSlot","nameLocations":["3070:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"3070:10:29"},"referencedDeclaration":2014,"src":"3070:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2014_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:29"},"scope":2106,"src":"3010:188:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2082,"nodeType":"Block","src":"3400:112:29","statements":[{"AST":{"nativeSrc":"3462:44:29","nodeType":"YulBlock","src":"3462:44:29","statements":[{"nativeSrc":"3476:20:29","nodeType":"YulAssignment","src":"3476:20:29","value":{"name":"store.slot","nativeSrc":"3486:10:29","nodeType":"YulIdentifier","src":"3486:10:29"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:29","nodeType":"YulIdentifier","src":"3476:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2079,"isOffset":false,"isSlot":true,"src":"3476:6:29","suffix":"slot","valueSize":1},{"declaration":2075,"isOffset":false,"isSlot":true,"src":"3486:10:29","suffix":"slot","valueSize":1}],"id":2081,"nodeType":"InlineAssembly","src":"3453:53:29"}]},"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"3204:101:29","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2083,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:29","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"store","nameLocation":"3348:5:29","nodeType":"VariableDeclaration","scope":2083,"src":"3333:20:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2074,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:29"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"r","nameLocation":"3397:1:29","nodeType":"VariableDeclaration","scope":2083,"src":"3378:20:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2014_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2078,"nodeType":"UserDefinedTypeName","pathNode":{"id":2077,"name":"StringSlot","nameLocations":["3378:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"3378:10:29"},"referencedDeclaration":2014,"src":"3378:10:29","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2014_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:29"},"scope":2106,"src":"3310:202:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2093,"nodeType":"Block","src":"3688:106:29","statements":[{"AST":{"nativeSrc":"3750:38:29","nodeType":"YulBlock","src":"3750:38:29","statements":[{"nativeSrc":"3764:14:29","nodeType":"YulAssignment","src":"3764:14:29","value":{"name":"slot","nativeSrc":"3774:4:29","nodeType":"YulIdentifier","src":"3774:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:29","nodeType":"YulIdentifier","src":"3764:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2090,"isOffset":false,"isSlot":true,"src":"3764:6:29","suffix":"slot","valueSize":1},{"declaration":2086,"isOffset":false,"isSlot":false,"src":"3774:4:29","valueSize":1}],"id":2092,"nodeType":"InlineAssembly","src":"3741:47:29"}]},"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"3518:85:29","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2094,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:29","nodeType":"FunctionDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"slot","nameLocation":"3638:4:29","nodeType":"VariableDeclaration","scope":2094,"src":"3630:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:29"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"r","nameLocation":"3685:1:29","nodeType":"VariableDeclaration","scope":2094,"src":"3667:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2017_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2089,"nodeType":"UserDefinedTypeName","pathNode":{"id":2088,"name":"BytesSlot","nameLocations":["3667:9:29"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"3667:9:29"},"referencedDeclaration":2017,"src":"3667:9:29","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2017_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:29"},"scope":2106,"src":"3608:186:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2104,"nodeType":"Block","src":"3991:112:29","statements":[{"AST":{"nativeSrc":"4053:44:29","nodeType":"YulBlock","src":"4053:44:29","statements":[{"nativeSrc":"4067:20:29","nodeType":"YulAssignment","src":"4067:20:29","value":{"name":"store.slot","nativeSrc":"4077:10:29","nodeType":"YulIdentifier","src":"4077:10:29"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:29","nodeType":"YulIdentifier","src":"4067:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2101,"isOffset":false,"isSlot":true,"src":"4067:6:29","suffix":"slot","valueSize":1},{"declaration":2097,"isOffset":false,"isSlot":true,"src":"4077:10:29","suffix":"slot","valueSize":1}],"id":2103,"nodeType":"InlineAssembly","src":"4044:53:29"}]},"documentation":{"id":2095,"nodeType":"StructuredDocumentation","src":"3800:99:29","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2105,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:29","nodeType":"FunctionDefinition","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"mutability":"mutable","name":"store","nameLocation":"3940:5:29","nodeType":"VariableDeclaration","scope":2105,"src":"3926:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2096,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:29"},"returnParameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"r","nameLocation":"3988:1:29","nodeType":"VariableDeclaration","scope":2105,"src":"3970:19:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2017_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2100,"nodeType":"UserDefinedTypeName","pathNode":{"id":2099,"name":"BytesSlot","nameLocations":["3970:9:29"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"3970:9:29"},"referencedDeclaration":2017,"src":"3970:9:29","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2017_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:29"},"scope":2106,"src":"3904:199:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2107,"src":"1420:2685:29","usedErrors":[],"usedEvents":[]}],"src":"193:3913:29"},"id":29},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2634]},"id":2635,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2108,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:30"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"143:658:30","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2634,"linearizedBaseContracts":[2634],"name":"MerkleProof","nameLocation":"810:11:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":2129,"nodeType":"Block","src":"1253:57:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2123,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1283:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2124,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"1290:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2122,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"1270:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1270:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2126,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1299:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1270:33:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2121,"id":2128,"nodeType":"Return","src":"1263:40:30"}]},"documentation":{"id":2110,"nodeType":"StructuredDocumentation","src":"828:323:30","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2130,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:30","nodeType":"FunctionDefinition","parameters":{"id":2118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"proof","nameLocation":"1189:5:30","nodeType":"VariableDeclaration","scope":2130,"src":"1172:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1172:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2112,"nodeType":"ArrayTypeName","src":"1172:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"root","nameLocation":"1204:4:30","nodeType":"VariableDeclaration","scope":2130,"src":"1196:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1196:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"leaf","nameLocation":"1218:4:30","nodeType":"VariableDeclaration","scope":2130,"src":"1210:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:52:30"},"returnParameters":{"id":2121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2130,"src":"1247:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2119,"name":"bool","nodeType":"ElementaryTypeName","src":"1247:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1246:6:30"},"scope":2634,"src":"1156:154:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2150,"nodeType":"Block","src":"1518:65:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2144,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"1556:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2145,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"1563:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2143,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"1535:20:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2147,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"1572:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1535:41:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2142,"id":2149,"nodeType":"Return","src":"1528:48:30"}]},"documentation":{"id":2131,"nodeType":"StructuredDocumentation","src":"1316:90:30","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":2151,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1420:14:30","nodeType":"FunctionDefinition","parameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2134,"mutability":"mutable","name":"proof","nameLocation":"1454:5:30","nodeType":"VariableDeclaration","scope":2151,"src":"1435:24:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1435:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2133,"nodeType":"ArrayTypeName","src":"1435:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2136,"mutability":"mutable","name":"root","nameLocation":"1469:4:30","nodeType":"VariableDeclaration","scope":2151,"src":"1461:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1461:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"leaf","nameLocation":"1483:4:30","nodeType":"VariableDeclaration","scope":2151,"src":"1475:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1475:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1434:54:30"},"returnParameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2151,"src":"1512:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2140,"name":"bool","nodeType":"ElementaryTypeName","src":"1512:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1511:6:30"},"scope":2634,"src":"1411:172:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2190,"nodeType":"Block","src":"2026:198:30","statements":[{"assignments":[2163],"declarations":[{"constant":false,"id":2163,"mutability":"mutable","name":"computedHash","nameLocation":"2044:12:30","nodeType":"VariableDeclaration","scope":2190,"src":"2036:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2036:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2165,"initialValue":{"id":2164,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"2059:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2036:27:30"},{"body":{"id":2186,"nodeType":"Block","src":"2116:73:30","statements":[{"expression":{"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2177,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"2130:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2179,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"2155:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2180,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"2169:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2182,"indexExpression":{"id":2181,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2175:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2169:8:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2178,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"2145:9:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2130:48:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2185,"nodeType":"ExpressionStatement","src":"2130:48:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2093:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2171,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"2097:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2103:6:30","memberName":"length","nodeType":"MemberAccess","src":"2097:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2093:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2187,"initializationExpression":{"assignments":[2167],"declarations":[{"constant":false,"id":2167,"mutability":"mutable","name":"i","nameLocation":"2086:1:30","nodeType":"VariableDeclaration","scope":2187,"src":"2078:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2166,"name":"uint256","nodeType":"ElementaryTypeName","src":"2078:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2169,"initialValue":{"hexValue":"30","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2090:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2078:13:30"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2111:3:30","subExpression":{"id":2174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2111:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"2111:3:30"},"nodeType":"ForStatement","src":"2073:116:30"},{"expression":{"id":2188,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"2205:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2161,"id":2189,"nodeType":"Return","src":"2198:19:30"}]},"documentation":{"id":2152,"nodeType":"StructuredDocumentation","src":"1589:340:30","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":2191,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1943:12:30","nodeType":"FunctionDefinition","parameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"proof","nameLocation":"1973:5:30","nodeType":"VariableDeclaration","scope":2191,"src":"1956:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2154,"nodeType":"ArrayTypeName","src":"1956:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"leaf","nameLocation":"1988:4:30","nodeType":"VariableDeclaration","scope":2191,"src":"1980:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1980:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1955:38:30"},"returnParameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2191,"src":"2017:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2017:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2016:9:30"},"scope":2634,"src":"1934:290:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2230,"nodeType":"Block","src":"2433:198:30","statements":[{"assignments":[2203],"declarations":[{"constant":false,"id":2203,"mutability":"mutable","name":"computedHash","nameLocation":"2451:12:30","nodeType":"VariableDeclaration","scope":2230,"src":"2443:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2202,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2205,"initialValue":{"id":2204,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"2466:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2443:27:30"},{"body":{"id":2226,"nodeType":"Block","src":"2523:73:30","statements":[{"expression":{"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2217,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"2537:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2219,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"2562:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2220,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"2576:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2222,"indexExpression":{"id":2221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"2582:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2576:8:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2218,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"2552:9:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2537:48:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2225,"nodeType":"ExpressionStatement","src":"2537:48:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2210,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"2500:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2211,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"2504:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2510:6:30","memberName":"length","nodeType":"MemberAccess","src":"2504:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2500:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2227,"initializationExpression":{"assignments":[2207],"declarations":[{"constant":false,"id":2207,"mutability":"mutable","name":"i","nameLocation":"2493:1:30","nodeType":"VariableDeclaration","scope":2227,"src":"2485:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2209,"initialValue":{"hexValue":"30","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2497:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2485:13:30"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2518:3:30","subExpression":{"id":2214,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"2518:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2216,"nodeType":"ExpressionStatement","src":"2518:3:30"},"nodeType":"ForStatement","src":"2480:116:30"},{"expression":{"id":2228,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"2612:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2201,"id":2229,"nodeType":"Return","src":"2605:19:30"}]},"documentation":{"id":2192,"nodeType":"StructuredDocumentation","src":"2230:96:30","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":2231,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2340:20:30","nodeType":"FunctionDefinition","parameters":{"id":2198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2195,"mutability":"mutable","name":"proof","nameLocation":"2380:5:30","nodeType":"VariableDeclaration","scope":2231,"src":"2361:24:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2361:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2194,"nodeType":"ArrayTypeName","src":"2361:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2197,"mutability":"mutable","name":"leaf","nameLocation":"2395:4:30","nodeType":"VariableDeclaration","scope":2231,"src":"2387:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2387:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2360:40:30"},"returnParameters":{"id":2201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2231,"src":"2424:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2424:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2423:9:30"},"scope":2634,"src":"2331:300:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2256,"nodeType":"Block","src":"3174:76:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2249,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"3209:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2250,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"3216:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2251,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3228:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2248,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3191:17:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:44:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2253,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"3239:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3191:52:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2247,"id":2255,"nodeType":"Return","src":"3184:59:30"}]},"documentation":{"id":2232,"nodeType":"StructuredDocumentation","src":"2637:350:30","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2257,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3001:16:30","nodeType":"FunctionDefinition","parameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2235,"mutability":"mutable","name":"proof","nameLocation":"3044:5:30","nodeType":"VariableDeclaration","scope":2257,"src":"3027:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3027:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2234,"nodeType":"ArrayTypeName","src":"3027:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2238,"mutability":"mutable","name":"proofFlags","nameLocation":"3073:10:30","nodeType":"VariableDeclaration","scope":2257,"src":"3059:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2236,"name":"bool","nodeType":"ElementaryTypeName","src":"3059:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2237,"nodeType":"ArrayTypeName","src":"3059:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"root","nameLocation":"3101:4:30","nodeType":"VariableDeclaration","scope":2257,"src":"3093:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3093:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"leaves","nameLocation":"3132:6:30","nodeType":"VariableDeclaration","scope":2257,"src":"3115:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3115:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2242,"nodeType":"ArrayTypeName","src":"3115:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3017:127:30"},"returnParameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2257,"src":"3168:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2245,"name":"bool","nodeType":"ElementaryTypeName","src":"3168:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3167:6:30"},"scope":2634,"src":"2992:258:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2282,"nodeType":"Block","src":"3655:84:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2275,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"3698:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2276,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"3705:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2277,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"3717:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2274,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"3672:25:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3672:52:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2279,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"3728:4:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3672:60:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2273,"id":2281,"nodeType":"Return","src":"3665:67:30"}]},"documentation":{"id":2258,"nodeType":"StructuredDocumentation","src":"3256:200:30","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2283,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3470:24:30","nodeType":"FunctionDefinition","parameters":{"id":2270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2261,"mutability":"mutable","name":"proof","nameLocation":"3523:5:30","nodeType":"VariableDeclaration","scope":2283,"src":"3504:24:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2259,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3504:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2260,"nodeType":"ArrayTypeName","src":"3504:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"proofFlags","nameLocation":"3554:10:30","nodeType":"VariableDeclaration","scope":2283,"src":"3538:26:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2262,"name":"bool","nodeType":"ElementaryTypeName","src":"3538:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2263,"nodeType":"ArrayTypeName","src":"3538:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2266,"mutability":"mutable","name":"root","nameLocation":"3582:4:30","nodeType":"VariableDeclaration","scope":2283,"src":"3574:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2265,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3574:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"leaves","nameLocation":"3613:6:30","nodeType":"VariableDeclaration","scope":2283,"src":"3596:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3596:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2268,"nodeType":"ArrayTypeName","src":"3596:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3494:131:30"},"returnParameters":{"id":2273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2283,"src":"3649:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2271,"name":"bool","nodeType":"ElementaryTypeName","src":"3649:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3648:6:30"},"scope":2634,"src":"3461:278:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2440,"nodeType":"Block","src":"4693:2053:30","statements":[{"assignments":[2299],"declarations":[{"constant":false,"id":2299,"mutability":"mutable","name":"leavesLen","nameLocation":"5085:9:30","nodeType":"VariableDeclaration","scope":2440,"src":"5077:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2298,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2302,"initialValue":{"expression":{"id":2300,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"5097:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5104:6:30","memberName":"length","nodeType":"MemberAccess","src":"5097:13:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5077:33:30"},{"assignments":[2304],"declarations":[{"constant":false,"id":2304,"mutability":"mutable","name":"proofLen","nameLocation":"5128:8:30","nodeType":"VariableDeclaration","scope":2440,"src":"5120:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"5120:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2307,"initialValue":{"expression":{"id":2305,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"5139:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5145:6:30","memberName":"length","nodeType":"MemberAccess","src":"5139:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5120:31:30"},{"assignments":[2309],"declarations":[{"constant":false,"id":2309,"mutability":"mutable","name":"totalHashes","nameLocation":"5169:11:30","nodeType":"VariableDeclaration","scope":2440,"src":"5161:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2308,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2312,"initialValue":{"expression":{"id":2310,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"5183:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5194:6:30","memberName":"length","nodeType":"MemberAccess","src":"5183:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5161:39:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5252:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2315,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"5264:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:20:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5275:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5252:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2319,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"5280:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:39:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5293:33:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2313,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5244:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5244:83:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2323,"nodeType":"ExpressionStatement","src":"5244:83:30"},{"assignments":[2328],"declarations":[{"constant":false,"id":2328,"mutability":"mutable","name":"hashes","nameLocation":"5589:6:30","nodeType":"VariableDeclaration","scope":2440,"src":"5572:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5572:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2327,"nodeType":"ArrayTypeName","src":"5572:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2334,"initialValue":{"arguments":[{"id":2332,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"5612:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5598:13:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5602:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2330,"nodeType":"ArrayTypeName","src":"5602:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5598:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5572:52:30"},{"assignments":[2336],"declarations":[{"constant":false,"id":2336,"mutability":"mutable","name":"leafPos","nameLocation":"5642:7:30","nodeType":"VariableDeclaration","scope":2440,"src":"5634:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"5634:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2338,"initialValue":{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5652:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5634:19:30"},{"assignments":[2340],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"hashPos","nameLocation":"5671:7:30","nodeType":"VariableDeclaration","scope":2440,"src":"5663:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"5663:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5681:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5663:19:30"},{"assignments":[2344],"declarations":[{"constant":false,"id":2344,"mutability":"mutable","name":"proofPos","nameLocation":"5700:8:30","nodeType":"VariableDeclaration","scope":2440,"src":"5692:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2343,"name":"uint256","nodeType":"ElementaryTypeName","src":"5692:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2346,"initialValue":{"hexValue":"30","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5711:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5692:20:30"},{"body":{"id":2405,"nodeType":"Block","src":"6130:292:30","statements":[{"assignments":[2358],"declarations":[{"constant":false,"id":2358,"mutability":"mutable","name":"a","nameLocation":"6152:1:30","nodeType":"VariableDeclaration","scope":2405,"src":"6144:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6144:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2371,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2359,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"6156:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2360,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6166:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6156:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2366,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"6198:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2369,"indexExpression":{"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6205:9:30","subExpression":{"id":2367,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"6205:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6198:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6156:59:30","trueExpression":{"baseExpression":{"id":2362,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6178:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2365,"indexExpression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6185:9:30","subExpression":{"id":2363,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"6185:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6178:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6144:71:30"},{"assignments":[2373],"declarations":[{"constant":false,"id":2373,"mutability":"mutable","name":"b","nameLocation":"6237:1:30","nodeType":"VariableDeclaration","scope":2405,"src":"6229:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6229:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2395,"initialValue":{"condition":{"baseExpression":{"id":2374,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"6241:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2376,"indexExpression":{"id":2375,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"6252:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6241:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2390,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6353:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2393,"indexExpression":{"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6359:10:30","subExpression":{"id":2391,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"6359:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6353:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6241:129:30","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"6274:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2378,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6284:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6274:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2384,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"6316:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2387,"indexExpression":{"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6323:9:30","subExpression":{"id":2385,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"6323:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6316:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6274:59:30","trueExpression":{"baseExpression":{"id":2380,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6296:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2383,"indexExpression":{"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6303:9:30","subExpression":{"id":2381,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"6303:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6296:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6273:61:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6229:141:30"},{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2396,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"6384:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2398,"indexExpression":{"id":2397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"6391:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6384:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2400,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"6406:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2401,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"6409:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2399,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"6396:9:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:15:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6384:27:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2404,"nodeType":"ExpressionStatement","src":"6384:27:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"6108:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2352,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"6112:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6108:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2406,"initializationExpression":{"assignments":[2348],"declarations":[{"constant":false,"id":2348,"mutability":"mutable","name":"i","nameLocation":"6101:1:30","nodeType":"VariableDeclaration","scope":2406,"src":"6093:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2347,"name":"uint256","nodeType":"ElementaryTypeName","src":"6093:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2350,"initialValue":{"hexValue":"30","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6105:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6093:13:30"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6125:3:30","subExpression":{"id":2354,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"6125:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"6125:3:30"},"nodeType":"ForStatement","src":"6088:334:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2407,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"6436:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6450:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6436:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2425,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6638:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6650:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6638:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2437,"nodeType":"Block","src":"6700:40:30","statements":[{"expression":{"baseExpression":{"id":2433,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6721:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2435,"indexExpression":{"hexValue":"30","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6727:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6721:8:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2297,"id":2436,"nodeType":"Return","src":"6714:15:30"}]},"id":2438,"nodeType":"IfStatement","src":"6634:106:30","trueBody":{"id":2432,"nodeType":"Block","src":"6653:41:30","statements":[{"expression":{"baseExpression":{"id":2428,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6674:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2430,"indexExpression":{"hexValue":"30","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6681:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6674:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2297,"id":2431,"nodeType":"Return","src":"6667:16:30"}]}},"id":2439,"nodeType":"IfStatement","src":"6432:308:30","trueBody":{"id":2424,"nodeType":"Block","src":"6453:175:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"6475:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2412,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"6487:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:20:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6497:33:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2410,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6467:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6467:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2416,"nodeType":"ExpressionStatement","src":"6467:64:30"},{"id":2423,"nodeType":"UncheckedBlock","src":"6545:73:30","statements":[{"expression":{"baseExpression":{"id":2417,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"6580:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2421,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2418,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"6587:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6601:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6587:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6580:23:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2297,"id":2422,"nodeType":"Return","src":"6573:30:30"}]}]}}]},"documentation":{"id":2284,"nodeType":"StructuredDocumentation","src":"3745:768:30","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":2441,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4527:17:30","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"proof","nameLocation":"4571:5:30","nodeType":"VariableDeclaration","scope":2441,"src":"4554:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4554:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2286,"nodeType":"ArrayTypeName","src":"4554:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"proofFlags","nameLocation":"4600:10:30","nodeType":"VariableDeclaration","scope":2441,"src":"4586:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2288,"name":"bool","nodeType":"ElementaryTypeName","src":"4586:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2289,"nodeType":"ArrayTypeName","src":"4586:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"leaves","nameLocation":"4637:6:30","nodeType":"VariableDeclaration","scope":2441,"src":"4620:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4620:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2292,"nodeType":"ArrayTypeName","src":"4620:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4544:105:30"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"merkleRoot","nameLocation":"4681:10:30","nodeType":"VariableDeclaration","scope":2441,"src":"4673:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4673:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4672:20:30"},"scope":2634,"src":"4518:2228:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2598,"nodeType":"Block","src":"7146:2053:30","statements":[{"assignments":[2457],"declarations":[{"constant":false,"id":2457,"mutability":"mutable","name":"leavesLen","nameLocation":"7538:9:30","nodeType":"VariableDeclaration","scope":2598,"src":"7530:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"7530:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2460,"initialValue":{"expression":{"id":2458,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"7550:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7557:6:30","memberName":"length","nodeType":"MemberAccess","src":"7550:13:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7530:33:30"},{"assignments":[2462],"declarations":[{"constant":false,"id":2462,"mutability":"mutable","name":"proofLen","nameLocation":"7581:8:30","nodeType":"VariableDeclaration","scope":2598,"src":"7573:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"7573:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2465,"initialValue":{"expression":{"id":2463,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"7592:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7598:6:30","memberName":"length","nodeType":"MemberAccess","src":"7592:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7573:31:30"},{"assignments":[2467],"declarations":[{"constant":false,"id":2467,"mutability":"mutable","name":"totalHashes","nameLocation":"7622:11:30","nodeType":"VariableDeclaration","scope":2598,"src":"7614:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"7614:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2470,"initialValue":{"expression":{"id":2468,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"7636:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7647:6:30","memberName":"length","nodeType":"MemberAccess","src":"7636:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7614:39:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7705:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2473,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"7717:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:20:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7728:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7705:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2477,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"7733:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:39:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7746:33:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2471,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7697:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:83:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2481,"nodeType":"ExpressionStatement","src":"7697:83:30"},{"assignments":[2486],"declarations":[{"constant":false,"id":2486,"mutability":"mutable","name":"hashes","nameLocation":"8042:6:30","nodeType":"VariableDeclaration","scope":2598,"src":"8025:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8025:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2485,"nodeType":"ArrayTypeName","src":"8025:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2492,"initialValue":{"arguments":[{"id":2490,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8065:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8051:13:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8055:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2488,"nodeType":"ArrayTypeName","src":"8055:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8051:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8025:52:30"},{"assignments":[2494],"declarations":[{"constant":false,"id":2494,"mutability":"mutable","name":"leafPos","nameLocation":"8095:7:30","nodeType":"VariableDeclaration","scope":2598,"src":"8087:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"8087:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2496,"initialValue":{"hexValue":"30","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8105:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8087:19:30"},{"assignments":[2498],"declarations":[{"constant":false,"id":2498,"mutability":"mutable","name":"hashPos","nameLocation":"8124:7:30","nodeType":"VariableDeclaration","scope":2598,"src":"8116:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"8116:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2500,"initialValue":{"hexValue":"30","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8134:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8116:19:30"},{"assignments":[2502],"declarations":[{"constant":false,"id":2502,"mutability":"mutable","name":"proofPos","nameLocation":"8153:8:30","nodeType":"VariableDeclaration","scope":2598,"src":"8145:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2501,"name":"uint256","nodeType":"ElementaryTypeName","src":"8145:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2504,"initialValue":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8164:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8145:20:30"},{"body":{"id":2563,"nodeType":"Block","src":"8583:292:30","statements":[{"assignments":[2516],"declarations":[{"constant":false,"id":2516,"mutability":"mutable","name":"a","nameLocation":"8605:1:30","nodeType":"VariableDeclaration","scope":2563,"src":"8597:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8597:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2529,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"8609:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2518,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"8619:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8609:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2524,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8651:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2527,"indexExpression":{"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8658:9:30","subExpression":{"id":2525,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"8658:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8651:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8609:59:30","trueExpression":{"baseExpression":{"id":2520,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"8631:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2523,"indexExpression":{"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8638:9:30","subExpression":{"id":2521,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"8638:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8631:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8597:71:30"},{"assignments":[2531],"declarations":[{"constant":false,"id":2531,"mutability":"mutable","name":"b","nameLocation":"8690:1:30","nodeType":"VariableDeclaration","scope":2563,"src":"8682:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8682:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2553,"initialValue":{"condition":{"baseExpression":{"id":2532,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8694:10:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2534,"indexExpression":{"id":2533,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"8705:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8694:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2548,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"8806:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2551,"indexExpression":{"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8812:10:30","subExpression":{"id":2549,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"8812:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8806:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8694:129:30","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"8727:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2536,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"8737:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8727:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2542,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8769:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2545,"indexExpression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8776:9:30","subExpression":{"id":2543,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"8776:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8769:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8727:59:30","trueExpression":{"baseExpression":{"id":2538,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"8749:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2541,"indexExpression":{"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8756:9:30","subExpression":{"id":2539,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"8756:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8749:17:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2547,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8726:61:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8682:141:30"},{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2554,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"8837:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2556,"indexExpression":{"id":2555,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"8844:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8837:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2558,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"8859:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2559,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"8862:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2557,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"8849:9:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8849:15:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8837:27:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2562,"nodeType":"ExpressionStatement","src":"8837:27:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"8561:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2510,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8565:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8561:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2564,"initializationExpression":{"assignments":[2506],"declarations":[{"constant":false,"id":2506,"mutability":"mutable","name":"i","nameLocation":"8554:1:30","nodeType":"VariableDeclaration","scope":2564,"src":"8546:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"8546:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2508,"initialValue":{"hexValue":"30","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8558:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8546:13:30"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8578:3:30","subExpression":{"id":2512,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"8578:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2514,"nodeType":"ExpressionStatement","src":"8578:3:30"},"nodeType":"ForStatement","src":"8541:334:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2565,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"8889:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8903:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8889:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"9091:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9103:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9091:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2595,"nodeType":"Block","src":"9153:40:30","statements":[{"expression":{"baseExpression":{"id":2591,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"9174:5:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2593,"indexExpression":{"hexValue":"30","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9180:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9174:8:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2455,"id":2594,"nodeType":"Return","src":"9167:15:30"}]},"id":2596,"nodeType":"IfStatement","src":"9087:106:30","trueBody":{"id":2590,"nodeType":"Block","src":"9106:41:30","statements":[{"expression":{"baseExpression":{"id":2586,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"9127:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2588,"indexExpression":{"hexValue":"30","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9134:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9127:9:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2455,"id":2589,"nodeType":"Return","src":"9120:16:30"}]}},"id":2597,"nodeType":"IfStatement","src":"8885:308:30","trueBody":{"id":2582,"nodeType":"Block","src":"8906:175:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2569,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"8928:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2570,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"8940:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8928:20:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8950:33:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8920:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8920:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2574,"nodeType":"ExpressionStatement","src":"8920:64:30"},{"id":2581,"nodeType":"UncheckedBlock","src":"8998:73:30","statements":[{"expression":{"baseExpression":{"id":2575,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"9033:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2579,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2576,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"9040:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9054:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9040:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9033:23:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2455,"id":2580,"nodeType":"Return","src":"9026:30:30"}]}]}}]},"documentation":{"id":2442,"nodeType":"StructuredDocumentation","src":"6752:202:30","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2599,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6968:25:30","nodeType":"FunctionDefinition","parameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"proof","nameLocation":"7022:5:30","nodeType":"VariableDeclaration","scope":2599,"src":"7003:24:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7003:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2444,"nodeType":"ArrayTypeName","src":"7003:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"proofFlags","nameLocation":"7053:10:30","nodeType":"VariableDeclaration","scope":2599,"src":"7037:26:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2446,"name":"bool","nodeType":"ElementaryTypeName","src":"7037:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2447,"nodeType":"ArrayTypeName","src":"7037:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2451,"mutability":"mutable","name":"leaves","nameLocation":"7090:6:30","nodeType":"VariableDeclaration","scope":2599,"src":"7073:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7073:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2450,"nodeType":"ArrayTypeName","src":"7073:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6993:109:30"},"returnParameters":{"id":2455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2454,"mutability":"mutable","name":"merkleRoot","nameLocation":"7134:10:30","nodeType":"VariableDeclaration","scope":2599,"src":"7126:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7126:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7125:20:30"},"scope":2634,"src":"6959:2240:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2621,"nodeType":"Block","src":"9277:75:30","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2608,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"9294:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2609,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"9298:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9294:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2616,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"9340:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2617,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"9343:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2615,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"9325:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9325:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9294:51:30","trueExpression":{"arguments":[{"id":2612,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"9317:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2613,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"9320:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2611,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"9302:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2607,"id":2620,"nodeType":"Return","src":"9287:58:30"}]},"id":2622,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"9214:9:30","nodeType":"FunctionDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"a","nameLocation":"9232:1:30","nodeType":"VariableDeclaration","scope":2622,"src":"9224:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9224:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"b","nameLocation":"9243:1:30","nodeType":"VariableDeclaration","scope":2622,"src":"9235:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9235:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9223:22:30"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2622,"src":"9268:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9268:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9267:9:30"},"scope":2634,"src":"9205:147:30","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2632,"nodeType":"Block","src":"9441:178:30","statements":[{"AST":{"nativeSrc":"9503:110:30","nodeType":"YulBlock","src":"9503:110:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9524:4:30","nodeType":"YulLiteral","src":"9524:4:30","type":"","value":"0x00"},{"name":"a","nativeSrc":"9530:1:30","nodeType":"YulIdentifier","src":"9530:1:30"}],"functionName":{"name":"mstore","nativeSrc":"9517:6:30","nodeType":"YulIdentifier","src":"9517:6:30"},"nativeSrc":"9517:15:30","nodeType":"YulFunctionCall","src":"9517:15:30"},"nativeSrc":"9517:15:30","nodeType":"YulExpressionStatement","src":"9517:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9552:4:30","nodeType":"YulLiteral","src":"9552:4:30","type":"","value":"0x20"},{"name":"b","nativeSrc":"9558:1:30","nodeType":"YulIdentifier","src":"9558:1:30"}],"functionName":{"name":"mstore","nativeSrc":"9545:6:30","nodeType":"YulIdentifier","src":"9545:6:30"},"nativeSrc":"9545:15:30","nodeType":"YulFunctionCall","src":"9545:15:30"},"nativeSrc":"9545:15:30","nodeType":"YulExpressionStatement","src":"9545:15:30"},{"nativeSrc":"9573:30:30","nodeType":"YulAssignment","src":"9573:30:30","value":{"arguments":[{"kind":"number","nativeSrc":"9592:4:30","nodeType":"YulLiteral","src":"9592:4:30","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9598:4:30","nodeType":"YulLiteral","src":"9598:4:30","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9582:9:30","nodeType":"YulIdentifier","src":"9582:9:30"},"nativeSrc":"9582:21:30","nodeType":"YulFunctionCall","src":"9582:21:30"},"variableNames":[{"name":"value","nativeSrc":"9573:5:30","nodeType":"YulIdentifier","src":"9573:5:30"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2624,"isOffset":false,"isSlot":false,"src":"9530:1:30","valueSize":1},{"declaration":2626,"isOffset":false,"isSlot":false,"src":"9558:1:30","valueSize":1},{"declaration":2629,"isOffset":false,"isSlot":false,"src":"9573:5:30","valueSize":1}],"id":2631,"nodeType":"InlineAssembly","src":"9494:119:30"}]},"id":2633,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9367:14:30","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2624,"mutability":"mutable","name":"a","nameLocation":"9390:1:30","nodeType":"VariableDeclaration","scope":2633,"src":"9382:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9382:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2626,"mutability":"mutable","name":"b","nameLocation":"9401:1:30","nodeType":"VariableDeclaration","scope":2633,"src":"9393:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9393:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9381:22:30"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"value","nameLocation":"9434:5:30","nodeType":"VariableDeclaration","scope":2633,"src":"9426:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9426:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9425:15:30"},"scope":2634,"src":"9358:261:30","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2635,"src":"802:8819:30","usedErrors":[],"usedEvents":[]}],"src":"118:9504:30"},"id":30},"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol","exportedSymbols":{"IForwarderRegistry":[750],"LimitedOCPointsMerkleClaim":[3177],"LimitedOCPointsMerkleClaimMock":[2676]},"id":2677,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2636,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"contracts/payment/LimitedOCPointsMerkleClaim.sol","file":"../../payment/LimitedOCPointsMerkleClaim.sol","id":2638,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2677,"sourceUnit":3178,"src":"57:88:31","symbolAliases":[{"foreign":{"id":2637,"name":"LimitedOCPointsMerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"65:26:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2640,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2677,"sourceUnit":751,"src":"146:114:31","symbolAliases":[{"foreign":{"id":2639,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"154:18:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2641,"name":"LimitedOCPointsMerkleClaim","nameLocations":["305:26:31"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"305:26:31"},"id":2642,"nodeType":"InheritanceSpecifier","src":"305:26:31"}],"canonicalName":"LimitedOCPointsMerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2676,"linearizedBaseContracts":[2676,3177,604,736,724,847,55,437,454,103,1065,1996,149],"name":"LimitedOCPointsMerkleClaimMock","nameLocation":"271:30:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":2654,"nodeType":"Block","src":"482:2:31","statements":[]},"id":2655,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2650,"name":"ecpContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"443:18:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2651,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"463:17:31","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"id":2652,"kind":"baseConstructorSpecifier","modifierName":{"id":2649,"name":"LimitedOCPointsMerkleClaim","nameLocations":["416:26:31"],"nodeType":"IdentifierPath","referencedDeclaration":3177,"src":"416:26:31"},"nodeType":"ModifierInvocation","src":"416:65:31"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"ecpContractAddress","nameLocation":"358:18:31","nodeType":"VariableDeclaration","scope":2655,"src":"350:26:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2643,"name":"address","nodeType":"ElementaryTypeName","src":"350:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2647,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"397:17:31","nodeType":"VariableDeclaration","scope":2655,"src":"378:36:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":2646,"nodeType":"UserDefinedTypeName","pathNode":{"id":2645,"name":"IForwarderRegistry","nameLocations":["378:18:31"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"378:18:31"},"referencedDeclaration":750,"src":"378:18:31","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"349:66:31"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[],"src":"482:0:31"},"scope":2676,"src":"338:146:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2664,"nodeType":"Block","src":"659:36:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2661,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3162],"referencedDeclaration":3162,"src":"676:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"676:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2660,"id":2663,"nodeType":"Return","src":"669:19:31"}]},"documentation":{"id":2656,"nodeType":"StructuredDocumentation","src":"490:109:31","text":"@notice Internal function to access the current msg.sender.\n @return The current msg.sender value."},"functionSelector":"d1a91ff2","id":2665,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"613:11:31","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[],"src":"624:2:31"},"returnParameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2665,"src":"650:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2658,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"649:9:31"},"scope":2676,"src":"604:91:31","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2674,"nodeType":"Block","src":"871:34:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2671,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[3176],"referencedDeclaration":3176,"src":"888:8:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"888:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2670,"id":2673,"nodeType":"Return","src":"881:17:31"}]},"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"701:105:31","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":2675,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"820:9:31","nodeType":"FunctionDefinition","parameters":{"id":2667,"nodeType":"ParameterList","parameters":[],"src":"829:2:31"},"returnParameters":{"id":2670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2675,"src":"855:14:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2668,"name":"bytes","nodeType":"ElementaryTypeName","src":"855:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"854:16:31"},"scope":2676,"src":"811:94:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2677,"src":"262:645:31","usedErrors":[19,117,442,2708,2717,2728,2739,2746,2751,2758],"usedEvents":[133,2824,2835]}],"src":"32:876:31"},"id":31},"contracts/payment/LimitedOCPointsMerkleClaim.sol":{"ast":{"absolutePath":"contracts/payment/LimitedOCPointsMerkleClaim.sol","exportedSymbols":{"Context":[1996],"ContractOwnership":[55],"ContractOwnershipStorage":[407],"ForwarderRegistryContext":[604],"ForwarderRegistryContextBase":[724],"IForwarderRegistry":[750],"IPoints":[11],"InconsistentArrayLengths":[19],"LimitedOCPointsMerkleClaim":[3177],"MerkleProof":[2634],"TokenRecovery":[847]},"id":3178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2678,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:32"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2680,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":1997,"src":"57:66:32","symbolAliases":[{"foreign":{"id":2679,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"65:7:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2682,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":2635,"src":"124:87:32","symbolAliases":[{"foreign":{"id":2681,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"132:11:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","id":2684,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":23,"src":"212:96:32","symbolAliases":[{"foreign":{"id":2683,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"220:24:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2686,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":56,"src":"309:101:32","symbolAliases":[{"foreign":{"id":2685,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"317:17:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":408,"src":"411:125:32","symbolAliases":[{"foreign":{"id":2687,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"419:24:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":2690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":848,"src":"537:95:32","symbolAliases":[{"foreign":{"id":2689,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"545:13:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":605,"src":"633:115:32","symbolAliases":[{"foreign":{"id":2691,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"641:24:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":725,"src":"749:128:32","symbolAliases":[{"foreign":{"id":2693,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"757:28:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2696,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":751,"src":"878:114:32","symbolAliases":[{"foreign":{"id":2695,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"886:18:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol","file":"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol","id":2698,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3178,"sourceUnit":12,"src":"993:106:32","symbolAliases":[{"foreign":{"id":2697,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1001:7:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2700,"name":"TokenRecovery","nameLocations":["1495:13:32"],"nodeType":"IdentifierPath","referencedDeclaration":847,"src":"1495:13:32"},"id":2701,"nodeType":"InheritanceSpecifier","src":"1495:13:32"},{"baseName":{"id":2702,"name":"ForwarderRegistryContext","nameLocations":["1510:24:32"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"1510:24:32"},"id":2703,"nodeType":"InheritanceSpecifier","src":"1510:24:32"}],"canonicalName":"LimitedOCPointsMerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":2699,"nodeType":"StructuredDocumentation","src":"1101:355:32","text":"@title LimitedOCPointsMerkleClaim\n @notice This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.\n @notice Each epoch has a fixed total amount that gets depleted as users claim their allocations.\n @notice Claims are based on merkle proofs and are subject to time constraints and pool availability."},"fullyImplemented":true,"id":3177,"linearizedBaseContracts":[3177,604,736,724,847,55,437,454,103,1065,1996,149],"name":"LimitedOCPointsMerkleClaim","nameLocation":"1465:26:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2704,"nodeType":"StructuredDocumentation","src":"1541:151:32","text":"@notice Thrown when the reward contract address is invalid.\n @param InvalidRewardContractAddress The address of the invalid reward contract."},"errorSelector":"d5361668","id":2708,"name":"InvalidRewardContractAddress","nameLocation":"1703:28:32","nodeType":"ErrorDefinition","parameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"InvalidRewardContractAddress","nameLocation":"1740:28:32","nodeType":"VariableDeclaration","scope":2708,"src":"1732:36:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2705,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1731:38:32"},"src":"1697:73:32"},{"documentation":{"id":2709,"nodeType":"StructuredDocumentation","src":"1776:247:32","text":"@notice Thrown when trying to claim outside the valid time epoch.\n @param currentTime The current block timestamp.\n @param startTime The start time of the claiming epoch.\n @param endTime The end time of the claiming epoch."},"errorSelector":"c06e9f3a","id":2717,"name":"ClaimingEpochNotActive","nameLocation":"2034:22:32","nodeType":"ErrorDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2711,"mutability":"mutable","name":"currentTime","nameLocation":"2065:11:32","nodeType":"VariableDeclaration","scope":2717,"src":"2057:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2057:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2713,"mutability":"mutable","name":"startTime","nameLocation":"2086:9:32","nodeType":"VariableDeclaration","scope":2717,"src":"2078:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2712,"name":"uint256","nodeType":"ElementaryTypeName","src":"2078:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"endTime","nameLocation":"2105:7:32","nodeType":"VariableDeclaration","scope":2717,"src":"2097:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2714,"name":"uint256","nodeType":"ElementaryTypeName","src":"2097:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2056:57:32"},"src":"2028:86:32"},{"documentation":{"id":2718,"nodeType":"StructuredDocumentation","src":"2120:280:32","text":"@notice Thrown when trying to claim the same allocation more than once.\n @param recipient The recipient of the claim.\n @param amount The amount being claimed.\n @param reasonCode The reason code for the deposit.\n @param epochId The epoch identifier."},"errorSelector":"7635807d","id":2728,"name":"AlreadyClaimed","nameLocation":"2411:14:32","nodeType":"ErrorDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"recipient","nameLocation":"2434:9:32","nodeType":"VariableDeclaration","scope":2728,"src":"2426:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2719,"name":"address","nodeType":"ElementaryTypeName","src":"2426:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2722,"mutability":"mutable","name":"amount","nameLocation":"2453:6:32","nodeType":"VariableDeclaration","scope":2728,"src":"2445:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2721,"name":"uint256","nodeType":"ElementaryTypeName","src":"2445:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"reasonCode","nameLocation":"2469:10:32","nodeType":"VariableDeclaration","scope":2728,"src":"2461:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2461:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"epochId","nameLocation":"2489:7:32","nodeType":"VariableDeclaration","scope":2728,"src":"2481:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"2481:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2425:72:32"},"src":"2405:93:32"},{"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"2504:256:32","text":"@notice Thrown when a proof cannot be verified.\n @param recipient The recipient of the claim.\n @param amount The amount being claimed.\n @param reasonCode The reason code for the deposit.\n @param epochId The epoch identifier."},"errorSelector":"a041b52e","id":2739,"name":"InvalidProof","nameLocation":"2771:12:32","nodeType":"ErrorDefinition","parameters":{"id":2738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"recipient","nameLocation":"2792:9:32","nodeType":"VariableDeclaration","scope":2739,"src":"2784:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2730,"name":"address","nodeType":"ElementaryTypeName","src":"2784:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"amount","nameLocation":"2811:6:32","nodeType":"VariableDeclaration","scope":2739,"src":"2803:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"2803:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"reasonCode","nameLocation":"2827:10:32","nodeType":"VariableDeclaration","scope":2739,"src":"2819:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2819:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2737,"mutability":"mutable","name":"epochId","nameLocation":"2847:7:32","nodeType":"VariableDeclaration","scope":2739,"src":"2839:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2736,"name":"uint256","nodeType":"ElementaryTypeName","src":"2839:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2783:72:32"},"src":"2765:91:32"},{"documentation":{"id":2740,"nodeType":"StructuredDocumentation","src":"2862:201:32","text":"@notice Thrown when the pool doesn't have enough tokens for the claim.\n @param amountRequested The amount requested to claim.\n @param amountAvailable The amount available in the pool."},"errorSelector":"23090a31","id":2746,"name":"InsufficientPoolAmount","nameLocation":"3074:22:32","nodeType":"ErrorDefinition","parameters":{"id":2745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"amountRequested","nameLocation":"3105:15:32","nodeType":"VariableDeclaration","scope":2746,"src":"3097:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"3097:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2744,"mutability":"mutable","name":"amountAvailable","nameLocation":"3130:15:32","nodeType":"VariableDeclaration","scope":2746,"src":"3122:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2743,"name":"uint256","nodeType":"ElementaryTypeName","src":"3122:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3096:50:32"},"src":"3068:79:32"},{"documentation":{"id":2747,"nodeType":"StructuredDocumentation","src":"3153:107:32","text":"@notice Thrown when trying to access a non-existent epoch.\n @param epochId The epoch identifier."},"errorSelector":"07cba261","id":2751,"name":"ClaimEpochNotFound","nameLocation":"3271:18:32","nodeType":"ErrorDefinition","parameters":{"id":2750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"epochId","nameLocation":"3298:7:32","nodeType":"VariableDeclaration","scope":2751,"src":"3290:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2748,"name":"uint256","nodeType":"ElementaryTypeName","src":"3290:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3289:17:32"},"src":"3265:42:32"},{"documentation":{"id":2752,"nodeType":"StructuredDocumentation","src":"3313:144:32","text":"@notice Thrown when the start time is not before the end time.\n @param startTime The start time.\n @param endTime The end time."},"errorSelector":"779acdff","id":2758,"name":"InvalidClaimWindow","nameLocation":"3468:18:32","nodeType":"ErrorDefinition","parameters":{"id":2757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2754,"mutability":"mutable","name":"startTime","nameLocation":"3495:9:32","nodeType":"VariableDeclaration","scope":2758,"src":"3487:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2753,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2756,"mutability":"mutable","name":"endTime","nameLocation":"3514:7:32","nodeType":"VariableDeclaration","scope":2758,"src":"3506:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2755,"name":"uint256","nodeType":"ElementaryTypeName","src":"3506:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3486:36:32"},"src":"3462:61:32"},{"canonicalName":"LimitedOCPointsMerkleClaim.ClaimError","documentation":{"id":2759,"nodeType":"StructuredDocumentation","src":"3529:64:32","text":"@notice Enum representing different claim validation errors."},"id":2765,"members":[{"id":2760,"name":"NoError","nameLocation":"3624:7:32","nodeType":"EnumValue","src":"3624:7:32"},{"id":2761,"name":"ClaimEpochNotFound","nameLocation":"3641:18:32","nodeType":"EnumValue","src":"3641:18:32"},{"id":2762,"name":"ClaimingEpochNotActive","nameLocation":"3669:22:32","nodeType":"EnumValue","src":"3669:22:32"},{"id":2763,"name":"AlreadyClaimed","nameLocation":"3701:14:32","nodeType":"EnumValue","src":"3701:14:32"},{"id":2764,"name":"InsufficientPoolAmount","nameLocation":"3725:22:32","nodeType":"EnumValue","src":"3725:22:32"}],"name":"ClaimError","nameLocation":"3603:10:32","nodeType":"EnumDefinition","src":"3598:155:32"},{"global":false,"id":2769,"libraryName":{"id":2766,"name":"ContractOwnershipStorage","nameLocations":["3765:24:32"],"nodeType":"IdentifierPath","referencedDeclaration":407,"src":"3765:24:32"},"nodeType":"UsingForDirective","src":"3759:67:32","typeName":{"id":2768,"nodeType":"UserDefinedTypeName","pathNode":{"id":2767,"name":"ContractOwnershipStorage.Layout","nameLocations":["3794:24:32","3819:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":180,"src":"3794:31:32"},"referencedDeclaration":180,"src":"3794:31:32","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":2773,"libraryName":{"id":2770,"name":"MerkleProof","nameLocations":["3837:11:32"],"nodeType":"IdentifierPath","referencedDeclaration":2634,"src":"3837:11:32"},"nodeType":"UsingForDirective","src":"3831:32:32","typeName":{"baseType":{"id":2771,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3853:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2772,"nodeType":"ArrayTypeName","src":"3853:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":true,"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"3869:54:32","text":"@notice The role identifier for the operator role."},"functionSelector":"f5b541a6","id":2779,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"3952:13:32","nodeType":"VariableDeclaration","scope":3177,"src":"3928:66:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3928:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f50455241544f525f524f4c45","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3978:15:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""},"value":"OPERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""}],"id":2776,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3968:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3968:26:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"4001:47:32","text":"@notice A reference to the reward contract."},"functionSelector":"2d4c2f93","id":2783,"mutability":"immutable","name":"POINTS_CONTRACT","nameLocation":"4078:15:32","nodeType":"VariableDeclaration","scope":3177,"src":"4053:40:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"},"typeName":{"id":2782,"nodeType":"UserDefinedTypeName","pathNode":{"id":2781,"name":"IPoints","nameLocations":["4053:7:32"],"nodeType":"IdentifierPath","referencedDeclaration":11,"src":"4053:7:32"},"referencedDeclaration":11,"src":"4053:7:32","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"}},"visibility":"public"},{"canonicalName":"LimitedOCPointsMerkleClaim.ClaimEpoch","documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"4100:49:32","text":"@notice Struct representing a claiming epoch."},"id":2795,"members":[{"constant":false,"id":2786,"mutability":"mutable","name":"merkleRoot","nameLocation":"4190:10:32","nodeType":"VariableDeclaration","scope":2795,"src":"4182:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4182:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"totalAmount","nameLocation":"4253:11:32","nodeType":"VariableDeclaration","scope":2795,"src":"4245:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"4245:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2790,"mutability":"mutable","name":"amountLeft","nameLocation":"4325:10:32","nodeType":"VariableDeclaration","scope":2795,"src":"4317:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"4317:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2792,"mutability":"mutable","name":"startTime","nameLocation":"4387:9:32","nodeType":"VariableDeclaration","scope":2795,"src":"4379:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2791,"name":"uint256","nodeType":"ElementaryTypeName","src":"4379:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"endTime","nameLocation":"4447:7:32","nodeType":"VariableDeclaration","scope":2795,"src":"4439:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2793,"name":"uint256","nodeType":"ElementaryTypeName","src":"4439:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimEpoch","nameLocation":"4161:10:32","nodeType":"StructDefinition","scope":3177,"src":"4154:340:32","visibility":"public"},{"constant":false,"documentation":{"id":2796,"nodeType":"StructuredDocumentation","src":"4500:34:32","text":"@notice Current epoch counter."},"functionSelector":"eacdc5ff","id":2798,"mutability":"mutable","name":"currentEpochId","nameLocation":"4554:14:32","nodeType":"VariableDeclaration","scope":3177,"src":"4539:29:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2799,"nodeType":"StructuredDocumentation","src":"4575:57:32","text":"@notice Mapping from epoch ID to claiming epoch data."},"functionSelector":"5c9a509b","id":2804,"mutability":"mutable","name":"claimEpochs","nameLocation":"4675:11:32","nodeType":"VariableDeclaration","scope":3177,"src":"4637:49:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimEpoch_$2795_storage_$","typeString":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch)"},"typeName":{"id":2803,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2800,"name":"uint256","nodeType":"ElementaryTypeName","src":"4645:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4637:30:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimEpoch_$2795_storage_$","typeString":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2802,"nodeType":"UserDefinedTypeName","pathNode":{"id":2801,"name":"ClaimEpoch","nameLocations":["4656:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":2795,"src":"4656:10:32"},"referencedDeclaration":2795,"src":"4656:10:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2805,"nodeType":"StructuredDocumentation","src":"4693:68:32","text":"@notice Mapping from epoch ID to user address to claimed status."},"functionSelector":"120aa877","id":2811,"mutability":"mutable","name":"claimed","nameLocation":"4818:7:32","nodeType":"VariableDeclaration","scope":3177,"src":"4766:59:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"typeName":{"id":2810,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"4774:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4766:44:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2809,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2807,"name":"address","nodeType":"ElementaryTypeName","src":"4793:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4785:24:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2808,"name":"bool","nodeType":"ElementaryTypeName","src":"4804:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"4832:338:32","text":"@notice Emitted when a new merkle root is set for an epoch.\n @param epochId The epoch identifier.\n @param merkleRoot The merkle root for this epoch.\n @param totalAmount The total amount available for claiming.\n @param startTime The start time for claiming.\n @param endTime The end time for claiming."},"eventSelector":"331c648136af10432045d8cc15dfaee6ca9568922f85cab02d96d5f5286c8920","id":2824,"name":"MerkleRootSet","nameLocation":"5181:13:32","nodeType":"EventDefinition","parameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"5211:7:32","nodeType":"VariableDeclaration","scope":2824,"src":"5195:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"5195:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2816,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"5228:10:32","nodeType":"VariableDeclaration","scope":2824,"src":"5220:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5220:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2818,"indexed":false,"mutability":"mutable","name":"totalAmount","nameLocation":"5248:11:32","nodeType":"VariableDeclaration","scope":2824,"src":"5240:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"5240:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2820,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"5269:9:32","nodeType":"VariableDeclaration","scope":2824,"src":"5261:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"5261:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2822,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"5288:7:32","nodeType":"VariableDeclaration","scope":2824,"src":"5280:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2821,"name":"uint256","nodeType":"ElementaryTypeName","src":"5280:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5194:102:32"},"src":"5175:122:32"},{"anonymous":false,"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"5303:257:32","text":"@notice Emitted when a reward is claimed.\n @param epochId The epoch identifier.\n @param recipient The recipient of the claim.\n @param amount The amount claimed.\n @param amountLeft The amount left in the pool after this claim."},"eventSelector":"fc6ecd966b430510beae9124efe7dd517ed5286d7ed0ae258f8556c7a9765a44","id":2835,"name":"RewardClaimed","nameLocation":"5571:13:32","nodeType":"EventDefinition","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"5601:7:32","nodeType":"VariableDeclaration","scope":2835,"src":"5585:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"5585:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2829,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"5626:9:32","nodeType":"VariableDeclaration","scope":2835,"src":"5610:25:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2828,"name":"address","nodeType":"ElementaryTypeName","src":"5610:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2831,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5645:6:32","nodeType":"VariableDeclaration","scope":2835,"src":"5637:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"5637:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2833,"indexed":false,"mutability":"mutable","name":"amountLeft","nameLocation":"5661:10:32","nodeType":"VariableDeclaration","scope":2835,"src":"5653:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2832,"name":"uint256","nodeType":"ElementaryTypeName","src":"5653:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5584:88:32"},"src":"5565:108:32"},{"body":{"id":2869,"nodeType":"Block","src":"6138:198:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2851,"name":"rewardContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"6152:21:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6185:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6177:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2852,"name":"address","nodeType":"ElementaryTypeName","src":"6177:7:32","typeDescriptions":{}}},"id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6177:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6152:35:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2862,"nodeType":"IfStatement","src":"6148:124:32","trueBody":{"id":2861,"nodeType":"Block","src":"6189:83:32","statements":[{"errorCall":{"arguments":[{"id":2858,"name":"rewardContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"6239:21:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2857,"name":"InvalidRewardContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"6210:28:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6210:51:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2860,"nodeType":"RevertStatement","src":"6203:58:32"}]}},{"expression":{"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2863,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"6281:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2865,"name":"rewardContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"6307:21:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2864,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"6299:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPoints_$11_$","typeString":"type(contract IPoints)"}},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6299:30:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"}},"src":"6281:48:32","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"}},"id":2868,"nodeType":"ExpressionStatement","src":"6281:48:32"}]},"documentation":{"id":2836,"nodeType":"StructuredDocumentation","src":"5679:277:32","text":"@notice Constructor\n @param rewardContractAddress The address of the reward contract.\n @param forwarderRegistry The address of the forwarder registry.\n @dev Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address."},"id":2870,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2844,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6082:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6086:6:32","memberName":"sender","nodeType":"MemberAccess","src":"6082:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2846,"kind":"baseConstructorSpecifier","modifierName":{"id":2843,"name":"ContractOwnership","nameLocations":["6064:17:32"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"6064:17:32"},"nodeType":"ModifierInvocation","src":"6064:29:32"},{"arguments":[{"id":2848,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"6119:17:32","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}}],"id":2849,"kind":"baseConstructorSpecifier","modifierName":{"id":2847,"name":"ForwarderRegistryContext","nameLocations":["6094:24:32"],"nodeType":"IdentifierPath","referencedDeclaration":604,"src":"6094:24:32"},"nodeType":"ModifierInvocation","src":"6094:43:32"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"rewardContractAddress","nameLocation":"5990:21:32","nodeType":"VariableDeclaration","scope":2870,"src":"5982:29:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2837,"name":"address","nodeType":"ElementaryTypeName","src":"5982:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"6040:17:32","nodeType":"VariableDeclaration","scope":2870,"src":"6021:36:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"},"typeName":{"id":2840,"nodeType":"UserDefinedTypeName","pathNode":{"id":2839,"name":"IForwarderRegistry","nameLocations":["6021:18:32"],"nodeType":"IdentifierPath","referencedDeclaration":750,"src":"6021:18:32"},"referencedDeclaration":750,"src":"6021:18:32","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$750","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"5972:91:32"},"returnParameters":{"id":2850,"nodeType":"ParameterList","parameters":[],"src":"6138:0:32"},"scope":3177,"src":"5961:375:32","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2929,"nodeType":"Block","src":"7007:618:32","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2887,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[3162],"referencedDeclaration":3162,"src":"7074:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7074:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2882,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"7017:24:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$407_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7042:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":406,"src":"7017:31:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7017:33:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$180_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7051:22:32","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":374,"src":"7017:56:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$180_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$180_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7017:70:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2890,"nodeType":"ExpressionStatement","src":"7017:70:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2891,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"7110:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2892,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"7123:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7110:20:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2900,"nodeType":"IfStatement","src":"7106:96:32","trueBody":{"id":2899,"nodeType":"Block","src":"7132:70:32","statements":[{"errorCall":{"arguments":[{"id":2895,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"7172:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2896,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"7183:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2894,"name":"InvalidClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"7153:18:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7153:38:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2898,"nodeType":"RevertStatement","src":"7146:45:32"}]}},{"assignments":[2902],"declarations":[{"constant":false,"id":2902,"mutability":"mutable","name":"epochId","nameLocation":"7220:7:32","nodeType":"VariableDeclaration","scope":2929,"src":"7212:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"7212:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2904,"initialValue":{"id":2903,"name":"currentEpochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"7230:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7212:32:32"},{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2905,"name":"claimEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"7254:11:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimEpoch_$2795_storage_$","typeString":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref)"}},"id":2907,"indexExpression":{"id":2906,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"7266:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7254:20:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2909,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"7314:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2910,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"7351:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2911,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"7388:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2912,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"7424:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2913,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"7456:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2908,"name":"ClaimEpoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"7277:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimEpoch_$2795_storage_ptr_$","typeString":"type(struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer)"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["7302:10:32","7338:11:32","7376:10:32","7413:9:32","7447:7:32"],"names":["merkleRoot","totalAmount","amountLeft","startTime","endTime"],"nodeType":"FunctionCall","src":"7277:197:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_memory_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch memory"}},"src":"7254:220:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref"}},"id":2916,"nodeType":"ExpressionStatement","src":"7254:220:32"},{"id":2920,"nodeType":"UncheckedBlock","src":"7485:51:32","statements":[{"expression":{"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7509:16:32","subExpression":{"id":2917,"name":"currentEpochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"7511:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2919,"nodeType":"ExpressionStatement","src":"7509:16:32"}]},{"eventCall":{"arguments":[{"id":2922,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"7565:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2923,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"7574:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2924,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"7586:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2925,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"7599:9:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2926,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"7610:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2921,"name":"MerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"7551:13:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,bytes32,uint256,uint256,uint256)"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7551:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2928,"nodeType":"EmitStatement","src":"7546:72:32"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"6342:513:32","text":"@notice Sets a new merkle root for a claiming epoch.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InvalidClaimWindow} if startTime is not before endTime.\n @dev Emits a {MerkleRootSet} event.\n @param merkleRoot The merkle root for this epoch.\n @param totalAmount The total amount available for claiming in this epoch.\n @param startTime The start time for claiming.\n @param endTime The end time for claiming."},"functionSelector":"833d47b6","id":2930,"implemented":true,"kind":"function","modifiers":[],"name":"setMerkleRoot","nameLocation":"6869:13:32","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"merkleRoot","nameLocation":"6900:10:32","nodeType":"VariableDeclaration","scope":2930,"src":"6892:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6892:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"totalAmount","nameLocation":"6928:11:32","nodeType":"VariableDeclaration","scope":2930,"src":"6920:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2874,"name":"uint256","nodeType":"ElementaryTypeName","src":"6920:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"startTime","nameLocation":"6957:9:32","nodeType":"VariableDeclaration","scope":2930,"src":"6949:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2876,"name":"uint256","nodeType":"ElementaryTypeName","src":"6949:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"endTime","nameLocation":"6984:7:32","nodeType":"VariableDeclaration","scope":2930,"src":"6976:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"6976:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6882:115:32"},"returnParameters":{"id":2881,"nodeType":"ParameterList","parameters":[],"src":"7007:0:32"},"scope":3177,"src":"6860:765:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3073,"nodeType":"Block","src":"8608:1107:32","statements":[{"assignments":[2947],"declarations":[{"constant":false,"id":2947,"mutability":"mutable","name":"epoch","nameLocation":"8637:5:32","nodeType":"VariableDeclaration","scope":3073,"src":"8618:24:32","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch"},"typeName":{"id":2946,"nodeType":"UserDefinedTypeName","pathNode":{"id":2945,"name":"ClaimEpoch","nameLocations":["8618:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":2795,"src":"8618:10:32"},"referencedDeclaration":2795,"src":"8618:10:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch"}},"visibility":"internal"}],"id":2951,"initialValue":{"baseExpression":{"id":2948,"name":"claimEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"8645:11:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimEpoch_$2795_storage_$","typeString":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref)"}},"id":2950,"indexExpression":{"id":2949,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"8657:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8645:20:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8618:47:32"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2952,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"8688:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":2953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8694:10:32","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2786,"src":"8688:16:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8716:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8708:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8708:7:32","typeDescriptions":{}}},"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8708:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8688:30:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2964,"nodeType":"IfStatement","src":"8684:95:32","trueBody":{"id":2963,"nodeType":"Block","src":"8720:59:32","statements":[{"errorCall":{"arguments":[{"id":2960,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"8760:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2959,"name":"ClaimEpochNotFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"8741:18:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8741:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2962,"nodeType":"RevertStatement","src":"8734:34:32"}]}},{"assignments":[2966],"declarations":[{"constant":false,"id":2966,"mutability":"mutable","name":"currentTime","nameLocation":"8797:11:32","nodeType":"VariableDeclaration","scope":3073,"src":"8789:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2965,"name":"uint256","nodeType":"ElementaryTypeName","src":"8789:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2969,"initialValue":{"expression":{"id":2967,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8811:5:32","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8817:9:32","memberName":"timestamp","nodeType":"MemberAccess","src":"8811:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8789:37:32"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2970,"name":"currentTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"8840:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2971,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"8854:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":2972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8860:9:32","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"8854:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8840:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2974,"name":"currentTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"8873:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2975,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"8887:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":2976,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8893:7:32","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":2794,"src":"8887:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8873:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8840:60:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2988,"nodeType":"IfStatement","src":"8836:165:32","trueBody":{"id":2987,"nodeType":"Block","src":"8902:99:32","statements":[{"errorCall":{"arguments":[{"id":2980,"name":"currentTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"8946:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2981,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"8959:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":2982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8965:9:32","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"8959:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2983,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"8976:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":2984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8982:7:32","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":2794,"src":"8976:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2979,"name":"ClaimingEpochNotActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"8923:22:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8923:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2986,"nodeType":"RevertStatement","src":"8916:74:32"}]}},{"condition":{"baseExpression":{"baseExpression":{"id":2989,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9015:7:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"}},"id":2991,"indexExpression":{"id":2990,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9023:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9015:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2993,"indexExpression":{"id":2992,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9032:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9015:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3002,"nodeType":"IfStatement","src":"9011:119:32","trueBody":{"id":3001,"nodeType":"Block","src":"9044:86:32","statements":[{"errorCall":{"arguments":[{"id":2995,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9080:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2996,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9091:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2997,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"9099:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2998,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9111:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2994,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"9065:14:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bytes32,uint256) pure"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:54:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3000,"nodeType":"RevertStatement","src":"9058:61:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3003,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"9144:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3004,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9150:10:32","memberName":"amountLeft","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"9144:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3005,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9163:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9144:25:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3014,"nodeType":"IfStatement","src":"9140:111:32","trueBody":{"id":3013,"nodeType":"Block","src":"9171:80:32","statements":[{"errorCall":{"arguments":[{"id":3008,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9215:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3009,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"9223:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9229:10:32","memberName":"amountLeft","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"9223:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3007,"name":"InsufficientPoolAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"9192:22:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9192:48:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3012,"nodeType":"RevertStatement","src":"9185:55:32"}]}},{"assignments":[3016],"declarations":[{"constant":false,"id":3016,"mutability":"mutable","name":"leaf","nameLocation":"9269:4:32","nodeType":"VariableDeclaration","scope":3073,"src":"9261:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9261:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3026,"initialValue":{"arguments":[{"arguments":[{"id":3020,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9303:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3021,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9314:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3022,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"9322:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3023,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9334:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3018,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9286:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9290:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"9286:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:56:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3017,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9276:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9276:67:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9261:82:32"},{"condition":{"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9357:45:32","subExpression":{"arguments":[{"expression":{"id":3029,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"9379:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9385:10:32","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2786,"src":"9379:16:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3031,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"9397:4:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3027,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"9358:5:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9364:14:32","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":2151,"src":"9358:20:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_calldata_ptr_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9358:44:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3042,"nodeType":"IfStatement","src":"9353:135:32","trueBody":{"id":3041,"nodeType":"Block","src":"9404:84:32","statements":[{"errorCall":{"arguments":[{"id":3035,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9438:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3036,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9449:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3037,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"9457:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3038,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9469:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3034,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"9425:12:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bytes32,uint256) pure"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9425:52:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3040,"nodeType":"RevertStatement","src":"9418:59:32"}]}},{"expression":{"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3043,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"9498:7:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"}},"id":3046,"indexExpression":{"id":3044,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9506:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9498:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3047,"indexExpression":{"id":3045,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9515:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9498:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9528:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9498:34:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3050,"nodeType":"ExpressionStatement","src":"9498:34:32"},{"expression":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3051,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"9542:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9548:10:32","memberName":"amountLeft","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"9542:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3054,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9562:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9542:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3056,"nodeType":"ExpressionStatement","src":"9542:26:32"},{"expression":{"arguments":[{"id":3060,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9603:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3061,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9614:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3062,"name":"reasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"9622:10:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3057,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"9579:15:32","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$11","typeString":"contract IPoints"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9595:7:32","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":10,"src":"9579:23:32","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,bytes32) external"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9579:54:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"ExpressionStatement","src":"9579:54:32"},{"eventCall":{"arguments":[{"id":3066,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"9663:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3067,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"9672:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3068,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"9683:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3069,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"9691:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3070,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9697:10:32","memberName":"amountLeft","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"9691:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3065,"name":"RewardClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"9649:13:32","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256)"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9649:59:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3072,"nodeType":"EmitStatement","src":"9644:64:32"}]},"documentation":{"id":2931,"nodeType":"StructuredDocumentation","src":"7631:804:32","text":"@notice Claims rewards for a given recipient address.\n @dev Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.\n @dev Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.\n @dev Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.\n @dev Reverts with {InvalidProof} if the merkle proof verification fails.\n @dev Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.\n @dev Emits a {RewardClaimed} event.\n @param epochId The epoch identifier.\n @param recipient The recipient for this claim.\n @param amount The amount to be claimed.\n @param reasonCode The reason code for the deposit.\n @param proof The merkle proof for verification."},"functionSelector":"2035a4dd","id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"8449:5:32","nodeType":"FunctionDefinition","parameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2933,"mutability":"mutable","name":"epochId","nameLocation":"8472:7:32","nodeType":"VariableDeclaration","scope":3074,"src":"8464:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2932,"name":"uint256","nodeType":"ElementaryTypeName","src":"8464:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2935,"mutability":"mutable","name":"recipient","nameLocation":"8497:9:32","nodeType":"VariableDeclaration","scope":3074,"src":"8489:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2934,"name":"address","nodeType":"ElementaryTypeName","src":"8489:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2937,"mutability":"mutable","name":"amount","nameLocation":"8524:6:32","nodeType":"VariableDeclaration","scope":3074,"src":"8516:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"8516:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2939,"mutability":"mutable","name":"reasonCode","nameLocation":"8548:10:32","nodeType":"VariableDeclaration","scope":3074,"src":"8540:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8540:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"proof","nameLocation":"8587:5:32","nodeType":"VariableDeclaration","scope":3074,"src":"8568:24:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8568:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2941,"nodeType":"ArrayTypeName","src":"8568:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"8454:144:32"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[],"src":"8608:0:32"},"scope":3177,"src":"8440:1275:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3147,"nodeType":"Block","src":"10565:609:32","statements":[{"assignments":[3089],"declarations":[{"constant":false,"id":3089,"mutability":"mutable","name":"epoch","nameLocation":"10594:5:32","nodeType":"VariableDeclaration","scope":3147,"src":"10575:24:32","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch"},"typeName":{"id":3088,"nodeType":"UserDefinedTypeName","pathNode":{"id":3087,"name":"ClaimEpoch","nameLocations":["10575:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":2795,"src":"10575:10:32"},"referencedDeclaration":2795,"src":"10575:10:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch"}},"visibility":"internal"}],"id":3093,"initialValue":{"baseExpression":{"id":3090,"name":"claimEpochs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"10602:11:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimEpoch_$2795_storage_$","typeString":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref)"}},"id":3092,"indexExpression":{"id":3091,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"10614:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10602:20:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10575:47:32"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3094,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"10645:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3095,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10651:10:32","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2786,"src":"10645:16:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10673:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10665:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10665:7:32","typeDescriptions":{}}},"id":3099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10665:10:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10645:30:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3105,"nodeType":"IfStatement","src":"10641:97:32","trueBody":{"id":3104,"nodeType":"Block","src":"10677:61:32","statements":[{"expression":{"expression":{"id":3101,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"10698:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2765_$","typeString":"type(enum LimitedOCPointsMerkleClaim.ClaimError)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10709:18:32","memberName":"ClaimEpochNotFound","nodeType":"MemberAccess","referencedDeclaration":2761,"src":"10698:29:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"functionReturnParameters":3086,"id":3103,"nodeType":"Return","src":"10691:36:32"}]}},{"assignments":[3107],"declarations":[{"constant":false,"id":3107,"mutability":"mutable","name":"currentTime","nameLocation":"10756:11:32","nodeType":"VariableDeclaration","scope":3147,"src":"10748:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"10748:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3110,"initialValue":{"expression":{"id":3108,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10770:5:32","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10776:9:32","memberName":"timestamp","nodeType":"MemberAccess","src":"10770:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10748:37:32"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3111,"name":"currentTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"10799:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3112,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"10813:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3113,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10819:9:32","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"10813:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10799:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3115,"name":"currentTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"10832:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3116,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"10846:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10852:7:32","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":2794,"src":"10846:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10832:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10799:60:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3124,"nodeType":"IfStatement","src":"10795:131:32","trueBody":{"id":3123,"nodeType":"Block","src":"10861:65:32","statements":[{"expression":{"expression":{"id":3120,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"10882:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2765_$","typeString":"type(enum LimitedOCPointsMerkleClaim.ClaimError)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10893:22:32","memberName":"ClaimingEpochNotActive","nodeType":"MemberAccess","referencedDeclaration":2762,"src":"10882:33:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"functionReturnParameters":3086,"id":3122,"nodeType":"Return","src":"10875:40:32"}]}},{"condition":{"baseExpression":{"baseExpression":{"id":3125,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"10940:7:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(address => bool))"}},"id":3127,"indexExpression":{"id":3126,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"10948:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10940:16:32","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3129,"indexExpression":{"id":3128,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"10957:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10940:27:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3134,"nodeType":"IfStatement","src":"10936:90:32","trueBody":{"id":3133,"nodeType":"Block","src":"10969:57:32","statements":[{"expression":{"expression":{"id":3130,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"10990:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2765_$","typeString":"type(enum LimitedOCPointsMerkleClaim.ClaimError)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11001:14:32","memberName":"AlreadyClaimed","nodeType":"MemberAccess","referencedDeclaration":2763,"src":"10990:25:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"functionReturnParameters":3086,"id":3132,"nodeType":"Return","src":"10983:32:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3135,"name":"epoch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"11040:5:32","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimEpoch_$2795_storage_ptr","typeString":"struct LimitedOCPointsMerkleClaim.ClaimEpoch storage pointer"}},"id":3136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11046:10:32","memberName":"amountLeft","nodeType":"MemberAccess","referencedDeclaration":2790,"src":"11040:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3137,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"11059:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11040:25:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3143,"nodeType":"IfStatement","src":"11036:96:32","trueBody":{"id":3142,"nodeType":"Block","src":"11067:65:32","statements":[{"expression":{"expression":{"id":3139,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"11088:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2765_$","typeString":"type(enum LimitedOCPointsMerkleClaim.ClaimError)"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11099:22:32","memberName":"InsufficientPoolAmount","nodeType":"MemberAccess","referencedDeclaration":2764,"src":"11088:33:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"functionReturnParameters":3086,"id":3141,"nodeType":"Return","src":"11081:40:32"}]}},{"expression":{"expression":{"id":3144,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"11149:10:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2765_$","typeString":"type(enum LimitedOCPointsMerkleClaim.ClaimError)"}},"id":3145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11160:7:32","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2760,"src":"11149:18:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"functionReturnParameters":3086,"id":3146,"nodeType":"Return","src":"11142:25:32"}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"9721:700:32","text":"@notice Checks if a user can claim rewards for a given epoch.\n @dev Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.\n @dev Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.\n @dev Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.\n @dev Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.\n @dev Returns ClaimError.NoError if basic validation passes.\n @param epochId The epoch identifier.\n @param recipient The recipient address.\n @param amount The amount to be claimed.\n @return error The claim validation result."},"functionSelector":"7124094f","id":3148,"implemented":true,"kind":"function","modifiers":[],"name":"canClaim","nameLocation":"10435:8:32","nodeType":"FunctionDefinition","parameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"epochId","nameLocation":"10461:7:32","nodeType":"VariableDeclaration","scope":3148,"src":"10453:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"10453:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3079,"mutability":"mutable","name":"recipient","nameLocation":"10486:9:32","nodeType":"VariableDeclaration","scope":3148,"src":"10478:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"10478:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"amount","nameLocation":"10513:6:32","nodeType":"VariableDeclaration","scope":3148,"src":"10505:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3080,"name":"uint256","nodeType":"ElementaryTypeName","src":"10505:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10443:82:32"},"returnParameters":{"id":3086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3085,"mutability":"mutable","name":"error","nameLocation":"10558:5:32","nodeType":"VariableDeclaration","scope":3148,"src":"10547:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"},"typeName":{"id":3084,"nodeType":"UserDefinedTypeName","pathNode":{"id":3083,"name":"ClaimError","nameLocations":["10547:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"10547:10:32"},"referencedDeclaration":2765,"src":"10547:10:32","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2765","typeString":"enum LimitedOCPointsMerkleClaim.ClaimError"}},"visibility":"internal"}],"src":"10546:18:32"},"scope":3177,"src":"10426:748:32","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[675,1986],"body":{"id":3161,"nodeType":"Block","src":"11339:65:32","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3157,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"11356:28:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$724_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11385:10:32","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":675,"src":"11356:39:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11356:41:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3156,"id":3160,"nodeType":"Return","src":"11349:48:32"}]},"documentation":{"id":3149,"nodeType":"StructuredDocumentation","src":"11180:44:32","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3162,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"11238:10:32","nodeType":"FunctionDefinition","overrides":{"id":3153,"nodeType":"OverrideSpecifier","overrides":[{"id":3151,"name":"Context","nameLocations":["11282:7:32"],"nodeType":"IdentifierPath","referencedDeclaration":1996,"src":"11282:7:32"},{"id":3152,"name":"ForwarderRegistryContextBase","nameLocations":["11291:28:32"],"nodeType":"IdentifierPath","referencedDeclaration":724,"src":"11291:28:32"}],"src":"11273:47:32"},"parameters":{"id":3150,"nodeType":"ParameterList","parameters":[],"src":"11248:2:32"},"returnParameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3162,"src":"11330:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3154,"name":"address","nodeType":"ElementaryTypeName","src":"11330:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11329:9:32"},"scope":3177,"src":"11229:175:32","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[723,1995],"body":{"id":3175,"nodeType":"Block","src":"11574:63:32","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3171,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"11591:28:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$724_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11620:8:32","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":723,"src":"11591:37:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11591:39:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3170,"id":3174,"nodeType":"Return","src":"11584:46:32"}]},"documentation":{"id":3163,"nodeType":"StructuredDocumentation","src":"11410:44:32","text":"@inheritdoc ForwarderRegistryContextBase"},"id":3176,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"11468:8:32","nodeType":"FunctionDefinition","overrides":{"id":3167,"nodeType":"OverrideSpecifier","overrides":[{"id":3165,"name":"Context","nameLocations":["11510:7:32"],"nodeType":"IdentifierPath","referencedDeclaration":1996,"src":"11510:7:32"},{"id":3166,"name":"ForwarderRegistryContextBase","nameLocations":["11519:28:32"],"nodeType":"IdentifierPath","referencedDeclaration":724,"src":"11519:28:32"}],"src":"11501:47:32"},"parameters":{"id":3164,"nodeType":"ParameterList","parameters":[],"src":"11476:2:32"},"returnParameters":{"id":3170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3176,"src":"11558:14:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3168,"name":"bytes","nodeType":"ElementaryTypeName","src":"11558:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11557:16:32"},"scope":3177,"src":"11459:178:32","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3178,"src":"1456:10183:32","usedErrors":[19,117,442,2708,2717,2728,2739,2746,2751,2758],"usedEvents":[133,2824,2835]}],"src":"32:11608:32"},"id":32}},"contracts":{"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol":{"IPoints":{"abi":[{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit(address,uint256,bytes32)":"26b3293f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\":\"IPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.22;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0x199be5843052ad12607e0edd27a617b0307ae39e0d190b1632c53be7566c40a5\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x1bc6bfe11425d5f150d4c1f3c333ecea34e6ce0f262fb74c1754d80f4ac2339f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8819:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol":{"LimitedOCPointsMerkleClaimMock":{"abi":[{"inputs":[{"internalType":"address","name":"ecpContractAddress","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"ClaimEpochNotFound","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentTime","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"ClaimingEpochNotActive","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountRequested","type":"uint256"},{"internalType":"uint256","name":"amountAvailable","type":"uint256"}],"name":"InsufficientPoolAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"InvalidRewardContractAddress","type":"address"}],"name":"InvalidRewardContractAddress","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"totalAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountLeft","type":"uint256"}],"name":"RewardClaimed","type":"event"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"canClaim","outputs":[{"internalType":"enum LimitedOCPointsMerkleClaim.ClaimError","name":"error","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimEpochs","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"amountLeft","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32,uint256)":[{"params":{"amount":"The amount being claimed.","epochId":"The epoch identifier.","reasonCode":"The reason code for the deposit.","recipient":"The recipient of the claim."}}],"ClaimEpochNotFound(uint256)":[{"params":{"epochId":"The epoch identifier."}}],"ClaimingEpochNotActive(uint256,uint256,uint256)":[{"params":{"currentTime":"The current block timestamp.","endTime":"The end time of the claiming epoch.","startTime":"The start time of the claiming epoch."}}],"InsufficientPoolAmount(uint256,uint256)":[{"params":{"amountAvailable":"The amount available in the pool.","amountRequested":"The amount requested to claim."}}],"InvalidClaimWindow(uint256,uint256)":[{"params":{"endTime":"The end time.","startTime":"The start time."}}],"InvalidProof(address,uint256,bytes32,uint256)":[{"params":{"amount":"The amount being claimed.","epochId":"The epoch identifier.","reasonCode":"The reason code for the deposit.","recipient":"The recipient of the claim."}}],"InvalidRewardContractAddress(address)":[{"params":{"InvalidRewardContractAddress":"The address of the invalid reward contract."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)":{"params":{"endTime":"The end time for claiming.","epochId":"The epoch identifier.","merkleRoot":"The merkle root for this epoch.","startTime":"The start time for claiming.","totalAmount":"The total amount available for claiming."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RewardClaimed(uint256,address,uint256,uint256)":{"params":{"amount":"The amount claimed.","amountLeft":"The amount left in the pool after this claim.","epochId":"The epoch identifier.","recipient":"The recipient of the claim."}}},"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"__msgSender()":{"returns":{"_0":"The current msg.sender value."}},"canClaim(uint256,address,uint256)":{"details":"Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.Returns ClaimError.NoError if basic validation passes.","params":{"amount":"The amount to be claimed.","epochId":"The epoch identifier.","recipient":"The recipient address."},"returns":{"error":"The claim validation result."}},"claim(uint256,address,uint256,bytes32,bytes32[])":{"details":"Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.Reverts with {InvalidProof} if the merkle proof verification fails.Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.Emits a {RewardClaimed} event.","params":{"amount":"The amount to be claimed.","epochId":"The epoch identifier.","proof":"The merkle proof for verification.","reasonCode":"The reason code for the deposit.","recipient":"The recipient for this claim."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"setMerkleRoot(bytes32,uint256,uint256,uint256)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InvalidClaimWindow} if startTime is not before endTime.Emits a {MerkleRootSet} event.","params":{"endTime":"The end time for claiming.","merkleRoot":"The merkle root for this epoch.","startTime":"The start time for claiming.","totalAmount":"The total amount available for claiming in this epoch."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2655":{"entryPoint":null,"id":2655,"parameterSlots":2,"returnSlots":0},"@_2870":{"entryPoint":null,"id":2870,"parameterSlots":2,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_578":{"entryPoint":null,"id":578,"parameterSlots":1,"returnSlots":0},"@_625":{"entryPoint":null,"id":625,"parameterSlots":1,"returnSlots":0},"@constructorInit_250":{"entryPoint":219,"id":250,"parameterSlots":2,"returnSlots":0},"@layout_406":{"entryPoint":165,"id":406,"parameterSlots":0,"returnSlots":1},"@layout_554":{"entryPoint":342,"id":554,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_508":{"entryPoint":390,"id":508,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory":{"entryPoint":508,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":571,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":483,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:33","nodeType":"YulBlock","src":"0:1001:33","statements":[{"nativeSrc":"6:3:33","nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nativeSrc":"59:86:33","nodeType":"YulBlock","src":"59:86:33","statements":[{"body":{"nativeSrc":"123:16:33","nodeType":"YulBlock","src":"123:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:33","nodeType":"YulLiteral","src":"132:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:33","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:33","nodeType":"YulIdentifier","src":"125:6:33"},"nativeSrc":"125:12:33","nodeType":"YulFunctionCall","src":"125:12:33"},"nativeSrc":"125:12:33","nodeType":"YulExpressionStatement","src":"125:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:33","nodeType":"YulIdentifier","src":"82:5:33"},{"arguments":[{"name":"value","nativeSrc":"93:5:33","nodeType":"YulIdentifier","src":"93:5:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:33","nodeType":"YulLiteral","src":"108:3:33","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:33","nodeType":"YulLiteral","src":"113:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:33","nodeType":"YulIdentifier","src":"104:3:33"},"nativeSrc":"104:11:33","nodeType":"YulFunctionCall","src":"104:11:33"},{"kind":"number","nativeSrc":"117:1:33","nodeType":"YulLiteral","src":"117:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:33","nodeType":"YulIdentifier","src":"100:3:33"},"nativeSrc":"100:19:33","nodeType":"YulFunctionCall","src":"100:19:33"}],"functionName":{"name":"and","nativeSrc":"89:3:33","nodeType":"YulIdentifier","src":"89:3:33"},"nativeSrc":"89:31:33","nodeType":"YulFunctionCall","src":"89:31:33"}],"functionName":{"name":"eq","nativeSrc":"79:2:33","nodeType":"YulIdentifier","src":"79:2:33"},"nativeSrc":"79:42:33","nodeType":"YulFunctionCall","src":"79:42:33"}],"functionName":{"name":"iszero","nativeSrc":"72:6:33","nodeType":"YulIdentifier","src":"72:6:33"},"nativeSrc":"72:50:33","nodeType":"YulFunctionCall","src":"72:50:33"},"nativeSrc":"69:70:33","nodeType":"YulIf","src":"69:70:33"}]},"name":"validator_revert_address","nativeSrc":"14:131:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:33","nodeType":"YulTypedName","src":"48:5:33","type":""}],"src":"14:131:33"},{"body":{"nativeSrc":"274:287:33","nodeType":"YulBlock","src":"274:287:33","statements":[{"body":{"nativeSrc":"320:16:33","nodeType":"YulBlock","src":"320:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:33","nodeType":"YulLiteral","src":"329:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:33","nodeType":"YulLiteral","src":"332:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:33","nodeType":"YulIdentifier","src":"322:6:33"},"nativeSrc":"322:12:33","nodeType":"YulFunctionCall","src":"322:12:33"},"nativeSrc":"322:12:33","nodeType":"YulExpressionStatement","src":"322:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:33","nodeType":"YulIdentifier","src":"295:7:33"},{"name":"headStart","nativeSrc":"304:9:33","nodeType":"YulIdentifier","src":"304:9:33"}],"functionName":{"name":"sub","nativeSrc":"291:3:33","nodeType":"YulIdentifier","src":"291:3:33"},"nativeSrc":"291:23:33","nodeType":"YulFunctionCall","src":"291:23:33"},{"kind":"number","nativeSrc":"316:2:33","nodeType":"YulLiteral","src":"316:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:33","nodeType":"YulIdentifier","src":"287:3:33"},"nativeSrc":"287:32:33","nodeType":"YulFunctionCall","src":"287:32:33"},"nativeSrc":"284:52:33","nodeType":"YulIf","src":"284:52:33"},{"nativeSrc":"345:29:33","nodeType":"YulVariableDeclaration","src":"345:29:33","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:33","nodeType":"YulIdentifier","src":"364:9:33"}],"functionName":{"name":"mload","nativeSrc":"358:5:33","nodeType":"YulIdentifier","src":"358:5:33"},"nativeSrc":"358:16:33","nodeType":"YulFunctionCall","src":"358:16:33"},"variables":[{"name":"value","nativeSrc":"349:5:33","nodeType":"YulTypedName","src":"349:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:33","nodeType":"YulIdentifier","src":"408:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:33","nodeType":"YulIdentifier","src":"383:24:33"},"nativeSrc":"383:31:33","nodeType":"YulFunctionCall","src":"383:31:33"},"nativeSrc":"383:31:33","nodeType":"YulExpressionStatement","src":"383:31:33"},{"nativeSrc":"423:15:33","nodeType":"YulAssignment","src":"423:15:33","value":{"name":"value","nativeSrc":"433:5:33","nodeType":"YulIdentifier","src":"433:5:33"},"variableNames":[{"name":"value0","nativeSrc":"423:6:33","nodeType":"YulIdentifier","src":"423:6:33"}]},{"nativeSrc":"447:40:33","nodeType":"YulVariableDeclaration","src":"447:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:33","nodeType":"YulIdentifier","src":"472:9:33"},{"kind":"number","nativeSrc":"483:2:33","nodeType":"YulLiteral","src":"483:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:33","nodeType":"YulIdentifier","src":"468:3:33"},"nativeSrc":"468:18:33","nodeType":"YulFunctionCall","src":"468:18:33"}],"functionName":{"name":"mload","nativeSrc":"462:5:33","nodeType":"YulIdentifier","src":"462:5:33"},"nativeSrc":"462:25:33","nodeType":"YulFunctionCall","src":"462:25:33"},"variables":[{"name":"value_1","nativeSrc":"451:7:33","nodeType":"YulTypedName","src":"451:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:33","nodeType":"YulIdentifier","src":"521:7:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:33","nodeType":"YulIdentifier","src":"496:24:33"},"nativeSrc":"496:33:33","nodeType":"YulFunctionCall","src":"496:33:33"},"nativeSrc":"496:33:33","nodeType":"YulExpressionStatement","src":"496:33:33"},{"nativeSrc":"538:17:33","nodeType":"YulAssignment","src":"538:17:33","value":{"name":"value_1","nativeSrc":"548:7:33","nodeType":"YulIdentifier","src":"548:7:33"},"variableNames":[{"name":"value1","nativeSrc":"538:6:33","nodeType":"YulIdentifier","src":"538:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory","nativeSrc":"150:411:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:33","nodeType":"YulTypedName","src":"232:9:33","type":""},{"name":"dataEnd","nativeSrc":"243:7:33","nodeType":"YulTypedName","src":"243:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:33","nodeType":"YulTypedName","src":"255:6:33","type":""},{"name":"value1","nativeSrc":"263:6:33","nodeType":"YulTypedName","src":"263:6:33","type":""}],"src":"150:411:33"},{"body":{"nativeSrc":"667:102:33","nodeType":"YulBlock","src":"667:102:33","statements":[{"nativeSrc":"677:26:33","nodeType":"YulAssignment","src":"677:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:33","nodeType":"YulIdentifier","src":"689:9:33"},{"kind":"number","nativeSrc":"700:2:33","nodeType":"YulLiteral","src":"700:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:33","nodeType":"YulIdentifier","src":"685:3:33"},"nativeSrc":"685:18:33","nodeType":"YulFunctionCall","src":"685:18:33"},"variableNames":[{"name":"tail","nativeSrc":"677:4:33","nodeType":"YulIdentifier","src":"677:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:33","nodeType":"YulIdentifier","src":"719:9:33"},{"arguments":[{"name":"value0","nativeSrc":"734:6:33","nodeType":"YulIdentifier","src":"734:6:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:33","nodeType":"YulLiteral","src":"750:3:33","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:33","nodeType":"YulLiteral","src":"755:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:33","nodeType":"YulIdentifier","src":"746:3:33"},"nativeSrc":"746:11:33","nodeType":"YulFunctionCall","src":"746:11:33"},{"kind":"number","nativeSrc":"759:1:33","nodeType":"YulLiteral","src":"759:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:33","nodeType":"YulIdentifier","src":"742:3:33"},"nativeSrc":"742:19:33","nodeType":"YulFunctionCall","src":"742:19:33"}],"functionName":{"name":"and","nativeSrc":"730:3:33","nodeType":"YulIdentifier","src":"730:3:33"},"nativeSrc":"730:32:33","nodeType":"YulFunctionCall","src":"730:32:33"}],"functionName":{"name":"mstore","nativeSrc":"712:6:33","nodeType":"YulIdentifier","src":"712:6:33"},"nativeSrc":"712:51:33","nodeType":"YulFunctionCall","src":"712:51:33"},"nativeSrc":"712:51:33","nodeType":"YulExpressionStatement","src":"712:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:33","nodeType":"YulTypedName","src":"636:9:33","type":""},{"name":"value0","nativeSrc":"647:6:33","nodeType":"YulTypedName","src":"647:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:33","nodeType":"YulTypedName","src":"658:4:33","type":""}],"src":"566:203:33"},{"body":{"nativeSrc":"823:176:33","nodeType":"YulBlock","src":"823:176:33","statements":[{"nativeSrc":"833:17:33","nodeType":"YulAssignment","src":"833:17:33","value":{"arguments":[{"name":"x","nativeSrc":"845:1:33","nodeType":"YulIdentifier","src":"845:1:33"},{"name":"y","nativeSrc":"848:1:33","nodeType":"YulIdentifier","src":"848:1:33"}],"functionName":{"name":"sub","nativeSrc":"841:3:33","nodeType":"YulIdentifier","src":"841:3:33"},"nativeSrc":"841:9:33","nodeType":"YulFunctionCall","src":"841:9:33"},"variableNames":[{"name":"diff","nativeSrc":"833:4:33","nodeType":"YulIdentifier","src":"833:4:33"}]},{"body":{"nativeSrc":"882:111:33","nodeType":"YulBlock","src":"882:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:33","nodeType":"YulLiteral","src":"903:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:33","nodeType":"YulLiteral","src":"910:3:33","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:33","nodeType":"YulLiteral","src":"915:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:33","nodeType":"YulIdentifier","src":"906:3:33"},"nativeSrc":"906:20:33","nodeType":"YulFunctionCall","src":"906:20:33"}],"functionName":{"name":"mstore","nativeSrc":"896:6:33","nodeType":"YulIdentifier","src":"896:6:33"},"nativeSrc":"896:31:33","nodeType":"YulFunctionCall","src":"896:31:33"},"nativeSrc":"896:31:33","nodeType":"YulExpressionStatement","src":"896:31:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:33","nodeType":"YulLiteral","src":"947:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:33","nodeType":"YulLiteral","src":"950:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:33","nodeType":"YulIdentifier","src":"940:6:33"},"nativeSrc":"940:15:33","nodeType":"YulFunctionCall","src":"940:15:33"},"nativeSrc":"940:15:33","nodeType":"YulExpressionStatement","src":"940:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:33","nodeType":"YulLiteral","src":"975:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:33","nodeType":"YulLiteral","src":"978:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:33","nodeType":"YulIdentifier","src":"968:6:33"},"nativeSrc":"968:15:33","nodeType":"YulFunctionCall","src":"968:15:33"},"nativeSrc":"968:15:33","nodeType":"YulExpressionStatement","src":"968:15:33"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:33","nodeType":"YulIdentifier","src":"865:4:33"},{"name":"x","nativeSrc":"871:1:33","nodeType":"YulIdentifier","src":"871:1:33"}],"functionName":{"name":"gt","nativeSrc":"862:2:33","nodeType":"YulIdentifier","src":"862:2:33"},"nativeSrc":"862:11:33","nodeType":"YulFunctionCall","src":"862:11:33"},"nativeSrc":"859:134:33","nodeType":"YulIf","src":"859:134:33"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:33","nodeType":"YulTypedName","src":"805:1:33","type":""},{"name":"y","nativeSrc":"808:1:33","nodeType":"YulTypedName","src":"808:1:33","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:33","nodeType":"YulTypedName","src":"814:4:33","type":""}],"src":"774:225:33"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b5060405162001f6e38038062001f6e8339810160408190526200003491620001fc565b81818080336200004f8162000048620000a5565b90620000db565b506001600160a01b03908116608052831690506200008f57604051631aa6c2cd60e31b81526001600160a01b038316600482015260240160405180910390fd5b506001600160a01b031660a052506200025d9050565b600080620000d560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200023b565b92915050565b6001600160a01b03811615620001325781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001526307f5828d60e41b60016200014a62000156565b919062000186565b5050565b600080620000d560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200023b565b600160e01b6001600160e01b0319831601620001b5576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001f957600080fd5b50565b600080604083850312156200021057600080fd5b82516200021d81620001e3565b60208401519092506200023081620001e3565b809150509250929050565b81810381811115620000d557634e487b7160e01b600052601160045260246000fd5b60805160a051611cc1620002ad600039600081816101f201526107180152600081816101a80152818161023a01528181611279015281816112b7015281816113ef01526114770152611cc16000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806373c8a958116100b2578063d1a91ff211610081578063f2fde38b11610066578063f2fde38b1461035b578063f5b541a61461036e578063f7ba94bd1461039557600080fd5b8063d1a91ff21461033c578063eacdc5ff1461034457600080fd5b806373c8a958146102fb578063833d47b61461030e5780638da5cb5b14610321578063c3666c361461032957600080fd5b80632d4c2f9311610109578063572b6c05116100ee578063572b6c051461022a5780635c9a509b146102775780637124094f146102db57600080fd5b80632d4c2f93146101ed57806331e66e1e1461021457600080fd5b806301ffc9a71461013b578063120aa877146101635780632035a4dd146101915780632b4c9f16146101a6575b600080fd5b61014e6101493660046117d0565b6103a8565b60405190151581526020015b60405180910390f35b61014e610171366004611834565b600260209081526000928352604080842090915290825290205460ff1681565b6101a461019f3660046118b0565b6103c2565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161015a565b6101c87f000000000000000000000000000000000000000000000000000000000000000081565b61021c6107dd565b60405161015a929190611923565b61014e610238366004611970565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102b361028536600461198d565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b604080519586526020860194909452928401919091526060830152608082015260a00161015a565b6102ee6102e93660046119a6565b6107f0565b60405161015a91906119de565b6101a4610309366004611a1f565b61089d565b6101a461031c366004611aa7565b6109a1565b6101c8610aa0565b6101a4610337366004611a1f565b610acc565b6101c8610c44565b61034d60005481565b60405190815260200161015a565b6101a4610369366004611970565b610c4e565b61034d7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6101a46103a3366004611ad9565b610c6c565b60006103bc826103b6610d2b565b90610d59565b92915050565b60008681526001602052604090208054610410576040517f07cba261000000000000000000000000000000000000000000000000000000008152600481018890526024015b60405180910390fd5b600381015442908110806104275750816004015481115b1561047b5760038201546004808401546040517fc06e9f3a00000000000000000000000000000000000000000000000000000000815291820184905260248201929092526044810191909152606401610407565b600088815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915290205460ff1615610512576040517f7635807d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790526044810186905260648101899052608401610407565b85826002015410156105605760028201546040517f23090a31000000000000000000000000000000000000000000000000000000008152610407918891600401918252602082015260400190565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166020820152603481018790526054810186905260748101899052600090609401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012083549091506105f3908690869084610e33565b610656576040517fa041b52e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905260448101879052606481018a9052608401610407565b600089815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff8d168552909152822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055840180548992906106c0908490611b45565b90915550506040517f26b3293f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201899052604482018890527f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16897ffc6ecd966b430510beae9124efe7dd517ed5286d7ed0ae258f8556c7a9765a448986600201546040516107ca929190918252602082015260400190565b60405180910390a3505050505050505050565b3660006107e8610e4d565b915091509091565b6000838152600160205260408120805461080e576001915050610896565b600381015442908110806108255750816004015481115b1561083557600292505050610896565b600086815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205460ff161561087857600392505050610896565b838260020154101561088f57600492505050610896565b6000925050505b9392505050565b6108b66108a8610e58565b6108b0610e62565b90610e90565b8483811415806108c65750808214155b156108fd576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156109975761098f88888381811061091d5761091d611b7f565b90506020020160208101906109329190611970565b85858481811061094457610944611b7f565b9050602002013588888581811061095d5761095d611b7f565b90506020020160208101906109729190611970565b73ffffffffffffffffffffffffffffffffffffffff169190610eff565b600101610900565b5050505050505050565b6109ac6108a8610e58565b8082106109ef576040517f779acdff0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610407565b600080546040805160a081018252878152602080820188815282840189815260608085018a815260808087018b8152898b526001808852898c209851895595518887015593516002880155905160038701559151600490950194909455865490910190955582518981529081018890529182018690528101849052909182917f331c648136af10432045d8cc15dfaee6ca9568922f85cab02d96d5f5286c8920910160405180910390a25050505050565b6000610ac7610aad610e62565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610ad76108a8610e58565b848381141580610ae75750808214155b15610b1e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561099757858582818110610b3b57610b3b611b7f565b9050602002016020810190610b509190611970565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610b7e57610b7e611b7f565b9050602002016020810190610b939190611970565b878786818110610ba557610ba5611b7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050806001019050610b21565b6000610ac7610e58565b610c69610c59610e58565b82610c62610e62565b9190610f91565b50565b610c776108a8610e58565b82818114610cb1576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610d2357610d1b848483818110610cd157610cd1611b7f565b90506020020135878784818110610cea57610cea611b7f565b9050602002016020810190610cff9190611970565b73ffffffffffffffffffffffffffffffffffffffff16906110a6565b600101610cb4565b505050505050565b6000806103bc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611b45565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610da9575060006103bc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610dfa575060016103bc565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610e41868685611200565b1490505b949350505050565b3660006107e8611242565b6000610ac76113ac565b6000806103bc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611b45565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610efb576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610407565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f8c9084906114f3565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610ffe576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610407565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110a05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610407565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461116a576040519150601f19603f3d011682016040523d82523d6000602084013e61116f565b606091505b5050905080610f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610407565b600081815b848110156112395761122f8287878481811061122357611223611b7f565b90506020020135611602565b9150600101611205565b50949350505050565b366000333214806112535750601836105b156112615750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611396575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190611bae565b156113a3576107e861162e565b50600091369150565b6000333214806113bc5750601836105b156113c657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114e257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190611bae565b156114ec57919050565b3391505090565b6000611555826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661165f9092919063ffffffff16565b90508051600014806115765750808060200190518101906115769190611bae565b610f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610407565b600081831061161e576000828152602084905260409020610896565b5060009182526020526040902090565b3660006107e87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611bd0565b6060610e458484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116939190611c1e565b60006040518083038185875af1925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b50915091506116e6878383876116f1565b979650505050505050565b606083156117875782516000036117805773ffffffffffffffffffffffffffffffffffffffff85163b611780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610407565b5081610e45565b610e45838381511561179c5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104079190611c3a565b6000602082840312156117e257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461089657600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c6957600080fd5b6000806040838503121561184757600080fd5b82359150602083013561185981611812565b809150509250929050565b60008083601f84011261187657600080fd5b50813567ffffffffffffffff81111561188e57600080fd5b6020830191508360208260051b85010111156118a957600080fd5b9250929050565b60008060008060008060a087890312156118c957600080fd5b8635955060208701356118db81611812565b94506040870135935060608701359250608087013567ffffffffffffffff81111561190557600080fd5b61191189828a01611864565b979a9699509497509295939492505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60006020828403121561198257600080fd5b813561089681611812565b60006020828403121561199f57600080fd5b5035919050565b6000806000606084860312156119bb57600080fd5b8335925060208401356119cd81611812565b929592945050506040919091013590565b6020810160058310611a19577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060008060008060608789031215611a3857600080fd5b863567ffffffffffffffff80821115611a5057600080fd5b611a5c8a838b01611864565b90985096506020890135915080821115611a7557600080fd5b611a818a838b01611864565b90965094506040890135915080821115611a9a57600080fd5b5061191189828a01611864565b60008060008060808587031215611abd57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060408587031215611aef57600080fd5b843567ffffffffffffffff80821115611b0757600080fd5b611b1388838901611864565b90965094506020870135915080821115611b2c57600080fd5b50611b3987828801611864565b95989497509550505050565b818103818111156103bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611bc057600080fd5b8151801515811461089657600080fd5b60008085851115611be057600080fd5b83861115611bed57600080fd5b5050820193919092039150565b60005b83811015611c15578181015183820152602001611bfd565b50506000910152565b60008251611c30818460208701611bfa565b9190910192915050565b6020815260008251806020840152611c59816040850160208701611bfa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220c9df6d329720fe94f582008bba2e067a5159761f2f7a3d53ffc40cbf24e3540264736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1F6E CODESIZE SUB DUP1 PUSH3 0x1F6E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1FC JUMP JUMPDEST DUP2 DUP2 DUP1 DUP1 CALLER PUSH3 0x4F DUP2 PUSH3 0x48 PUSH3 0xA5 JUMP JUMPDEST SWAP1 PUSH3 0xDB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH3 0x8F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AA6C2CD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x25D SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xD5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x23B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x132 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x152 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x14A PUSH3 0x156 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x186 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xD5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x23B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1B5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x21D DUP2 PUSH3 0x1E3 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x230 DUP2 PUSH3 0x1E3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xD5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x1CC1 PUSH3 0x2AD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F2 ADD MSTORE PUSH2 0x718 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1A8 ADD MSTORE DUP2 DUP2 PUSH2 0x23A ADD MSTORE DUP2 DUP2 PUSH2 0x1279 ADD MSTORE DUP2 DUP2 PUSH2 0x12B7 ADD MSTORE DUP2 DUP2 PUSH2 0x13EF ADD MSTORE PUSH2 0x1477 ADD MSTORE PUSH2 0x1CC1 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xD1A91FF2 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xEACDC5FF EQ PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x2FB JUMPI DUP1 PUSH4 0x833D47B6 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x572B6C05 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x5C9A509B EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0x7124094F EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x120AA877 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0x2035A4DD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x1A6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D0 JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1C8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x21C PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP3 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1970 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x285 CALLDATASIZE PUSH1 0x4 PUSH2 0x198D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP2 SWAP1 PUSH2 0x19DE JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1F JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1F JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xC44 JUMP JUMPDEST PUSH2 0x34D PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1970 JUMP JUMPDEST PUSH2 0xC4E JUMP JUMPDEST PUSH2 0x34D PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x3A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0xC6C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BC DUP3 PUSH2 0x3B6 PUSH2 0xD2B JUMP JUMPDEST SWAP1 PUSH2 0xD59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x410 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CBA26100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x427 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x47B JUMPI PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP1 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xC06E9F3A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7635807D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x560 JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23090A3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x407 SWAP2 DUP9 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP10 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x5F3 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP5 PUSH2 0xE33 JUMP JUMPDEST PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA041B52E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 ADD DUP1 SLOAD DUP10 SWAP3 SWAP1 PUSH2 0x6C0 SWAP1 DUP5 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x770 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xFC6ECD966B430510BEAE9124EFE7DD517ED5286D7ED0AE258F8556C7A9765A44 DUP10 DUP7 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x7CA SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH2 0xE4D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x80E JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x825 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x835 JUMPI PUSH1 0x2 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x878 JUMPI PUSH1 0x3 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x88F JUMPI PUSH1 0x4 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8B6 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST PUSH2 0x8B0 PUSH2 0xE62 JUMP JUMPDEST SWAP1 PUSH2 0xE90 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x8C6 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x8FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI PUSH2 0x98F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x91D JUMPI PUSH2 0x91D PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x932 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x944 JUMPI PUSH2 0x944 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x95D JUMPI PUSH2 0x95D PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xEFF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x900 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP1 DUP3 LT PUSH2 0x9EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x779ACDFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 DUP2 MSTORE DUP3 DUP5 ADD DUP10 DUP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x80 DUP1 DUP8 ADD DUP12 DUP2 MSTORE DUP10 DUP12 MSTORE PUSH1 0x1 DUP1 DUP9 MSTORE DUP10 DUP13 KECCAK256 SWAP9 MLOAD DUP10 SSTORE SWAP6 MLOAD DUP9 DUP8 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP9 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP8 ADD SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE DUP7 SLOAD SWAP1 SWAP2 ADD SWAP1 SWAP6 SSTORE DUP3 MLOAD DUP10 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x331C648136AF10432045D8CC15DFAEE6CA9568922F85CAB02D96D5F5286C8920 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0xAAD PUSH2 0xE62 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xAD7 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0xAE7 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xB1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xB3B JUMPI PUSH2 0xB3B PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB50 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xB7E JUMPI PUSH2 0xB7E PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB93 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xBA5 JUMPI PUSH2 0xBA5 PUSH2 0x1B7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC35 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0xE58 JUMP JUMPDEST PUSH2 0xC69 PUSH2 0xC59 PUSH2 0xE58 JUMP JUMPDEST DUP3 PUSH2 0xC62 PUSH2 0xE62 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF91 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD23 JUMPI PUSH2 0xD1B DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xCD1 JUMPI PUSH2 0xCD1 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xCEA JUMPI PUSH2 0xCEA PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCFF SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x10A6 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDA9 JUMPI POP PUSH1 0x0 PUSH2 0x3BC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDFA JUMPI POP PUSH1 0x1 PUSH2 0x3BC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE41 DUP7 DUP7 DUP6 PUSH2 0x1200 JUMP JUMPDEST EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0x13AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1B45 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xEFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x407 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF8C SWAP1 DUP5 SWAP1 PUSH2 0x14F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x407 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10A0 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1239 JUMPI PUSH2 0x122F DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1223 JUMPI PUSH2 0x1223 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1602 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1205 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1253 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1261 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x1396 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1372 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1396 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST ISZERO PUSH2 0x13A3 JUMPI PUSH2 0x7E8 PUSH2 0x162E JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13BC JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13C6 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14E2 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E2 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST ISZERO PUSH2 0x14EC JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x165F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1576 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1576 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x161E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1BD0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE45 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1693 SWAP2 SWAP1 PUSH2 0x1C1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x16E6 DUP8 DUP4 DUP4 DUP8 PUSH2 0x16F1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1787 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1780 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1780 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST POP DUP2 PUSH2 0xE45 JUMP JUMPDEST PUSH2 0xE45 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x179C JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1859 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x188E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x18C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x18DB DUP2 PUSH2 0x1812 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1911 DUP10 DUP3 DUP11 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x896 DUP2 PUSH2 0x1812 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x199F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1812 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x1A19 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1A38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A5C DUP11 DUP4 DUP12 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A81 DUP11 DUP4 DUP12 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1911 DUP10 DUP3 DUP11 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B13 DUP9 DUP4 DUP10 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B39 DUP8 DUP3 DUP9 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3BC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1BE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1BED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C15 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1BFD JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C30 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1BFA JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C59 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0xDF PUSH14 0x329720FE94F582008BBA2E067A51 MSIZE PUSH23 0x1F2F7A3D53FFC40CBF24E3540264736F6C634300081600 CALLER ","sourceMap":"262:645:31:-:0;;;338:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;443:18;463:17;;;6082:10:32;1008:63:2;6082:10:32;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:14;;;;;6152:35:32;::::2;::::0;-1:-1:-1;6148:124:32::2;;6210:51;::::0;-1:-1:-1;;;6210:51:32;;-1:-1:-1;;;;;730:32:33;;6210:51:32::2;::::0;::::2;712::33::0;685:18;;6210:51:32::2;;;;;;;6148:124;-1:-1:-1::0;;;;;;6281:48:32::2;;::::0;-1:-1:-1;262:645:31;;-1:-1:-1;262:645:31;5065:174:8;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:8:o;1567:341::-;-1:-1:-1;;;;;1655:26:8;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:8;-1:-1:-1;;;;;1697:30:8;;;;;;;1746:46;;-1:-1:-1;;1746:46:8;;-1:-1:-1;;1746:46:8;1651:152;1812:89;-1:-1:-1;;;1896:4:8;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:12:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:12;;;877:68;;925:20;;-1:-1:-1;;;925:20:12;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:12;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:12;;;;;;;;;;773:235::o;14:131:33:-;-1:-1:-1;;;;;89:31:33;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:33;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;262:645:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@OPERATOR_ROLE_2779":{"entryPoint":null,"id":2779,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_2783":{"entryPoint":null,"id":2783,"parameterSlots":0,"returnSlots":0},"@__msgData_2675":{"entryPoint":2013,"id":2675,"parameterSlots":0,"returnSlots":2},"@__msgSender_2665":{"entryPoint":3140,"id":2665,"parameterSlots":0,"returnSlots":1},"@_callOptionalReturn_1595":{"entryPoint":5363,"id":1595,"parameterSlots":2,"returnSlots":0},"@_efficientHash_2633":{"entryPoint":null,"id":2633,"parameterSlots":2,"returnSlots":1},"@_hashPair_2622":{"entryPoint":5634,"id":2622,"parameterSlots":2,"returnSlots":1},"@_msgData_3176":{"entryPoint":3661,"id":3176,"parameterSlots":0,"returnSlots":2},"@_msgData_723":{"entryPoint":4674,"id":723,"parameterSlots":0,"returnSlots":2},"@_msgSender_3162":{"entryPoint":3672,"id":3162,"parameterSlots":0,"returnSlots":1},"@_msgSender_675":{"entryPoint":5036,"id":675,"parameterSlots":0,"returnSlots":1},"@_revert_1973":{"entryPoint":null,"id":1973,"parameterSlots":2,"returnSlots":0},"@canClaim_3148":{"entryPoint":2032,"id":3148,"parameterSlots":3,"returnSlots":1},"@claimEpochs_2804":{"entryPoint":null,"id":2804,"parameterSlots":0,"returnSlots":0},"@claim_3074":{"entryPoint":962,"id":3074,"parameterSlots":6,"returnSlots":0},"@claimed_2811":{"entryPoint":null,"id":2811,"parameterSlots":0,"returnSlots":0},"@currentEpochId_2798":{"entryPoint":null,"id":2798,"parameterSlots":0,"returnSlots":0},"@enforceIsContractOwner_374":{"entryPoint":3728,"id":374,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_587":{"entryPoint":null,"id":587,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1798":{"entryPoint":null,"id":1798,"parameterSlots":4,"returnSlots":1},"@functionCall_1734":{"entryPoint":5727,"id":1734,"parameterSlots":3,"returnSlots":1},"@isContract_1662":{"entryPoint":null,"id":1662,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_603":{"entryPoint":null,"id":603,"parameterSlots":1,"returnSlots":1},"@layout_406":{"entryPoint":3682,"id":406,"parameterSlots":0,"returnSlots":1},"@layout_554":{"entryPoint":3371,"id":554,"parameterSlots":0,"returnSlots":1},"@msgData_778":{"entryPoint":5678,"id":778,"parameterSlots":0,"returnSlots":2},"@msgSender_761":{"entryPoint":null,"id":761,"parameterSlots":0,"returnSlots":1},"@owner_327":{"entryPoint":null,"id":327,"parameterSlots":1,"returnSlots":1},"@owner_85":{"entryPoint":2720,"id":85,"parameterSlots":0,"returnSlots":1},"@processProofCalldata_2231":{"entryPoint":4608,"id":2231,"parameterSlots":3,"returnSlots":1},"@recoverERC20s_995":{"entryPoint":2205,"id":995,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1064":{"entryPoint":2764,"id":1064,"parameterSlots":6,"returnSlots":0},"@recoverETH_930":{"entryPoint":3180,"id":930,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1301":{"entryPoint":3839,"id":1301,"parameterSlots":3,"returnSlots":0},"@sendValue_1696":{"entryPoint":4262,"id":1696,"parameterSlots":2,"returnSlots":0},"@setMerkleRoot_2930":{"entryPoint":2465,"id":2930,"parameterSlots":4,"returnSlots":0},"@supportsInterface_436":{"entryPoint":936,"id":436,"parameterSlots":1,"returnSlots":1},"@supportsInterface_542":{"entryPoint":3417,"id":542,"parameterSlots":2,"returnSlots":1},"@transferOwnership_102":{"entryPoint":3150,"id":102,"parameterSlots":1,"returnSlots":0},"@transferOwnership_314":{"entryPoint":3985,"id":314,"parameterSlots":3,"returnSlots":0},"@verifyCallResultFromTarget_1929":{"entryPoint":5873,"id":1929,"parameterSlots":4,"returnSlots":1},"@verifyCalldata_2151":{"entryPoint":3635,"id":2151,"parameterSlots":4,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":6244,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":6512,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6687,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6873,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7086,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256":{"entryPoint":6823,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":6096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1232":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1151":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6541,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":6196,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_addresst_uint256":{"entryPoint":6566,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":6320,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6435,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed":{"entryPoint":6622,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7226,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":7120,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":6981,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7162,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":7039,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6162,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:17174:33","nodeType":"YulBlock","src":"0:17174:33","statements":[{"nativeSrc":"6:3:33","nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nativeSrc":"83:263:33","nodeType":"YulBlock","src":"83:263:33","statements":[{"body":{"nativeSrc":"129:16:33","nodeType":"YulBlock","src":"129:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:33","nodeType":"YulLiteral","src":"138:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:33","nodeType":"YulLiteral","src":"141:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:33","nodeType":"YulIdentifier","src":"131:6:33"},"nativeSrc":"131:12:33","nodeType":"YulFunctionCall","src":"131:12:33"},"nativeSrc":"131:12:33","nodeType":"YulExpressionStatement","src":"131:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:33","nodeType":"YulIdentifier","src":"104:7:33"},{"name":"headStart","nativeSrc":"113:9:33","nodeType":"YulIdentifier","src":"113:9:33"}],"functionName":{"name":"sub","nativeSrc":"100:3:33","nodeType":"YulIdentifier","src":"100:3:33"},"nativeSrc":"100:23:33","nodeType":"YulFunctionCall","src":"100:23:33"},{"kind":"number","nativeSrc":"125:2:33","nodeType":"YulLiteral","src":"125:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:33","nodeType":"YulIdentifier","src":"96:3:33"},"nativeSrc":"96:32:33","nodeType":"YulFunctionCall","src":"96:32:33"},"nativeSrc":"93:52:33","nodeType":"YulIf","src":"93:52:33"},{"nativeSrc":"154:36:33","nodeType":"YulVariableDeclaration","src":"154:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:33","nodeType":"YulIdentifier","src":"180:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:33","nodeType":"YulIdentifier","src":"167:12:33"},"nativeSrc":"167:23:33","nodeType":"YulFunctionCall","src":"167:23:33"},"variables":[{"name":"value","nativeSrc":"158:5:33","nodeType":"YulTypedName","src":"158:5:33","type":""}]},{"body":{"nativeSrc":"300:16:33","nodeType":"YulBlock","src":"300:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:33","nodeType":"YulLiteral","src":"309:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:33","nodeType":"YulLiteral","src":"312:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:33","nodeType":"YulIdentifier","src":"302:6:33"},"nativeSrc":"302:12:33","nodeType":"YulFunctionCall","src":"302:12:33"},"nativeSrc":"302:12:33","nodeType":"YulExpressionStatement","src":"302:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:33","nodeType":"YulIdentifier","src":"212:5:33"},{"arguments":[{"name":"value","nativeSrc":"223:5:33","nodeType":"YulIdentifier","src":"223:5:33"},{"kind":"number","nativeSrc":"230:66:33","nodeType":"YulLiteral","src":"230:66:33","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:33","nodeType":"YulIdentifier","src":"219:3:33"},"nativeSrc":"219:78:33","nodeType":"YulFunctionCall","src":"219:78:33"}],"functionName":{"name":"eq","nativeSrc":"209:2:33","nodeType":"YulIdentifier","src":"209:2:33"},"nativeSrc":"209:89:33","nodeType":"YulFunctionCall","src":"209:89:33"}],"functionName":{"name":"iszero","nativeSrc":"202:6:33","nodeType":"YulIdentifier","src":"202:6:33"},"nativeSrc":"202:97:33","nodeType":"YulFunctionCall","src":"202:97:33"},"nativeSrc":"199:117:33","nodeType":"YulIf","src":"199:117:33"},{"nativeSrc":"325:15:33","nodeType":"YulAssignment","src":"325:15:33","value":{"name":"value","nativeSrc":"335:5:33","nodeType":"YulIdentifier","src":"335:5:33"},"variableNames":[{"name":"value0","nativeSrc":"325:6:33","nodeType":"YulIdentifier","src":"325:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:33","nodeType":"YulTypedName","src":"49:9:33","type":""},{"name":"dataEnd","nativeSrc":"60:7:33","nodeType":"YulTypedName","src":"60:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:33","nodeType":"YulTypedName","src":"72:6:33","type":""}],"src":"14:332:33"},{"body":{"nativeSrc":"446:92:33","nodeType":"YulBlock","src":"446:92:33","statements":[{"nativeSrc":"456:26:33","nodeType":"YulAssignment","src":"456:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:33","nodeType":"YulIdentifier","src":"468:9:33"},{"kind":"number","nativeSrc":"479:2:33","nodeType":"YulLiteral","src":"479:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:33","nodeType":"YulIdentifier","src":"464:3:33"},"nativeSrc":"464:18:33","nodeType":"YulFunctionCall","src":"464:18:33"},"variableNames":[{"name":"tail","nativeSrc":"456:4:33","nodeType":"YulIdentifier","src":"456:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:33","nodeType":"YulIdentifier","src":"498:9:33"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:33","nodeType":"YulIdentifier","src":"523:6:33"}],"functionName":{"name":"iszero","nativeSrc":"516:6:33","nodeType":"YulIdentifier","src":"516:6:33"},"nativeSrc":"516:14:33","nodeType":"YulFunctionCall","src":"516:14:33"}],"functionName":{"name":"iszero","nativeSrc":"509:6:33","nodeType":"YulIdentifier","src":"509:6:33"},"nativeSrc":"509:22:33","nodeType":"YulFunctionCall","src":"509:22:33"}],"functionName":{"name":"mstore","nativeSrc":"491:6:33","nodeType":"YulIdentifier","src":"491:6:33"},"nativeSrc":"491:41:33","nodeType":"YulFunctionCall","src":"491:41:33"},"nativeSrc":"491:41:33","nodeType":"YulExpressionStatement","src":"491:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:33","nodeType":"YulTypedName","src":"415:9:33","type":""},{"name":"value0","nativeSrc":"426:6:33","nodeType":"YulTypedName","src":"426:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:33","nodeType":"YulTypedName","src":"437:4:33","type":""}],"src":"351:187:33"},{"body":{"nativeSrc":"588:109:33","nodeType":"YulBlock","src":"588:109:33","statements":[{"body":{"nativeSrc":"675:16:33","nodeType":"YulBlock","src":"675:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"684:1:33","nodeType":"YulLiteral","src":"684:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"687:1:33","nodeType":"YulLiteral","src":"687:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"677:6:33","nodeType":"YulIdentifier","src":"677:6:33"},"nativeSrc":"677:12:33","nodeType":"YulFunctionCall","src":"677:12:33"},"nativeSrc":"677:12:33","nodeType":"YulExpressionStatement","src":"677:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"611:5:33","nodeType":"YulIdentifier","src":"611:5:33"},{"arguments":[{"name":"value","nativeSrc":"622:5:33","nodeType":"YulIdentifier","src":"622:5:33"},{"kind":"number","nativeSrc":"629:42:33","nodeType":"YulLiteral","src":"629:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"618:3:33","nodeType":"YulIdentifier","src":"618:3:33"},"nativeSrc":"618:54:33","nodeType":"YulFunctionCall","src":"618:54:33"}],"functionName":{"name":"eq","nativeSrc":"608:2:33","nodeType":"YulIdentifier","src":"608:2:33"},"nativeSrc":"608:65:33","nodeType":"YulFunctionCall","src":"608:65:33"}],"functionName":{"name":"iszero","nativeSrc":"601:6:33","nodeType":"YulIdentifier","src":"601:6:33"},"nativeSrc":"601:73:33","nodeType":"YulFunctionCall","src":"601:73:33"},"nativeSrc":"598:93:33","nodeType":"YulIf","src":"598:93:33"}]},"name":"validator_revert_address","nativeSrc":"543:154:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"577:5:33","nodeType":"YulTypedName","src":"577:5:33","type":""}],"src":"543:154:33"},{"body":{"nativeSrc":"789:228:33","nodeType":"YulBlock","src":"789:228:33","statements":[{"body":{"nativeSrc":"835:16:33","nodeType":"YulBlock","src":"835:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"844:1:33","nodeType":"YulLiteral","src":"844:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"847:1:33","nodeType":"YulLiteral","src":"847:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"837:6:33","nodeType":"YulIdentifier","src":"837:6:33"},"nativeSrc":"837:12:33","nodeType":"YulFunctionCall","src":"837:12:33"},"nativeSrc":"837:12:33","nodeType":"YulExpressionStatement","src":"837:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"810:7:33","nodeType":"YulIdentifier","src":"810:7:33"},{"name":"headStart","nativeSrc":"819:9:33","nodeType":"YulIdentifier","src":"819:9:33"}],"functionName":{"name":"sub","nativeSrc":"806:3:33","nodeType":"YulIdentifier","src":"806:3:33"},"nativeSrc":"806:23:33","nodeType":"YulFunctionCall","src":"806:23:33"},{"kind":"number","nativeSrc":"831:2:33","nodeType":"YulLiteral","src":"831:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"802:3:33","nodeType":"YulIdentifier","src":"802:3:33"},"nativeSrc":"802:32:33","nodeType":"YulFunctionCall","src":"802:32:33"},"nativeSrc":"799:52:33","nodeType":"YulIf","src":"799:52:33"},{"nativeSrc":"860:33:33","nodeType":"YulAssignment","src":"860:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"883:9:33","nodeType":"YulIdentifier","src":"883:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"870:12:33","nodeType":"YulIdentifier","src":"870:12:33"},"nativeSrc":"870:23:33","nodeType":"YulFunctionCall","src":"870:23:33"},"variableNames":[{"name":"value0","nativeSrc":"860:6:33","nodeType":"YulIdentifier","src":"860:6:33"}]},{"nativeSrc":"902:45:33","nodeType":"YulVariableDeclaration","src":"902:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"932:9:33","nodeType":"YulIdentifier","src":"932:9:33"},{"kind":"number","nativeSrc":"943:2:33","nodeType":"YulLiteral","src":"943:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"928:3:33","nodeType":"YulIdentifier","src":"928:3:33"},"nativeSrc":"928:18:33","nodeType":"YulFunctionCall","src":"928:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"915:12:33","nodeType":"YulIdentifier","src":"915:12:33"},"nativeSrc":"915:32:33","nodeType":"YulFunctionCall","src":"915:32:33"},"variables":[{"name":"value","nativeSrc":"906:5:33","nodeType":"YulTypedName","src":"906:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"981:5:33","nodeType":"YulIdentifier","src":"981:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"956:24:33","nodeType":"YulIdentifier","src":"956:24:33"},"nativeSrc":"956:31:33","nodeType":"YulFunctionCall","src":"956:31:33"},"nativeSrc":"956:31:33","nodeType":"YulExpressionStatement","src":"956:31:33"},{"nativeSrc":"996:15:33","nodeType":"YulAssignment","src":"996:15:33","value":{"name":"value","nativeSrc":"1006:5:33","nodeType":"YulIdentifier","src":"1006:5:33"},"variableNames":[{"name":"value1","nativeSrc":"996:6:33","nodeType":"YulIdentifier","src":"996:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"702:315:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"747:9:33","nodeType":"YulTypedName","src":"747:9:33","type":""},{"name":"dataEnd","nativeSrc":"758:7:33","nodeType":"YulTypedName","src":"758:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"770:6:33","nodeType":"YulTypedName","src":"770:6:33","type":""},{"name":"value1","nativeSrc":"778:6:33","nodeType":"YulTypedName","src":"778:6:33","type":""}],"src":"702:315:33"},{"body":{"nativeSrc":"1106:283:33","nodeType":"YulBlock","src":"1106:283:33","statements":[{"body":{"nativeSrc":"1155:16:33","nodeType":"YulBlock","src":"1155:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1164:1:33","nodeType":"YulLiteral","src":"1164:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1167:1:33","nodeType":"YulLiteral","src":"1167:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1157:6:33","nodeType":"YulIdentifier","src":"1157:6:33"},"nativeSrc":"1157:12:33","nodeType":"YulFunctionCall","src":"1157:12:33"},"nativeSrc":"1157:12:33","nodeType":"YulExpressionStatement","src":"1157:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1134:6:33","nodeType":"YulIdentifier","src":"1134:6:33"},{"kind":"number","nativeSrc":"1142:4:33","nodeType":"YulLiteral","src":"1142:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1130:3:33","nodeType":"YulIdentifier","src":"1130:3:33"},"nativeSrc":"1130:17:33","nodeType":"YulFunctionCall","src":"1130:17:33"},{"name":"end","nativeSrc":"1149:3:33","nodeType":"YulIdentifier","src":"1149:3:33"}],"functionName":{"name":"slt","nativeSrc":"1126:3:33","nodeType":"YulIdentifier","src":"1126:3:33"},"nativeSrc":"1126:27:33","nodeType":"YulFunctionCall","src":"1126:27:33"}],"functionName":{"name":"iszero","nativeSrc":"1119:6:33","nodeType":"YulIdentifier","src":"1119:6:33"},"nativeSrc":"1119:35:33","nodeType":"YulFunctionCall","src":"1119:35:33"},"nativeSrc":"1116:55:33","nodeType":"YulIf","src":"1116:55:33"},{"nativeSrc":"1180:30:33","nodeType":"YulAssignment","src":"1180:30:33","value":{"arguments":[{"name":"offset","nativeSrc":"1203:6:33","nodeType":"YulIdentifier","src":"1203:6:33"}],"functionName":{"name":"calldataload","nativeSrc":"1190:12:33","nodeType":"YulIdentifier","src":"1190:12:33"},"nativeSrc":"1190:20:33","nodeType":"YulFunctionCall","src":"1190:20:33"},"variableNames":[{"name":"length","nativeSrc":"1180:6:33","nodeType":"YulIdentifier","src":"1180:6:33"}]},{"body":{"nativeSrc":"1253:16:33","nodeType":"YulBlock","src":"1253:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1262:1:33","nodeType":"YulLiteral","src":"1262:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1265:1:33","nodeType":"YulLiteral","src":"1265:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1255:6:33","nodeType":"YulIdentifier","src":"1255:6:33"},"nativeSrc":"1255:12:33","nodeType":"YulFunctionCall","src":"1255:12:33"},"nativeSrc":"1255:12:33","nodeType":"YulExpressionStatement","src":"1255:12:33"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1225:6:33","nodeType":"YulIdentifier","src":"1225:6:33"},{"kind":"number","nativeSrc":"1233:18:33","nodeType":"YulLiteral","src":"1233:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1222:2:33","nodeType":"YulIdentifier","src":"1222:2:33"},"nativeSrc":"1222:30:33","nodeType":"YulFunctionCall","src":"1222:30:33"},"nativeSrc":"1219:50:33","nodeType":"YulIf","src":"1219:50:33"},{"nativeSrc":"1278:29:33","nodeType":"YulAssignment","src":"1278:29:33","value":{"arguments":[{"name":"offset","nativeSrc":"1294:6:33","nodeType":"YulIdentifier","src":"1294:6:33"},{"kind":"number","nativeSrc":"1302:4:33","nodeType":"YulLiteral","src":"1302:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1290:3:33","nodeType":"YulIdentifier","src":"1290:3:33"},"nativeSrc":"1290:17:33","nodeType":"YulFunctionCall","src":"1290:17:33"},"variableNames":[{"name":"arrayPos","nativeSrc":"1278:8:33","nodeType":"YulIdentifier","src":"1278:8:33"}]},{"body":{"nativeSrc":"1367:16:33","nodeType":"YulBlock","src":"1367:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1376:1:33","nodeType":"YulLiteral","src":"1376:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1379:1:33","nodeType":"YulLiteral","src":"1379:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1369:6:33","nodeType":"YulIdentifier","src":"1369:6:33"},"nativeSrc":"1369:12:33","nodeType":"YulFunctionCall","src":"1369:12:33"},"nativeSrc":"1369:12:33","nodeType":"YulExpressionStatement","src":"1369:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1330:6:33","nodeType":"YulIdentifier","src":"1330:6:33"},{"arguments":[{"kind":"number","nativeSrc":"1342:1:33","nodeType":"YulLiteral","src":"1342:1:33","type":"","value":"5"},{"name":"length","nativeSrc":"1345:6:33","nodeType":"YulIdentifier","src":"1345:6:33"}],"functionName":{"name":"shl","nativeSrc":"1338:3:33","nodeType":"YulIdentifier","src":"1338:3:33"},"nativeSrc":"1338:14:33","nodeType":"YulFunctionCall","src":"1338:14:33"}],"functionName":{"name":"add","nativeSrc":"1326:3:33","nodeType":"YulIdentifier","src":"1326:3:33"},"nativeSrc":"1326:27:33","nodeType":"YulFunctionCall","src":"1326:27:33"},{"kind":"number","nativeSrc":"1355:4:33","nodeType":"YulLiteral","src":"1355:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1322:3:33","nodeType":"YulIdentifier","src":"1322:3:33"},"nativeSrc":"1322:38:33","nodeType":"YulFunctionCall","src":"1322:38:33"},{"name":"end","nativeSrc":"1362:3:33","nodeType":"YulIdentifier","src":"1362:3:33"}],"functionName":{"name":"gt","nativeSrc":"1319:2:33","nodeType":"YulIdentifier","src":"1319:2:33"},"nativeSrc":"1319:47:33","nodeType":"YulFunctionCall","src":"1319:47:33"},"nativeSrc":"1316:67:33","nodeType":"YulIf","src":"1316:67:33"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"1022:367:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1069:6:33","nodeType":"YulTypedName","src":"1069:6:33","type":""},{"name":"end","nativeSrc":"1077:3:33","nodeType":"YulTypedName","src":"1077:3:33","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1085:8:33","nodeType":"YulTypedName","src":"1085:8:33","type":""},{"name":"length","nativeSrc":"1095:6:33","nodeType":"YulTypedName","src":"1095:6:33","type":""}],"src":"1022:367:33"},{"body":{"nativeSrc":"1567:605:33","nodeType":"YulBlock","src":"1567:605:33","statements":[{"body":{"nativeSrc":"1614:16:33","nodeType":"YulBlock","src":"1614:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1623:1:33","nodeType":"YulLiteral","src":"1623:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1626:1:33","nodeType":"YulLiteral","src":"1626:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1616:6:33","nodeType":"YulIdentifier","src":"1616:6:33"},"nativeSrc":"1616:12:33","nodeType":"YulFunctionCall","src":"1616:12:33"},"nativeSrc":"1616:12:33","nodeType":"YulExpressionStatement","src":"1616:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1588:7:33","nodeType":"YulIdentifier","src":"1588:7:33"},{"name":"headStart","nativeSrc":"1597:9:33","nodeType":"YulIdentifier","src":"1597:9:33"}],"functionName":{"name":"sub","nativeSrc":"1584:3:33","nodeType":"YulIdentifier","src":"1584:3:33"},"nativeSrc":"1584:23:33","nodeType":"YulFunctionCall","src":"1584:23:33"},{"kind":"number","nativeSrc":"1609:3:33","nodeType":"YulLiteral","src":"1609:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1580:3:33","nodeType":"YulIdentifier","src":"1580:3:33"},"nativeSrc":"1580:33:33","nodeType":"YulFunctionCall","src":"1580:33:33"},"nativeSrc":"1577:53:33","nodeType":"YulIf","src":"1577:53:33"},{"nativeSrc":"1639:33:33","nodeType":"YulAssignment","src":"1639:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"1662:9:33","nodeType":"YulIdentifier","src":"1662:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"1649:12:33","nodeType":"YulIdentifier","src":"1649:12:33"},"nativeSrc":"1649:23:33","nodeType":"YulFunctionCall","src":"1649:23:33"},"variableNames":[{"name":"value0","nativeSrc":"1639:6:33","nodeType":"YulIdentifier","src":"1639:6:33"}]},{"nativeSrc":"1681:45:33","nodeType":"YulVariableDeclaration","src":"1681:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1711:9:33","nodeType":"YulIdentifier","src":"1711:9:33"},{"kind":"number","nativeSrc":"1722:2:33","nodeType":"YulLiteral","src":"1722:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1707:3:33","nodeType":"YulIdentifier","src":"1707:3:33"},"nativeSrc":"1707:18:33","nodeType":"YulFunctionCall","src":"1707:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1694:12:33","nodeType":"YulIdentifier","src":"1694:12:33"},"nativeSrc":"1694:32:33","nodeType":"YulFunctionCall","src":"1694:32:33"},"variables":[{"name":"value","nativeSrc":"1685:5:33","nodeType":"YulTypedName","src":"1685:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1760:5:33","nodeType":"YulIdentifier","src":"1760:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1735:24:33","nodeType":"YulIdentifier","src":"1735:24:33"},"nativeSrc":"1735:31:33","nodeType":"YulFunctionCall","src":"1735:31:33"},"nativeSrc":"1735:31:33","nodeType":"YulExpressionStatement","src":"1735:31:33"},{"nativeSrc":"1775:15:33","nodeType":"YulAssignment","src":"1775:15:33","value":{"name":"value","nativeSrc":"1785:5:33","nodeType":"YulIdentifier","src":"1785:5:33"},"variableNames":[{"name":"value1","nativeSrc":"1775:6:33","nodeType":"YulIdentifier","src":"1775:6:33"}]},{"nativeSrc":"1799:42:33","nodeType":"YulAssignment","src":"1799:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1826:9:33","nodeType":"YulIdentifier","src":"1826:9:33"},{"kind":"number","nativeSrc":"1837:2:33","nodeType":"YulLiteral","src":"1837:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1822:3:33","nodeType":"YulIdentifier","src":"1822:3:33"},"nativeSrc":"1822:18:33","nodeType":"YulFunctionCall","src":"1822:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1809:12:33","nodeType":"YulIdentifier","src":"1809:12:33"},"nativeSrc":"1809:32:33","nodeType":"YulFunctionCall","src":"1809:32:33"},"variableNames":[{"name":"value2","nativeSrc":"1799:6:33","nodeType":"YulIdentifier","src":"1799:6:33"}]},{"nativeSrc":"1850:42:33","nodeType":"YulAssignment","src":"1850:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1877:9:33","nodeType":"YulIdentifier","src":"1877:9:33"},{"kind":"number","nativeSrc":"1888:2:33","nodeType":"YulLiteral","src":"1888:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1873:3:33","nodeType":"YulIdentifier","src":"1873:3:33"},"nativeSrc":"1873:18:33","nodeType":"YulFunctionCall","src":"1873:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1860:12:33","nodeType":"YulIdentifier","src":"1860:12:33"},"nativeSrc":"1860:32:33","nodeType":"YulFunctionCall","src":"1860:32:33"},"variableNames":[{"name":"value3","nativeSrc":"1850:6:33","nodeType":"YulIdentifier","src":"1850:6:33"}]},{"nativeSrc":"1901:47:33","nodeType":"YulVariableDeclaration","src":"1901:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1932:9:33","nodeType":"YulIdentifier","src":"1932:9:33"},{"kind":"number","nativeSrc":"1943:3:33","nodeType":"YulLiteral","src":"1943:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1928:3:33","nodeType":"YulIdentifier","src":"1928:3:33"},"nativeSrc":"1928:19:33","nodeType":"YulFunctionCall","src":"1928:19:33"}],"functionName":{"name":"calldataload","nativeSrc":"1915:12:33","nodeType":"YulIdentifier","src":"1915:12:33"},"nativeSrc":"1915:33:33","nodeType":"YulFunctionCall","src":"1915:33:33"},"variables":[{"name":"offset","nativeSrc":"1905:6:33","nodeType":"YulTypedName","src":"1905:6:33","type":""}]},{"body":{"nativeSrc":"1991:16:33","nodeType":"YulBlock","src":"1991:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2000:1:33","nodeType":"YulLiteral","src":"2000:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"2003:1:33","nodeType":"YulLiteral","src":"2003:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1993:6:33","nodeType":"YulIdentifier","src":"1993:6:33"},"nativeSrc":"1993:12:33","nodeType":"YulFunctionCall","src":"1993:12:33"},"nativeSrc":"1993:12:33","nodeType":"YulExpressionStatement","src":"1993:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1963:6:33","nodeType":"YulIdentifier","src":"1963:6:33"},{"kind":"number","nativeSrc":"1971:18:33","nodeType":"YulLiteral","src":"1971:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1960:2:33","nodeType":"YulIdentifier","src":"1960:2:33"},"nativeSrc":"1960:30:33","nodeType":"YulFunctionCall","src":"1960:30:33"},"nativeSrc":"1957:50:33","nodeType":"YulIf","src":"1957:50:33"},{"nativeSrc":"2016:96:33","nodeType":"YulVariableDeclaration","src":"2016:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2084:9:33","nodeType":"YulIdentifier","src":"2084:9:33"},{"name":"offset","nativeSrc":"2095:6:33","nodeType":"YulIdentifier","src":"2095:6:33"}],"functionName":{"name":"add","nativeSrc":"2080:3:33","nodeType":"YulIdentifier","src":"2080:3:33"},"nativeSrc":"2080:22:33","nodeType":"YulFunctionCall","src":"2080:22:33"},{"name":"dataEnd","nativeSrc":"2104:7:33","nodeType":"YulIdentifier","src":"2104:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"2042:37:33","nodeType":"YulIdentifier","src":"2042:37:33"},"nativeSrc":"2042:70:33","nodeType":"YulFunctionCall","src":"2042:70:33"},"variables":[{"name":"value4_1","nativeSrc":"2020:8:33","nodeType":"YulTypedName","src":"2020:8:33","type":""},{"name":"value5_1","nativeSrc":"2030:8:33","nodeType":"YulTypedName","src":"2030:8:33","type":""}]},{"nativeSrc":"2121:18:33","nodeType":"YulAssignment","src":"2121:18:33","value":{"name":"value4_1","nativeSrc":"2131:8:33","nodeType":"YulIdentifier","src":"2131:8:33"},"variableNames":[{"name":"value4","nativeSrc":"2121:6:33","nodeType":"YulIdentifier","src":"2121:6:33"}]},{"nativeSrc":"2148:18:33","nodeType":"YulAssignment","src":"2148:18:33","value":{"name":"value5_1","nativeSrc":"2158:8:33","nodeType":"YulIdentifier","src":"2158:8:33"},"variableNames":[{"name":"value5","nativeSrc":"2148:6:33","nodeType":"YulIdentifier","src":"2148:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"1394:778:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1493:9:33","nodeType":"YulTypedName","src":"1493:9:33","type":""},{"name":"dataEnd","nativeSrc":"1504:7:33","nodeType":"YulTypedName","src":"1504:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1516:6:33","nodeType":"YulTypedName","src":"1516:6:33","type":""},{"name":"value1","nativeSrc":"1524:6:33","nodeType":"YulTypedName","src":"1524:6:33","type":""},{"name":"value2","nativeSrc":"1532:6:33","nodeType":"YulTypedName","src":"1532:6:33","type":""},{"name":"value3","nativeSrc":"1540:6:33","nodeType":"YulTypedName","src":"1540:6:33","type":""},{"name":"value4","nativeSrc":"1548:6:33","nodeType":"YulTypedName","src":"1548:6:33","type":""},{"name":"value5","nativeSrc":"1556:6:33","nodeType":"YulTypedName","src":"1556:6:33","type":""}],"src":"1394:778:33"},{"body":{"nativeSrc":"2304:125:33","nodeType":"YulBlock","src":"2304:125:33","statements":[{"nativeSrc":"2314:26:33","nodeType":"YulAssignment","src":"2314:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"2326:9:33","nodeType":"YulIdentifier","src":"2326:9:33"},{"kind":"number","nativeSrc":"2337:2:33","nodeType":"YulLiteral","src":"2337:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2322:3:33","nodeType":"YulIdentifier","src":"2322:3:33"},"nativeSrc":"2322:18:33","nodeType":"YulFunctionCall","src":"2322:18:33"},"variableNames":[{"name":"tail","nativeSrc":"2314:4:33","nodeType":"YulIdentifier","src":"2314:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2356:9:33","nodeType":"YulIdentifier","src":"2356:9:33"},{"arguments":[{"name":"value0","nativeSrc":"2371:6:33","nodeType":"YulIdentifier","src":"2371:6:33"},{"kind":"number","nativeSrc":"2379:42:33","nodeType":"YulLiteral","src":"2379:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2367:3:33","nodeType":"YulIdentifier","src":"2367:3:33"},"nativeSrc":"2367:55:33","nodeType":"YulFunctionCall","src":"2367:55:33"}],"functionName":{"name":"mstore","nativeSrc":"2349:6:33","nodeType":"YulIdentifier","src":"2349:6:33"},"nativeSrc":"2349:74:33","nodeType":"YulFunctionCall","src":"2349:74:33"},"nativeSrc":"2349:74:33","nodeType":"YulExpressionStatement","src":"2349:74:33"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed","nativeSrc":"2177:252:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2273:9:33","nodeType":"YulTypedName","src":"2273:9:33","type":""},{"name":"value0","nativeSrc":"2284:6:33","nodeType":"YulTypedName","src":"2284:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2295:4:33","nodeType":"YulTypedName","src":"2295:4:33","type":""}],"src":"2177:252:33"},{"body":{"nativeSrc":"2549:125:33","nodeType":"YulBlock","src":"2549:125:33","statements":[{"nativeSrc":"2559:26:33","nodeType":"YulAssignment","src":"2559:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"2571:9:33","nodeType":"YulIdentifier","src":"2571:9:33"},{"kind":"number","nativeSrc":"2582:2:33","nodeType":"YulLiteral","src":"2582:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2567:3:33","nodeType":"YulIdentifier","src":"2567:3:33"},"nativeSrc":"2567:18:33","nodeType":"YulFunctionCall","src":"2567:18:33"},"variableNames":[{"name":"tail","nativeSrc":"2559:4:33","nodeType":"YulIdentifier","src":"2559:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2601:9:33","nodeType":"YulIdentifier","src":"2601:9:33"},{"arguments":[{"name":"value0","nativeSrc":"2616:6:33","nodeType":"YulIdentifier","src":"2616:6:33"},{"kind":"number","nativeSrc":"2624:42:33","nodeType":"YulLiteral","src":"2624:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2612:3:33","nodeType":"YulIdentifier","src":"2612:3:33"},"nativeSrc":"2612:55:33","nodeType":"YulFunctionCall","src":"2612:55:33"}],"functionName":{"name":"mstore","nativeSrc":"2594:6:33","nodeType":"YulIdentifier","src":"2594:6:33"},"nativeSrc":"2594:74:33","nodeType":"YulFunctionCall","src":"2594:74:33"},"nativeSrc":"2594:74:33","nodeType":"YulExpressionStatement","src":"2594:74:33"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed","nativeSrc":"2434:240:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2518:9:33","nodeType":"YulTypedName","src":"2518:9:33","type":""},{"name":"value0","nativeSrc":"2529:6:33","nodeType":"YulTypedName","src":"2529:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2540:4:33","nodeType":"YulTypedName","src":"2540:4:33","type":""}],"src":"2434:240:33"},{"body":{"nativeSrc":"2808:318:33","nodeType":"YulBlock","src":"2808:318:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2825:9:33","nodeType":"YulIdentifier","src":"2825:9:33"},{"kind":"number","nativeSrc":"2836:2:33","nodeType":"YulLiteral","src":"2836:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2818:6:33","nodeType":"YulIdentifier","src":"2818:6:33"},"nativeSrc":"2818:21:33","nodeType":"YulFunctionCall","src":"2818:21:33"},"nativeSrc":"2818:21:33","nodeType":"YulExpressionStatement","src":"2818:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2859:9:33","nodeType":"YulIdentifier","src":"2859:9:33"},{"kind":"number","nativeSrc":"2870:2:33","nodeType":"YulLiteral","src":"2870:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2855:3:33","nodeType":"YulIdentifier","src":"2855:3:33"},"nativeSrc":"2855:18:33","nodeType":"YulFunctionCall","src":"2855:18:33"},{"name":"value1","nativeSrc":"2875:6:33","nodeType":"YulIdentifier","src":"2875:6:33"}],"functionName":{"name":"mstore","nativeSrc":"2848:6:33","nodeType":"YulIdentifier","src":"2848:6:33"},"nativeSrc":"2848:34:33","nodeType":"YulFunctionCall","src":"2848:34:33"},"nativeSrc":"2848:34:33","nodeType":"YulExpressionStatement","src":"2848:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2908:9:33","nodeType":"YulIdentifier","src":"2908:9:33"},{"kind":"number","nativeSrc":"2919:2:33","nodeType":"YulLiteral","src":"2919:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2904:3:33","nodeType":"YulIdentifier","src":"2904:3:33"},"nativeSrc":"2904:18:33","nodeType":"YulFunctionCall","src":"2904:18:33"},{"name":"value0","nativeSrc":"2924:6:33","nodeType":"YulIdentifier","src":"2924:6:33"},{"name":"value1","nativeSrc":"2932:6:33","nodeType":"YulIdentifier","src":"2932:6:33"}],"functionName":{"name":"calldatacopy","nativeSrc":"2891:12:33","nodeType":"YulIdentifier","src":"2891:12:33"},"nativeSrc":"2891:48:33","nodeType":"YulFunctionCall","src":"2891:48:33"},"nativeSrc":"2891:48:33","nodeType":"YulExpressionStatement","src":"2891:48:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2963:9:33","nodeType":"YulIdentifier","src":"2963:9:33"},{"name":"value1","nativeSrc":"2974:6:33","nodeType":"YulIdentifier","src":"2974:6:33"}],"functionName":{"name":"add","nativeSrc":"2959:3:33","nodeType":"YulIdentifier","src":"2959:3:33"},"nativeSrc":"2959:22:33","nodeType":"YulFunctionCall","src":"2959:22:33"},{"kind":"number","nativeSrc":"2983:2:33","nodeType":"YulLiteral","src":"2983:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2955:3:33","nodeType":"YulIdentifier","src":"2955:3:33"},"nativeSrc":"2955:31:33","nodeType":"YulFunctionCall","src":"2955:31:33"},{"kind":"number","nativeSrc":"2988:1:33","nodeType":"YulLiteral","src":"2988:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2948:6:33","nodeType":"YulIdentifier","src":"2948:6:33"},"nativeSrc":"2948:42:33","nodeType":"YulFunctionCall","src":"2948:42:33"},"nativeSrc":"2948:42:33","nodeType":"YulExpressionStatement","src":"2948:42:33"},{"nativeSrc":"2999:121:33","nodeType":"YulAssignment","src":"2999:121:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3015:9:33","nodeType":"YulIdentifier","src":"3015:9:33"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"3034:6:33","nodeType":"YulIdentifier","src":"3034:6:33"},{"kind":"number","nativeSrc":"3042:2:33","nodeType":"YulLiteral","src":"3042:2:33","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3030:3:33","nodeType":"YulIdentifier","src":"3030:3:33"},"nativeSrc":"3030:15:33","nodeType":"YulFunctionCall","src":"3030:15:33"},{"kind":"number","nativeSrc":"3047:66:33","nodeType":"YulLiteral","src":"3047:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"3026:3:33","nodeType":"YulIdentifier","src":"3026:3:33"},"nativeSrc":"3026:88:33","nodeType":"YulFunctionCall","src":"3026:88:33"}],"functionName":{"name":"add","nativeSrc":"3011:3:33","nodeType":"YulIdentifier","src":"3011:3:33"},"nativeSrc":"3011:104:33","nodeType":"YulFunctionCall","src":"3011:104:33"},{"kind":"number","nativeSrc":"3117:2:33","nodeType":"YulLiteral","src":"3117:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3007:3:33","nodeType":"YulIdentifier","src":"3007:3:33"},"nativeSrc":"3007:113:33","nodeType":"YulFunctionCall","src":"3007:113:33"},"variableNames":[{"name":"tail","nativeSrc":"2999:4:33","nodeType":"YulIdentifier","src":"2999:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"2679:447:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2769:9:33","nodeType":"YulTypedName","src":"2769:9:33","type":""},{"name":"value1","nativeSrc":"2780:6:33","nodeType":"YulTypedName","src":"2780:6:33","type":""},{"name":"value0","nativeSrc":"2788:6:33","nodeType":"YulTypedName","src":"2788:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2799:4:33","nodeType":"YulTypedName","src":"2799:4:33","type":""}],"src":"2679:447:33"},{"body":{"nativeSrc":"3201:177:33","nodeType":"YulBlock","src":"3201:177:33","statements":[{"body":{"nativeSrc":"3247:16:33","nodeType":"YulBlock","src":"3247:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3256:1:33","nodeType":"YulLiteral","src":"3256:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"3259:1:33","nodeType":"YulLiteral","src":"3259:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3249:6:33","nodeType":"YulIdentifier","src":"3249:6:33"},"nativeSrc":"3249:12:33","nodeType":"YulFunctionCall","src":"3249:12:33"},"nativeSrc":"3249:12:33","nodeType":"YulExpressionStatement","src":"3249:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3222:7:33","nodeType":"YulIdentifier","src":"3222:7:33"},{"name":"headStart","nativeSrc":"3231:9:33","nodeType":"YulIdentifier","src":"3231:9:33"}],"functionName":{"name":"sub","nativeSrc":"3218:3:33","nodeType":"YulIdentifier","src":"3218:3:33"},"nativeSrc":"3218:23:33","nodeType":"YulFunctionCall","src":"3218:23:33"},{"kind":"number","nativeSrc":"3243:2:33","nodeType":"YulLiteral","src":"3243:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3214:3:33","nodeType":"YulIdentifier","src":"3214:3:33"},"nativeSrc":"3214:32:33","nodeType":"YulFunctionCall","src":"3214:32:33"},"nativeSrc":"3211:52:33","nodeType":"YulIf","src":"3211:52:33"},{"nativeSrc":"3272:36:33","nodeType":"YulVariableDeclaration","src":"3272:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3298:9:33","nodeType":"YulIdentifier","src":"3298:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"3285:12:33","nodeType":"YulIdentifier","src":"3285:12:33"},"nativeSrc":"3285:23:33","nodeType":"YulFunctionCall","src":"3285:23:33"},"variables":[{"name":"value","nativeSrc":"3276:5:33","nodeType":"YulTypedName","src":"3276:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3342:5:33","nodeType":"YulIdentifier","src":"3342:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3317:24:33","nodeType":"YulIdentifier","src":"3317:24:33"},"nativeSrc":"3317:31:33","nodeType":"YulFunctionCall","src":"3317:31:33"},"nativeSrc":"3317:31:33","nodeType":"YulExpressionStatement","src":"3317:31:33"},{"nativeSrc":"3357:15:33","nodeType":"YulAssignment","src":"3357:15:33","value":{"name":"value","nativeSrc":"3367:5:33","nodeType":"YulIdentifier","src":"3367:5:33"},"variableNames":[{"name":"value0","nativeSrc":"3357:6:33","nodeType":"YulIdentifier","src":"3357:6:33"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3131:247:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3167:9:33","nodeType":"YulTypedName","src":"3167:9:33","type":""},{"name":"dataEnd","nativeSrc":"3178:7:33","nodeType":"YulTypedName","src":"3178:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3190:6:33","nodeType":"YulTypedName","src":"3190:6:33","type":""}],"src":"3131:247:33"},{"body":{"nativeSrc":"3453:110:33","nodeType":"YulBlock","src":"3453:110:33","statements":[{"body":{"nativeSrc":"3499:16:33","nodeType":"YulBlock","src":"3499:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3508:1:33","nodeType":"YulLiteral","src":"3508:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"3511:1:33","nodeType":"YulLiteral","src":"3511:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3501:6:33","nodeType":"YulIdentifier","src":"3501:6:33"},"nativeSrc":"3501:12:33","nodeType":"YulFunctionCall","src":"3501:12:33"},"nativeSrc":"3501:12:33","nodeType":"YulExpressionStatement","src":"3501:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3474:7:33","nodeType":"YulIdentifier","src":"3474:7:33"},{"name":"headStart","nativeSrc":"3483:9:33","nodeType":"YulIdentifier","src":"3483:9:33"}],"functionName":{"name":"sub","nativeSrc":"3470:3:33","nodeType":"YulIdentifier","src":"3470:3:33"},"nativeSrc":"3470:23:33","nodeType":"YulFunctionCall","src":"3470:23:33"},{"kind":"number","nativeSrc":"3495:2:33","nodeType":"YulLiteral","src":"3495:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3466:3:33","nodeType":"YulIdentifier","src":"3466:3:33"},"nativeSrc":"3466:32:33","nodeType":"YulFunctionCall","src":"3466:32:33"},"nativeSrc":"3463:52:33","nodeType":"YulIf","src":"3463:52:33"},{"nativeSrc":"3524:33:33","nodeType":"YulAssignment","src":"3524:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3547:9:33","nodeType":"YulIdentifier","src":"3547:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"3534:12:33","nodeType":"YulIdentifier","src":"3534:12:33"},"nativeSrc":"3534:23:33","nodeType":"YulFunctionCall","src":"3534:23:33"},"variableNames":[{"name":"value0","nativeSrc":"3524:6:33","nodeType":"YulIdentifier","src":"3524:6:33"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3383:180:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3419:9:33","nodeType":"YulTypedName","src":"3419:9:33","type":""},{"name":"dataEnd","nativeSrc":"3430:7:33","nodeType":"YulTypedName","src":"3430:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3442:6:33","nodeType":"YulTypedName","src":"3442:6:33","type":""}],"src":"3383:180:33"},{"body":{"nativeSrc":"3781:250:33","nodeType":"YulBlock","src":"3781:250:33","statements":[{"nativeSrc":"3791:27:33","nodeType":"YulAssignment","src":"3791:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3803:9:33","nodeType":"YulIdentifier","src":"3803:9:33"},{"kind":"number","nativeSrc":"3814:3:33","nodeType":"YulLiteral","src":"3814:3:33","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3799:3:33","nodeType":"YulIdentifier","src":"3799:3:33"},"nativeSrc":"3799:19:33","nodeType":"YulFunctionCall","src":"3799:19:33"},"variableNames":[{"name":"tail","nativeSrc":"3791:4:33","nodeType":"YulIdentifier","src":"3791:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3834:9:33","nodeType":"YulIdentifier","src":"3834:9:33"},{"name":"value0","nativeSrc":"3845:6:33","nodeType":"YulIdentifier","src":"3845:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3827:6:33","nodeType":"YulIdentifier","src":"3827:6:33"},"nativeSrc":"3827:25:33","nodeType":"YulFunctionCall","src":"3827:25:33"},"nativeSrc":"3827:25:33","nodeType":"YulExpressionStatement","src":"3827:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3872:9:33","nodeType":"YulIdentifier","src":"3872:9:33"},{"kind":"number","nativeSrc":"3883:2:33","nodeType":"YulLiteral","src":"3883:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3868:3:33","nodeType":"YulIdentifier","src":"3868:3:33"},"nativeSrc":"3868:18:33","nodeType":"YulFunctionCall","src":"3868:18:33"},{"name":"value1","nativeSrc":"3888:6:33","nodeType":"YulIdentifier","src":"3888:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3861:6:33","nodeType":"YulIdentifier","src":"3861:6:33"},"nativeSrc":"3861:34:33","nodeType":"YulFunctionCall","src":"3861:34:33"},"nativeSrc":"3861:34:33","nodeType":"YulExpressionStatement","src":"3861:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3915:9:33","nodeType":"YulIdentifier","src":"3915:9:33"},{"kind":"number","nativeSrc":"3926:2:33","nodeType":"YulLiteral","src":"3926:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3911:3:33","nodeType":"YulIdentifier","src":"3911:3:33"},"nativeSrc":"3911:18:33","nodeType":"YulFunctionCall","src":"3911:18:33"},{"name":"value2","nativeSrc":"3931:6:33","nodeType":"YulIdentifier","src":"3931:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3904:6:33","nodeType":"YulIdentifier","src":"3904:6:33"},"nativeSrc":"3904:34:33","nodeType":"YulFunctionCall","src":"3904:34:33"},"nativeSrc":"3904:34:33","nodeType":"YulExpressionStatement","src":"3904:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3958:9:33","nodeType":"YulIdentifier","src":"3958:9:33"},{"kind":"number","nativeSrc":"3969:2:33","nodeType":"YulLiteral","src":"3969:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3954:3:33","nodeType":"YulIdentifier","src":"3954:3:33"},"nativeSrc":"3954:18:33","nodeType":"YulFunctionCall","src":"3954:18:33"},{"name":"value3","nativeSrc":"3974:6:33","nodeType":"YulIdentifier","src":"3974:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3947:6:33","nodeType":"YulIdentifier","src":"3947:6:33"},"nativeSrc":"3947:34:33","nodeType":"YulFunctionCall","src":"3947:34:33"},"nativeSrc":"3947:34:33","nodeType":"YulExpressionStatement","src":"3947:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4001:9:33","nodeType":"YulIdentifier","src":"4001:9:33"},{"kind":"number","nativeSrc":"4012:3:33","nodeType":"YulLiteral","src":"4012:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3997:3:33","nodeType":"YulIdentifier","src":"3997:3:33"},"nativeSrc":"3997:19:33","nodeType":"YulFunctionCall","src":"3997:19:33"},{"name":"value4","nativeSrc":"4018:6:33","nodeType":"YulIdentifier","src":"4018:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3990:6:33","nodeType":"YulIdentifier","src":"3990:6:33"},"nativeSrc":"3990:35:33","nodeType":"YulFunctionCall","src":"3990:35:33"},"nativeSrc":"3990:35:33","nodeType":"YulExpressionStatement","src":"3990:35:33"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3568:463:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3718:9:33","nodeType":"YulTypedName","src":"3718:9:33","type":""},{"name":"value4","nativeSrc":"3729:6:33","nodeType":"YulTypedName","src":"3729:6:33","type":""},{"name":"value3","nativeSrc":"3737:6:33","nodeType":"YulTypedName","src":"3737:6:33","type":""},{"name":"value2","nativeSrc":"3745:6:33","nodeType":"YulTypedName","src":"3745:6:33","type":""},{"name":"value1","nativeSrc":"3753:6:33","nodeType":"YulTypedName","src":"3753:6:33","type":""},{"name":"value0","nativeSrc":"3761:6:33","nodeType":"YulTypedName","src":"3761:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3772:4:33","nodeType":"YulTypedName","src":"3772:4:33","type":""}],"src":"3568:463:33"},{"body":{"nativeSrc":"4140:279:33","nodeType":"YulBlock","src":"4140:279:33","statements":[{"body":{"nativeSrc":"4186:16:33","nodeType":"YulBlock","src":"4186:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4195:1:33","nodeType":"YulLiteral","src":"4195:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4198:1:33","nodeType":"YulLiteral","src":"4198:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4188:6:33","nodeType":"YulIdentifier","src":"4188:6:33"},"nativeSrc":"4188:12:33","nodeType":"YulFunctionCall","src":"4188:12:33"},"nativeSrc":"4188:12:33","nodeType":"YulExpressionStatement","src":"4188:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4161:7:33","nodeType":"YulIdentifier","src":"4161:7:33"},{"name":"headStart","nativeSrc":"4170:9:33","nodeType":"YulIdentifier","src":"4170:9:33"}],"functionName":{"name":"sub","nativeSrc":"4157:3:33","nodeType":"YulIdentifier","src":"4157:3:33"},"nativeSrc":"4157:23:33","nodeType":"YulFunctionCall","src":"4157:23:33"},{"kind":"number","nativeSrc":"4182:2:33","nodeType":"YulLiteral","src":"4182:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4153:3:33","nodeType":"YulIdentifier","src":"4153:3:33"},"nativeSrc":"4153:32:33","nodeType":"YulFunctionCall","src":"4153:32:33"},"nativeSrc":"4150:52:33","nodeType":"YulIf","src":"4150:52:33"},{"nativeSrc":"4211:33:33","nodeType":"YulAssignment","src":"4211:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"4234:9:33","nodeType":"YulIdentifier","src":"4234:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"4221:12:33","nodeType":"YulIdentifier","src":"4221:12:33"},"nativeSrc":"4221:23:33","nodeType":"YulFunctionCall","src":"4221:23:33"},"variableNames":[{"name":"value0","nativeSrc":"4211:6:33","nodeType":"YulIdentifier","src":"4211:6:33"}]},{"nativeSrc":"4253:45:33","nodeType":"YulVariableDeclaration","src":"4253:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4283:9:33","nodeType":"YulIdentifier","src":"4283:9:33"},{"kind":"number","nativeSrc":"4294:2:33","nodeType":"YulLiteral","src":"4294:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4279:3:33","nodeType":"YulIdentifier","src":"4279:3:33"},"nativeSrc":"4279:18:33","nodeType":"YulFunctionCall","src":"4279:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"4266:12:33","nodeType":"YulIdentifier","src":"4266:12:33"},"nativeSrc":"4266:32:33","nodeType":"YulFunctionCall","src":"4266:32:33"},"variables":[{"name":"value","nativeSrc":"4257:5:33","nodeType":"YulTypedName","src":"4257:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4332:5:33","nodeType":"YulIdentifier","src":"4332:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4307:24:33","nodeType":"YulIdentifier","src":"4307:24:33"},"nativeSrc":"4307:31:33","nodeType":"YulFunctionCall","src":"4307:31:33"},"nativeSrc":"4307:31:33","nodeType":"YulExpressionStatement","src":"4307:31:33"},{"nativeSrc":"4347:15:33","nodeType":"YulAssignment","src":"4347:15:33","value":{"name":"value","nativeSrc":"4357:5:33","nodeType":"YulIdentifier","src":"4357:5:33"},"variableNames":[{"name":"value1","nativeSrc":"4347:6:33","nodeType":"YulIdentifier","src":"4347:6:33"}]},{"nativeSrc":"4371:42:33","nodeType":"YulAssignment","src":"4371:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4398:9:33","nodeType":"YulIdentifier","src":"4398:9:33"},{"kind":"number","nativeSrc":"4409:2:33","nodeType":"YulLiteral","src":"4409:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4394:3:33","nodeType":"YulIdentifier","src":"4394:3:33"},"nativeSrc":"4394:18:33","nodeType":"YulFunctionCall","src":"4394:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"4381:12:33","nodeType":"YulIdentifier","src":"4381:12:33"},"nativeSrc":"4381:32:33","nodeType":"YulFunctionCall","src":"4381:32:33"},"variableNames":[{"name":"value2","nativeSrc":"4371:6:33","nodeType":"YulIdentifier","src":"4371:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256","nativeSrc":"4036:383:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4090:9:33","nodeType":"YulTypedName","src":"4090:9:33","type":""},{"name":"dataEnd","nativeSrc":"4101:7:33","nodeType":"YulTypedName","src":"4101:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4113:6:33","nodeType":"YulTypedName","src":"4113:6:33","type":""},{"name":"value1","nativeSrc":"4121:6:33","nodeType":"YulTypedName","src":"4121:6:33","type":""},{"name":"value2","nativeSrc":"4129:6:33","nodeType":"YulTypedName","src":"4129:6:33","type":""}],"src":"4036:383:33"},{"body":{"nativeSrc":"4538:286:33","nodeType":"YulBlock","src":"4538:286:33","statements":[{"nativeSrc":"4548:26:33","nodeType":"YulAssignment","src":"4548:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"4560:9:33","nodeType":"YulIdentifier","src":"4560:9:33"},{"kind":"number","nativeSrc":"4571:2:33","nodeType":"YulLiteral","src":"4571:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4556:3:33","nodeType":"YulIdentifier","src":"4556:3:33"},"nativeSrc":"4556:18:33","nodeType":"YulFunctionCall","src":"4556:18:33"},"variableNames":[{"name":"tail","nativeSrc":"4548:4:33","nodeType":"YulIdentifier","src":"4548:4:33"}]},{"body":{"nativeSrc":"4616:168:33","nodeType":"YulBlock","src":"4616:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4637:1:33","nodeType":"YulLiteral","src":"4637:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4640:77:33","nodeType":"YulLiteral","src":"4640:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4630:6:33","nodeType":"YulIdentifier","src":"4630:6:33"},"nativeSrc":"4630:88:33","nodeType":"YulFunctionCall","src":"4630:88:33"},"nativeSrc":"4630:88:33","nodeType":"YulExpressionStatement","src":"4630:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4738:1:33","nodeType":"YulLiteral","src":"4738:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"4741:4:33","nodeType":"YulLiteral","src":"4741:4:33","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"4731:6:33","nodeType":"YulIdentifier","src":"4731:6:33"},"nativeSrc":"4731:15:33","nodeType":"YulFunctionCall","src":"4731:15:33"},"nativeSrc":"4731:15:33","nodeType":"YulExpressionStatement","src":"4731:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4766:1:33","nodeType":"YulLiteral","src":"4766:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4769:4:33","nodeType":"YulLiteral","src":"4769:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4759:6:33","nodeType":"YulIdentifier","src":"4759:6:33"},"nativeSrc":"4759:15:33","nodeType":"YulFunctionCall","src":"4759:15:33"},"nativeSrc":"4759:15:33","nodeType":"YulExpressionStatement","src":"4759:15:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4596:6:33","nodeType":"YulIdentifier","src":"4596:6:33"},{"kind":"number","nativeSrc":"4604:1:33","nodeType":"YulLiteral","src":"4604:1:33","type":"","value":"5"}],"functionName":{"name":"lt","nativeSrc":"4593:2:33","nodeType":"YulIdentifier","src":"4593:2:33"},"nativeSrc":"4593:13:33","nodeType":"YulFunctionCall","src":"4593:13:33"}],"functionName":{"name":"iszero","nativeSrc":"4586:6:33","nodeType":"YulIdentifier","src":"4586:6:33"},"nativeSrc":"4586:21:33","nodeType":"YulFunctionCall","src":"4586:21:33"},"nativeSrc":"4583:201:33","nodeType":"YulIf","src":"4583:201:33"},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4800:9:33","nodeType":"YulIdentifier","src":"4800:9:33"},{"name":"value0","nativeSrc":"4811:6:33","nodeType":"YulIdentifier","src":"4811:6:33"}],"functionName":{"name":"mstore","nativeSrc":"4793:6:33","nodeType":"YulIdentifier","src":"4793:6:33"},"nativeSrc":"4793:25:33","nodeType":"YulFunctionCall","src":"4793:25:33"},"nativeSrc":"4793:25:33","nodeType":"YulExpressionStatement","src":"4793:25:33"}]},"name":"abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed","nativeSrc":"4424:400:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4507:9:33","nodeType":"YulTypedName","src":"4507:9:33","type":""},{"name":"value0","nativeSrc":"4518:6:33","nodeType":"YulTypedName","src":"4518:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4529:4:33","nodeType":"YulTypedName","src":"4529:4:33","type":""}],"src":"4424:400:33"},{"body":{"nativeSrc":"5053:879:33","nodeType":"YulBlock","src":"5053:879:33","statements":[{"body":{"nativeSrc":"5099:16:33","nodeType":"YulBlock","src":"5099:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5108:1:33","nodeType":"YulLiteral","src":"5108:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5111:1:33","nodeType":"YulLiteral","src":"5111:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5101:6:33","nodeType":"YulIdentifier","src":"5101:6:33"},"nativeSrc":"5101:12:33","nodeType":"YulFunctionCall","src":"5101:12:33"},"nativeSrc":"5101:12:33","nodeType":"YulExpressionStatement","src":"5101:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5074:7:33","nodeType":"YulIdentifier","src":"5074:7:33"},{"name":"headStart","nativeSrc":"5083:9:33","nodeType":"YulIdentifier","src":"5083:9:33"}],"functionName":{"name":"sub","nativeSrc":"5070:3:33","nodeType":"YulIdentifier","src":"5070:3:33"},"nativeSrc":"5070:23:33","nodeType":"YulFunctionCall","src":"5070:23:33"},{"kind":"number","nativeSrc":"5095:2:33","nodeType":"YulLiteral","src":"5095:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5066:3:33","nodeType":"YulIdentifier","src":"5066:3:33"},"nativeSrc":"5066:32:33","nodeType":"YulFunctionCall","src":"5066:32:33"},"nativeSrc":"5063:52:33","nodeType":"YulIf","src":"5063:52:33"},{"nativeSrc":"5124:37:33","nodeType":"YulVariableDeclaration","src":"5124:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"5151:9:33","nodeType":"YulIdentifier","src":"5151:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"5138:12:33","nodeType":"YulIdentifier","src":"5138:12:33"},"nativeSrc":"5138:23:33","nodeType":"YulFunctionCall","src":"5138:23:33"},"variables":[{"name":"offset","nativeSrc":"5128:6:33","nodeType":"YulTypedName","src":"5128:6:33","type":""}]},{"nativeSrc":"5170:28:33","nodeType":"YulVariableDeclaration","src":"5170:28:33","value":{"kind":"number","nativeSrc":"5180:18:33","nodeType":"YulLiteral","src":"5180:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5174:2:33","nodeType":"YulTypedName","src":"5174:2:33","type":""}]},{"body":{"nativeSrc":"5225:16:33","nodeType":"YulBlock","src":"5225:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5234:1:33","nodeType":"YulLiteral","src":"5234:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5237:1:33","nodeType":"YulLiteral","src":"5237:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5227:6:33","nodeType":"YulIdentifier","src":"5227:6:33"},"nativeSrc":"5227:12:33","nodeType":"YulFunctionCall","src":"5227:12:33"},"nativeSrc":"5227:12:33","nodeType":"YulExpressionStatement","src":"5227:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5213:6:33","nodeType":"YulIdentifier","src":"5213:6:33"},{"name":"_1","nativeSrc":"5221:2:33","nodeType":"YulIdentifier","src":"5221:2:33"}],"functionName":{"name":"gt","nativeSrc":"5210:2:33","nodeType":"YulIdentifier","src":"5210:2:33"},"nativeSrc":"5210:14:33","nodeType":"YulFunctionCall","src":"5210:14:33"},"nativeSrc":"5207:34:33","nodeType":"YulIf","src":"5207:34:33"},{"nativeSrc":"5250:96:33","nodeType":"YulVariableDeclaration","src":"5250:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5318:9:33","nodeType":"YulIdentifier","src":"5318:9:33"},{"name":"offset","nativeSrc":"5329:6:33","nodeType":"YulIdentifier","src":"5329:6:33"}],"functionName":{"name":"add","nativeSrc":"5314:3:33","nodeType":"YulIdentifier","src":"5314:3:33"},"nativeSrc":"5314:22:33","nodeType":"YulFunctionCall","src":"5314:22:33"},{"name":"dataEnd","nativeSrc":"5338:7:33","nodeType":"YulIdentifier","src":"5338:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5276:37:33","nodeType":"YulIdentifier","src":"5276:37:33"},"nativeSrc":"5276:70:33","nodeType":"YulFunctionCall","src":"5276:70:33"},"variables":[{"name":"value0_1","nativeSrc":"5254:8:33","nodeType":"YulTypedName","src":"5254:8:33","type":""},{"name":"value1_1","nativeSrc":"5264:8:33","nodeType":"YulTypedName","src":"5264:8:33","type":""}]},{"nativeSrc":"5355:18:33","nodeType":"YulAssignment","src":"5355:18:33","value":{"name":"value0_1","nativeSrc":"5365:8:33","nodeType":"YulIdentifier","src":"5365:8:33"},"variableNames":[{"name":"value0","nativeSrc":"5355:6:33","nodeType":"YulIdentifier","src":"5355:6:33"}]},{"nativeSrc":"5382:18:33","nodeType":"YulAssignment","src":"5382:18:33","value":{"name":"value1_1","nativeSrc":"5392:8:33","nodeType":"YulIdentifier","src":"5392:8:33"},"variableNames":[{"name":"value1","nativeSrc":"5382:6:33","nodeType":"YulIdentifier","src":"5382:6:33"}]},{"nativeSrc":"5409:48:33","nodeType":"YulVariableDeclaration","src":"5409:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5442:9:33","nodeType":"YulIdentifier","src":"5442:9:33"},{"kind":"number","nativeSrc":"5453:2:33","nodeType":"YulLiteral","src":"5453:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5438:3:33","nodeType":"YulIdentifier","src":"5438:3:33"},"nativeSrc":"5438:18:33","nodeType":"YulFunctionCall","src":"5438:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5425:12:33","nodeType":"YulIdentifier","src":"5425:12:33"},"nativeSrc":"5425:32:33","nodeType":"YulFunctionCall","src":"5425:32:33"},"variables":[{"name":"offset_1","nativeSrc":"5413:8:33","nodeType":"YulTypedName","src":"5413:8:33","type":""}]},{"body":{"nativeSrc":"5486:16:33","nodeType":"YulBlock","src":"5486:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5495:1:33","nodeType":"YulLiteral","src":"5495:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5498:1:33","nodeType":"YulLiteral","src":"5498:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5488:6:33","nodeType":"YulIdentifier","src":"5488:6:33"},"nativeSrc":"5488:12:33","nodeType":"YulFunctionCall","src":"5488:12:33"},"nativeSrc":"5488:12:33","nodeType":"YulExpressionStatement","src":"5488:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5472:8:33","nodeType":"YulIdentifier","src":"5472:8:33"},{"name":"_1","nativeSrc":"5482:2:33","nodeType":"YulIdentifier","src":"5482:2:33"}],"functionName":{"name":"gt","nativeSrc":"5469:2:33","nodeType":"YulIdentifier","src":"5469:2:33"},"nativeSrc":"5469:16:33","nodeType":"YulFunctionCall","src":"5469:16:33"},"nativeSrc":"5466:36:33","nodeType":"YulIf","src":"5466:36:33"},{"nativeSrc":"5511:98:33","nodeType":"YulVariableDeclaration","src":"5511:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5579:9:33","nodeType":"YulIdentifier","src":"5579:9:33"},{"name":"offset_1","nativeSrc":"5590:8:33","nodeType":"YulIdentifier","src":"5590:8:33"}],"functionName":{"name":"add","nativeSrc":"5575:3:33","nodeType":"YulIdentifier","src":"5575:3:33"},"nativeSrc":"5575:24:33","nodeType":"YulFunctionCall","src":"5575:24:33"},{"name":"dataEnd","nativeSrc":"5601:7:33","nodeType":"YulIdentifier","src":"5601:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5537:37:33","nodeType":"YulIdentifier","src":"5537:37:33"},"nativeSrc":"5537:72:33","nodeType":"YulFunctionCall","src":"5537:72:33"},"variables":[{"name":"value2_1","nativeSrc":"5515:8:33","nodeType":"YulTypedName","src":"5515:8:33","type":""},{"name":"value3_1","nativeSrc":"5525:8:33","nodeType":"YulTypedName","src":"5525:8:33","type":""}]},{"nativeSrc":"5618:18:33","nodeType":"YulAssignment","src":"5618:18:33","value":{"name":"value2_1","nativeSrc":"5628:8:33","nodeType":"YulIdentifier","src":"5628:8:33"},"variableNames":[{"name":"value2","nativeSrc":"5618:6:33","nodeType":"YulIdentifier","src":"5618:6:33"}]},{"nativeSrc":"5645:18:33","nodeType":"YulAssignment","src":"5645:18:33","value":{"name":"value3_1","nativeSrc":"5655:8:33","nodeType":"YulIdentifier","src":"5655:8:33"},"variableNames":[{"name":"value3","nativeSrc":"5645:6:33","nodeType":"YulIdentifier","src":"5645:6:33"}]},{"nativeSrc":"5672:48:33","nodeType":"YulVariableDeclaration","src":"5672:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5705:9:33","nodeType":"YulIdentifier","src":"5705:9:33"},{"kind":"number","nativeSrc":"5716:2:33","nodeType":"YulLiteral","src":"5716:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5701:3:33","nodeType":"YulIdentifier","src":"5701:3:33"},"nativeSrc":"5701:18:33","nodeType":"YulFunctionCall","src":"5701:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5688:12:33","nodeType":"YulIdentifier","src":"5688:12:33"},"nativeSrc":"5688:32:33","nodeType":"YulFunctionCall","src":"5688:32:33"},"variables":[{"name":"offset_2","nativeSrc":"5676:8:33","nodeType":"YulTypedName","src":"5676:8:33","type":""}]},{"body":{"nativeSrc":"5749:16:33","nodeType":"YulBlock","src":"5749:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5758:1:33","nodeType":"YulLiteral","src":"5758:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5761:1:33","nodeType":"YulLiteral","src":"5761:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5751:6:33","nodeType":"YulIdentifier","src":"5751:6:33"},"nativeSrc":"5751:12:33","nodeType":"YulFunctionCall","src":"5751:12:33"},"nativeSrc":"5751:12:33","nodeType":"YulExpressionStatement","src":"5751:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5735:8:33","nodeType":"YulIdentifier","src":"5735:8:33"},{"name":"_1","nativeSrc":"5745:2:33","nodeType":"YulIdentifier","src":"5745:2:33"}],"functionName":{"name":"gt","nativeSrc":"5732:2:33","nodeType":"YulIdentifier","src":"5732:2:33"},"nativeSrc":"5732:16:33","nodeType":"YulFunctionCall","src":"5732:16:33"},"nativeSrc":"5729:36:33","nodeType":"YulIf","src":"5729:36:33"},{"nativeSrc":"5774:98:33","nodeType":"YulVariableDeclaration","src":"5774:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5842:9:33","nodeType":"YulIdentifier","src":"5842:9:33"},{"name":"offset_2","nativeSrc":"5853:8:33","nodeType":"YulIdentifier","src":"5853:8:33"}],"functionName":{"name":"add","nativeSrc":"5838:3:33","nodeType":"YulIdentifier","src":"5838:3:33"},"nativeSrc":"5838:24:33","nodeType":"YulFunctionCall","src":"5838:24:33"},{"name":"dataEnd","nativeSrc":"5864:7:33","nodeType":"YulIdentifier","src":"5864:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5800:37:33","nodeType":"YulIdentifier","src":"5800:37:33"},"nativeSrc":"5800:72:33","nodeType":"YulFunctionCall","src":"5800:72:33"},"variables":[{"name":"value4_1","nativeSrc":"5778:8:33","nodeType":"YulTypedName","src":"5778:8:33","type":""},{"name":"value5_1","nativeSrc":"5788:8:33","nodeType":"YulTypedName","src":"5788:8:33","type":""}]},{"nativeSrc":"5881:18:33","nodeType":"YulAssignment","src":"5881:18:33","value":{"name":"value4_1","nativeSrc":"5891:8:33","nodeType":"YulIdentifier","src":"5891:8:33"},"variableNames":[{"name":"value4","nativeSrc":"5881:6:33","nodeType":"YulIdentifier","src":"5881:6:33"}]},{"nativeSrc":"5908:18:33","nodeType":"YulAssignment","src":"5908:18:33","value":{"name":"value5_1","nativeSrc":"5918:8:33","nodeType":"YulIdentifier","src":"5918:8:33"},"variableNames":[{"name":"value5","nativeSrc":"5908:6:33","nodeType":"YulIdentifier","src":"5908:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4829:1103:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4979:9:33","nodeType":"YulTypedName","src":"4979:9:33","type":""},{"name":"dataEnd","nativeSrc":"4990:7:33","nodeType":"YulTypedName","src":"4990:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5002:6:33","nodeType":"YulTypedName","src":"5002:6:33","type":""},{"name":"value1","nativeSrc":"5010:6:33","nodeType":"YulTypedName","src":"5010:6:33","type":""},{"name":"value2","nativeSrc":"5018:6:33","nodeType":"YulTypedName","src":"5018:6:33","type":""},{"name":"value3","nativeSrc":"5026:6:33","nodeType":"YulTypedName","src":"5026:6:33","type":""},{"name":"value4","nativeSrc":"5034:6:33","nodeType":"YulTypedName","src":"5034:6:33","type":""},{"name":"value5","nativeSrc":"5042:6:33","nodeType":"YulTypedName","src":"5042:6:33","type":""}],"src":"4829:1103:33"},{"body":{"nativeSrc":"6058:264:33","nodeType":"YulBlock","src":"6058:264:33","statements":[{"body":{"nativeSrc":"6105:16:33","nodeType":"YulBlock","src":"6105:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6114:1:33","nodeType":"YulLiteral","src":"6114:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6117:1:33","nodeType":"YulLiteral","src":"6117:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6107:6:33","nodeType":"YulIdentifier","src":"6107:6:33"},"nativeSrc":"6107:12:33","nodeType":"YulFunctionCall","src":"6107:12:33"},"nativeSrc":"6107:12:33","nodeType":"YulExpressionStatement","src":"6107:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6079:7:33","nodeType":"YulIdentifier","src":"6079:7:33"},{"name":"headStart","nativeSrc":"6088:9:33","nodeType":"YulIdentifier","src":"6088:9:33"}],"functionName":{"name":"sub","nativeSrc":"6075:3:33","nodeType":"YulIdentifier","src":"6075:3:33"},"nativeSrc":"6075:23:33","nodeType":"YulFunctionCall","src":"6075:23:33"},{"kind":"number","nativeSrc":"6100:3:33","nodeType":"YulLiteral","src":"6100:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"6071:3:33","nodeType":"YulIdentifier","src":"6071:3:33"},"nativeSrc":"6071:33:33","nodeType":"YulFunctionCall","src":"6071:33:33"},"nativeSrc":"6068:53:33","nodeType":"YulIf","src":"6068:53:33"},{"nativeSrc":"6130:33:33","nodeType":"YulAssignment","src":"6130:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"6153:9:33","nodeType":"YulIdentifier","src":"6153:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"6140:12:33","nodeType":"YulIdentifier","src":"6140:12:33"},"nativeSrc":"6140:23:33","nodeType":"YulFunctionCall","src":"6140:23:33"},"variableNames":[{"name":"value0","nativeSrc":"6130:6:33","nodeType":"YulIdentifier","src":"6130:6:33"}]},{"nativeSrc":"6172:42:33","nodeType":"YulAssignment","src":"6172:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6199:9:33","nodeType":"YulIdentifier","src":"6199:9:33"},{"kind":"number","nativeSrc":"6210:2:33","nodeType":"YulLiteral","src":"6210:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6195:3:33","nodeType":"YulIdentifier","src":"6195:3:33"},"nativeSrc":"6195:18:33","nodeType":"YulFunctionCall","src":"6195:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"6182:12:33","nodeType":"YulIdentifier","src":"6182:12:33"},"nativeSrc":"6182:32:33","nodeType":"YulFunctionCall","src":"6182:32:33"},"variableNames":[{"name":"value1","nativeSrc":"6172:6:33","nodeType":"YulIdentifier","src":"6172:6:33"}]},{"nativeSrc":"6223:42:33","nodeType":"YulAssignment","src":"6223:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6250:9:33","nodeType":"YulIdentifier","src":"6250:9:33"},{"kind":"number","nativeSrc":"6261:2:33","nodeType":"YulLiteral","src":"6261:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6246:3:33","nodeType":"YulIdentifier","src":"6246:3:33"},"nativeSrc":"6246:18:33","nodeType":"YulFunctionCall","src":"6246:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"6233:12:33","nodeType":"YulIdentifier","src":"6233:12:33"},"nativeSrc":"6233:32:33","nodeType":"YulFunctionCall","src":"6233:32:33"},"variableNames":[{"name":"value2","nativeSrc":"6223:6:33","nodeType":"YulIdentifier","src":"6223:6:33"}]},{"nativeSrc":"6274:42:33","nodeType":"YulAssignment","src":"6274:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6301:9:33","nodeType":"YulIdentifier","src":"6301:9:33"},{"kind":"number","nativeSrc":"6312:2:33","nodeType":"YulLiteral","src":"6312:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6297:3:33","nodeType":"YulIdentifier","src":"6297:3:33"},"nativeSrc":"6297:18:33","nodeType":"YulFunctionCall","src":"6297:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"6284:12:33","nodeType":"YulIdentifier","src":"6284:12:33"},"nativeSrc":"6284:32:33","nodeType":"YulFunctionCall","src":"6284:32:33"},"variableNames":[{"name":"value3","nativeSrc":"6274:6:33","nodeType":"YulIdentifier","src":"6274:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256","nativeSrc":"5937:385:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6000:9:33","nodeType":"YulTypedName","src":"6000:9:33","type":""},{"name":"dataEnd","nativeSrc":"6011:7:33","nodeType":"YulTypedName","src":"6011:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6023:6:33","nodeType":"YulTypedName","src":"6023:6:33","type":""},{"name":"value1","nativeSrc":"6031:6:33","nodeType":"YulTypedName","src":"6031:6:33","type":""},{"name":"value2","nativeSrc":"6039:6:33","nodeType":"YulTypedName","src":"6039:6:33","type":""},{"name":"value3","nativeSrc":"6047:6:33","nodeType":"YulTypedName","src":"6047:6:33","type":""}],"src":"5937:385:33"},{"body":{"nativeSrc":"6428:125:33","nodeType":"YulBlock","src":"6428:125:33","statements":[{"nativeSrc":"6438:26:33","nodeType":"YulAssignment","src":"6438:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"6450:9:33","nodeType":"YulIdentifier","src":"6450:9:33"},{"kind":"number","nativeSrc":"6461:2:33","nodeType":"YulLiteral","src":"6461:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6446:3:33","nodeType":"YulIdentifier","src":"6446:3:33"},"nativeSrc":"6446:18:33","nodeType":"YulFunctionCall","src":"6446:18:33"},"variableNames":[{"name":"tail","nativeSrc":"6438:4:33","nodeType":"YulIdentifier","src":"6438:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6480:9:33","nodeType":"YulIdentifier","src":"6480:9:33"},{"arguments":[{"name":"value0","nativeSrc":"6495:6:33","nodeType":"YulIdentifier","src":"6495:6:33"},{"kind":"number","nativeSrc":"6503:42:33","nodeType":"YulLiteral","src":"6503:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6491:3:33","nodeType":"YulIdentifier","src":"6491:3:33"},"nativeSrc":"6491:55:33","nodeType":"YulFunctionCall","src":"6491:55:33"}],"functionName":{"name":"mstore","nativeSrc":"6473:6:33","nodeType":"YulIdentifier","src":"6473:6:33"},"nativeSrc":"6473:74:33","nodeType":"YulFunctionCall","src":"6473:74:33"},"nativeSrc":"6473:74:33","nodeType":"YulExpressionStatement","src":"6473:74:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"6327:226:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6397:9:33","nodeType":"YulTypedName","src":"6397:9:33","type":""},{"name":"value0","nativeSrc":"6408:6:33","nodeType":"YulTypedName","src":"6408:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6419:4:33","nodeType":"YulTypedName","src":"6419:4:33","type":""}],"src":"6327:226:33"},{"body":{"nativeSrc":"6783:879:33","nodeType":"YulBlock","src":"6783:879:33","statements":[{"body":{"nativeSrc":"6829:16:33","nodeType":"YulBlock","src":"6829:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6838:1:33","nodeType":"YulLiteral","src":"6838:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6841:1:33","nodeType":"YulLiteral","src":"6841:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6831:6:33","nodeType":"YulIdentifier","src":"6831:6:33"},"nativeSrc":"6831:12:33","nodeType":"YulFunctionCall","src":"6831:12:33"},"nativeSrc":"6831:12:33","nodeType":"YulExpressionStatement","src":"6831:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6804:7:33","nodeType":"YulIdentifier","src":"6804:7:33"},{"name":"headStart","nativeSrc":"6813:9:33","nodeType":"YulIdentifier","src":"6813:9:33"}],"functionName":{"name":"sub","nativeSrc":"6800:3:33","nodeType":"YulIdentifier","src":"6800:3:33"},"nativeSrc":"6800:23:33","nodeType":"YulFunctionCall","src":"6800:23:33"},{"kind":"number","nativeSrc":"6825:2:33","nodeType":"YulLiteral","src":"6825:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6796:3:33","nodeType":"YulIdentifier","src":"6796:3:33"},"nativeSrc":"6796:32:33","nodeType":"YulFunctionCall","src":"6796:32:33"},"nativeSrc":"6793:52:33","nodeType":"YulIf","src":"6793:52:33"},{"nativeSrc":"6854:37:33","nodeType":"YulVariableDeclaration","src":"6854:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"6881:9:33","nodeType":"YulIdentifier","src":"6881:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"6868:12:33","nodeType":"YulIdentifier","src":"6868:12:33"},"nativeSrc":"6868:23:33","nodeType":"YulFunctionCall","src":"6868:23:33"},"variables":[{"name":"offset","nativeSrc":"6858:6:33","nodeType":"YulTypedName","src":"6858:6:33","type":""}]},{"nativeSrc":"6900:28:33","nodeType":"YulVariableDeclaration","src":"6900:28:33","value":{"kind":"number","nativeSrc":"6910:18:33","nodeType":"YulLiteral","src":"6910:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6904:2:33","nodeType":"YulTypedName","src":"6904:2:33","type":""}]},{"body":{"nativeSrc":"6955:16:33","nodeType":"YulBlock","src":"6955:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6964:1:33","nodeType":"YulLiteral","src":"6964:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6967:1:33","nodeType":"YulLiteral","src":"6967:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6957:6:33","nodeType":"YulIdentifier","src":"6957:6:33"},"nativeSrc":"6957:12:33","nodeType":"YulFunctionCall","src":"6957:12:33"},"nativeSrc":"6957:12:33","nodeType":"YulExpressionStatement","src":"6957:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6943:6:33","nodeType":"YulIdentifier","src":"6943:6:33"},{"name":"_1","nativeSrc":"6951:2:33","nodeType":"YulIdentifier","src":"6951:2:33"}],"functionName":{"name":"gt","nativeSrc":"6940:2:33","nodeType":"YulIdentifier","src":"6940:2:33"},"nativeSrc":"6940:14:33","nodeType":"YulFunctionCall","src":"6940:14:33"},"nativeSrc":"6937:34:33","nodeType":"YulIf","src":"6937:34:33"},{"nativeSrc":"6980:96:33","nodeType":"YulVariableDeclaration","src":"6980:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7048:9:33","nodeType":"YulIdentifier","src":"7048:9:33"},{"name":"offset","nativeSrc":"7059:6:33","nodeType":"YulIdentifier","src":"7059:6:33"}],"functionName":{"name":"add","nativeSrc":"7044:3:33","nodeType":"YulIdentifier","src":"7044:3:33"},"nativeSrc":"7044:22:33","nodeType":"YulFunctionCall","src":"7044:22:33"},{"name":"dataEnd","nativeSrc":"7068:7:33","nodeType":"YulIdentifier","src":"7068:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"7006:37:33","nodeType":"YulIdentifier","src":"7006:37:33"},"nativeSrc":"7006:70:33","nodeType":"YulFunctionCall","src":"7006:70:33"},"variables":[{"name":"value0_1","nativeSrc":"6984:8:33","nodeType":"YulTypedName","src":"6984:8:33","type":""},{"name":"value1_1","nativeSrc":"6994:8:33","nodeType":"YulTypedName","src":"6994:8:33","type":""}]},{"nativeSrc":"7085:18:33","nodeType":"YulAssignment","src":"7085:18:33","value":{"name":"value0_1","nativeSrc":"7095:8:33","nodeType":"YulIdentifier","src":"7095:8:33"},"variableNames":[{"name":"value0","nativeSrc":"7085:6:33","nodeType":"YulIdentifier","src":"7085:6:33"}]},{"nativeSrc":"7112:18:33","nodeType":"YulAssignment","src":"7112:18:33","value":{"name":"value1_1","nativeSrc":"7122:8:33","nodeType":"YulIdentifier","src":"7122:8:33"},"variableNames":[{"name":"value1","nativeSrc":"7112:6:33","nodeType":"YulIdentifier","src":"7112:6:33"}]},{"nativeSrc":"7139:48:33","nodeType":"YulVariableDeclaration","src":"7139:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7172:9:33","nodeType":"YulIdentifier","src":"7172:9:33"},{"kind":"number","nativeSrc":"7183:2:33","nodeType":"YulLiteral","src":"7183:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7168:3:33","nodeType":"YulIdentifier","src":"7168:3:33"},"nativeSrc":"7168:18:33","nodeType":"YulFunctionCall","src":"7168:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"7155:12:33","nodeType":"YulIdentifier","src":"7155:12:33"},"nativeSrc":"7155:32:33","nodeType":"YulFunctionCall","src":"7155:32:33"},"variables":[{"name":"offset_1","nativeSrc":"7143:8:33","nodeType":"YulTypedName","src":"7143:8:33","type":""}]},{"body":{"nativeSrc":"7216:16:33","nodeType":"YulBlock","src":"7216:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7225:1:33","nodeType":"YulLiteral","src":"7225:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7228:1:33","nodeType":"YulLiteral","src":"7228:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7218:6:33","nodeType":"YulIdentifier","src":"7218:6:33"},"nativeSrc":"7218:12:33","nodeType":"YulFunctionCall","src":"7218:12:33"},"nativeSrc":"7218:12:33","nodeType":"YulExpressionStatement","src":"7218:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7202:8:33","nodeType":"YulIdentifier","src":"7202:8:33"},{"name":"_1","nativeSrc":"7212:2:33","nodeType":"YulIdentifier","src":"7212:2:33"}],"functionName":{"name":"gt","nativeSrc":"7199:2:33","nodeType":"YulIdentifier","src":"7199:2:33"},"nativeSrc":"7199:16:33","nodeType":"YulFunctionCall","src":"7199:16:33"},"nativeSrc":"7196:36:33","nodeType":"YulIf","src":"7196:36:33"},{"nativeSrc":"7241:98:33","nodeType":"YulVariableDeclaration","src":"7241:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7309:9:33","nodeType":"YulIdentifier","src":"7309:9:33"},{"name":"offset_1","nativeSrc":"7320:8:33","nodeType":"YulIdentifier","src":"7320:8:33"}],"functionName":{"name":"add","nativeSrc":"7305:3:33","nodeType":"YulIdentifier","src":"7305:3:33"},"nativeSrc":"7305:24:33","nodeType":"YulFunctionCall","src":"7305:24:33"},{"name":"dataEnd","nativeSrc":"7331:7:33","nodeType":"YulIdentifier","src":"7331:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"7267:37:33","nodeType":"YulIdentifier","src":"7267:37:33"},"nativeSrc":"7267:72:33","nodeType":"YulFunctionCall","src":"7267:72:33"},"variables":[{"name":"value2_1","nativeSrc":"7245:8:33","nodeType":"YulTypedName","src":"7245:8:33","type":""},{"name":"value3_1","nativeSrc":"7255:8:33","nodeType":"YulTypedName","src":"7255:8:33","type":""}]},{"nativeSrc":"7348:18:33","nodeType":"YulAssignment","src":"7348:18:33","value":{"name":"value2_1","nativeSrc":"7358:8:33","nodeType":"YulIdentifier","src":"7358:8:33"},"variableNames":[{"name":"value2","nativeSrc":"7348:6:33","nodeType":"YulIdentifier","src":"7348:6:33"}]},{"nativeSrc":"7375:18:33","nodeType":"YulAssignment","src":"7375:18:33","value":{"name":"value3_1","nativeSrc":"7385:8:33","nodeType":"YulIdentifier","src":"7385:8:33"},"variableNames":[{"name":"value3","nativeSrc":"7375:6:33","nodeType":"YulIdentifier","src":"7375:6:33"}]},{"nativeSrc":"7402:48:33","nodeType":"YulVariableDeclaration","src":"7402:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7435:9:33","nodeType":"YulIdentifier","src":"7435:9:33"},{"kind":"number","nativeSrc":"7446:2:33","nodeType":"YulLiteral","src":"7446:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7431:3:33","nodeType":"YulIdentifier","src":"7431:3:33"},"nativeSrc":"7431:18:33","nodeType":"YulFunctionCall","src":"7431:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"7418:12:33","nodeType":"YulIdentifier","src":"7418:12:33"},"nativeSrc":"7418:32:33","nodeType":"YulFunctionCall","src":"7418:32:33"},"variables":[{"name":"offset_2","nativeSrc":"7406:8:33","nodeType":"YulTypedName","src":"7406:8:33","type":""}]},{"body":{"nativeSrc":"7479:16:33","nodeType":"YulBlock","src":"7479:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7488:1:33","nodeType":"YulLiteral","src":"7488:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7491:1:33","nodeType":"YulLiteral","src":"7491:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7481:6:33","nodeType":"YulIdentifier","src":"7481:6:33"},"nativeSrc":"7481:12:33","nodeType":"YulFunctionCall","src":"7481:12:33"},"nativeSrc":"7481:12:33","nodeType":"YulExpressionStatement","src":"7481:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7465:8:33","nodeType":"YulIdentifier","src":"7465:8:33"},{"name":"_1","nativeSrc":"7475:2:33","nodeType":"YulIdentifier","src":"7475:2:33"}],"functionName":{"name":"gt","nativeSrc":"7462:2:33","nodeType":"YulIdentifier","src":"7462:2:33"},"nativeSrc":"7462:16:33","nodeType":"YulFunctionCall","src":"7462:16:33"},"nativeSrc":"7459:36:33","nodeType":"YulIf","src":"7459:36:33"},{"nativeSrc":"7504:98:33","nodeType":"YulVariableDeclaration","src":"7504:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7572:9:33","nodeType":"YulIdentifier","src":"7572:9:33"},{"name":"offset_2","nativeSrc":"7583:8:33","nodeType":"YulIdentifier","src":"7583:8:33"}],"functionName":{"name":"add","nativeSrc":"7568:3:33","nodeType":"YulIdentifier","src":"7568:3:33"},"nativeSrc":"7568:24:33","nodeType":"YulFunctionCall","src":"7568:24:33"},{"name":"dataEnd","nativeSrc":"7594:7:33","nodeType":"YulIdentifier","src":"7594:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"7530:37:33","nodeType":"YulIdentifier","src":"7530:37:33"},"nativeSrc":"7530:72:33","nodeType":"YulFunctionCall","src":"7530:72:33"},"variables":[{"name":"value4_1","nativeSrc":"7508:8:33","nodeType":"YulTypedName","src":"7508:8:33","type":""},{"name":"value5_1","nativeSrc":"7518:8:33","nodeType":"YulTypedName","src":"7518:8:33","type":""}]},{"nativeSrc":"7611:18:33","nodeType":"YulAssignment","src":"7611:18:33","value":{"name":"value4_1","nativeSrc":"7621:8:33","nodeType":"YulIdentifier","src":"7621:8:33"},"variableNames":[{"name":"value4","nativeSrc":"7611:6:33","nodeType":"YulIdentifier","src":"7611:6:33"}]},{"nativeSrc":"7638:18:33","nodeType":"YulAssignment","src":"7638:18:33","value":{"name":"value5_1","nativeSrc":"7648:8:33","nodeType":"YulIdentifier","src":"7648:8:33"},"variableNames":[{"name":"value5","nativeSrc":"7638:6:33","nodeType":"YulIdentifier","src":"7638:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6558:1104:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6709:9:33","nodeType":"YulTypedName","src":"6709:9:33","type":""},{"name":"dataEnd","nativeSrc":"6720:7:33","nodeType":"YulTypedName","src":"6720:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6732:6:33","nodeType":"YulTypedName","src":"6732:6:33","type":""},{"name":"value1","nativeSrc":"6740:6:33","nodeType":"YulTypedName","src":"6740:6:33","type":""},{"name":"value2","nativeSrc":"6748:6:33","nodeType":"YulTypedName","src":"6748:6:33","type":""},{"name":"value3","nativeSrc":"6756:6:33","nodeType":"YulTypedName","src":"6756:6:33","type":""},{"name":"value4","nativeSrc":"6764:6:33","nodeType":"YulTypedName","src":"6764:6:33","type":""},{"name":"value5","nativeSrc":"6772:6:33","nodeType":"YulTypedName","src":"6772:6:33","type":""}],"src":"6558:1104:33"},{"body":{"nativeSrc":"7768:76:33","nodeType":"YulBlock","src":"7768:76:33","statements":[{"nativeSrc":"7778:26:33","nodeType":"YulAssignment","src":"7778:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"7790:9:33","nodeType":"YulIdentifier","src":"7790:9:33"},{"kind":"number","nativeSrc":"7801:2:33","nodeType":"YulLiteral","src":"7801:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7786:3:33","nodeType":"YulIdentifier","src":"7786:3:33"},"nativeSrc":"7786:18:33","nodeType":"YulFunctionCall","src":"7786:18:33"},"variableNames":[{"name":"tail","nativeSrc":"7778:4:33","nodeType":"YulIdentifier","src":"7778:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7820:9:33","nodeType":"YulIdentifier","src":"7820:9:33"},{"name":"value0","nativeSrc":"7831:6:33","nodeType":"YulIdentifier","src":"7831:6:33"}],"functionName":{"name":"mstore","nativeSrc":"7813:6:33","nodeType":"YulIdentifier","src":"7813:6:33"},"nativeSrc":"7813:25:33","nodeType":"YulFunctionCall","src":"7813:25:33"},"nativeSrc":"7813:25:33","nodeType":"YulExpressionStatement","src":"7813:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"7667:177:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7737:9:33","nodeType":"YulTypedName","src":"7737:9:33","type":""},{"name":"value0","nativeSrc":"7748:6:33","nodeType":"YulTypedName","src":"7748:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7759:4:33","nodeType":"YulTypedName","src":"7759:4:33","type":""}],"src":"7667:177:33"},{"body":{"nativeSrc":"7950:76:33","nodeType":"YulBlock","src":"7950:76:33","statements":[{"nativeSrc":"7960:26:33","nodeType":"YulAssignment","src":"7960:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"7972:9:33","nodeType":"YulIdentifier","src":"7972:9:33"},{"kind":"number","nativeSrc":"7983:2:33","nodeType":"YulLiteral","src":"7983:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7968:3:33","nodeType":"YulIdentifier","src":"7968:3:33"},"nativeSrc":"7968:18:33","nodeType":"YulFunctionCall","src":"7968:18:33"},"variableNames":[{"name":"tail","nativeSrc":"7960:4:33","nodeType":"YulIdentifier","src":"7960:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8002:9:33","nodeType":"YulIdentifier","src":"8002:9:33"},{"name":"value0","nativeSrc":"8013:6:33","nodeType":"YulIdentifier","src":"8013:6:33"}],"functionName":{"name":"mstore","nativeSrc":"7995:6:33","nodeType":"YulIdentifier","src":"7995:6:33"},"nativeSrc":"7995:25:33","nodeType":"YulFunctionCall","src":"7995:25:33"},"nativeSrc":"7995:25:33","nodeType":"YulExpressionStatement","src":"7995:25:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7849:177:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7919:9:33","nodeType":"YulTypedName","src":"7919:9:33","type":""},{"name":"value0","nativeSrc":"7930:6:33","nodeType":"YulTypedName","src":"7930:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7941:4:33","nodeType":"YulTypedName","src":"7941:4:33","type":""}],"src":"7849:177:33"},{"body":{"nativeSrc":"8196:616:33","nodeType":"YulBlock","src":"8196:616:33","statements":[{"body":{"nativeSrc":"8242:16:33","nodeType":"YulBlock","src":"8242:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8251:1:33","nodeType":"YulLiteral","src":"8251:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"8254:1:33","nodeType":"YulLiteral","src":"8254:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8244:6:33","nodeType":"YulIdentifier","src":"8244:6:33"},"nativeSrc":"8244:12:33","nodeType":"YulFunctionCall","src":"8244:12:33"},"nativeSrc":"8244:12:33","nodeType":"YulExpressionStatement","src":"8244:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8217:7:33","nodeType":"YulIdentifier","src":"8217:7:33"},{"name":"headStart","nativeSrc":"8226:9:33","nodeType":"YulIdentifier","src":"8226:9:33"}],"functionName":{"name":"sub","nativeSrc":"8213:3:33","nodeType":"YulIdentifier","src":"8213:3:33"},"nativeSrc":"8213:23:33","nodeType":"YulFunctionCall","src":"8213:23:33"},{"kind":"number","nativeSrc":"8238:2:33","nodeType":"YulLiteral","src":"8238:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8209:3:33","nodeType":"YulIdentifier","src":"8209:3:33"},"nativeSrc":"8209:32:33","nodeType":"YulFunctionCall","src":"8209:32:33"},"nativeSrc":"8206:52:33","nodeType":"YulIf","src":"8206:52:33"},{"nativeSrc":"8267:37:33","nodeType":"YulVariableDeclaration","src":"8267:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"8294:9:33","nodeType":"YulIdentifier","src":"8294:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"8281:12:33","nodeType":"YulIdentifier","src":"8281:12:33"},"nativeSrc":"8281:23:33","nodeType":"YulFunctionCall","src":"8281:23:33"},"variables":[{"name":"offset","nativeSrc":"8271:6:33","nodeType":"YulTypedName","src":"8271:6:33","type":""}]},{"nativeSrc":"8313:28:33","nodeType":"YulVariableDeclaration","src":"8313:28:33","value":{"kind":"number","nativeSrc":"8323:18:33","nodeType":"YulLiteral","src":"8323:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8317:2:33","nodeType":"YulTypedName","src":"8317:2:33","type":""}]},{"body":{"nativeSrc":"8368:16:33","nodeType":"YulBlock","src":"8368:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8377:1:33","nodeType":"YulLiteral","src":"8377:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"8380:1:33","nodeType":"YulLiteral","src":"8380:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8370:6:33","nodeType":"YulIdentifier","src":"8370:6:33"},"nativeSrc":"8370:12:33","nodeType":"YulFunctionCall","src":"8370:12:33"},"nativeSrc":"8370:12:33","nodeType":"YulExpressionStatement","src":"8370:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8356:6:33","nodeType":"YulIdentifier","src":"8356:6:33"},{"name":"_1","nativeSrc":"8364:2:33","nodeType":"YulIdentifier","src":"8364:2:33"}],"functionName":{"name":"gt","nativeSrc":"8353:2:33","nodeType":"YulIdentifier","src":"8353:2:33"},"nativeSrc":"8353:14:33","nodeType":"YulFunctionCall","src":"8353:14:33"},"nativeSrc":"8350:34:33","nodeType":"YulIf","src":"8350:34:33"},{"nativeSrc":"8393:96:33","nodeType":"YulVariableDeclaration","src":"8393:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8461:9:33","nodeType":"YulIdentifier","src":"8461:9:33"},{"name":"offset","nativeSrc":"8472:6:33","nodeType":"YulIdentifier","src":"8472:6:33"}],"functionName":{"name":"add","nativeSrc":"8457:3:33","nodeType":"YulIdentifier","src":"8457:3:33"},"nativeSrc":"8457:22:33","nodeType":"YulFunctionCall","src":"8457:22:33"},{"name":"dataEnd","nativeSrc":"8481:7:33","nodeType":"YulIdentifier","src":"8481:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"8419:37:33","nodeType":"YulIdentifier","src":"8419:37:33"},"nativeSrc":"8419:70:33","nodeType":"YulFunctionCall","src":"8419:70:33"},"variables":[{"name":"value0_1","nativeSrc":"8397:8:33","nodeType":"YulTypedName","src":"8397:8:33","type":""},{"name":"value1_1","nativeSrc":"8407:8:33","nodeType":"YulTypedName","src":"8407:8:33","type":""}]},{"nativeSrc":"8498:18:33","nodeType":"YulAssignment","src":"8498:18:33","value":{"name":"value0_1","nativeSrc":"8508:8:33","nodeType":"YulIdentifier","src":"8508:8:33"},"variableNames":[{"name":"value0","nativeSrc":"8498:6:33","nodeType":"YulIdentifier","src":"8498:6:33"}]},{"nativeSrc":"8525:18:33","nodeType":"YulAssignment","src":"8525:18:33","value":{"name":"value1_1","nativeSrc":"8535:8:33","nodeType":"YulIdentifier","src":"8535:8:33"},"variableNames":[{"name":"value1","nativeSrc":"8525:6:33","nodeType":"YulIdentifier","src":"8525:6:33"}]},{"nativeSrc":"8552:48:33","nodeType":"YulVariableDeclaration","src":"8552:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8585:9:33","nodeType":"YulIdentifier","src":"8585:9:33"},{"kind":"number","nativeSrc":"8596:2:33","nodeType":"YulLiteral","src":"8596:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8581:3:33","nodeType":"YulIdentifier","src":"8581:3:33"},"nativeSrc":"8581:18:33","nodeType":"YulFunctionCall","src":"8581:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"8568:12:33","nodeType":"YulIdentifier","src":"8568:12:33"},"nativeSrc":"8568:32:33","nodeType":"YulFunctionCall","src":"8568:32:33"},"variables":[{"name":"offset_1","nativeSrc":"8556:8:33","nodeType":"YulTypedName","src":"8556:8:33","type":""}]},{"body":{"nativeSrc":"8629:16:33","nodeType":"YulBlock","src":"8629:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8638:1:33","nodeType":"YulLiteral","src":"8638:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"8641:1:33","nodeType":"YulLiteral","src":"8641:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8631:6:33","nodeType":"YulIdentifier","src":"8631:6:33"},"nativeSrc":"8631:12:33","nodeType":"YulFunctionCall","src":"8631:12:33"},"nativeSrc":"8631:12:33","nodeType":"YulExpressionStatement","src":"8631:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8615:8:33","nodeType":"YulIdentifier","src":"8615:8:33"},{"name":"_1","nativeSrc":"8625:2:33","nodeType":"YulIdentifier","src":"8625:2:33"}],"functionName":{"name":"gt","nativeSrc":"8612:2:33","nodeType":"YulIdentifier","src":"8612:2:33"},"nativeSrc":"8612:16:33","nodeType":"YulFunctionCall","src":"8612:16:33"},"nativeSrc":"8609:36:33","nodeType":"YulIf","src":"8609:36:33"},{"nativeSrc":"8654:98:33","nodeType":"YulVariableDeclaration","src":"8654:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8722:9:33","nodeType":"YulIdentifier","src":"8722:9:33"},{"name":"offset_1","nativeSrc":"8733:8:33","nodeType":"YulIdentifier","src":"8733:8:33"}],"functionName":{"name":"add","nativeSrc":"8718:3:33","nodeType":"YulIdentifier","src":"8718:3:33"},"nativeSrc":"8718:24:33","nodeType":"YulFunctionCall","src":"8718:24:33"},{"name":"dataEnd","nativeSrc":"8744:7:33","nodeType":"YulIdentifier","src":"8744:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"8680:37:33","nodeType":"YulIdentifier","src":"8680:37:33"},"nativeSrc":"8680:72:33","nodeType":"YulFunctionCall","src":"8680:72:33"},"variables":[{"name":"value2_1","nativeSrc":"8658:8:33","nodeType":"YulTypedName","src":"8658:8:33","type":""},{"name":"value3_1","nativeSrc":"8668:8:33","nodeType":"YulTypedName","src":"8668:8:33","type":""}]},{"nativeSrc":"8761:18:33","nodeType":"YulAssignment","src":"8761:18:33","value":{"name":"value2_1","nativeSrc":"8771:8:33","nodeType":"YulIdentifier","src":"8771:8:33"},"variableNames":[{"name":"value2","nativeSrc":"8761:6:33","nodeType":"YulIdentifier","src":"8761:6:33"}]},{"nativeSrc":"8788:18:33","nodeType":"YulAssignment","src":"8788:18:33","value":{"name":"value3_1","nativeSrc":"8798:8:33","nodeType":"YulIdentifier","src":"8798:8:33"},"variableNames":[{"name":"value3","nativeSrc":"8788:6:33","nodeType":"YulIdentifier","src":"8788:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"8031:781:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8138:9:33","nodeType":"YulTypedName","src":"8138:9:33","type":""},{"name":"dataEnd","nativeSrc":"8149:7:33","nodeType":"YulTypedName","src":"8149:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8161:6:33","nodeType":"YulTypedName","src":"8161:6:33","type":""},{"name":"value1","nativeSrc":"8169:6:33","nodeType":"YulTypedName","src":"8169:6:33","type":""},{"name":"value2","nativeSrc":"8177:6:33","nodeType":"YulTypedName","src":"8177:6:33","type":""},{"name":"value3","nativeSrc":"8185:6:33","nodeType":"YulTypedName","src":"8185:6:33","type":""}],"src":"8031:781:33"},{"body":{"nativeSrc":"8974:162:33","nodeType":"YulBlock","src":"8974:162:33","statements":[{"nativeSrc":"8984:26:33","nodeType":"YulAssignment","src":"8984:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"8996:9:33","nodeType":"YulIdentifier","src":"8996:9:33"},{"kind":"number","nativeSrc":"9007:2:33","nodeType":"YulLiteral","src":"9007:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8992:3:33","nodeType":"YulIdentifier","src":"8992:3:33"},"nativeSrc":"8992:18:33","nodeType":"YulFunctionCall","src":"8992:18:33"},"variableNames":[{"name":"tail","nativeSrc":"8984:4:33","nodeType":"YulIdentifier","src":"8984:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9026:9:33","nodeType":"YulIdentifier","src":"9026:9:33"},{"name":"value0","nativeSrc":"9037:6:33","nodeType":"YulIdentifier","src":"9037:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9019:6:33","nodeType":"YulIdentifier","src":"9019:6:33"},"nativeSrc":"9019:25:33","nodeType":"YulFunctionCall","src":"9019:25:33"},"nativeSrc":"9019:25:33","nodeType":"YulExpressionStatement","src":"9019:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9064:9:33","nodeType":"YulIdentifier","src":"9064:9:33"},{"kind":"number","nativeSrc":"9075:2:33","nodeType":"YulLiteral","src":"9075:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9060:3:33","nodeType":"YulIdentifier","src":"9060:3:33"},"nativeSrc":"9060:18:33","nodeType":"YulFunctionCall","src":"9060:18:33"},{"name":"value1","nativeSrc":"9080:6:33","nodeType":"YulIdentifier","src":"9080:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9053:6:33","nodeType":"YulIdentifier","src":"9053:6:33"},"nativeSrc":"9053:34:33","nodeType":"YulFunctionCall","src":"9053:34:33"},"nativeSrc":"9053:34:33","nodeType":"YulExpressionStatement","src":"9053:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9107:9:33","nodeType":"YulIdentifier","src":"9107:9:33"},{"kind":"number","nativeSrc":"9118:2:33","nodeType":"YulLiteral","src":"9118:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9103:3:33","nodeType":"YulIdentifier","src":"9103:3:33"},"nativeSrc":"9103:18:33","nodeType":"YulFunctionCall","src":"9103:18:33"},{"name":"value2","nativeSrc":"9123:6:33","nodeType":"YulIdentifier","src":"9123:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9096:6:33","nodeType":"YulIdentifier","src":"9096:6:33"},"nativeSrc":"9096:34:33","nodeType":"YulFunctionCall","src":"9096:34:33"},"nativeSrc":"9096:34:33","nodeType":"YulExpressionStatement","src":"9096:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"8817:319:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8927:9:33","nodeType":"YulTypedName","src":"8927:9:33","type":""},{"name":"value2","nativeSrc":"8938:6:33","nodeType":"YulTypedName","src":"8938:6:33","type":""},{"name":"value1","nativeSrc":"8946:6:33","nodeType":"YulTypedName","src":"8946:6:33","type":""},{"name":"value0","nativeSrc":"8954:6:33","nodeType":"YulTypedName","src":"8954:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8965:4:33","nodeType":"YulTypedName","src":"8965:4:33","type":""}],"src":"8817:319:33"},{"body":{"nativeSrc":"9326:255:33","nodeType":"YulBlock","src":"9326:255:33","statements":[{"nativeSrc":"9336:27:33","nodeType":"YulAssignment","src":"9336:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"9348:9:33","nodeType":"YulIdentifier","src":"9348:9:33"},{"kind":"number","nativeSrc":"9359:3:33","nodeType":"YulLiteral","src":"9359:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9344:3:33","nodeType":"YulIdentifier","src":"9344:3:33"},"nativeSrc":"9344:19:33","nodeType":"YulFunctionCall","src":"9344:19:33"},"variableNames":[{"name":"tail","nativeSrc":"9336:4:33","nodeType":"YulIdentifier","src":"9336:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9379:9:33","nodeType":"YulIdentifier","src":"9379:9:33"},{"arguments":[{"name":"value0","nativeSrc":"9394:6:33","nodeType":"YulIdentifier","src":"9394:6:33"},{"kind":"number","nativeSrc":"9402:42:33","nodeType":"YulLiteral","src":"9402:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9390:3:33","nodeType":"YulIdentifier","src":"9390:3:33"},"nativeSrc":"9390:55:33","nodeType":"YulFunctionCall","src":"9390:55:33"}],"functionName":{"name":"mstore","nativeSrc":"9372:6:33","nodeType":"YulIdentifier","src":"9372:6:33"},"nativeSrc":"9372:74:33","nodeType":"YulFunctionCall","src":"9372:74:33"},"nativeSrc":"9372:74:33","nodeType":"YulExpressionStatement","src":"9372:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9466:9:33","nodeType":"YulIdentifier","src":"9466:9:33"},{"kind":"number","nativeSrc":"9477:2:33","nodeType":"YulLiteral","src":"9477:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9462:3:33","nodeType":"YulIdentifier","src":"9462:3:33"},"nativeSrc":"9462:18:33","nodeType":"YulFunctionCall","src":"9462:18:33"},{"name":"value1","nativeSrc":"9482:6:33","nodeType":"YulIdentifier","src":"9482:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9455:6:33","nodeType":"YulIdentifier","src":"9455:6:33"},"nativeSrc":"9455:34:33","nodeType":"YulFunctionCall","src":"9455:34:33"},"nativeSrc":"9455:34:33","nodeType":"YulExpressionStatement","src":"9455:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9509:9:33","nodeType":"YulIdentifier","src":"9509:9:33"},{"kind":"number","nativeSrc":"9520:2:33","nodeType":"YulLiteral","src":"9520:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9505:3:33","nodeType":"YulIdentifier","src":"9505:3:33"},"nativeSrc":"9505:18:33","nodeType":"YulFunctionCall","src":"9505:18:33"},{"name":"value2","nativeSrc":"9525:6:33","nodeType":"YulIdentifier","src":"9525:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9498:6:33","nodeType":"YulIdentifier","src":"9498:6:33"},"nativeSrc":"9498:34:33","nodeType":"YulFunctionCall","src":"9498:34:33"},"nativeSrc":"9498:34:33","nodeType":"YulExpressionStatement","src":"9498:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9552:9:33","nodeType":"YulIdentifier","src":"9552:9:33"},{"kind":"number","nativeSrc":"9563:2:33","nodeType":"YulLiteral","src":"9563:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9548:3:33","nodeType":"YulIdentifier","src":"9548:3:33"},"nativeSrc":"9548:18:33","nodeType":"YulFunctionCall","src":"9548:18:33"},{"name":"value3","nativeSrc":"9568:6:33","nodeType":"YulIdentifier","src":"9568:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9541:6:33","nodeType":"YulIdentifier","src":"9541:6:33"},"nativeSrc":"9541:34:33","nodeType":"YulFunctionCall","src":"9541:34:33"},"nativeSrc":"9541:34:33","nodeType":"YulExpressionStatement","src":"9541:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"9141:440:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9271:9:33","nodeType":"YulTypedName","src":"9271:9:33","type":""},{"name":"value3","nativeSrc":"9282:6:33","nodeType":"YulTypedName","src":"9282:6:33","type":""},{"name":"value2","nativeSrc":"9290:6:33","nodeType":"YulTypedName","src":"9290:6:33","type":""},{"name":"value1","nativeSrc":"9298:6:33","nodeType":"YulTypedName","src":"9298:6:33","type":""},{"name":"value0","nativeSrc":"9306:6:33","nodeType":"YulTypedName","src":"9306:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9317:4:33","nodeType":"YulTypedName","src":"9317:4:33","type":""}],"src":"9141:440:33"},{"body":{"nativeSrc":"9715:119:33","nodeType":"YulBlock","src":"9715:119:33","statements":[{"nativeSrc":"9725:26:33","nodeType":"YulAssignment","src":"9725:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"9737:9:33","nodeType":"YulIdentifier","src":"9737:9:33"},{"kind":"number","nativeSrc":"9748:2:33","nodeType":"YulLiteral","src":"9748:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9733:3:33","nodeType":"YulIdentifier","src":"9733:3:33"},"nativeSrc":"9733:18:33","nodeType":"YulFunctionCall","src":"9733:18:33"},"variableNames":[{"name":"tail","nativeSrc":"9725:4:33","nodeType":"YulIdentifier","src":"9725:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9767:9:33","nodeType":"YulIdentifier","src":"9767:9:33"},{"name":"value0","nativeSrc":"9778:6:33","nodeType":"YulIdentifier","src":"9778:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9760:6:33","nodeType":"YulIdentifier","src":"9760:6:33"},"nativeSrc":"9760:25:33","nodeType":"YulFunctionCall","src":"9760:25:33"},"nativeSrc":"9760:25:33","nodeType":"YulExpressionStatement","src":"9760:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9805:9:33","nodeType":"YulIdentifier","src":"9805:9:33"},{"kind":"number","nativeSrc":"9816:2:33","nodeType":"YulLiteral","src":"9816:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9801:3:33","nodeType":"YulIdentifier","src":"9801:3:33"},"nativeSrc":"9801:18:33","nodeType":"YulFunctionCall","src":"9801:18:33"},{"name":"value1","nativeSrc":"9821:6:33","nodeType":"YulIdentifier","src":"9821:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9794:6:33","nodeType":"YulIdentifier","src":"9794:6:33"},"nativeSrc":"9794:34:33","nodeType":"YulFunctionCall","src":"9794:34:33"},"nativeSrc":"9794:34:33","nodeType":"YulExpressionStatement","src":"9794:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9586:248:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9676:9:33","nodeType":"YulTypedName","src":"9676:9:33","type":""},{"name":"value1","nativeSrc":"9687:6:33","nodeType":"YulTypedName","src":"9687:6:33","type":""},{"name":"value0","nativeSrc":"9695:6:33","nodeType":"YulTypedName","src":"9695:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9706:4:33","nodeType":"YulTypedName","src":"9706:4:33","type":""}],"src":"9586:248:33"},{"body":{"nativeSrc":"10042:257:33","nodeType":"YulBlock","src":"10042:257:33","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10059:3:33","nodeType":"YulIdentifier","src":"10059:3:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10072:2:33","nodeType":"YulLiteral","src":"10072:2:33","type":"","value":"96"},{"name":"value0","nativeSrc":"10076:6:33","nodeType":"YulIdentifier","src":"10076:6:33"}],"functionName":{"name":"shl","nativeSrc":"10068:3:33","nodeType":"YulIdentifier","src":"10068:3:33"},"nativeSrc":"10068:15:33","nodeType":"YulFunctionCall","src":"10068:15:33"},{"kind":"number","nativeSrc":"10085:66:33","nodeType":"YulLiteral","src":"10085:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10064:3:33","nodeType":"YulIdentifier","src":"10064:3:33"},"nativeSrc":"10064:88:33","nodeType":"YulFunctionCall","src":"10064:88:33"}],"functionName":{"name":"mstore","nativeSrc":"10052:6:33","nodeType":"YulIdentifier","src":"10052:6:33"},"nativeSrc":"10052:101:33","nodeType":"YulFunctionCall","src":"10052:101:33"},"nativeSrc":"10052:101:33","nodeType":"YulExpressionStatement","src":"10052:101:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10173:3:33","nodeType":"YulIdentifier","src":"10173:3:33"},{"kind":"number","nativeSrc":"10178:2:33","nodeType":"YulLiteral","src":"10178:2:33","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10169:3:33","nodeType":"YulIdentifier","src":"10169:3:33"},"nativeSrc":"10169:12:33","nodeType":"YulFunctionCall","src":"10169:12:33"},{"name":"value1","nativeSrc":"10183:6:33","nodeType":"YulIdentifier","src":"10183:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10162:6:33","nodeType":"YulIdentifier","src":"10162:6:33"},"nativeSrc":"10162:28:33","nodeType":"YulFunctionCall","src":"10162:28:33"},"nativeSrc":"10162:28:33","nodeType":"YulExpressionStatement","src":"10162:28:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10210:3:33","nodeType":"YulIdentifier","src":"10210:3:33"},{"kind":"number","nativeSrc":"10215:2:33","nodeType":"YulLiteral","src":"10215:2:33","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"10206:3:33","nodeType":"YulIdentifier","src":"10206:3:33"},"nativeSrc":"10206:12:33","nodeType":"YulFunctionCall","src":"10206:12:33"},{"name":"value2","nativeSrc":"10220:6:33","nodeType":"YulIdentifier","src":"10220:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10199:6:33","nodeType":"YulIdentifier","src":"10199:6:33"},"nativeSrc":"10199:28:33","nodeType":"YulFunctionCall","src":"10199:28:33"},"nativeSrc":"10199:28:33","nodeType":"YulExpressionStatement","src":"10199:28:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10247:3:33","nodeType":"YulIdentifier","src":"10247:3:33"},{"kind":"number","nativeSrc":"10252:2:33","nodeType":"YulLiteral","src":"10252:2:33","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"10243:3:33","nodeType":"YulIdentifier","src":"10243:3:33"},"nativeSrc":"10243:12:33","nodeType":"YulFunctionCall","src":"10243:12:33"},{"name":"value3","nativeSrc":"10257:6:33","nodeType":"YulIdentifier","src":"10257:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10236:6:33","nodeType":"YulIdentifier","src":"10236:6:33"},"nativeSrc":"10236:28:33","nodeType":"YulFunctionCall","src":"10236:28:33"},"nativeSrc":"10236:28:33","nodeType":"YulExpressionStatement","src":"10236:28:33"},{"nativeSrc":"10273:20:33","nodeType":"YulAssignment","src":"10273:20:33","value":{"arguments":[{"name":"pos","nativeSrc":"10284:3:33","nodeType":"YulIdentifier","src":"10284:3:33"},{"kind":"number","nativeSrc":"10289:3:33","nodeType":"YulLiteral","src":"10289:3:33","type":"","value":"116"}],"functionName":{"name":"add","nativeSrc":"10280:3:33","nodeType":"YulIdentifier","src":"10280:3:33"},"nativeSrc":"10280:13:33","nodeType":"YulFunctionCall","src":"10280:13:33"},"variableNames":[{"name":"end","nativeSrc":"10273:3:33","nodeType":"YulIdentifier","src":"10273:3:33"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9839:460:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9994:3:33","nodeType":"YulTypedName","src":"9994:3:33","type":""},{"name":"value3","nativeSrc":"9999:6:33","nodeType":"YulTypedName","src":"9999:6:33","type":""},{"name":"value2","nativeSrc":"10007:6:33","nodeType":"YulTypedName","src":"10007:6:33","type":""},{"name":"value1","nativeSrc":"10015:6:33","nodeType":"YulTypedName","src":"10015:6:33","type":""},{"name":"value0","nativeSrc":"10023:6:33","nodeType":"YulTypedName","src":"10023:6:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10034:3:33","nodeType":"YulTypedName","src":"10034:3:33","type":""}],"src":"9839:460:33"},{"body":{"nativeSrc":"10353:233:33","nodeType":"YulBlock","src":"10353:233:33","statements":[{"nativeSrc":"10363:17:33","nodeType":"YulAssignment","src":"10363:17:33","value":{"arguments":[{"name":"x","nativeSrc":"10375:1:33","nodeType":"YulIdentifier","src":"10375:1:33"},{"name":"y","nativeSrc":"10378:1:33","nodeType":"YulIdentifier","src":"10378:1:33"}],"functionName":{"name":"sub","nativeSrc":"10371:3:33","nodeType":"YulIdentifier","src":"10371:3:33"},"nativeSrc":"10371:9:33","nodeType":"YulFunctionCall","src":"10371:9:33"},"variableNames":[{"name":"diff","nativeSrc":"10363:4:33","nodeType":"YulIdentifier","src":"10363:4:33"}]},{"body":{"nativeSrc":"10412:168:33","nodeType":"YulBlock","src":"10412:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10433:1:33","nodeType":"YulLiteral","src":"10433:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10436:77:33","nodeType":"YulLiteral","src":"10436:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10426:6:33","nodeType":"YulIdentifier","src":"10426:6:33"},"nativeSrc":"10426:88:33","nodeType":"YulFunctionCall","src":"10426:88:33"},"nativeSrc":"10426:88:33","nodeType":"YulExpressionStatement","src":"10426:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10534:1:33","nodeType":"YulLiteral","src":"10534:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"10537:4:33","nodeType":"YulLiteral","src":"10537:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"10527:6:33","nodeType":"YulIdentifier","src":"10527:6:33"},"nativeSrc":"10527:15:33","nodeType":"YulFunctionCall","src":"10527:15:33"},"nativeSrc":"10527:15:33","nodeType":"YulExpressionStatement","src":"10527:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10562:1:33","nodeType":"YulLiteral","src":"10562:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10565:4:33","nodeType":"YulLiteral","src":"10565:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10555:6:33","nodeType":"YulIdentifier","src":"10555:6:33"},"nativeSrc":"10555:15:33","nodeType":"YulFunctionCall","src":"10555:15:33"},"nativeSrc":"10555:15:33","nodeType":"YulExpressionStatement","src":"10555:15:33"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"10395:4:33","nodeType":"YulIdentifier","src":"10395:4:33"},{"name":"x","nativeSrc":"10401:1:33","nodeType":"YulIdentifier","src":"10401:1:33"}],"functionName":{"name":"gt","nativeSrc":"10392:2:33","nodeType":"YulIdentifier","src":"10392:2:33"},"nativeSrc":"10392:11:33","nodeType":"YulFunctionCall","src":"10392:11:33"},"nativeSrc":"10389:191:33","nodeType":"YulIf","src":"10389:191:33"}]},"name":"checked_sub_t_uint256","nativeSrc":"10304:282:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"10335:1:33","nodeType":"YulTypedName","src":"10335:1:33","type":""},{"name":"y","nativeSrc":"10338:1:33","nodeType":"YulTypedName","src":"10338:1:33","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"10344:4:33","nodeType":"YulTypedName","src":"10344:4:33","type":""}],"src":"10304:282:33"},{"body":{"nativeSrc":"10748:211:33","nodeType":"YulBlock","src":"10748:211:33","statements":[{"nativeSrc":"10758:26:33","nodeType":"YulAssignment","src":"10758:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"10770:9:33","nodeType":"YulIdentifier","src":"10770:9:33"},{"kind":"number","nativeSrc":"10781:2:33","nodeType":"YulLiteral","src":"10781:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10766:3:33","nodeType":"YulIdentifier","src":"10766:3:33"},"nativeSrc":"10766:18:33","nodeType":"YulFunctionCall","src":"10766:18:33"},"variableNames":[{"name":"tail","nativeSrc":"10758:4:33","nodeType":"YulIdentifier","src":"10758:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10800:9:33","nodeType":"YulIdentifier","src":"10800:9:33"},{"arguments":[{"name":"value0","nativeSrc":"10815:6:33","nodeType":"YulIdentifier","src":"10815:6:33"},{"kind":"number","nativeSrc":"10823:42:33","nodeType":"YulLiteral","src":"10823:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10811:3:33","nodeType":"YulIdentifier","src":"10811:3:33"},"nativeSrc":"10811:55:33","nodeType":"YulFunctionCall","src":"10811:55:33"}],"functionName":{"name":"mstore","nativeSrc":"10793:6:33","nodeType":"YulIdentifier","src":"10793:6:33"},"nativeSrc":"10793:74:33","nodeType":"YulFunctionCall","src":"10793:74:33"},"nativeSrc":"10793:74:33","nodeType":"YulExpressionStatement","src":"10793:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10887:9:33","nodeType":"YulIdentifier","src":"10887:9:33"},{"kind":"number","nativeSrc":"10898:2:33","nodeType":"YulLiteral","src":"10898:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10883:3:33","nodeType":"YulIdentifier","src":"10883:3:33"},"nativeSrc":"10883:18:33","nodeType":"YulFunctionCall","src":"10883:18:33"},{"name":"value1","nativeSrc":"10903:6:33","nodeType":"YulIdentifier","src":"10903:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10876:6:33","nodeType":"YulIdentifier","src":"10876:6:33"},"nativeSrc":"10876:34:33","nodeType":"YulFunctionCall","src":"10876:34:33"},"nativeSrc":"10876:34:33","nodeType":"YulExpressionStatement","src":"10876:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10930:9:33","nodeType":"YulIdentifier","src":"10930:9:33"},{"kind":"number","nativeSrc":"10941:2:33","nodeType":"YulLiteral","src":"10941:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10926:3:33","nodeType":"YulIdentifier","src":"10926:3:33"},"nativeSrc":"10926:18:33","nodeType":"YulFunctionCall","src":"10926:18:33"},{"name":"value2","nativeSrc":"10946:6:33","nodeType":"YulIdentifier","src":"10946:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10919:6:33","nodeType":"YulIdentifier","src":"10919:6:33"},"nativeSrc":"10919:34:33","nodeType":"YulFunctionCall","src":"10919:34:33"},"nativeSrc":"10919:34:33","nodeType":"YulExpressionStatement","src":"10919:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"10591:368:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10701:9:33","nodeType":"YulTypedName","src":"10701:9:33","type":""},{"name":"value2","nativeSrc":"10712:6:33","nodeType":"YulTypedName","src":"10712:6:33","type":""},{"name":"value1","nativeSrc":"10720:6:33","nodeType":"YulTypedName","src":"10720:6:33","type":""},{"name":"value0","nativeSrc":"10728:6:33","nodeType":"YulTypedName","src":"10728:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10739:4:33","nodeType":"YulTypedName","src":"10739:4:33","type":""}],"src":"10591:368:33"},{"body":{"nativeSrc":"10996:152:33","nodeType":"YulBlock","src":"10996:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11013:1:33","nodeType":"YulLiteral","src":"11013:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"11016:77:33","nodeType":"YulLiteral","src":"11016:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11006:6:33","nodeType":"YulIdentifier","src":"11006:6:33"},"nativeSrc":"11006:88:33","nodeType":"YulFunctionCall","src":"11006:88:33"},"nativeSrc":"11006:88:33","nodeType":"YulExpressionStatement","src":"11006:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11110:1:33","nodeType":"YulLiteral","src":"11110:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"11113:4:33","nodeType":"YulLiteral","src":"11113:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"11103:6:33","nodeType":"YulIdentifier","src":"11103:6:33"},"nativeSrc":"11103:15:33","nodeType":"YulFunctionCall","src":"11103:15:33"},"nativeSrc":"11103:15:33","nodeType":"YulExpressionStatement","src":"11103:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11134:1:33","nodeType":"YulLiteral","src":"11134:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"11137:4:33","nodeType":"YulLiteral","src":"11137:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11127:6:33","nodeType":"YulIdentifier","src":"11127:6:33"},"nativeSrc":"11127:15:33","nodeType":"YulFunctionCall","src":"11127:15:33"},"nativeSrc":"11127:15:33","nodeType":"YulExpressionStatement","src":"11127:15:33"}]},"name":"panic_error_0x32","nativeSrc":"10964:184:33","nodeType":"YulFunctionDefinition","src":"10964:184:33"},{"body":{"nativeSrc":"11238:177:33","nodeType":"YulBlock","src":"11238:177:33","statements":[{"body":{"nativeSrc":"11284:16:33","nodeType":"YulBlock","src":"11284:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11293:1:33","nodeType":"YulLiteral","src":"11293:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"11296:1:33","nodeType":"YulLiteral","src":"11296:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11286:6:33","nodeType":"YulIdentifier","src":"11286:6:33"},"nativeSrc":"11286:12:33","nodeType":"YulFunctionCall","src":"11286:12:33"},"nativeSrc":"11286:12:33","nodeType":"YulExpressionStatement","src":"11286:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11259:7:33","nodeType":"YulIdentifier","src":"11259:7:33"},{"name":"headStart","nativeSrc":"11268:9:33","nodeType":"YulIdentifier","src":"11268:9:33"}],"functionName":{"name":"sub","nativeSrc":"11255:3:33","nodeType":"YulIdentifier","src":"11255:3:33"},"nativeSrc":"11255:23:33","nodeType":"YulFunctionCall","src":"11255:23:33"},{"kind":"number","nativeSrc":"11280:2:33","nodeType":"YulLiteral","src":"11280:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11251:3:33","nodeType":"YulIdentifier","src":"11251:3:33"},"nativeSrc":"11251:32:33","nodeType":"YulFunctionCall","src":"11251:32:33"},"nativeSrc":"11248:52:33","nodeType":"YulIf","src":"11248:52:33"},{"nativeSrc":"11309:36:33","nodeType":"YulVariableDeclaration","src":"11309:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11335:9:33","nodeType":"YulIdentifier","src":"11335:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"11322:12:33","nodeType":"YulIdentifier","src":"11322:12:33"},"nativeSrc":"11322:23:33","nodeType":"YulFunctionCall","src":"11322:23:33"},"variables":[{"name":"value","nativeSrc":"11313:5:33","nodeType":"YulTypedName","src":"11313:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11379:5:33","nodeType":"YulIdentifier","src":"11379:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11354:24:33","nodeType":"YulIdentifier","src":"11354:24:33"},"nativeSrc":"11354:31:33","nodeType":"YulFunctionCall","src":"11354:31:33"},"nativeSrc":"11354:31:33","nodeType":"YulExpressionStatement","src":"11354:31:33"},{"nativeSrc":"11394:15:33","nodeType":"YulAssignment","src":"11394:15:33","value":{"name":"value","nativeSrc":"11404:5:33","nodeType":"YulIdentifier","src":"11404:5:33"},"variableNames":[{"name":"value0","nativeSrc":"11394:6:33","nodeType":"YulIdentifier","src":"11394:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1232","nativeSrc":"11153:262:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11204:9:33","nodeType":"YulTypedName","src":"11204:9:33","type":""},{"name":"dataEnd","nativeSrc":"11215:7:33","nodeType":"YulTypedName","src":"11215:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11227:6:33","nodeType":"YulTypedName","src":"11227:6:33","type":""}],"src":"11153:262:33"},{"body":{"nativeSrc":"11605:206:33","nodeType":"YulBlock","src":"11605:206:33","statements":[{"nativeSrc":"11615:27:33","nodeType":"YulAssignment","src":"11615:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11627:9:33","nodeType":"YulIdentifier","src":"11627:9:33"},{"kind":"number","nativeSrc":"11638:3:33","nodeType":"YulLiteral","src":"11638:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11623:3:33","nodeType":"YulIdentifier","src":"11623:3:33"},"nativeSrc":"11623:19:33","nodeType":"YulFunctionCall","src":"11623:19:33"},"variableNames":[{"name":"tail","nativeSrc":"11615:4:33","nodeType":"YulIdentifier","src":"11615:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11658:9:33","nodeType":"YulIdentifier","src":"11658:9:33"},{"name":"value0","nativeSrc":"11669:6:33","nodeType":"YulIdentifier","src":"11669:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11651:6:33","nodeType":"YulIdentifier","src":"11651:6:33"},"nativeSrc":"11651:25:33","nodeType":"YulFunctionCall","src":"11651:25:33"},"nativeSrc":"11651:25:33","nodeType":"YulExpressionStatement","src":"11651:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11696:9:33","nodeType":"YulIdentifier","src":"11696:9:33"},{"kind":"number","nativeSrc":"11707:2:33","nodeType":"YulLiteral","src":"11707:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11692:3:33","nodeType":"YulIdentifier","src":"11692:3:33"},"nativeSrc":"11692:18:33","nodeType":"YulFunctionCall","src":"11692:18:33"},{"name":"value1","nativeSrc":"11712:6:33","nodeType":"YulIdentifier","src":"11712:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11685:6:33","nodeType":"YulIdentifier","src":"11685:6:33"},"nativeSrc":"11685:34:33","nodeType":"YulFunctionCall","src":"11685:34:33"},"nativeSrc":"11685:34:33","nodeType":"YulExpressionStatement","src":"11685:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11739:9:33","nodeType":"YulIdentifier","src":"11739:9:33"},{"kind":"number","nativeSrc":"11750:2:33","nodeType":"YulLiteral","src":"11750:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11735:3:33","nodeType":"YulIdentifier","src":"11735:3:33"},"nativeSrc":"11735:18:33","nodeType":"YulFunctionCall","src":"11735:18:33"},{"name":"value2","nativeSrc":"11755:6:33","nodeType":"YulIdentifier","src":"11755:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11728:6:33","nodeType":"YulIdentifier","src":"11728:6:33"},"nativeSrc":"11728:34:33","nodeType":"YulFunctionCall","src":"11728:34:33"},"nativeSrc":"11728:34:33","nodeType":"YulExpressionStatement","src":"11728:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11782:9:33","nodeType":"YulIdentifier","src":"11782:9:33"},{"kind":"number","nativeSrc":"11793:2:33","nodeType":"YulLiteral","src":"11793:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11778:3:33","nodeType":"YulIdentifier","src":"11778:3:33"},"nativeSrc":"11778:18:33","nodeType":"YulFunctionCall","src":"11778:18:33"},{"name":"value3","nativeSrc":"11798:6:33","nodeType":"YulIdentifier","src":"11798:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11771:6:33","nodeType":"YulIdentifier","src":"11771:6:33"},"nativeSrc":"11771:34:33","nodeType":"YulFunctionCall","src":"11771:34:33"},"nativeSrc":"11771:34:33","nodeType":"YulExpressionStatement","src":"11771:34:33"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11420:391:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11550:9:33","nodeType":"YulTypedName","src":"11550:9:33","type":""},{"name":"value3","nativeSrc":"11561:6:33","nodeType":"YulTypedName","src":"11561:6:33","type":""},{"name":"value2","nativeSrc":"11569:6:33","nodeType":"YulTypedName","src":"11569:6:33","type":""},{"name":"value1","nativeSrc":"11577:6:33","nodeType":"YulTypedName","src":"11577:6:33","type":""},{"name":"value0","nativeSrc":"11585:6:33","nodeType":"YulTypedName","src":"11585:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11596:4:33","nodeType":"YulTypedName","src":"11596:4:33","type":""}],"src":"11420:391:33"},{"body":{"nativeSrc":"11902:177:33","nodeType":"YulBlock","src":"11902:177:33","statements":[{"body":{"nativeSrc":"11948:16:33","nodeType":"YulBlock","src":"11948:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11957:1:33","nodeType":"YulLiteral","src":"11957:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"11960:1:33","nodeType":"YulLiteral","src":"11960:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11950:6:33","nodeType":"YulIdentifier","src":"11950:6:33"},"nativeSrc":"11950:12:33","nodeType":"YulFunctionCall","src":"11950:12:33"},"nativeSrc":"11950:12:33","nodeType":"YulExpressionStatement","src":"11950:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11923:7:33","nodeType":"YulIdentifier","src":"11923:7:33"},{"name":"headStart","nativeSrc":"11932:9:33","nodeType":"YulIdentifier","src":"11932:9:33"}],"functionName":{"name":"sub","nativeSrc":"11919:3:33","nodeType":"YulIdentifier","src":"11919:3:33"},"nativeSrc":"11919:23:33","nodeType":"YulFunctionCall","src":"11919:23:33"},{"kind":"number","nativeSrc":"11944:2:33","nodeType":"YulLiteral","src":"11944:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11915:3:33","nodeType":"YulIdentifier","src":"11915:3:33"},"nativeSrc":"11915:32:33","nodeType":"YulFunctionCall","src":"11915:32:33"},"nativeSrc":"11912:52:33","nodeType":"YulIf","src":"11912:52:33"},{"nativeSrc":"11973:36:33","nodeType":"YulVariableDeclaration","src":"11973:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11999:9:33","nodeType":"YulIdentifier","src":"11999:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"11986:12:33","nodeType":"YulIdentifier","src":"11986:12:33"},"nativeSrc":"11986:23:33","nodeType":"YulFunctionCall","src":"11986:23:33"},"variables":[{"name":"value","nativeSrc":"11977:5:33","nodeType":"YulTypedName","src":"11977:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12043:5:33","nodeType":"YulIdentifier","src":"12043:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12018:24:33","nodeType":"YulIdentifier","src":"12018:24:33"},"nativeSrc":"12018:31:33","nodeType":"YulFunctionCall","src":"12018:31:33"},"nativeSrc":"12018:31:33","nodeType":"YulExpressionStatement","src":"12018:31:33"},{"nativeSrc":"12058:15:33","nodeType":"YulAssignment","src":"12058:15:33","value":{"name":"value","nativeSrc":"12068:5:33","nodeType":"YulIdentifier","src":"12068:5:33"},"variableNames":[{"name":"value0","nativeSrc":"12058:6:33","nodeType":"YulIdentifier","src":"12058:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1151","nativeSrc":"11816:263:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11868:9:33","nodeType":"YulTypedName","src":"11868:9:33","type":""},{"name":"dataEnd","nativeSrc":"11879:7:33","nodeType":"YulTypedName","src":"11879:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11891:6:33","nodeType":"YulTypedName","src":"11891:6:33","type":""}],"src":"11816:263:33"},{"body":{"nativeSrc":"12241:241:33","nodeType":"YulBlock","src":"12241:241:33","statements":[{"nativeSrc":"12251:26:33","nodeType":"YulAssignment","src":"12251:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12263:9:33","nodeType":"YulIdentifier","src":"12263:9:33"},{"kind":"number","nativeSrc":"12274:2:33","nodeType":"YulLiteral","src":"12274:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12259:3:33","nodeType":"YulIdentifier","src":"12259:3:33"},"nativeSrc":"12259:18:33","nodeType":"YulFunctionCall","src":"12259:18:33"},"variableNames":[{"name":"tail","nativeSrc":"12251:4:33","nodeType":"YulIdentifier","src":"12251:4:33"}]},{"nativeSrc":"12286:52:33","nodeType":"YulVariableDeclaration","src":"12286:52:33","value":{"kind":"number","nativeSrc":"12296:42:33","nodeType":"YulLiteral","src":"12296:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"12290:2:33","nodeType":"YulTypedName","src":"12290:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12354:9:33","nodeType":"YulIdentifier","src":"12354:9:33"},{"arguments":[{"name":"value0","nativeSrc":"12369:6:33","nodeType":"YulIdentifier","src":"12369:6:33"},{"name":"_1","nativeSrc":"12377:2:33","nodeType":"YulIdentifier","src":"12377:2:33"}],"functionName":{"name":"and","nativeSrc":"12365:3:33","nodeType":"YulIdentifier","src":"12365:3:33"},"nativeSrc":"12365:15:33","nodeType":"YulFunctionCall","src":"12365:15:33"}],"functionName":{"name":"mstore","nativeSrc":"12347:6:33","nodeType":"YulIdentifier","src":"12347:6:33"},"nativeSrc":"12347:34:33","nodeType":"YulFunctionCall","src":"12347:34:33"},"nativeSrc":"12347:34:33","nodeType":"YulExpressionStatement","src":"12347:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12401:9:33","nodeType":"YulIdentifier","src":"12401:9:33"},{"kind":"number","nativeSrc":"12412:2:33","nodeType":"YulLiteral","src":"12412:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12397:3:33","nodeType":"YulIdentifier","src":"12397:3:33"},"nativeSrc":"12397:18:33","nodeType":"YulFunctionCall","src":"12397:18:33"},{"arguments":[{"name":"value1","nativeSrc":"12421:6:33","nodeType":"YulIdentifier","src":"12421:6:33"},{"name":"_1","nativeSrc":"12429:2:33","nodeType":"YulIdentifier","src":"12429:2:33"}],"functionName":{"name":"and","nativeSrc":"12417:3:33","nodeType":"YulIdentifier","src":"12417:3:33"},"nativeSrc":"12417:15:33","nodeType":"YulFunctionCall","src":"12417:15:33"}],"functionName":{"name":"mstore","nativeSrc":"12390:6:33","nodeType":"YulIdentifier","src":"12390:6:33"},"nativeSrc":"12390:43:33","nodeType":"YulFunctionCall","src":"12390:43:33"},"nativeSrc":"12390:43:33","nodeType":"YulExpressionStatement","src":"12390:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12453:9:33","nodeType":"YulIdentifier","src":"12453:9:33"},{"kind":"number","nativeSrc":"12464:2:33","nodeType":"YulLiteral","src":"12464:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12449:3:33","nodeType":"YulIdentifier","src":"12449:3:33"},"nativeSrc":"12449:18:33","nodeType":"YulFunctionCall","src":"12449:18:33"},{"name":"value2","nativeSrc":"12469:6:33","nodeType":"YulIdentifier","src":"12469:6:33"}],"functionName":{"name":"mstore","nativeSrc":"12442:6:33","nodeType":"YulIdentifier","src":"12442:6:33"},"nativeSrc":"12442:34:33","nodeType":"YulFunctionCall","src":"12442:34:33"},"nativeSrc":"12442:34:33","nodeType":"YulExpressionStatement","src":"12442:34:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"12084:398:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12194:9:33","nodeType":"YulTypedName","src":"12194:9:33","type":""},{"name":"value2","nativeSrc":"12205:6:33","nodeType":"YulTypedName","src":"12205:6:33","type":""},{"name":"value1","nativeSrc":"12213:6:33","nodeType":"YulTypedName","src":"12213:6:33","type":""},{"name":"value0","nativeSrc":"12221:6:33","nodeType":"YulTypedName","src":"12221:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12232:4:33","nodeType":"YulTypedName","src":"12232:4:33","type":""}],"src":"12084:398:33"},{"body":{"nativeSrc":"12565:177:33","nodeType":"YulBlock","src":"12565:177:33","statements":[{"body":{"nativeSrc":"12611:16:33","nodeType":"YulBlock","src":"12611:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12620:1:33","nodeType":"YulLiteral","src":"12620:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"12623:1:33","nodeType":"YulLiteral","src":"12623:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12613:6:33","nodeType":"YulIdentifier","src":"12613:6:33"},"nativeSrc":"12613:12:33","nodeType":"YulFunctionCall","src":"12613:12:33"},"nativeSrc":"12613:12:33","nodeType":"YulExpressionStatement","src":"12613:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12586:7:33","nodeType":"YulIdentifier","src":"12586:7:33"},{"name":"headStart","nativeSrc":"12595:9:33","nodeType":"YulIdentifier","src":"12595:9:33"}],"functionName":{"name":"sub","nativeSrc":"12582:3:33","nodeType":"YulIdentifier","src":"12582:3:33"},"nativeSrc":"12582:23:33","nodeType":"YulFunctionCall","src":"12582:23:33"},{"kind":"number","nativeSrc":"12607:2:33","nodeType":"YulLiteral","src":"12607:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12578:3:33","nodeType":"YulIdentifier","src":"12578:3:33"},"nativeSrc":"12578:32:33","nodeType":"YulFunctionCall","src":"12578:32:33"},"nativeSrc":"12575:52:33","nodeType":"YulIf","src":"12575:52:33"},{"nativeSrc":"12636:36:33","nodeType":"YulVariableDeclaration","src":"12636:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12662:9:33","nodeType":"YulIdentifier","src":"12662:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"12649:12:33","nodeType":"YulIdentifier","src":"12649:12:33"},"nativeSrc":"12649:23:33","nodeType":"YulFunctionCall","src":"12649:23:33"},"variables":[{"name":"value","nativeSrc":"12640:5:33","nodeType":"YulTypedName","src":"12640:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12706:5:33","nodeType":"YulIdentifier","src":"12706:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12681:24:33","nodeType":"YulIdentifier","src":"12681:24:33"},"nativeSrc":"12681:31:33","nodeType":"YulFunctionCall","src":"12681:31:33"},"nativeSrc":"12681:31:33","nodeType":"YulExpressionStatement","src":"12681:31:33"},{"nativeSrc":"12721:15:33","nodeType":"YulAssignment","src":"12721:15:33","value":{"name":"value","nativeSrc":"12731:5:33","nodeType":"YulIdentifier","src":"12731:5:33"},"variableNames":[{"name":"value0","nativeSrc":"12721:6:33","nodeType":"YulIdentifier","src":"12721:6:33"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"12487:255:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12531:9:33","nodeType":"YulTypedName","src":"12531:9:33","type":""},{"name":"dataEnd","nativeSrc":"12542:7:33","nodeType":"YulTypedName","src":"12542:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12554:6:33","nodeType":"YulTypedName","src":"12554:6:33","type":""}],"src":"12487:255:33"},{"body":{"nativeSrc":"12876:168:33","nodeType":"YulBlock","src":"12876:168:33","statements":[{"nativeSrc":"12886:26:33","nodeType":"YulAssignment","src":"12886:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12898:9:33","nodeType":"YulIdentifier","src":"12898:9:33"},{"kind":"number","nativeSrc":"12909:2:33","nodeType":"YulLiteral","src":"12909:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12894:3:33","nodeType":"YulIdentifier","src":"12894:3:33"},"nativeSrc":"12894:18:33","nodeType":"YulFunctionCall","src":"12894:18:33"},"variableNames":[{"name":"tail","nativeSrc":"12886:4:33","nodeType":"YulIdentifier","src":"12886:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12928:9:33","nodeType":"YulIdentifier","src":"12928:9:33"},{"arguments":[{"name":"value0","nativeSrc":"12943:6:33","nodeType":"YulIdentifier","src":"12943:6:33"},{"kind":"number","nativeSrc":"12951:42:33","nodeType":"YulLiteral","src":"12951:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12939:3:33","nodeType":"YulIdentifier","src":"12939:3:33"},"nativeSrc":"12939:55:33","nodeType":"YulFunctionCall","src":"12939:55:33"}],"functionName":{"name":"mstore","nativeSrc":"12921:6:33","nodeType":"YulIdentifier","src":"12921:6:33"},"nativeSrc":"12921:74:33","nodeType":"YulFunctionCall","src":"12921:74:33"},"nativeSrc":"12921:74:33","nodeType":"YulExpressionStatement","src":"12921:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13015:9:33","nodeType":"YulIdentifier","src":"13015:9:33"},{"kind":"number","nativeSrc":"13026:2:33","nodeType":"YulLiteral","src":"13026:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13011:3:33","nodeType":"YulIdentifier","src":"13011:3:33"},"nativeSrc":"13011:18:33","nodeType":"YulFunctionCall","src":"13011:18:33"},{"name":"value1","nativeSrc":"13031:6:33","nodeType":"YulIdentifier","src":"13031:6:33"}],"functionName":{"name":"mstore","nativeSrc":"13004:6:33","nodeType":"YulIdentifier","src":"13004:6:33"},"nativeSrc":"13004:34:33","nodeType":"YulFunctionCall","src":"13004:34:33"},"nativeSrc":"13004:34:33","nodeType":"YulExpressionStatement","src":"13004:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"12747:297:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12837:9:33","nodeType":"YulTypedName","src":"12837:9:33","type":""},{"name":"value1","nativeSrc":"12848:6:33","nodeType":"YulTypedName","src":"12848:6:33","type":""},{"name":"value0","nativeSrc":"12856:6:33","nodeType":"YulTypedName","src":"12856:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12867:4:33","nodeType":"YulTypedName","src":"12867:4:33","type":""}],"src":"12747:297:33"},{"body":{"nativeSrc":"13223:179:33","nodeType":"YulBlock","src":"13223:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13240:9:33","nodeType":"YulIdentifier","src":"13240:9:33"},{"kind":"number","nativeSrc":"13251:2:33","nodeType":"YulLiteral","src":"13251:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13233:6:33","nodeType":"YulIdentifier","src":"13233:6:33"},"nativeSrc":"13233:21:33","nodeType":"YulFunctionCall","src":"13233:21:33"},"nativeSrc":"13233:21:33","nodeType":"YulExpressionStatement","src":"13233:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13274:9:33","nodeType":"YulIdentifier","src":"13274:9:33"},{"kind":"number","nativeSrc":"13285:2:33","nodeType":"YulLiteral","src":"13285:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13270:3:33","nodeType":"YulIdentifier","src":"13270:3:33"},"nativeSrc":"13270:18:33","nodeType":"YulFunctionCall","src":"13270:18:33"},{"kind":"number","nativeSrc":"13290:2:33","nodeType":"YulLiteral","src":"13290:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"13263:6:33","nodeType":"YulIdentifier","src":"13263:6:33"},"nativeSrc":"13263:30:33","nodeType":"YulFunctionCall","src":"13263:30:33"},"nativeSrc":"13263:30:33","nodeType":"YulExpressionStatement","src":"13263:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13313:9:33","nodeType":"YulIdentifier","src":"13313:9:33"},{"kind":"number","nativeSrc":"13324:2:33","nodeType":"YulLiteral","src":"13324:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13309:3:33","nodeType":"YulIdentifier","src":"13309:3:33"},"nativeSrc":"13309:18:33","nodeType":"YulFunctionCall","src":"13309:18:33"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"13329:31:33","nodeType":"YulLiteral","src":"13329:31:33","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"13302:6:33","nodeType":"YulIdentifier","src":"13302:6:33"},"nativeSrc":"13302:59:33","nodeType":"YulFunctionCall","src":"13302:59:33"},"nativeSrc":"13302:59:33","nodeType":"YulExpressionStatement","src":"13302:59:33"},{"nativeSrc":"13370:26:33","nodeType":"YulAssignment","src":"13370:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"13382:9:33","nodeType":"YulIdentifier","src":"13382:9:33"},{"kind":"number","nativeSrc":"13393:2:33","nodeType":"YulLiteral","src":"13393:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13378:3:33","nodeType":"YulIdentifier","src":"13378:3:33"},"nativeSrc":"13378:18:33","nodeType":"YulFunctionCall","src":"13378:18:33"},"variableNames":[{"name":"tail","nativeSrc":"13370:4:33","nodeType":"YulIdentifier","src":"13370:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13049:353:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13200:9:33","nodeType":"YulTypedName","src":"13200:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13214:4:33","nodeType":"YulTypedName","src":"13214:4:33","type":""}],"src":"13049:353:33"},{"body":{"nativeSrc":"13598:14:33","nodeType":"YulBlock","src":"13598:14:33","statements":[{"nativeSrc":"13600:10:33","nodeType":"YulAssignment","src":"13600:10:33","value":{"name":"pos","nativeSrc":"13607:3:33","nodeType":"YulIdentifier","src":"13607:3:33"},"variableNames":[{"name":"end","nativeSrc":"13600:3:33","nodeType":"YulIdentifier","src":"13600:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"13407:205:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13582:3:33","nodeType":"YulTypedName","src":"13582:3:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13590:3:33","nodeType":"YulTypedName","src":"13590:3:33","type":""}],"src":"13407:205:33"},{"body":{"nativeSrc":"13791:248:33","nodeType":"YulBlock","src":"13791:248:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13808:9:33","nodeType":"YulIdentifier","src":"13808:9:33"},{"kind":"number","nativeSrc":"13819:2:33","nodeType":"YulLiteral","src":"13819:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13801:6:33","nodeType":"YulIdentifier","src":"13801:6:33"},"nativeSrc":"13801:21:33","nodeType":"YulFunctionCall","src":"13801:21:33"},"nativeSrc":"13801:21:33","nodeType":"YulExpressionStatement","src":"13801:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13842:9:33","nodeType":"YulIdentifier","src":"13842:9:33"},{"kind":"number","nativeSrc":"13853:2:33","nodeType":"YulLiteral","src":"13853:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13838:3:33","nodeType":"YulIdentifier","src":"13838:3:33"},"nativeSrc":"13838:18:33","nodeType":"YulFunctionCall","src":"13838:18:33"},{"kind":"number","nativeSrc":"13858:2:33","nodeType":"YulLiteral","src":"13858:2:33","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"13831:6:33","nodeType":"YulIdentifier","src":"13831:6:33"},"nativeSrc":"13831:30:33","nodeType":"YulFunctionCall","src":"13831:30:33"},"nativeSrc":"13831:30:33","nodeType":"YulExpressionStatement","src":"13831:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13881:9:33","nodeType":"YulIdentifier","src":"13881:9:33"},{"kind":"number","nativeSrc":"13892:2:33","nodeType":"YulLiteral","src":"13892:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13877:3:33","nodeType":"YulIdentifier","src":"13877:3:33"},"nativeSrc":"13877:18:33","nodeType":"YulFunctionCall","src":"13877:18:33"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"13897:34:33","nodeType":"YulLiteral","src":"13897:34:33","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"13870:6:33","nodeType":"YulIdentifier","src":"13870:6:33"},"nativeSrc":"13870:62:33","nodeType":"YulFunctionCall","src":"13870:62:33"},"nativeSrc":"13870:62:33","nodeType":"YulExpressionStatement","src":"13870:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13952:9:33","nodeType":"YulIdentifier","src":"13952:9:33"},{"kind":"number","nativeSrc":"13963:2:33","nodeType":"YulLiteral","src":"13963:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13948:3:33","nodeType":"YulIdentifier","src":"13948:3:33"},"nativeSrc":"13948:18:33","nodeType":"YulFunctionCall","src":"13948:18:33"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"13968:28:33","nodeType":"YulLiteral","src":"13968:28:33","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"13941:6:33","nodeType":"YulIdentifier","src":"13941:6:33"},"nativeSrc":"13941:56:33","nodeType":"YulFunctionCall","src":"13941:56:33"},"nativeSrc":"13941:56:33","nodeType":"YulExpressionStatement","src":"13941:56:33"},{"nativeSrc":"14006:27:33","nodeType":"YulAssignment","src":"14006:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14018:9:33","nodeType":"YulIdentifier","src":"14018:9:33"},{"kind":"number","nativeSrc":"14029:3:33","nodeType":"YulLiteral","src":"14029:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14014:3:33","nodeType":"YulIdentifier","src":"14014:3:33"},"nativeSrc":"14014:19:33","nodeType":"YulFunctionCall","src":"14014:19:33"},"variableNames":[{"name":"tail","nativeSrc":"14006:4:33","nodeType":"YulIdentifier","src":"14006:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13617:422:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13768:9:33","nodeType":"YulTypedName","src":"13768:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13782:4:33","nodeType":"YulTypedName","src":"13782:4:33","type":""}],"src":"13617:422:33"},{"body":{"nativeSrc":"14173:198:33","nodeType":"YulBlock","src":"14173:198:33","statements":[{"nativeSrc":"14183:26:33","nodeType":"YulAssignment","src":"14183:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14195:9:33","nodeType":"YulIdentifier","src":"14195:9:33"},{"kind":"number","nativeSrc":"14206:2:33","nodeType":"YulLiteral","src":"14206:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14191:3:33","nodeType":"YulIdentifier","src":"14191:3:33"},"nativeSrc":"14191:18:33","nodeType":"YulFunctionCall","src":"14191:18:33"},"variableNames":[{"name":"tail","nativeSrc":"14183:4:33","nodeType":"YulIdentifier","src":"14183:4:33"}]},{"nativeSrc":"14218:52:33","nodeType":"YulVariableDeclaration","src":"14218:52:33","value":{"kind":"number","nativeSrc":"14228:42:33","nodeType":"YulLiteral","src":"14228:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"14222:2:33","nodeType":"YulTypedName","src":"14222:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14286:9:33","nodeType":"YulIdentifier","src":"14286:9:33"},{"arguments":[{"name":"value0","nativeSrc":"14301:6:33","nodeType":"YulIdentifier","src":"14301:6:33"},{"name":"_1","nativeSrc":"14309:2:33","nodeType":"YulIdentifier","src":"14309:2:33"}],"functionName":{"name":"and","nativeSrc":"14297:3:33","nodeType":"YulIdentifier","src":"14297:3:33"},"nativeSrc":"14297:15:33","nodeType":"YulFunctionCall","src":"14297:15:33"}],"functionName":{"name":"mstore","nativeSrc":"14279:6:33","nodeType":"YulIdentifier","src":"14279:6:33"},"nativeSrc":"14279:34:33","nodeType":"YulFunctionCall","src":"14279:34:33"},"nativeSrc":"14279:34:33","nodeType":"YulExpressionStatement","src":"14279:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14333:9:33","nodeType":"YulIdentifier","src":"14333:9:33"},{"kind":"number","nativeSrc":"14344:2:33","nodeType":"YulLiteral","src":"14344:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14329:3:33","nodeType":"YulIdentifier","src":"14329:3:33"},"nativeSrc":"14329:18:33","nodeType":"YulFunctionCall","src":"14329:18:33"},{"arguments":[{"name":"value1","nativeSrc":"14353:6:33","nodeType":"YulIdentifier","src":"14353:6:33"},{"name":"_1","nativeSrc":"14361:2:33","nodeType":"YulIdentifier","src":"14361:2:33"}],"functionName":{"name":"and","nativeSrc":"14349:3:33","nodeType":"YulIdentifier","src":"14349:3:33"},"nativeSrc":"14349:15:33","nodeType":"YulFunctionCall","src":"14349:15:33"}],"functionName":{"name":"mstore","nativeSrc":"14322:6:33","nodeType":"YulIdentifier","src":"14322:6:33"},"nativeSrc":"14322:43:33","nodeType":"YulFunctionCall","src":"14322:43:33"},"nativeSrc":"14322:43:33","nodeType":"YulExpressionStatement","src":"14322:43:33"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"14044:327:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14134:9:33","nodeType":"YulTypedName","src":"14134:9:33","type":""},{"name":"value1","nativeSrc":"14145:6:33","nodeType":"YulTypedName","src":"14145:6:33","type":""},{"name":"value0","nativeSrc":"14153:6:33","nodeType":"YulTypedName","src":"14153:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14164:4:33","nodeType":"YulTypedName","src":"14164:4:33","type":""}],"src":"14044:327:33"},{"body":{"nativeSrc":"14454:199:33","nodeType":"YulBlock","src":"14454:199:33","statements":[{"body":{"nativeSrc":"14500:16:33","nodeType":"YulBlock","src":"14500:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14509:1:33","nodeType":"YulLiteral","src":"14509:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"14512:1:33","nodeType":"YulLiteral","src":"14512:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14502:6:33","nodeType":"YulIdentifier","src":"14502:6:33"},"nativeSrc":"14502:12:33","nodeType":"YulFunctionCall","src":"14502:12:33"},"nativeSrc":"14502:12:33","nodeType":"YulExpressionStatement","src":"14502:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14475:7:33","nodeType":"YulIdentifier","src":"14475:7:33"},{"name":"headStart","nativeSrc":"14484:9:33","nodeType":"YulIdentifier","src":"14484:9:33"}],"functionName":{"name":"sub","nativeSrc":"14471:3:33","nodeType":"YulIdentifier","src":"14471:3:33"},"nativeSrc":"14471:23:33","nodeType":"YulFunctionCall","src":"14471:23:33"},{"kind":"number","nativeSrc":"14496:2:33","nodeType":"YulLiteral","src":"14496:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14467:3:33","nodeType":"YulIdentifier","src":"14467:3:33"},"nativeSrc":"14467:32:33","nodeType":"YulFunctionCall","src":"14467:32:33"},"nativeSrc":"14464:52:33","nodeType":"YulIf","src":"14464:52:33"},{"nativeSrc":"14525:29:33","nodeType":"YulVariableDeclaration","src":"14525:29:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14544:9:33","nodeType":"YulIdentifier","src":"14544:9:33"}],"functionName":{"name":"mload","nativeSrc":"14538:5:33","nodeType":"YulIdentifier","src":"14538:5:33"},"nativeSrc":"14538:16:33","nodeType":"YulFunctionCall","src":"14538:16:33"},"variables":[{"name":"value","nativeSrc":"14529:5:33","nodeType":"YulTypedName","src":"14529:5:33","type":""}]},{"body":{"nativeSrc":"14607:16:33","nodeType":"YulBlock","src":"14607:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14616:1:33","nodeType":"YulLiteral","src":"14616:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"14619:1:33","nodeType":"YulLiteral","src":"14619:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14609:6:33","nodeType":"YulIdentifier","src":"14609:6:33"},"nativeSrc":"14609:12:33","nodeType":"YulFunctionCall","src":"14609:12:33"},"nativeSrc":"14609:12:33","nodeType":"YulExpressionStatement","src":"14609:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14576:5:33","nodeType":"YulIdentifier","src":"14576:5:33"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14597:5:33","nodeType":"YulIdentifier","src":"14597:5:33"}],"functionName":{"name":"iszero","nativeSrc":"14590:6:33","nodeType":"YulIdentifier","src":"14590:6:33"},"nativeSrc":"14590:13:33","nodeType":"YulFunctionCall","src":"14590:13:33"}],"functionName":{"name":"iszero","nativeSrc":"14583:6:33","nodeType":"YulIdentifier","src":"14583:6:33"},"nativeSrc":"14583:21:33","nodeType":"YulFunctionCall","src":"14583:21:33"}],"functionName":{"name":"eq","nativeSrc":"14573:2:33","nodeType":"YulIdentifier","src":"14573:2:33"},"nativeSrc":"14573:32:33","nodeType":"YulFunctionCall","src":"14573:32:33"}],"functionName":{"name":"iszero","nativeSrc":"14566:6:33","nodeType":"YulIdentifier","src":"14566:6:33"},"nativeSrc":"14566:40:33","nodeType":"YulFunctionCall","src":"14566:40:33"},"nativeSrc":"14563:60:33","nodeType":"YulIf","src":"14563:60:33"},{"nativeSrc":"14632:15:33","nodeType":"YulAssignment","src":"14632:15:33","value":{"name":"value","nativeSrc":"14642:5:33","nodeType":"YulIdentifier","src":"14642:5:33"},"variableNames":[{"name":"value0","nativeSrc":"14632:6:33","nodeType":"YulIdentifier","src":"14632:6:33"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"14376:277:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14420:9:33","nodeType":"YulTypedName","src":"14420:9:33","type":""},{"name":"dataEnd","nativeSrc":"14431:7:33","nodeType":"YulTypedName","src":"14431:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14443:6:33","nodeType":"YulTypedName","src":"14443:6:33","type":""}],"src":"14376:277:33"},{"body":{"nativeSrc":"14832:232:33","nodeType":"YulBlock","src":"14832:232:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14849:9:33","nodeType":"YulIdentifier","src":"14849:9:33"},{"kind":"number","nativeSrc":"14860:2:33","nodeType":"YulLiteral","src":"14860:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14842:6:33","nodeType":"YulIdentifier","src":"14842:6:33"},"nativeSrc":"14842:21:33","nodeType":"YulFunctionCall","src":"14842:21:33"},"nativeSrc":"14842:21:33","nodeType":"YulExpressionStatement","src":"14842:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14883:9:33","nodeType":"YulIdentifier","src":"14883:9:33"},{"kind":"number","nativeSrc":"14894:2:33","nodeType":"YulLiteral","src":"14894:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14879:3:33","nodeType":"YulIdentifier","src":"14879:3:33"},"nativeSrc":"14879:18:33","nodeType":"YulFunctionCall","src":"14879:18:33"},{"kind":"number","nativeSrc":"14899:2:33","nodeType":"YulLiteral","src":"14899:2:33","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"14872:6:33","nodeType":"YulIdentifier","src":"14872:6:33"},"nativeSrc":"14872:30:33","nodeType":"YulFunctionCall","src":"14872:30:33"},"nativeSrc":"14872:30:33","nodeType":"YulExpressionStatement","src":"14872:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14922:9:33","nodeType":"YulIdentifier","src":"14922:9:33"},{"kind":"number","nativeSrc":"14933:2:33","nodeType":"YulLiteral","src":"14933:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14918:3:33","nodeType":"YulIdentifier","src":"14918:3:33"},"nativeSrc":"14918:18:33","nodeType":"YulFunctionCall","src":"14918:18:33"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"14938:34:33","nodeType":"YulLiteral","src":"14938:34:33","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"14911:6:33","nodeType":"YulIdentifier","src":"14911:6:33"},"nativeSrc":"14911:62:33","nodeType":"YulFunctionCall","src":"14911:62:33"},"nativeSrc":"14911:62:33","nodeType":"YulExpressionStatement","src":"14911:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14993:9:33","nodeType":"YulIdentifier","src":"14993:9:33"},{"kind":"number","nativeSrc":"15004:2:33","nodeType":"YulLiteral","src":"15004:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14989:3:33","nodeType":"YulIdentifier","src":"14989:3:33"},"nativeSrc":"14989:18:33","nodeType":"YulFunctionCall","src":"14989:18:33"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"15009:12:33","nodeType":"YulLiteral","src":"15009:12:33","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"14982:6:33","nodeType":"YulIdentifier","src":"14982:6:33"},"nativeSrc":"14982:40:33","nodeType":"YulFunctionCall","src":"14982:40:33"},"nativeSrc":"14982:40:33","nodeType":"YulExpressionStatement","src":"14982:40:33"},{"nativeSrc":"15031:27:33","nodeType":"YulAssignment","src":"15031:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"15043:9:33","nodeType":"YulIdentifier","src":"15043:9:33"},{"kind":"number","nativeSrc":"15054:3:33","nodeType":"YulLiteral","src":"15054:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15039:3:33","nodeType":"YulIdentifier","src":"15039:3:33"},"nativeSrc":"15039:19:33","nodeType":"YulFunctionCall","src":"15039:19:33"},"variableNames":[{"name":"tail","nativeSrc":"15031:4:33","nodeType":"YulIdentifier","src":"15031:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14658:406:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14809:9:33","nodeType":"YulTypedName","src":"14809:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14823:4:33","nodeType":"YulTypedName","src":"14823:4:33","type":""}],"src":"14658:406:33"},{"body":{"nativeSrc":"15199:201:33","nodeType":"YulBlock","src":"15199:201:33","statements":[{"body":{"nativeSrc":"15237:16:33","nodeType":"YulBlock","src":"15237:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15246:1:33","nodeType":"YulLiteral","src":"15246:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"15249:1:33","nodeType":"YulLiteral","src":"15249:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15239:6:33","nodeType":"YulIdentifier","src":"15239:6:33"},"nativeSrc":"15239:12:33","nodeType":"YulFunctionCall","src":"15239:12:33"},"nativeSrc":"15239:12:33","nodeType":"YulExpressionStatement","src":"15239:12:33"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"15215:10:33","nodeType":"YulIdentifier","src":"15215:10:33"},{"name":"endIndex","nativeSrc":"15227:8:33","nodeType":"YulIdentifier","src":"15227:8:33"}],"functionName":{"name":"gt","nativeSrc":"15212:2:33","nodeType":"YulIdentifier","src":"15212:2:33"},"nativeSrc":"15212:24:33","nodeType":"YulFunctionCall","src":"15212:24:33"},"nativeSrc":"15209:44:33","nodeType":"YulIf","src":"15209:44:33"},{"body":{"nativeSrc":"15286:16:33","nodeType":"YulBlock","src":"15286:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15295:1:33","nodeType":"YulLiteral","src":"15295:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"15298:1:33","nodeType":"YulLiteral","src":"15298:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15288:6:33","nodeType":"YulIdentifier","src":"15288:6:33"},"nativeSrc":"15288:12:33","nodeType":"YulFunctionCall","src":"15288:12:33"},"nativeSrc":"15288:12:33","nodeType":"YulExpressionStatement","src":"15288:12:33"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"15268:8:33","nodeType":"YulIdentifier","src":"15268:8:33"},{"name":"length","nativeSrc":"15278:6:33","nodeType":"YulIdentifier","src":"15278:6:33"}],"functionName":{"name":"gt","nativeSrc":"15265:2:33","nodeType":"YulIdentifier","src":"15265:2:33"},"nativeSrc":"15265:20:33","nodeType":"YulFunctionCall","src":"15265:20:33"},"nativeSrc":"15262:40:33","nodeType":"YulIf","src":"15262:40:33"},{"nativeSrc":"15311:36:33","nodeType":"YulAssignment","src":"15311:36:33","value":{"arguments":[{"name":"offset","nativeSrc":"15328:6:33","nodeType":"YulIdentifier","src":"15328:6:33"},{"name":"startIndex","nativeSrc":"15336:10:33","nodeType":"YulIdentifier","src":"15336:10:33"}],"functionName":{"name":"add","nativeSrc":"15324:3:33","nodeType":"YulIdentifier","src":"15324:3:33"},"nativeSrc":"15324:23:33","nodeType":"YulFunctionCall","src":"15324:23:33"},"variableNames":[{"name":"offsetOut","nativeSrc":"15311:9:33","nodeType":"YulIdentifier","src":"15311:9:33"}]},{"nativeSrc":"15356:38:33","nodeType":"YulAssignment","src":"15356:38:33","value":{"arguments":[{"name":"endIndex","nativeSrc":"15373:8:33","nodeType":"YulIdentifier","src":"15373:8:33"},{"name":"startIndex","nativeSrc":"15383:10:33","nodeType":"YulIdentifier","src":"15383:10:33"}],"functionName":{"name":"sub","nativeSrc":"15369:3:33","nodeType":"YulIdentifier","src":"15369:3:33"},"nativeSrc":"15369:25:33","nodeType":"YulFunctionCall","src":"15369:25:33"},"variableNames":[{"name":"lengthOut","nativeSrc":"15356:9:33","nodeType":"YulIdentifier","src":"15356:9:33"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"15069:331:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"15133:6:33","nodeType":"YulTypedName","src":"15133:6:33","type":""},{"name":"length","nativeSrc":"15141:6:33","nodeType":"YulTypedName","src":"15141:6:33","type":""},{"name":"startIndex","nativeSrc":"15149:10:33","nodeType":"YulTypedName","src":"15149:10:33","type":""},{"name":"endIndex","nativeSrc":"15161:8:33","nodeType":"YulTypedName","src":"15161:8:33","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"15174:9:33","nodeType":"YulTypedName","src":"15174:9:33","type":""},{"name":"lengthOut","nativeSrc":"15185:9:33","nodeType":"YulTypedName","src":"15185:9:33","type":""}],"src":"15069:331:33"},{"body":{"nativeSrc":"15579:228:33","nodeType":"YulBlock","src":"15579:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15596:9:33","nodeType":"YulIdentifier","src":"15596:9:33"},{"kind":"number","nativeSrc":"15607:2:33","nodeType":"YulLiteral","src":"15607:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15589:6:33","nodeType":"YulIdentifier","src":"15589:6:33"},"nativeSrc":"15589:21:33","nodeType":"YulFunctionCall","src":"15589:21:33"},"nativeSrc":"15589:21:33","nodeType":"YulExpressionStatement","src":"15589:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15630:9:33","nodeType":"YulIdentifier","src":"15630:9:33"},{"kind":"number","nativeSrc":"15641:2:33","nodeType":"YulLiteral","src":"15641:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15626:3:33","nodeType":"YulIdentifier","src":"15626:3:33"},"nativeSrc":"15626:18:33","nodeType":"YulFunctionCall","src":"15626:18:33"},{"kind":"number","nativeSrc":"15646:2:33","nodeType":"YulLiteral","src":"15646:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"15619:6:33","nodeType":"YulIdentifier","src":"15619:6:33"},"nativeSrc":"15619:30:33","nodeType":"YulFunctionCall","src":"15619:30:33"},"nativeSrc":"15619:30:33","nodeType":"YulExpressionStatement","src":"15619:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15669:9:33","nodeType":"YulIdentifier","src":"15669:9:33"},{"kind":"number","nativeSrc":"15680:2:33","nodeType":"YulLiteral","src":"15680:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15665:3:33","nodeType":"YulIdentifier","src":"15665:3:33"},"nativeSrc":"15665:18:33","nodeType":"YulFunctionCall","src":"15665:18:33"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"15685:34:33","nodeType":"YulLiteral","src":"15685:34:33","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"15658:6:33","nodeType":"YulIdentifier","src":"15658:6:33"},"nativeSrc":"15658:62:33","nodeType":"YulFunctionCall","src":"15658:62:33"},"nativeSrc":"15658:62:33","nodeType":"YulExpressionStatement","src":"15658:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15740:9:33","nodeType":"YulIdentifier","src":"15740:9:33"},{"kind":"number","nativeSrc":"15751:2:33","nodeType":"YulLiteral","src":"15751:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15736:3:33","nodeType":"YulIdentifier","src":"15736:3:33"},"nativeSrc":"15736:18:33","nodeType":"YulFunctionCall","src":"15736:18:33"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"15756:8:33","nodeType":"YulLiteral","src":"15756:8:33","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"15729:6:33","nodeType":"YulIdentifier","src":"15729:6:33"},"nativeSrc":"15729:36:33","nodeType":"YulFunctionCall","src":"15729:36:33"},"nativeSrc":"15729:36:33","nodeType":"YulExpressionStatement","src":"15729:36:33"},{"nativeSrc":"15774:27:33","nodeType":"YulAssignment","src":"15774:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"15786:9:33","nodeType":"YulIdentifier","src":"15786:9:33"},{"kind":"number","nativeSrc":"15797:3:33","nodeType":"YulLiteral","src":"15797:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15782:3:33","nodeType":"YulIdentifier","src":"15782:3:33"},"nativeSrc":"15782:19:33","nodeType":"YulFunctionCall","src":"15782:19:33"},"variableNames":[{"name":"tail","nativeSrc":"15774:4:33","nodeType":"YulIdentifier","src":"15774:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15405:402:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15556:9:33","nodeType":"YulTypedName","src":"15556:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15570:4:33","nodeType":"YulTypedName","src":"15570:4:33","type":""}],"src":"15405:402:33"},{"body":{"nativeSrc":"15878:184:33","nodeType":"YulBlock","src":"15878:184:33","statements":[{"nativeSrc":"15888:10:33","nodeType":"YulVariableDeclaration","src":"15888:10:33","value":{"kind":"number","nativeSrc":"15897:1:33","nodeType":"YulLiteral","src":"15897:1:33","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"15892:1:33","nodeType":"YulTypedName","src":"15892:1:33","type":""}]},{"body":{"nativeSrc":"15957:63:33","nodeType":"YulBlock","src":"15957:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"15982:3:33","nodeType":"YulIdentifier","src":"15982:3:33"},{"name":"i","nativeSrc":"15987:1:33","nodeType":"YulIdentifier","src":"15987:1:33"}],"functionName":{"name":"add","nativeSrc":"15978:3:33","nodeType":"YulIdentifier","src":"15978:3:33"},"nativeSrc":"15978:11:33","nodeType":"YulFunctionCall","src":"15978:11:33"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"16001:3:33","nodeType":"YulIdentifier","src":"16001:3:33"},{"name":"i","nativeSrc":"16006:1:33","nodeType":"YulIdentifier","src":"16006:1:33"}],"functionName":{"name":"add","nativeSrc":"15997:3:33","nodeType":"YulIdentifier","src":"15997:3:33"},"nativeSrc":"15997:11:33","nodeType":"YulFunctionCall","src":"15997:11:33"}],"functionName":{"name":"mload","nativeSrc":"15991:5:33","nodeType":"YulIdentifier","src":"15991:5:33"},"nativeSrc":"15991:18:33","nodeType":"YulFunctionCall","src":"15991:18:33"}],"functionName":{"name":"mstore","nativeSrc":"15971:6:33","nodeType":"YulIdentifier","src":"15971:6:33"},"nativeSrc":"15971:39:33","nodeType":"YulFunctionCall","src":"15971:39:33"},"nativeSrc":"15971:39:33","nodeType":"YulExpressionStatement","src":"15971:39:33"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"15918:1:33","nodeType":"YulIdentifier","src":"15918:1:33"},{"name":"length","nativeSrc":"15921:6:33","nodeType":"YulIdentifier","src":"15921:6:33"}],"functionName":{"name":"lt","nativeSrc":"15915:2:33","nodeType":"YulIdentifier","src":"15915:2:33"},"nativeSrc":"15915:13:33","nodeType":"YulFunctionCall","src":"15915:13:33"},"nativeSrc":"15907:113:33","nodeType":"YulForLoop","post":{"nativeSrc":"15929:19:33","nodeType":"YulBlock","src":"15929:19:33","statements":[{"nativeSrc":"15931:15:33","nodeType":"YulAssignment","src":"15931:15:33","value":{"arguments":[{"name":"i","nativeSrc":"15940:1:33","nodeType":"YulIdentifier","src":"15940:1:33"},{"kind":"number","nativeSrc":"15943:2:33","nodeType":"YulLiteral","src":"15943:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15936:3:33","nodeType":"YulIdentifier","src":"15936:3:33"},"nativeSrc":"15936:10:33","nodeType":"YulFunctionCall","src":"15936:10:33"},"variableNames":[{"name":"i","nativeSrc":"15931:1:33","nodeType":"YulIdentifier","src":"15931:1:33"}]}]},"pre":{"nativeSrc":"15911:3:33","nodeType":"YulBlock","src":"15911:3:33","statements":[]},"src":"15907:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"16040:3:33","nodeType":"YulIdentifier","src":"16040:3:33"},{"name":"length","nativeSrc":"16045:6:33","nodeType":"YulIdentifier","src":"16045:6:33"}],"functionName":{"name":"add","nativeSrc":"16036:3:33","nodeType":"YulIdentifier","src":"16036:3:33"},"nativeSrc":"16036:16:33","nodeType":"YulFunctionCall","src":"16036:16:33"},{"kind":"number","nativeSrc":"16054:1:33","nodeType":"YulLiteral","src":"16054:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"16029:6:33","nodeType":"YulIdentifier","src":"16029:6:33"},"nativeSrc":"16029:27:33","nodeType":"YulFunctionCall","src":"16029:27:33"},"nativeSrc":"16029:27:33","nodeType":"YulExpressionStatement","src":"16029:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"15812:250:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"15856:3:33","nodeType":"YulTypedName","src":"15856:3:33","type":""},{"name":"dst","nativeSrc":"15861:3:33","nodeType":"YulTypedName","src":"15861:3:33","type":""},{"name":"length","nativeSrc":"15866:6:33","nodeType":"YulTypedName","src":"15866:6:33","type":""}],"src":"15812:250:33"},{"body":{"nativeSrc":"16204:150:33","nodeType":"YulBlock","src":"16204:150:33","statements":[{"nativeSrc":"16214:27:33","nodeType":"YulVariableDeclaration","src":"16214:27:33","value":{"arguments":[{"name":"value0","nativeSrc":"16234:6:33","nodeType":"YulIdentifier","src":"16234:6:33"}],"functionName":{"name":"mload","nativeSrc":"16228:5:33","nodeType":"YulIdentifier","src":"16228:5:33"},"nativeSrc":"16228:13:33","nodeType":"YulFunctionCall","src":"16228:13:33"},"variables":[{"name":"length","nativeSrc":"16218:6:33","nodeType":"YulTypedName","src":"16218:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16289:6:33","nodeType":"YulIdentifier","src":"16289:6:33"},{"kind":"number","nativeSrc":"16297:4:33","nodeType":"YulLiteral","src":"16297:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16285:3:33","nodeType":"YulIdentifier","src":"16285:3:33"},"nativeSrc":"16285:17:33","nodeType":"YulFunctionCall","src":"16285:17:33"},{"name":"pos","nativeSrc":"16304:3:33","nodeType":"YulIdentifier","src":"16304:3:33"},{"name":"length","nativeSrc":"16309:6:33","nodeType":"YulIdentifier","src":"16309:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16250:34:33","nodeType":"YulIdentifier","src":"16250:34:33"},"nativeSrc":"16250:66:33","nodeType":"YulFunctionCall","src":"16250:66:33"},"nativeSrc":"16250:66:33","nodeType":"YulExpressionStatement","src":"16250:66:33"},{"nativeSrc":"16325:23:33","nodeType":"YulAssignment","src":"16325:23:33","value":{"arguments":[{"name":"pos","nativeSrc":"16336:3:33","nodeType":"YulIdentifier","src":"16336:3:33"},{"name":"length","nativeSrc":"16341:6:33","nodeType":"YulIdentifier","src":"16341:6:33"}],"functionName":{"name":"add","nativeSrc":"16332:3:33","nodeType":"YulIdentifier","src":"16332:3:33"},"nativeSrc":"16332:16:33","nodeType":"YulFunctionCall","src":"16332:16:33"},"variableNames":[{"name":"end","nativeSrc":"16325:3:33","nodeType":"YulIdentifier","src":"16325:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"16067:287:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16180:3:33","nodeType":"YulTypedName","src":"16180:3:33","type":""},{"name":"value0","nativeSrc":"16185:6:33","nodeType":"YulTypedName","src":"16185:6:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16196:3:33","nodeType":"YulTypedName","src":"16196:3:33","type":""}],"src":"16067:287:33"},{"body":{"nativeSrc":"16533:179:33","nodeType":"YulBlock","src":"16533:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16550:9:33","nodeType":"YulIdentifier","src":"16550:9:33"},{"kind":"number","nativeSrc":"16561:2:33","nodeType":"YulLiteral","src":"16561:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16543:6:33","nodeType":"YulIdentifier","src":"16543:6:33"},"nativeSrc":"16543:21:33","nodeType":"YulFunctionCall","src":"16543:21:33"},"nativeSrc":"16543:21:33","nodeType":"YulExpressionStatement","src":"16543:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16584:9:33","nodeType":"YulIdentifier","src":"16584:9:33"},{"kind":"number","nativeSrc":"16595:2:33","nodeType":"YulLiteral","src":"16595:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16580:3:33","nodeType":"YulIdentifier","src":"16580:3:33"},"nativeSrc":"16580:18:33","nodeType":"YulFunctionCall","src":"16580:18:33"},{"kind":"number","nativeSrc":"16600:2:33","nodeType":"YulLiteral","src":"16600:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"16573:6:33","nodeType":"YulIdentifier","src":"16573:6:33"},"nativeSrc":"16573:30:33","nodeType":"YulFunctionCall","src":"16573:30:33"},"nativeSrc":"16573:30:33","nodeType":"YulExpressionStatement","src":"16573:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16623:9:33","nodeType":"YulIdentifier","src":"16623:9:33"},{"kind":"number","nativeSrc":"16634:2:33","nodeType":"YulLiteral","src":"16634:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16619:3:33","nodeType":"YulIdentifier","src":"16619:3:33"},"nativeSrc":"16619:18:33","nodeType":"YulFunctionCall","src":"16619:18:33"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"16639:31:33","nodeType":"YulLiteral","src":"16639:31:33","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"16612:6:33","nodeType":"YulIdentifier","src":"16612:6:33"},"nativeSrc":"16612:59:33","nodeType":"YulFunctionCall","src":"16612:59:33"},"nativeSrc":"16612:59:33","nodeType":"YulExpressionStatement","src":"16612:59:33"},{"nativeSrc":"16680:26:33","nodeType":"YulAssignment","src":"16680:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"16692:9:33","nodeType":"YulIdentifier","src":"16692:9:33"},{"kind":"number","nativeSrc":"16703:2:33","nodeType":"YulLiteral","src":"16703:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16688:3:33","nodeType":"YulIdentifier","src":"16688:3:33"},"nativeSrc":"16688:18:33","nodeType":"YulFunctionCall","src":"16688:18:33"},"variableNames":[{"name":"tail","nativeSrc":"16680:4:33","nodeType":"YulIdentifier","src":"16680:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16359:353:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16510:9:33","nodeType":"YulTypedName","src":"16510:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16524:4:33","nodeType":"YulTypedName","src":"16524:4:33","type":""}],"src":"16359:353:33"},{"body":{"nativeSrc":"16838:334:33","nodeType":"YulBlock","src":"16838:334:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16855:9:33","nodeType":"YulIdentifier","src":"16855:9:33"},{"kind":"number","nativeSrc":"16866:2:33","nodeType":"YulLiteral","src":"16866:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16848:6:33","nodeType":"YulIdentifier","src":"16848:6:33"},"nativeSrc":"16848:21:33","nodeType":"YulFunctionCall","src":"16848:21:33"},"nativeSrc":"16848:21:33","nodeType":"YulExpressionStatement","src":"16848:21:33"},{"nativeSrc":"16878:27:33","nodeType":"YulVariableDeclaration","src":"16878:27:33","value":{"arguments":[{"name":"value0","nativeSrc":"16898:6:33","nodeType":"YulIdentifier","src":"16898:6:33"}],"functionName":{"name":"mload","nativeSrc":"16892:5:33","nodeType":"YulIdentifier","src":"16892:5:33"},"nativeSrc":"16892:13:33","nodeType":"YulFunctionCall","src":"16892:13:33"},"variables":[{"name":"length","nativeSrc":"16882:6:33","nodeType":"YulTypedName","src":"16882:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16925:9:33","nodeType":"YulIdentifier","src":"16925:9:33"},{"kind":"number","nativeSrc":"16936:2:33","nodeType":"YulLiteral","src":"16936:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16921:3:33","nodeType":"YulIdentifier","src":"16921:3:33"},"nativeSrc":"16921:18:33","nodeType":"YulFunctionCall","src":"16921:18:33"},{"name":"length","nativeSrc":"16941:6:33","nodeType":"YulIdentifier","src":"16941:6:33"}],"functionName":{"name":"mstore","nativeSrc":"16914:6:33","nodeType":"YulIdentifier","src":"16914:6:33"},"nativeSrc":"16914:34:33","nodeType":"YulFunctionCall","src":"16914:34:33"},"nativeSrc":"16914:34:33","nodeType":"YulExpressionStatement","src":"16914:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16996:6:33","nodeType":"YulIdentifier","src":"16996:6:33"},{"kind":"number","nativeSrc":"17004:2:33","nodeType":"YulLiteral","src":"17004:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16992:3:33","nodeType":"YulIdentifier","src":"16992:3:33"},"nativeSrc":"16992:15:33","nodeType":"YulFunctionCall","src":"16992:15:33"},{"arguments":[{"name":"headStart","nativeSrc":"17013:9:33","nodeType":"YulIdentifier","src":"17013:9:33"},{"kind":"number","nativeSrc":"17024:2:33","nodeType":"YulLiteral","src":"17024:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17009:3:33","nodeType":"YulIdentifier","src":"17009:3:33"},"nativeSrc":"17009:18:33","nodeType":"YulFunctionCall","src":"17009:18:33"},{"name":"length","nativeSrc":"17029:6:33","nodeType":"YulIdentifier","src":"17029:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16957:34:33","nodeType":"YulIdentifier","src":"16957:34:33"},"nativeSrc":"16957:79:33","nodeType":"YulFunctionCall","src":"16957:79:33"},"nativeSrc":"16957:79:33","nodeType":"YulExpressionStatement","src":"16957:79:33"},{"nativeSrc":"17045:121:33","nodeType":"YulAssignment","src":"17045:121:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17061:9:33","nodeType":"YulIdentifier","src":"17061:9:33"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"17080:6:33","nodeType":"YulIdentifier","src":"17080:6:33"},{"kind":"number","nativeSrc":"17088:2:33","nodeType":"YulLiteral","src":"17088:2:33","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"17076:3:33","nodeType":"YulIdentifier","src":"17076:3:33"},"nativeSrc":"17076:15:33","nodeType":"YulFunctionCall","src":"17076:15:33"},{"kind":"number","nativeSrc":"17093:66:33","nodeType":"YulLiteral","src":"17093:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"17072:3:33","nodeType":"YulIdentifier","src":"17072:3:33"},"nativeSrc":"17072:88:33","nodeType":"YulFunctionCall","src":"17072:88:33"}],"functionName":{"name":"add","nativeSrc":"17057:3:33","nodeType":"YulIdentifier","src":"17057:3:33"},"nativeSrc":"17057:104:33","nodeType":"YulFunctionCall","src":"17057:104:33"},{"kind":"number","nativeSrc":"17163:2:33","nodeType":"YulLiteral","src":"17163:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17053:3:33","nodeType":"YulIdentifier","src":"17053:3:33"},"nativeSrc":"17053:113:33","nodeType":"YulFunctionCall","src":"17053:113:33"},"variableNames":[{"name":"tail","nativeSrc":"17045:4:33","nodeType":"YulIdentifier","src":"17045:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16717:455:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16807:9:33","nodeType":"YulTypedName","src":"16807:9:33","type":""},{"name":"value0","nativeSrc":"16818:6:33","nodeType":"YulTypedName","src":"16818:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16829:4:33","nodeType":"YulTypedName","src":"16829:4:33","type":""}],"src":"16717:455:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 5))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), value2)\n        mstore(add(pos, 84), value3)\n        end := add(pos, 116)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1232(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1151(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"614":[{"length":32,"start":424},{"length":32,"start":570},{"length":32,"start":4729},{"length":32,"start":4791},{"length":32,"start":5103},{"length":32,"start":5239}],"2783":[{"length":32,"start":498},{"length":32,"start":1816}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101365760003560e01c806373c8a958116100b2578063d1a91ff211610081578063f2fde38b11610066578063f2fde38b1461035b578063f5b541a61461036e578063f7ba94bd1461039557600080fd5b8063d1a91ff21461033c578063eacdc5ff1461034457600080fd5b806373c8a958146102fb578063833d47b61461030e5780638da5cb5b14610321578063c3666c361461032957600080fd5b80632d4c2f9311610109578063572b6c05116100ee578063572b6c051461022a5780635c9a509b146102775780637124094f146102db57600080fd5b80632d4c2f93146101ed57806331e66e1e1461021457600080fd5b806301ffc9a71461013b578063120aa877146101635780632035a4dd146101915780632b4c9f16146101a6575b600080fd5b61014e6101493660046117d0565b6103a8565b60405190151581526020015b60405180910390f35b61014e610171366004611834565b600260209081526000928352604080842090915290825290205460ff1681565b6101a461019f3660046118b0565b6103c2565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161015a565b6101c87f000000000000000000000000000000000000000000000000000000000000000081565b61021c6107dd565b60405161015a929190611923565b61014e610238366004611970565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102b361028536600461198d565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b604080519586526020860194909452928401919091526060830152608082015260a00161015a565b6102ee6102e93660046119a6565b6107f0565b60405161015a91906119de565b6101a4610309366004611a1f565b61089d565b6101a461031c366004611aa7565b6109a1565b6101c8610aa0565b6101a4610337366004611a1f565b610acc565b6101c8610c44565b61034d60005481565b60405190815260200161015a565b6101a4610369366004611970565b610c4e565b61034d7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6101a46103a3366004611ad9565b610c6c565b60006103bc826103b6610d2b565b90610d59565b92915050565b60008681526001602052604090208054610410576040517f07cba261000000000000000000000000000000000000000000000000000000008152600481018890526024015b60405180910390fd5b600381015442908110806104275750816004015481115b1561047b5760038201546004808401546040517fc06e9f3a00000000000000000000000000000000000000000000000000000000815291820184905260248201929092526044810191909152606401610407565b600088815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915290205460ff1615610512576040517f7635807d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790526044810186905260648101899052608401610407565b85826002015410156105605760028201546040517f23090a31000000000000000000000000000000000000000000000000000000008152610407918891600401918252602082015260400190565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166020820152603481018790526054810186905260748101899052600090609401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012083549091506105f3908690869084610e33565b610656576040517fa041b52e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905260448101879052606481018a9052608401610407565b600089815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff8d168552909152822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055840180548992906106c0908490611b45565b90915550506040517f26b3293f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201899052604482018890527f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16897ffc6ecd966b430510beae9124efe7dd517ed5286d7ed0ae258f8556c7a9765a448986600201546040516107ca929190918252602082015260400190565b60405180910390a3505050505050505050565b3660006107e8610e4d565b915091509091565b6000838152600160205260408120805461080e576001915050610896565b600381015442908110806108255750816004015481115b1561083557600292505050610896565b600086815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205460ff161561087857600392505050610896565b838260020154101561088f57600492505050610896565b6000925050505b9392505050565b6108b66108a8610e58565b6108b0610e62565b90610e90565b8483811415806108c65750808214155b156108fd576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156109975761098f88888381811061091d5761091d611b7f565b90506020020160208101906109329190611970565b85858481811061094457610944611b7f565b9050602002013588888581811061095d5761095d611b7f565b90506020020160208101906109729190611970565b73ffffffffffffffffffffffffffffffffffffffff169190610eff565b600101610900565b5050505050505050565b6109ac6108a8610e58565b8082106109ef576040517f779acdff0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610407565b600080546040805160a081018252878152602080820188815282840189815260608085018a815260808087018b8152898b526001808852898c209851895595518887015593516002880155905160038701559151600490950194909455865490910190955582518981529081018890529182018690528101849052909182917f331c648136af10432045d8cc15dfaee6ca9568922f85cab02d96d5f5286c8920910160405180910390a25050505050565b6000610ac7610aad610e62565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610ad76108a8610e58565b848381141580610ae75750808214155b15610b1e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561099757858582818110610b3b57610b3b611b7f565b9050602002016020810190610b509190611970565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610b7e57610b7e611b7f565b9050602002016020810190610b939190611970565b878786818110610ba557610ba5611b7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050806001019050610b21565b6000610ac7610e58565b610c69610c59610e58565b82610c62610e62565b9190610f91565b50565b610c776108a8610e58565b82818114610cb1576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610d2357610d1b848483818110610cd157610cd1611b7f565b90506020020135878784818110610cea57610cea611b7f565b9050602002016020810190610cff9190611970565b73ffffffffffffffffffffffffffffffffffffffff16906110a6565b600101610cb4565b505050505050565b6000806103bc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611b45565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610da9575060006103bc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610dfa575060016103bc565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610e41868685611200565b1490505b949350505050565b3660006107e8611242565b6000610ac76113ac565b6000806103bc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611b45565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610efb576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610407565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f8c9084906114f3565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610ffe576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610407565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110a05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610407565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461116a576040519150601f19603f3d011682016040523d82523d6000602084013e61116f565b606091505b5050905080610f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610407565b600081815b848110156112395761122f8287878481811061122357611223611b7f565b90506020020135611602565b9150600101611205565b50949350505050565b366000333214806112535750601836105b156112615750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611396575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190611bae565b156113a3576107e861162e565b50600091369150565b6000333214806113bc5750601836105b156113c657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114e257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190611bae565b156114ec57919050565b3391505090565b6000611555826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661165f9092919063ffffffff16565b90508051600014806115765750808060200190518101906115769190611bae565b610f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610407565b600081831061161e576000828152602084905260409020610896565b5060009182526020526040902090565b3660006107e87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611bd0565b6060610e458484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116939190611c1e565b60006040518083038185875af1925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b50915091506116e6878383876116f1565b979650505050505050565b606083156117875782516000036117805773ffffffffffffffffffffffffffffffffffffffff85163b611780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610407565b5081610e45565b610e45838381511561179c5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104079190611c3a565b6000602082840312156117e257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461089657600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c6957600080fd5b6000806040838503121561184757600080fd5b82359150602083013561185981611812565b809150509250929050565b60008083601f84011261187657600080fd5b50813567ffffffffffffffff81111561188e57600080fd5b6020830191508360208260051b85010111156118a957600080fd5b9250929050565b60008060008060008060a087890312156118c957600080fd5b8635955060208701356118db81611812565b94506040870135935060608701359250608087013567ffffffffffffffff81111561190557600080fd5b61191189828a01611864565b979a9699509497509295939492505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60006020828403121561198257600080fd5b813561089681611812565b60006020828403121561199f57600080fd5b5035919050565b6000806000606084860312156119bb57600080fd5b8335925060208401356119cd81611812565b929592945050506040919091013590565b6020810160058310611a19577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060008060008060608789031215611a3857600080fd5b863567ffffffffffffffff80821115611a5057600080fd5b611a5c8a838b01611864565b90985096506020890135915080821115611a7557600080fd5b611a818a838b01611864565b90965094506040890135915080821115611a9a57600080fd5b5061191189828a01611864565b60008060008060808587031215611abd57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060408587031215611aef57600080fd5b843567ffffffffffffffff80821115611b0757600080fd5b611b1388838901611864565b90965094506020870135915080821115611b2c57600080fd5b50611b3987828801611864565b95989497509550505050565b818103818111156103bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611bc057600080fd5b8151801515811461089657600080fd5b60008085851115611be057600080fd5b83861115611bed57600080fd5b5050820193919092039150565b60005b83811015611c15578181015183820152602001611bfd565b50506000910152565b60008251611c30818460208701611bfa565b9190910192915050565b6020815260008251806020840152611c59816040850160208701611bfa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220c9df6d329720fe94f582008bba2e067a5159761f2f7a3d53ffc40cbf24e3540264736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xD1A91FF2 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0xEACDC5FF EQ PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x2FB JUMPI DUP1 PUSH4 0x833D47B6 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x572B6C05 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x5C9A509B EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0x7124094F EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x120AA877 EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0x2035A4DD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x1A6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x17D0 JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1C8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x21C PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP3 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x1970 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x285 CALLDATASIZE PUSH1 0x4 PUSH2 0x198D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15A SWAP2 SWAP1 PUSH2 0x19DE JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1F JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA7 JUMP JUMPDEST PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1F JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0xC44 JUMP JUMPDEST PUSH2 0x34D PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1970 JUMP JUMPDEST PUSH2 0xC4E JUMP JUMPDEST PUSH2 0x34D PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 JUMP JUMPDEST PUSH2 0x1A4 PUSH2 0x3A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0xC6C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BC DUP3 PUSH2 0x3B6 PUSH2 0xD2B JUMP JUMPDEST SWAP1 PUSH2 0xD59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x410 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CBA26100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x427 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x47B JUMPI PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP1 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xC06E9F3A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7635807D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x560 JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23090A3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x407 SWAP2 DUP9 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP10 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x5F3 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP5 PUSH2 0xE33 JUMP JUMPDEST PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA041B52E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 ADD DUP1 SLOAD DUP10 SWAP3 SWAP1 PUSH2 0x6C0 SWAP1 DUP5 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x770 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xFC6ECD966B430510BEAE9124EFE7DD517ED5286D7ED0AE258F8556C7A9765A44 DUP10 DUP7 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x7CA SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH2 0xE4D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x80E JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x825 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x835 JUMPI PUSH1 0x2 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x878 JUMPI PUSH1 0x3 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x88F JUMPI PUSH1 0x4 SWAP3 POP POP POP PUSH2 0x896 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8B6 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST PUSH2 0x8B0 PUSH2 0xE62 JUMP JUMPDEST SWAP1 PUSH2 0xE90 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x8C6 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x8FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI PUSH2 0x98F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x91D JUMPI PUSH2 0x91D PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x932 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x944 JUMPI PUSH2 0x944 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x95D JUMPI PUSH2 0x95D PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xEFF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x900 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9AC PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP1 DUP3 LT PUSH2 0x9EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x779ACDFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 DUP2 MSTORE DUP3 DUP5 ADD DUP10 DUP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x80 DUP1 DUP8 ADD DUP12 DUP2 MSTORE DUP10 DUP12 MSTORE PUSH1 0x1 DUP1 DUP9 MSTORE DUP10 DUP13 KECCAK256 SWAP9 MLOAD DUP10 SSTORE SWAP6 MLOAD DUP9 DUP8 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP9 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP8 ADD SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE DUP7 SLOAD SWAP1 SWAP2 ADD SWAP1 SWAP6 SSTORE DUP3 MLOAD DUP10 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x331C648136AF10432045D8CC15DFAEE6CA9568922F85CAB02D96D5F5286C8920 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0xAAD PUSH2 0xE62 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xAD7 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0xAE7 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xB1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x997 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xB3B JUMPI PUSH2 0xB3B PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB50 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xB7E JUMPI PUSH2 0xB7E PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB93 SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xBA5 JUMPI PUSH2 0xBA5 PUSH2 0x1B7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC35 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0xE58 JUMP JUMPDEST PUSH2 0xC69 PUSH2 0xC59 PUSH2 0xE58 JUMP JUMPDEST DUP3 PUSH2 0xC62 PUSH2 0xE62 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF91 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x8A8 PUSH2 0xE58 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD23 JUMPI PUSH2 0xD1B DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xCD1 JUMPI PUSH2 0xCD1 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xCEA JUMPI PUSH2 0xCEA PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCFF SWAP2 SWAP1 PUSH2 0x1970 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x10A6 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDA9 JUMPI POP PUSH1 0x0 PUSH2 0x3BC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDFA JUMPI POP PUSH1 0x1 PUSH2 0x3BC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE41 DUP7 DUP7 DUP6 PUSH2 0x1200 JUMP JUMPDEST EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC7 PUSH2 0x13AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1B45 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xEFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x407 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF8C SWAP1 DUP5 SWAP1 PUSH2 0x14F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x407 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10A0 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x116A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1239 JUMPI PUSH2 0x122F DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1223 JUMPI PUSH2 0x1223 PUSH2 0x1B7F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1602 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1205 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1253 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1261 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x1396 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1372 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1396 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST ISZERO PUSH2 0x13A3 JUMPI PUSH2 0x7E8 PUSH2 0x162E JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13BC JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13C6 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14E2 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E2 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST ISZERO PUSH2 0x14EC JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1555 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x165F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1576 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1576 SWAP2 SWAP1 PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x407 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x161E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x7E8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1BD0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE45 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1693 SWAP2 SWAP1 PUSH2 0x1C1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x16E6 DUP8 DUP4 DUP4 DUP8 PUSH2 0x16F1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1787 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1780 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1780 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x407 JUMP JUMPDEST POP DUP2 PUSH2 0xE45 JUMP JUMPDEST PUSH2 0xE45 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x179C JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x1C3A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1859 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x188E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x18C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x18DB DUP2 PUSH2 0x1812 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1911 DUP10 DUP3 DUP11 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x896 DUP2 PUSH2 0x1812 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x199F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1812 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x1A19 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1A38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A5C DUP11 DUP4 DUP12 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A81 DUP11 DUP4 DUP12 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1911 DUP10 DUP3 DUP11 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B13 DUP9 DUP4 DUP10 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B39 DUP8 DUP3 DUP9 ADD PUSH2 0x1864 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3BC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1BE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1BED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C15 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1BFD JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C30 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1BFA JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C59 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0xDF PUSH14 0x329720FE94F582008BBA2E067A51 MSIZE PUSH23 0x1F2F7A3D53FFC40CBF24E3540264736F6C634300081600 CALLER ","sourceMap":"262:645:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:9;;;;;;:::i;:::-;;:::i;:::-;;;516:14:33;;509:22;491:41;;479:2;464:18;542:165:9;;;;;;;;4766:59:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;8440:1275;;;;;;:::i;:::-;;:::i;:::-;;728:115:13;817:19;728:115;;;2379:42:33;2367:55;;;2349:74;;2337:2;2322:18;728:115:13;2177:252:33;4053:40:32;;;;;811:94:31;;;:::i;:::-;;;;;;;;:::i;878:149:13:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;4637:49:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3827:25:33;;;3883:2;3868:18;;3861:34;;;;3911:18;;;3904:34;;;;3969:2;3954:18;;3947:34;4012:3;3997:19;;3990:35;3814:3;3799:19;4637:49:32;3568:463:33;10426:748:32;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3113:464:21:-;;;;;;:::i;:::-;;:::i;6860:765:32:-;;;;;;:::i;:::-;;:::i;710:120:3:-;;;:::i;4355:493:21:-;;;;;;:::i;:::-;;:::i;604:91:31:-;;;:::i;4539:29:32:-;;;;;;;;;7813:25:33;;;7801:2;7786:18;4539:29:32;7667:177:33;864:152:3;;;;;;:::i;:::-;;:::i;3928:66:32:-;;3968:26;3928:66;;1942:402:21;;;;;;:::i;:::-;;:::i;542:165:9:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:9:o;8440:1275:32:-;8618:24;8645:20;;;:11;:20;;;;;8688:16;;8684:95;;8741:27;;;;;;;;7813:25:33;;;7786:18;;8741:27:32;;;;;;;;8684:95;8854:15;;;;8811;;8840:29;;;:60;;;8887:5;:13;;;8873:11;:27;8840:60;8836:165;;;8959:15;;;;8976:13;;;;;8923:67;;;;;;;;9019:25:33;;;9060:18;;;9053:34;;;;9103:18;;;9096:34;;;;8992:18;;8923:67:32;8817:319:33;8836:165:32;9015:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;;9011:119;;;9065:54;;;;;9402:42:33;9390:55;;9065:54:32;;;9372:74:33;9462:18;;;9455:34;;;9505:18;;;9498:34;;;9548:18;;;9541:34;;;9344:19;;9065:54:32;9141:440:33;9011:119:32;9163:6;9144:5;:16;;;:25;9140:111;;;9223:16;;;;9192:48;;;;;;;9215:6;;9192:48;;9760:25:33;;;9816:2;9801:18;;9794:34;9748:2;9733:18;;9586:248;9140:111:32;9286:56;;10085:66:33;10072:2;10068:15;;;10064:88;9286:56:32;;;10052:101:33;10169:12;;;10162:28;;;10206:12;;;10199:28;;;10243:12;;;10236:28;;;9261:12:32;;10280:13:33;;9286:56:32;;;;;;;;;;;;;9276:67;;9286:56;9276:67;;;;9379:16;;9276:67;;-1:-1:-1;9358:44:32;;:5;;;;9276:67;9358:20;:44::i;:::-;9353:135;;9425:52;;;;;9402:42:33;9390:55;;9425:52:32;;;9372:74:33;9462:18;;;9455:34;;;9505:18;;;9498:34;;;9548:18;;;9541:34;;;9344:19;;9425:52:32;9141:440:33;9353:135:32;9498:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;:34;;;;9528:4;9498:34;;;9542:16;;:26;;9562:6;;9498:16;9542:26;;9562:6;;9542:26;:::i;:::-;;;;-1:-1:-1;;9579:54:32;;;;;:23;10811:55:33;;;9579:54:32;;;10793:74:33;10883:18;;;10876:34;;;10926:18;;;10919:34;;;9579:15:32;:23;;;;10766:18:33;;9579:54:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9672:9;9649:59;;9663:7;9649:59;9683:6;9691:5;:16;;;9649:59;;;;;;9760:25:33;;;9816:2;9801:18;;9794:34;9748:2;9733:18;;9586:248;9649:59:32;;;;;;;;8608:1107;;;8440:1275;;;;;;:::o;811:94:31:-;855:14;;888:10;:8;:10::i;:::-;881:17;;;;811:94;;:::o;10426:748:32:-;10547:16;10602:20;;;:11;:20;;;;;10645:16;;10641:97;;10698:29;10691:36;;;;;10641:97;10813:15;;;;10770;;10799:29;;;:60;;;10846:5;:13;;;10832:11;:27;10799:60;10795:131;;;10882:33;10875:40;;;;;;10795:131;10940:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;;10936:90;;;10990:25;10983:32;;;;;;10936:90;11059:6;11040:5;:16;;;:25;11036:96;;;11088:33;11081:40;;;;;;11036:96;11149:18;11142:25;;;;10426:748;;;;;;:::o;3113:464:21:-;3244:70;3301:12;:10;:12::i;:::-;3244:33;:31;:33::i;:::-;:56;;:70::i;:::-;3341:8;3370:23;;;;;:51;;-1:-1:-1;3397:24:21;;;;3370:51;3366:90;;;3430:26;;;;;;;;;;;;;;3366:90;3471:9;3466:105;3486:6;3482:1;:10;3466:105;;;3513:47;3536:8;;3545:1;3536:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3549:7;;3557:1;3549:10;;;;;;;:::i;:::-;;;;;;;3513:6;;3520:1;3513:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3494:3;;3466:105;;;;3234:343;3113:464;;;;;;:::o;6860:765:32:-;7017:70;7074:12;:10;:12::i;7017:70::-;7123:7;7110:9;:20;7106:96;;7153:38;;;;;;;;9760:25:33;;;9801:18;;;9794:34;;;9733:18;;7153:38:32;9586:248:33;7106:96:32;7212:15;7230:14;;7277:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7254:20;;;:11;:20;;;;;;:220;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7509:16;;;;;;;;7551:67;;11651:25:33;;;11692:18;;;11685:34;;;11735:18;;;11728:34;;;11778:18;;11771:34;;;7230:14:32;;;;7551:67;;11623:19:33;7551:67:32;;;;;;;7007:618;6860:765;;;;:::o;710:120:3:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:8;;;;3556:118;782:41:3;775:48;;710:120;:::o;4355:493:21:-;4492:70;4549:12;:10;:12::i;4492:70::-;4589:8;4618:26;;;;;:55;;-1:-1:-1;4648:25:21;;;;4618:55;4614:94;;;4682:26;;;;;;;;;;;;;;4614:94;4723:9;4718:124;4738:6;4734:1;:10;4718:124;;;4765:9;;4775:1;4765:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4799:4;4806:8;;4815:1;4806:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4819:8;;4828:1;4819:11;;;;;;;:::i;:::-;4765:66;;;;;;;;;;12296:42:33;12365:15;;;4765:66:21;;;12347:34:33;12417:15;;;;12397:18;;;12390:43;-1:-1:-1;4819:11:21;;;;;;12449:18:33;;;12442:34;12259:18;;4765:66:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4746:3;;;;;4718:124;;604:91:31;650:7;676:12;:10;:12::i;864:152:3:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1942:402:21:-;2052:70;2109:12;:10;:12::i;2052:70::-;2149:8;2178:24;;;2174:63;;2211:26;;;;;;;;;;;;;;2174:63;2252:9;2247:91;2267:6;2263:1;:10;2247:91;;;2294:33;2316:7;;2324:1;2316:10;;;;;;;:::i;:::-;;;;;;;2294:8;;2303:1;2294:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2275:3;;2247:91;;;;2042:302;1942:402;;;;:::o;1705:174:12:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:12;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:12;1620:11;;1560:82;-1:-1:-1;1658:34:12;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1411:172:30:-;1512:4;1572;1535:33;1556:5;;1563:4;1535:20;:33::i;:::-;:41;1528:48;;1411:172;;;;;;;:::o;11459:178:32:-;11558:14;;11591:39;:37;:39::i;11229:175::-;11330:7;11356:41;:39;:41::i;5065:174:8:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;2379:42:33;2367:55;;4543:25:8;;;2349:74:33;2322:18;;4543:25:8;2177:252:33;4504:64:8;4413:162;;:::o;941:175:26:-;1050:58;;;12951:42:33;12939:55;;1050:58:26;;;12921:74:33;13011:18;;;;13004:34;;;1050:58:26;;;;;;;;;;12894:18:33;;;;1050:58:26;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;:::-;941:175;;;:::o;3060:369:8:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2379:42:33;2367:55;;3243:24:8;;;2349:74:33;2322:18;;3243:24:8;2177:252:33;3207:60:8;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:8;3277:146;3148:281;3060:369;;;:::o;2647:312:27:-;2761:6;2736:21;:31;;2728:73;;;;;;;13251:2:33;2728:73:27;;;13233:21:33;13290:2;13270:18;;;13263:30;13329:31;13309:18;;;13302:59;13378:18;;2728:73:27;13049:353:33;2728:73:27;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;13819:2:33;2874:78:27;;;13801:21:33;13858:2;13838:18;;;13831:30;13897:34;13877:18;;;13870:62;13968:28;13948:18;;;13941:56;14014:19;;2874:78:27;13617:422:33;2331:300:30;2424:7;2466:4;2424:7;2480:116;2500:16;;;2480:116;;;2552:33;2562:12;2576:5;;2582:1;2576:8;;;;;;;:::i;:::-;;;;;;;2552:9;:33::i;:::-;2537:48;-1:-1:-1;2518:3:30;;2480:116;;;-1:-1:-1;2612:12:30;2331:300;-1:-1:-1;;;;2331:300:30:o;1643:735:14:-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:14;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:14;;;;-1:-1:-1;1643:735:14:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:14;:19;:39;;466:14:17;462:23;;449:37;445:2;441:46;2207:80:14;;;;;;;;;;14228:42:33;14297:15;;;2207:80:14;;;14279:34:33;2276:10:14;14329:18:33;;;14322:43;14191:18;;2207:80:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:14;;;;-1:-1:-1;1643:735:14:o;784:745::-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:14;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:14;;784:745::o;1043:95::-;462:23:17;466:14;462:23;449:37;445:2;441:46;1372:19:14;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:14;;;;;:39;14297:15:33;;;1396:59:14;;;14279:34:33;1444:10:14;14329:18:33;;;14322:43;1396:19:14;:39;;;;14191:18:33;;1396:59:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:14:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;5196:642:26:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;14860:2:33;5720:111:26;;;14842:21:33;14899:2;14879:18;;;14872:30;14938:34;14918:18;;;14911:62;15009:12;14989:18;;;14982:40;15039:19;;5720:111:26;14658:406:33;9205:147:30;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;-1:-1:-1;9426:13:30;9517:15;;;9552:4;9545:15;9598:4;9582:21;;;9205:147::o;616:152:17:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;4108:223:27:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:27:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;16561:2:33;8113:60:27;;;16543:21:33;16600:2;16580:18;;;16573:30;16639:31;16619:18;;;16612:59;16688:18;;8113:60:27;16359:353:33;8113:60:27;-1:-1:-1;8208:10:27;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:33:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:154;629:42;622:5;618:54;611:5;608:65;598:93;;687:1;684;677:12;702:315;770:6;778;831:2;819:9;810:7;806:23;802:32;799:52;;;847:1;844;837:12;799:52;883:9;870:23;860:33;;943:2;932:9;928:18;915:32;956:31;981:5;956:31;:::i;:::-;1006:5;996:15;;;702:315;;;;;:::o;1022:367::-;1085:8;1095:6;1149:3;1142:4;1134:6;1130:17;1126:27;1116:55;;1167:1;1164;1157:12;1116:55;-1:-1:-1;1190:20:33;;1233:18;1222:30;;1219:50;;;1265:1;1262;1255:12;1219:50;1302:4;1294:6;1290:17;1278:29;;1362:3;1355:4;1345:6;1342:1;1338:14;1330:6;1326:27;1322:38;1319:47;1316:67;;;1379:1;1376;1369:12;1316:67;1022:367;;;;;:::o;1394:778::-;1516:6;1524;1532;1540;1548;1556;1609:3;1597:9;1588:7;1584:23;1580:33;1577:53;;;1626:1;1623;1616:12;1577:53;1662:9;1649:23;1639:33;;1722:2;1711:9;1707:18;1694:32;1735:31;1760:5;1735:31;:::i;:::-;1785:5;-1:-1:-1;1837:2:33;1822:18;;1809:32;;-1:-1:-1;1888:2:33;1873:18;;1860:32;;-1:-1:-1;1943:3:33;1928:19;;1915:33;1971:18;1960:30;;1957:50;;;2003:1;2000;1993:12;1957:50;2042:70;2104:7;2095:6;2084:9;2080:22;2042:70;:::i;:::-;1394:778;;;;-1:-1:-1;1394:778:33;;-1:-1:-1;1394:778:33;;2131:8;;1394:778;-1:-1:-1;;;1394:778:33:o;2679:447::-;2836:2;2825:9;2818:21;2875:6;2870:2;2859:9;2855:18;2848:34;2932:6;2924;2919:2;2908:9;2904:18;2891:48;2988:1;2959:22;;;2983:2;2955:31;;;2948:42;;;;3042:2;3030:15;;;3047:66;3026:88;3011:104;3007:113;;2679:447;-1:-1:-1;2679:447:33:o;3131:247::-;3190:6;3243:2;3231:9;3222:7;3218:23;3214:32;3211:52;;;3259:1;3256;3249:12;3211:52;3298:9;3285:23;3317:31;3342:5;3317:31;:::i;3383:180::-;3442:6;3495:2;3483:9;3474:7;3470:23;3466:32;3463:52;;;3511:1;3508;3501:12;3463:52;-1:-1:-1;3534:23:33;;3383:180;-1:-1:-1;3383:180:33:o;4036:383::-;4113:6;4121;4129;4182:2;4170:9;4161:7;4157:23;4153:32;4150:52;;;4198:1;4195;4188:12;4150:52;4234:9;4221:23;4211:33;;4294:2;4283:9;4279:18;4266:32;4307:31;4332:5;4307:31;:::i;:::-;4036:383;;4357:5;;-1:-1:-1;;;4409:2:33;4394:18;;;;4381:32;;4036:383::o;4424:400::-;4571:2;4556:18;;4604:1;4593:13;;4583:201;;4640:77;4637:1;4630:88;4741:4;4738:1;4731:15;4769:4;4766:1;4759:15;4583:201;4793:25;;;4424:400;:::o;4829:1103::-;5002:6;5010;5018;5026;5034;5042;5095:2;5083:9;5074:7;5070:23;5066:32;5063:52;;;5111:1;5108;5101:12;5063:52;5151:9;5138:23;5180:18;5221:2;5213:6;5210:14;5207:34;;;5237:1;5234;5227:12;5207:34;5276:70;5338:7;5329:6;5318:9;5314:22;5276:70;:::i;:::-;5365:8;;-1:-1:-1;5250:96:33;-1:-1:-1;5453:2:33;5438:18;;5425:32;;-1:-1:-1;5469:16:33;;;5466:36;;;5498:1;5495;5488:12;5466:36;5537:72;5601:7;5590:8;5579:9;5575:24;5537:72;:::i;:::-;5628:8;;-1:-1:-1;5511:98:33;-1:-1:-1;5716:2:33;5701:18;;5688:32;;-1:-1:-1;5732:16:33;;;5729:36;;;5761:1;5758;5751:12;5729:36;;5800:72;5864:7;5853:8;5842:9;5838:24;5800:72;:::i;5937:385::-;6023:6;6031;6039;6047;6100:3;6088:9;6079:7;6075:23;6071:33;6068:53;;;6117:1;6114;6107:12;6068:53;-1:-1:-1;;6140:23:33;;;6210:2;6195:18;;6182:32;;-1:-1:-1;6261:2:33;6246:18;;6233:32;;6312:2;6297:18;6284:32;;-1:-1:-1;5937:385:33;-1:-1:-1;5937:385:33:o;8031:781::-;8161:6;8169;8177;8185;8238:2;8226:9;8217:7;8213:23;8209:32;8206:52;;;8254:1;8251;8244:12;8206:52;8294:9;8281:23;8323:18;8364:2;8356:6;8353:14;8350:34;;;8380:1;8377;8370:12;8350:34;8419:70;8481:7;8472:6;8461:9;8457:22;8419:70;:::i;:::-;8508:8;;-1:-1:-1;8393:96:33;-1:-1:-1;8596:2:33;8581:18;;8568:32;;-1:-1:-1;8612:16:33;;;8609:36;;;8641:1;8638;8631:12;8609:36;;8680:72;8744:7;8733:8;8722:9;8718:24;8680:72;:::i;:::-;8031:781;;;;-1:-1:-1;8771:8:33;-1:-1:-1;;;;8031:781:33:o;10304:282::-;10371:9;;;10392:11;;;10389:191;;;10436:77;10433:1;10426:88;10537:4;10534:1;10527:15;10565:4;10562:1;10555:15;10964:184;11016:77;11013:1;11006:88;11113:4;11110:1;11103:15;11137:4;11134:1;11127:15;14376:277;14443:6;14496:2;14484:9;14475:7;14471:23;14467:32;14464:52;;;14512:1;14509;14502:12;14464:52;14544:9;14538:16;14597:5;14590:13;14583:21;14576:5;14573:32;14563:60;;14619:1;14616;14609:12;15069:331;15174:9;15185;15227:8;15215:10;15212:24;15209:44;;;15249:1;15246;15239:12;15209:44;15278:6;15268:8;15265:20;15262:40;;;15298:1;15295;15288:12;15262:40;-1:-1:-1;;15324:23:33;;;15369:25;;;;;-1:-1:-1;15069:331:33:o;15812:250::-;15897:1;15907:113;15921:6;15918:1;15915:13;15907:113;;;15997:11;;;15991:18;15978:11;;;15971:39;15943:2;15936:10;15907:113;;;-1:-1:-1;;16054:1:33;16036:16;;16029:27;15812:250::o;16067:287::-;16196:3;16234:6;16228:13;16250:66;16309:6;16304:3;16297:4;16289:6;16285:17;16250:66;:::i;:::-;16332:16;;;;;16067:287;-1:-1:-1;;16067:287:33:o;16717:455::-;16866:2;16855:9;16848:21;16829:4;16898:6;16892:13;16941:6;16936:2;16925:9;16921:18;16914:34;16957:79;17029:6;17024:2;17013:9;17009:18;17004:2;16996:6;16992:15;16957:79;:::i;:::-;17088:2;17076:15;17093:66;17072:88;17057:104;;;;17163:2;17053:113;;16717:455;-1:-1:-1;;16717:455:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"1472200","executionCost":"infinite","totalCost":"infinite"},"external":{"OPERATOR_ROLE()":"261","POINTS_CONTRACT()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","canClaim(uint256,address,uint256)":"11421","claim(uint256,address,uint256,bytes32,bytes32[])":"infinite","claimEpochs(uint256)":"11049","claimed(uint256,address)":"2651","currentEpochId()":"2362","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setMerkleRoot(bytes32,uint256,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"OPERATOR_ROLE()":"f5b541a6","POINTS_CONTRACT()":"2d4c2f93","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","canClaim(uint256,address,uint256)":"7124094f","claim(uint256,address,uint256,bytes32,bytes32[])":"2035a4dd","claimEpochs(uint256)":"5c9a509b","claimed(uint256,address)":"120aa877","currentEpochId()":"eacdc5ff","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setMerkleRoot(bytes32,uint256,uint256,uint256)":"833d47b6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecpContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"ClaimEpochNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ClaimingEpochNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"}],\"name\":\"InsufficientPoolAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"InvalidRewardContractAddress\",\"type\":\"address\"}],\"name\":\"InvalidRewardContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"enum LimitedOCPointsMerkleClaim.ClaimError\",\"name\":\"error\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimEpochs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount being claimed.\",\"epochId\":\"The epoch identifier.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient of the claim.\"}}],\"ClaimEpochNotFound(uint256)\":[{\"params\":{\"epochId\":\"The epoch identifier.\"}}],\"ClaimingEpochNotActive(uint256,uint256,uint256)\":[{\"params\":{\"currentTime\":\"The current block timestamp.\",\"endTime\":\"The end time of the claiming epoch.\",\"startTime\":\"The start time of the claiming epoch.\"}}],\"InsufficientPoolAmount(uint256,uint256)\":[{\"params\":{\"amountAvailable\":\"The amount available in the pool.\",\"amountRequested\":\"The amount requested to claim.\"}}],\"InvalidClaimWindow(uint256,uint256)\":[{\"params\":{\"endTime\":\"The end time.\",\"startTime\":\"The start time.\"}}],\"InvalidProof(address,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount being claimed.\",\"epochId\":\"The epoch identifier.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient of the claim.\"}}],\"InvalidRewardContractAddress(address)\":[{\"params\":{\"InvalidRewardContractAddress\":\"The address of the invalid reward contract.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)\":{\"params\":{\"endTime\":\"The end time for claiming.\",\"epochId\":\"The epoch identifier.\",\"merkleRoot\":\"The merkle root for this epoch.\",\"startTime\":\"The start time for claiming.\",\"totalAmount\":\"The total amount available for claiming.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RewardClaimed(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount claimed.\",\"amountLeft\":\"The amount left in the pool after this claim.\",\"epochId\":\"The epoch identifier.\",\"recipient\":\"The recipient of the claim.\"}}},\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"__msgSender()\":{\"returns\":{\"_0\":\"The current msg.sender value.\"}},\"canClaim(uint256,address,uint256)\":{\"details\":\"Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.Returns ClaimError.NoError if basic validation passes.\",\"params\":{\"amount\":\"The amount to be claimed.\",\"epochId\":\"The epoch identifier.\",\"recipient\":\"The recipient address.\"},\"returns\":{\"error\":\"The claim validation result.\"}},\"claim(uint256,address,uint256,bytes32,bytes32[])\":{\"details\":\"Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.Reverts with {InvalidProof} if the merkle proof verification fails.Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.Emits a {RewardClaimed} event.\",\"params\":{\"amount\":\"The amount to be claimed.\",\"epochId\":\"The epoch identifier.\",\"proof\":\"The merkle proof for verification.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient for this claim.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"setMerkleRoot(bytes32,uint256,uint256,uint256)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InvalidClaimWindow} if startTime is not before endTime.Emits a {MerkleRootSet} event.\",\"params\":{\"endTime\":\"The end time for claiming.\",\"merkleRoot\":\"The merkle root for this epoch.\",\"startTime\":\"The start time for claiming.\",\"totalAmount\":\"The total amount available for claiming in this epoch.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when trying to claim the same allocation more than once.\"}],\"ClaimEpochNotFound(uint256)\":[{\"notice\":\"Thrown when trying to access a non-existent epoch.\"}],\"ClaimingEpochNotActive(uint256,uint256,uint256)\":[{\"notice\":\"Thrown when trying to claim outside the valid time epoch.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"InsufficientPoolAmount(uint256,uint256)\":[{\"notice\":\"Thrown when the pool doesn't have enough tokens for the claim.\"}],\"InvalidClaimWindow(uint256,uint256)\":[{\"notice\":\"Thrown when the start time is not before the end time.\"}],\"InvalidProof(address,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}],\"InvalidRewardContractAddress(address)\":[{\"notice\":\"Thrown when the reward contract address is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new merkle root is set for an epoch.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RewardClaimed(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when a reward is claimed.\"}},\"kind\":\"user\",\"methods\":{\"OPERATOR_ROLE()\":{\"notice\":\"The role identifier for the operator role.\"},\"POINTS_CONTRACT()\":{\"notice\":\"A reference to the reward contract.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"__msgSender()\":{\"notice\":\"Internal function to access the current msg.sender.\"},\"canClaim(uint256,address,uint256)\":{\"notice\":\"Checks if a user can claim rewards for a given epoch.\"},\"claim(uint256,address,uint256,bytes32,bytes32[])\":{\"notice\":\"Claims rewards for a given recipient address.\"},\"claimEpochs(uint256)\":{\"notice\":\"Mapping from epoch ID to claiming epoch data.\"},\"claimed(uint256,address)\":{\"notice\":\"Mapping from epoch ID to user address to claimed status.\"},\"currentEpochId()\":{\"notice\":\"Current epoch counter.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"setMerkleRoot(bytes32,uint256,uint256,uint256)\":{\"notice\":\"Sets a new merkle root for a claiming epoch.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol\":\"LimitedOCPointsMerkleClaimMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.22;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0x199be5843052ad12607e0edd27a617b0307ae39e0d190b1632c53be7566c40a5\",\"license\":\"GPL-3.0-or-later\"},\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x1bc6bfe11425d5f150d4c1f3c333ecea34e6ce0f262fb74c1754d80f4ac2339f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {LimitedOCPointsMerkleClaim} from \\\"../../payment/LimitedOCPointsMerkleClaim.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract LimitedOCPointsMerkleClaimMock is LimitedOCPointsMerkleClaim {\\n    constructor(address ecpContractAddress, IForwarderRegistry forwarderRegistry) LimitedOCPointsMerkleClaim(ecpContractAddress, forwarderRegistry) {}\\n\\n    /// @notice Internal function to access the current msg.sender.\\n    /// @return The current msg.sender value.\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x8fdf039dd35f694bf6ae48b5761852838fc0571618e5f40079de79a429fb0a58\",\"license\":\"MIT\"},\"contracts/payment/LimitedOCPointsMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\\\";\\n\\n/// @title LimitedOCPointsMerkleClaim\\n/// @notice This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.\\n/// @notice Each epoch has a fixed total amount that gets depleted as users claim their allocations.\\n/// @notice Claims are based on merkle proofs and are subject to time constraints and pool availability.\\ncontract LimitedOCPointsMerkleClaim is TokenRecovery, ForwarderRegistryContext {\\n    /// @notice Thrown when the reward contract address is invalid.\\n    /// @param InvalidRewardContractAddress The address of the invalid reward contract.\\n    error InvalidRewardContractAddress(address InvalidRewardContractAddress);\\n\\n    /// @notice Thrown when trying to claim outside the valid time epoch.\\n    /// @param currentTime The current block timestamp.\\n    /// @param startTime The start time of the claiming epoch.\\n    /// @param endTime The end time of the claiming epoch.\\n    error ClaimingEpochNotActive(uint256 currentTime, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Thrown when trying to claim the same allocation more than once.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount being claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param epochId The epoch identifier.\\n    error AlreadyClaimed(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount being claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param epochId The epoch identifier.\\n    error InvalidProof(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\\n\\n    /// @notice Thrown when the pool doesn't have enough tokens for the claim.\\n    /// @param amountRequested The amount requested to claim.\\n    /// @param amountAvailable The amount available in the pool.\\n    error InsufficientPoolAmount(uint256 amountRequested, uint256 amountAvailable);\\n\\n    /// @notice Thrown when trying to access a non-existent epoch.\\n    /// @param epochId The epoch identifier.\\n    error ClaimEpochNotFound(uint256 epochId);\\n\\n    /// @notice Thrown when the start time is not before the end time.\\n    /// @param startTime The start time.\\n    /// @param endTime The end time.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime);\\n\\n    /// @notice Enum representing different claim validation errors.\\n    enum ClaimError {\\n        NoError,\\n        ClaimEpochNotFound,\\n        ClaimingEpochNotActive,\\n        AlreadyClaimed,\\n        InsufficientPoolAmount\\n    }\\n\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The role identifier for the operator role.\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice A reference to the reward contract.\\n    IPoints public immutable POINTS_CONTRACT;\\n\\n    /// @notice Struct representing a claiming epoch.\\n    struct ClaimEpoch {\\n        bytes32 merkleRoot;      // Merkle root for this epoch\\n        uint256 totalAmount;     // Total amount available for claiming\\n        uint256 amountLeft;      // Amount left to be claimed\\n        uint256 startTime;       // Start time for claiming\\n        uint256 endTime;         // End time for claiming\\n    }\\n\\n    /// @notice Current epoch counter.\\n    uint256 public currentEpochId;\\n\\n    /// @notice Mapping from epoch ID to claiming epoch data.\\n    mapping(uint256 => ClaimEpoch) public claimEpochs;\\n\\n    /// @notice Mapping from epoch ID to user address to claimed status.\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n\\n    /// @notice Emitted when a new merkle root is set for an epoch.\\n    /// @param epochId The epoch identifier.\\n    /// @param merkleRoot The merkle root for this epoch.\\n    /// @param totalAmount The total amount available for claiming.\\n    /// @param startTime The start time for claiming.\\n    /// @param endTime The end time for claiming.\\n    event MerkleRootSet(uint256 indexed epochId, bytes32 merkleRoot, uint256 totalAmount, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Emitted when a reward is claimed.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount claimed.\\n    /// @param amountLeft The amount left in the pool after this claim.\\n    event RewardClaimed(uint256 indexed epochId, address indexed recipient, uint256 amount, uint256 amountLeft);\\n\\n    /// @notice Constructor\\n    /// @param rewardContractAddress The address of the reward contract.\\n    /// @param forwarderRegistry The address of the forwarder registry.\\n    /// @dev Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address.\\n    constructor(\\n        address rewardContractAddress,\\n        IForwarderRegistry forwarderRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (rewardContractAddress == address(0)) {\\n            revert InvalidRewardContractAddress(rewardContractAddress);\\n        }\\n        POINTS_CONTRACT = IPoints(rewardContractAddress);\\n    }\\n\\n    /// @notice Sets a new merkle root for a claiming epoch.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InvalidClaimWindow} if startTime is not before endTime.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param merkleRoot The merkle root for this epoch.\\n    /// @param totalAmount The total amount available for claiming in this epoch.\\n    /// @param startTime The start time for claiming.\\n    /// @param endTime The end time for claiming.\\n    function setMerkleRoot(\\n        bytes32 merkleRoot,\\n        uint256 totalAmount,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        \\n        if (startTime >= endTime) {\\n            revert InvalidClaimWindow(startTime, endTime);\\n        }\\n\\n        uint256 epochId = currentEpochId;\\n        claimEpochs[epochId] = ClaimEpoch({\\n            merkleRoot: merkleRoot,\\n            totalAmount: totalAmount,\\n            amountLeft: totalAmount,\\n            startTime: startTime,\\n            endTime: endTime\\n        });\\n\\n        unchecked {\\n            ++currentEpochId;\\n        }\\n\\n        emit MerkleRootSet(epochId, merkleRoot, totalAmount, startTime, endTime);\\n    }\\n\\n    /// @notice Claims rewards for a given recipient address.\\n    /// @dev Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.\\n    /// @dev Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.\\n    /// @dev Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof verification fails.\\n    /// @dev Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.\\n    /// @dev Emits a {RewardClaimed} event.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient for this claim.\\n    /// @param amount The amount to be claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param proof The merkle proof for verification.\\n    function claim(\\n        uint256 epochId,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 reasonCode,\\n        bytes32[] calldata proof\\n    ) external {\\n        ClaimEpoch storage epoch = claimEpochs[epochId];\\n        \\n        if (epoch.merkleRoot == bytes32(0)) {\\n            revert ClaimEpochNotFound(epochId);\\n        }\\n\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\\n            revert ClaimingEpochNotActive(currentTime, epoch.startTime, epoch.endTime);\\n        }\\n\\n        if (claimed[epochId][recipient]) {\\n            revert AlreadyClaimed(recipient, amount, reasonCode, epochId);\\n        }\\n\\n        if (epoch.amountLeft < amount) {\\n            revert InsufficientPoolAmount(amount, epoch.amountLeft);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount, reasonCode, epochId));\\n        if (!proof.verifyCalldata(epoch.merkleRoot, leaf)) {\\n            revert InvalidProof(recipient, amount, reasonCode, epochId);\\n        }\\n\\n        claimed[epochId][recipient] = true;\\n        epoch.amountLeft -= amount;\\n\\n        POINTS_CONTRACT.deposit(recipient, amount, reasonCode);\\n\\n        emit RewardClaimed(epochId, recipient, amount, epoch.amountLeft);\\n    }\\n\\n    /// @notice Checks if a user can claim rewards for a given epoch.\\n    /// @dev Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.\\n    /// @dev Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.\\n    /// @dev Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.\\n    /// @dev Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.\\n    /// @dev Returns ClaimError.NoError if basic validation passes.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient address.\\n    /// @param amount The amount to be claimed.\\n    /// @return error The claim validation result.\\n    function canClaim(\\n        uint256 epochId,\\n        address recipient,\\n        uint256 amount\\n    ) public view returns (ClaimError error) {\\n        ClaimEpoch storage epoch = claimEpochs[epochId];\\n        \\n        if (epoch.merkleRoot == bytes32(0)) {\\n            return ClaimError.ClaimEpochNotFound;\\n        }\\n\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\\n            return ClaimError.ClaimingEpochNotActive;\\n        }\\n\\n        if (claimed[epochId][recipient]) {\\n            return ClaimError.AlreadyClaimed;\\n        }\\n\\n        if (epoch.amountLeft < amount) {\\n            return ClaimError.InsufficientPoolAmount;\\n        }\\n\\n        return ClaimError.NoError;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n} \",\"keccak256\":\"0xf902d671b97dc347cd326b13fe7b80bba4334a8ebeb7024e3d80fcf97d7480a5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2798,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"currentEpochId","offset":0,"slot":"0","type":"t_uint256"},{"astId":2804,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"claimEpochs","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(ClaimEpoch)2795_storage)"},{"astId":2811,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_uint256,t_struct(ClaimEpoch)2795_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch)","numberOfBytes":"32","value":"t_struct(ClaimEpoch)2795_storage"},"t_struct(ClaimEpoch)2795_storage":{"encoding":"inplace","label":"struct LimitedOCPointsMerkleClaim.ClaimEpoch","members":[{"astId":2786,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2788,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"totalAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2790,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"amountLeft","offset":0,"slot":"2","type":"t_uint256"},{"astId":2792,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"startTime","offset":0,"slot":"3","type":"t_uint256"},{"astId":2794,"contract":"contracts/mocks/payment/LimitedOCPointsMerkleClaimMock.sol:LimitedOCPointsMerkleClaimMock","label":"endTime","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32,uint256)":[{"notice":"Thrown when trying to claim the same allocation more than once."}],"ClaimEpochNotFound(uint256)":[{"notice":"Thrown when trying to access a non-existent epoch."}],"ClaimingEpochNotActive(uint256,uint256,uint256)":[{"notice":"Thrown when trying to claim outside the valid time epoch."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"InsufficientPoolAmount(uint256,uint256)":[{"notice":"Thrown when the pool doesn't have enough tokens for the claim."}],"InvalidClaimWindow(uint256,uint256)":[{"notice":"Thrown when the start time is not before the end time."}],"InvalidProof(address,uint256,bytes32,uint256)":[{"notice":"Thrown when a proof cannot be verified."}],"InvalidRewardContractAddress(address)":[{"notice":"Thrown when the reward contract address is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)":{"notice":"Emitted when a new merkle root is set for an epoch."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RewardClaimed(uint256,address,uint256,uint256)":{"notice":"Emitted when a reward is claimed."}},"kind":"user","methods":{"OPERATOR_ROLE()":{"notice":"The role identifier for the operator role."},"POINTS_CONTRACT()":{"notice":"A reference to the reward contract."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"__msgSender()":{"notice":"Internal function to access the current msg.sender."},"canClaim(uint256,address,uint256)":{"notice":"Checks if a user can claim rewards for a given epoch."},"claim(uint256,address,uint256,bytes32,bytes32[])":{"notice":"Claims rewards for a given recipient address."},"claimEpochs(uint256)":{"notice":"Mapping from epoch ID to claiming epoch data."},"claimed(uint256,address)":{"notice":"Mapping from epoch ID to user address to claimed status."},"currentEpochId()":{"notice":"Current epoch counter."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"setMerkleRoot(bytes32,uint256,uint256,uint256)":{"notice":"Sets a new merkle root for a claiming epoch."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/payment/LimitedOCPointsMerkleClaim.sol":{"LimitedOCPointsMerkleClaim":{"abi":[{"inputs":[{"internalType":"address","name":"rewardContractAddress","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"ClaimEpochNotFound","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentTime","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"ClaimingEpochNotActive","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountRequested","type":"uint256"},{"internalType":"uint256","name":"amountAvailable","type":"uint256"}],"name":"InsufficientPoolAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"InvalidRewardContractAddress","type":"address"}],"name":"InvalidRewardContractAddress","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"totalAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountLeft","type":"uint256"}],"name":"RewardClaimed","type":"event"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"canClaim","outputs":[{"internalType":"enum LimitedOCPointsMerkleClaim.ClaimError","name":"error","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epochId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"reasonCode","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimEpochs","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"amountLeft","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"totalAmount","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32,uint256)":[{"params":{"amount":"The amount being claimed.","epochId":"The epoch identifier.","reasonCode":"The reason code for the deposit.","recipient":"The recipient of the claim."}}],"ClaimEpochNotFound(uint256)":[{"params":{"epochId":"The epoch identifier."}}],"ClaimingEpochNotActive(uint256,uint256,uint256)":[{"params":{"currentTime":"The current block timestamp.","endTime":"The end time of the claiming epoch.","startTime":"The start time of the claiming epoch."}}],"InsufficientPoolAmount(uint256,uint256)":[{"params":{"amountAvailable":"The amount available in the pool.","amountRequested":"The amount requested to claim."}}],"InvalidClaimWindow(uint256,uint256)":[{"params":{"endTime":"The end time.","startTime":"The start time."}}],"InvalidProof(address,uint256,bytes32,uint256)":[{"params":{"amount":"The amount being claimed.","epochId":"The epoch identifier.","reasonCode":"The reason code for the deposit.","recipient":"The recipient of the claim."}}],"InvalidRewardContractAddress(address)":[{"params":{"InvalidRewardContractAddress":"The address of the invalid reward contract."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)":{"params":{"endTime":"The end time for claiming.","epochId":"The epoch identifier.","merkleRoot":"The merkle root for this epoch.","startTime":"The start time for claiming.","totalAmount":"The total amount available for claiming."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RewardClaimed(uint256,address,uint256,uint256)":{"params":{"amount":"The amount claimed.","amountLeft":"The amount left in the pool after this claim.","epochId":"The epoch identifier.","recipient":"The recipient of the claim."}}},"kind":"dev","methods":{"canClaim(uint256,address,uint256)":{"details":"Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.Returns ClaimError.NoError if basic validation passes.","params":{"amount":"The amount to be claimed.","epochId":"The epoch identifier.","recipient":"The recipient address."},"returns":{"error":"The claim validation result."}},"claim(uint256,address,uint256,bytes32,bytes32[])":{"details":"Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.Reverts with {InvalidProof} if the merkle proof verification fails.Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.Emits a {RewardClaimed} event.","params":{"amount":"The amount to be claimed.","epochId":"The epoch identifier.","proof":"The merkle proof for verification.","reasonCode":"The reason code for the deposit.","recipient":"The recipient for this claim."}},"constructor":{"details":"Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address.","params":{"forwarderRegistry":"The address of the forwarder registry.","rewardContractAddress":"The address of the reward contract."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"setMerkleRoot(bytes32,uint256,uint256,uint256)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InvalidClaimWindow} if startTime is not before endTime.Emits a {MerkleRootSet} event.","params":{"endTime":"The end time for claiming.","merkleRoot":"The merkle root for this epoch.","startTime":"The start time for claiming.","totalAmount":"The total amount available for claiming in this epoch."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"LimitedOCPointsMerkleClaim","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2870":{"entryPoint":null,"id":2870,"parameterSlots":2,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@_578":{"entryPoint":null,"id":578,"parameterSlots":1,"returnSlots":0},"@_625":{"entryPoint":null,"id":625,"parameterSlots":1,"returnSlots":0},"@constructorInit_250":{"entryPoint":214,"id":250,"parameterSlots":2,"returnSlots":0},"@layout_406":{"entryPoint":160,"id":406,"parameterSlots":0,"returnSlots":1},"@layout_554":{"entryPoint":337,"id":554,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_508":{"entryPoint":385,"id":508,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory":{"entryPoint":503,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":566,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":478,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:33","nodeType":"YulBlock","src":"0:1001:33","statements":[{"nativeSrc":"6:3:33","nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nativeSrc":"59:86:33","nodeType":"YulBlock","src":"59:86:33","statements":[{"body":{"nativeSrc":"123:16:33","nodeType":"YulBlock","src":"123:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:33","nodeType":"YulLiteral","src":"132:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:33","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:33","nodeType":"YulIdentifier","src":"125:6:33"},"nativeSrc":"125:12:33","nodeType":"YulFunctionCall","src":"125:12:33"},"nativeSrc":"125:12:33","nodeType":"YulExpressionStatement","src":"125:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:33","nodeType":"YulIdentifier","src":"82:5:33"},{"arguments":[{"name":"value","nativeSrc":"93:5:33","nodeType":"YulIdentifier","src":"93:5:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:33","nodeType":"YulLiteral","src":"108:3:33","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:33","nodeType":"YulLiteral","src":"113:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:33","nodeType":"YulIdentifier","src":"104:3:33"},"nativeSrc":"104:11:33","nodeType":"YulFunctionCall","src":"104:11:33"},{"kind":"number","nativeSrc":"117:1:33","nodeType":"YulLiteral","src":"117:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:33","nodeType":"YulIdentifier","src":"100:3:33"},"nativeSrc":"100:19:33","nodeType":"YulFunctionCall","src":"100:19:33"}],"functionName":{"name":"and","nativeSrc":"89:3:33","nodeType":"YulIdentifier","src":"89:3:33"},"nativeSrc":"89:31:33","nodeType":"YulFunctionCall","src":"89:31:33"}],"functionName":{"name":"eq","nativeSrc":"79:2:33","nodeType":"YulIdentifier","src":"79:2:33"},"nativeSrc":"79:42:33","nodeType":"YulFunctionCall","src":"79:42:33"}],"functionName":{"name":"iszero","nativeSrc":"72:6:33","nodeType":"YulIdentifier","src":"72:6:33"},"nativeSrc":"72:50:33","nodeType":"YulFunctionCall","src":"72:50:33"},"nativeSrc":"69:70:33","nodeType":"YulIf","src":"69:70:33"}]},"name":"validator_revert_address","nativeSrc":"14:131:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:33","nodeType":"YulTypedName","src":"48:5:33","type":""}],"src":"14:131:33"},{"body":{"nativeSrc":"274:287:33","nodeType":"YulBlock","src":"274:287:33","statements":[{"body":{"nativeSrc":"320:16:33","nodeType":"YulBlock","src":"320:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:33","nodeType":"YulLiteral","src":"329:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:33","nodeType":"YulLiteral","src":"332:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:33","nodeType":"YulIdentifier","src":"322:6:33"},"nativeSrc":"322:12:33","nodeType":"YulFunctionCall","src":"322:12:33"},"nativeSrc":"322:12:33","nodeType":"YulExpressionStatement","src":"322:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:33","nodeType":"YulIdentifier","src":"295:7:33"},{"name":"headStart","nativeSrc":"304:9:33","nodeType":"YulIdentifier","src":"304:9:33"}],"functionName":{"name":"sub","nativeSrc":"291:3:33","nodeType":"YulIdentifier","src":"291:3:33"},"nativeSrc":"291:23:33","nodeType":"YulFunctionCall","src":"291:23:33"},{"kind":"number","nativeSrc":"316:2:33","nodeType":"YulLiteral","src":"316:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:33","nodeType":"YulIdentifier","src":"287:3:33"},"nativeSrc":"287:32:33","nodeType":"YulFunctionCall","src":"287:32:33"},"nativeSrc":"284:52:33","nodeType":"YulIf","src":"284:52:33"},{"nativeSrc":"345:29:33","nodeType":"YulVariableDeclaration","src":"345:29:33","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:33","nodeType":"YulIdentifier","src":"364:9:33"}],"functionName":{"name":"mload","nativeSrc":"358:5:33","nodeType":"YulIdentifier","src":"358:5:33"},"nativeSrc":"358:16:33","nodeType":"YulFunctionCall","src":"358:16:33"},"variables":[{"name":"value","nativeSrc":"349:5:33","nodeType":"YulTypedName","src":"349:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:33","nodeType":"YulIdentifier","src":"408:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:33","nodeType":"YulIdentifier","src":"383:24:33"},"nativeSrc":"383:31:33","nodeType":"YulFunctionCall","src":"383:31:33"},"nativeSrc":"383:31:33","nodeType":"YulExpressionStatement","src":"383:31:33"},{"nativeSrc":"423:15:33","nodeType":"YulAssignment","src":"423:15:33","value":{"name":"value","nativeSrc":"433:5:33","nodeType":"YulIdentifier","src":"433:5:33"},"variableNames":[{"name":"value0","nativeSrc":"423:6:33","nodeType":"YulIdentifier","src":"423:6:33"}]},{"nativeSrc":"447:40:33","nodeType":"YulVariableDeclaration","src":"447:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:33","nodeType":"YulIdentifier","src":"472:9:33"},{"kind":"number","nativeSrc":"483:2:33","nodeType":"YulLiteral","src":"483:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:33","nodeType":"YulIdentifier","src":"468:3:33"},"nativeSrc":"468:18:33","nodeType":"YulFunctionCall","src":"468:18:33"}],"functionName":{"name":"mload","nativeSrc":"462:5:33","nodeType":"YulIdentifier","src":"462:5:33"},"nativeSrc":"462:25:33","nodeType":"YulFunctionCall","src":"462:25:33"},"variables":[{"name":"value_1","nativeSrc":"451:7:33","nodeType":"YulTypedName","src":"451:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:33","nodeType":"YulIdentifier","src":"521:7:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:33","nodeType":"YulIdentifier","src":"496:24:33"},"nativeSrc":"496:33:33","nodeType":"YulFunctionCall","src":"496:33:33"},"nativeSrc":"496:33:33","nodeType":"YulExpressionStatement","src":"496:33:33"},{"nativeSrc":"538:17:33","nodeType":"YulAssignment","src":"538:17:33","value":{"name":"value_1","nativeSrc":"548:7:33","nodeType":"YulIdentifier","src":"548:7:33"},"variableNames":[{"name":"value1","nativeSrc":"538:6:33","nodeType":"YulIdentifier","src":"538:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory","nativeSrc":"150:411:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:33","nodeType":"YulTypedName","src":"232:9:33","type":""},{"name":"dataEnd","nativeSrc":"243:7:33","nodeType":"YulTypedName","src":"243:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:33","nodeType":"YulTypedName","src":"255:6:33","type":""},{"name":"value1","nativeSrc":"263:6:33","nodeType":"YulTypedName","src":"263:6:33","type":""}],"src":"150:411:33"},{"body":{"nativeSrc":"667:102:33","nodeType":"YulBlock","src":"667:102:33","statements":[{"nativeSrc":"677:26:33","nodeType":"YulAssignment","src":"677:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:33","nodeType":"YulIdentifier","src":"689:9:33"},{"kind":"number","nativeSrc":"700:2:33","nodeType":"YulLiteral","src":"700:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:33","nodeType":"YulIdentifier","src":"685:3:33"},"nativeSrc":"685:18:33","nodeType":"YulFunctionCall","src":"685:18:33"},"variableNames":[{"name":"tail","nativeSrc":"677:4:33","nodeType":"YulIdentifier","src":"677:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:33","nodeType":"YulIdentifier","src":"719:9:33"},{"arguments":[{"name":"value0","nativeSrc":"734:6:33","nodeType":"YulIdentifier","src":"734:6:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:33","nodeType":"YulLiteral","src":"750:3:33","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:33","nodeType":"YulLiteral","src":"755:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:33","nodeType":"YulIdentifier","src":"746:3:33"},"nativeSrc":"746:11:33","nodeType":"YulFunctionCall","src":"746:11:33"},{"kind":"number","nativeSrc":"759:1:33","nodeType":"YulLiteral","src":"759:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:33","nodeType":"YulIdentifier","src":"742:3:33"},"nativeSrc":"742:19:33","nodeType":"YulFunctionCall","src":"742:19:33"}],"functionName":{"name":"and","nativeSrc":"730:3:33","nodeType":"YulIdentifier","src":"730:3:33"},"nativeSrc":"730:32:33","nodeType":"YulFunctionCall","src":"730:32:33"}],"functionName":{"name":"mstore","nativeSrc":"712:6:33","nodeType":"YulIdentifier","src":"712:6:33"},"nativeSrc":"712:51:33","nodeType":"YulFunctionCall","src":"712:51:33"},"nativeSrc":"712:51:33","nodeType":"YulExpressionStatement","src":"712:51:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:33","nodeType":"YulTypedName","src":"636:9:33","type":""},{"name":"value0","nativeSrc":"647:6:33","nodeType":"YulTypedName","src":"647:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:33","nodeType":"YulTypedName","src":"658:4:33","type":""}],"src":"566:203:33"},{"body":{"nativeSrc":"823:176:33","nodeType":"YulBlock","src":"823:176:33","statements":[{"nativeSrc":"833:17:33","nodeType":"YulAssignment","src":"833:17:33","value":{"arguments":[{"name":"x","nativeSrc":"845:1:33","nodeType":"YulIdentifier","src":"845:1:33"},{"name":"y","nativeSrc":"848:1:33","nodeType":"YulIdentifier","src":"848:1:33"}],"functionName":{"name":"sub","nativeSrc":"841:3:33","nodeType":"YulIdentifier","src":"841:3:33"},"nativeSrc":"841:9:33","nodeType":"YulFunctionCall","src":"841:9:33"},"variableNames":[{"name":"diff","nativeSrc":"833:4:33","nodeType":"YulIdentifier","src":"833:4:33"}]},{"body":{"nativeSrc":"882:111:33","nodeType":"YulBlock","src":"882:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:33","nodeType":"YulLiteral","src":"903:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:33","nodeType":"YulLiteral","src":"910:3:33","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:33","nodeType":"YulLiteral","src":"915:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:33","nodeType":"YulIdentifier","src":"906:3:33"},"nativeSrc":"906:20:33","nodeType":"YulFunctionCall","src":"906:20:33"}],"functionName":{"name":"mstore","nativeSrc":"896:6:33","nodeType":"YulIdentifier","src":"896:6:33"},"nativeSrc":"896:31:33","nodeType":"YulFunctionCall","src":"896:31:33"},"nativeSrc":"896:31:33","nodeType":"YulExpressionStatement","src":"896:31:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:33","nodeType":"YulLiteral","src":"947:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:33","nodeType":"YulLiteral","src":"950:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:33","nodeType":"YulIdentifier","src":"940:6:33"},"nativeSrc":"940:15:33","nodeType":"YulFunctionCall","src":"940:15:33"},"nativeSrc":"940:15:33","nodeType":"YulExpressionStatement","src":"940:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:33","nodeType":"YulLiteral","src":"975:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:33","nodeType":"YulLiteral","src":"978:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:33","nodeType":"YulIdentifier","src":"968:6:33"},"nativeSrc":"968:15:33","nodeType":"YulFunctionCall","src":"968:15:33"},"nativeSrc":"968:15:33","nodeType":"YulExpressionStatement","src":"968:15:33"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:33","nodeType":"YulIdentifier","src":"865:4:33"},{"name":"x","nativeSrc":"871:1:33","nodeType":"YulIdentifier","src":"871:1:33"}],"functionName":{"name":"gt","nativeSrc":"862:2:33","nodeType":"YulIdentifier","src":"862:2:33"},"nativeSrc":"862:11:33","nodeType":"YulFunctionCall","src":"862:11:33"},"nativeSrc":"859:134:33","nodeType":"YulIf","src":"859:134:33"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:33","nodeType":"YulTypedName","src":"805:1:33","type":""},{"name":"y","nativeSrc":"808:1:33","nodeType":"YulTypedName","src":"808:1:33","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:33","nodeType":"YulTypedName","src":"814:4:33","type":""}],"src":"774:225:33"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$750_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b5060405162001ccd38038062001ccd8339810160408190526200003491620001f7565b8080336200004d8162000046620000a0565b90620000d6565b506001600160a01b03908116608052831690506200008d57604051631aa6c2cd60e31b81526001600160a01b038316600482015260240160405180910390fd5b506001600160a01b031660a05262000258565b600080620000d060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000236565b92915050565b6001600160a01b038116156200012d5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200014d6307f5828d60e41b60016200014562000151565b919062000181565b5050565b600080620000d060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000236565b600160e01b6001600160e01b0319831601620001b0576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001f457600080fd5b50565b600080604083850312156200020b57600080fd5b82516200021881620001de565b60208401519092506200022b81620001de565b809150509250929050565b81810381811115620000d057634e487b7160e01b600052601160045260246000fd5b60805160a051611a336200029a600039600081816101bc01526106c4015260008181610172015281816101ee0152818161120901526112910152611a336000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806373c8a95811610097578063eacdc5ff11610066578063eacdc5ff146102f0578063f2fde38b14610307578063f5b541a61461031a578063f7ba94bd1461034157600080fd5b806373c8a958146102af578063833d47b6146102c25780638da5cb5b146102d5578063c3666c36146102dd57600080fd5b80632d4c2f93116100d35780632d4c2f93146101b7578063572b6c05146101de5780635c9a509b1461022b5780637124094f1461028f57600080fd5b806301ffc9a714610105578063120aa8771461012d5780632035a4dd1461015b5780632b4c9f1614610170575b600080fd5b6101186101133660046115b9565b610354565b60405190151581526020015b60405180910390f35b61011861013b36600461161d565b600260209081526000928352604080842090915290825290205460ff1681565b61016e610169366004611699565b61036e565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101927f000000000000000000000000000000000000000000000000000000000000000081565b6101186101ec36600461170c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b610267610239366004611729565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b604080519586526020860194909452928401919091526060830152608082015260a001610124565b6102a261029d366004611742565b610789565b604051610124919061177a565b61016e6102bd3660046117bb565b610836565b61016e6102d0366004611843565b61093a565b610192610a39565b61016e6102eb3660046117bb565b610a65565b6102f960005481565b604051908152602001610124565b61016e61031536600461170c565b610bdd565b6102f97f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b61016e61034f366004611875565b610bfb565b600061036882610362610cba565b90610ce8565b92915050565b600086815260016020526040902080546103bc576040517f07cba261000000000000000000000000000000000000000000000000000000008152600481018890526024015b60405180910390fd5b600381015442908110806103d35750816004015481115b156104275760038201546004808401546040517fc06e9f3a000000000000000000000000000000000000000000000000000000008152918201849052602482019290925260448101919091526064016103b3565b600088815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915290205460ff16156104be576040517f7635807d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048201526024810187905260448101869052606481018990526084016103b3565b858260020154101561050c5760028201546040517f23090a310000000000000000000000000000000000000000000000000000000081526103b3918891600401918252602082015260400190565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166020820152603481018790526054810186905260748101899052600090609401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120835490915061059f908690869084610dc2565b610602576040517fa041b52e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905260448101879052606481018a90526084016103b3565b600089815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff8d168552909152822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558401805489929061066c9084906118e1565b90915550506040517f26b3293f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201899052604482018890527f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16897ffc6ecd966b430510beae9124efe7dd517ed5286d7ed0ae258f8556c7a9765a44898660020154604051610776929190918252602082015260400190565b60405180910390a3505050505050505050565b600083815260016020526040812080546107a757600191505061082f565b600381015442908110806107be5750816004015481115b156107ce5760029250505061082f565b600086815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205460ff16156108115760039250505061082f565b83826002015410156108285760049250505061082f565b6000925050505b9392505050565b61084f610841610ddc565b610849610de6565b90610e14565b84838114158061085f5750808214155b15610896576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610930576109288888838181106108b6576108b661191b565b90506020020160208101906108cb919061170c565b8585848181106108dd576108dd61191b565b905060200201358888858181106108f6576108f661191b565b905060200201602081019061090b919061170c565b73ffffffffffffffffffffffffffffffffffffffff169190610e83565b600101610899565b5050505050505050565b610945610841610ddc565b808210610988576040517f779acdff00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044016103b3565b600080546040805160a081018252878152602080820188815282840189815260608085018a815260808087018b8152898b526001808852898c209851895595518887015593516002880155905160038701559151600490950194909455865490910190955582518981529081018890529182018690528101849052909182917f331c648136af10432045d8cc15dfaee6ca9568922f85cab02d96d5f5286c8920910160405180910390a25050505050565b6000610a60610a46610de6565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610a70610841610ddc565b848381141580610a805750808214155b15610ab7576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561093057858582818110610ad457610ad461191b565b9050602002016020810190610ae9919061170c565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610b1757610b1761191b565b9050602002016020810190610b2c919061170c565b878786818110610b3e57610b3e61191b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610bba57600080fd5b505af1158015610bce573d6000803e3d6000fd5b50505050806001019050610aba565b610bf8610be8610ddc565b82610bf1610de6565b9190610f15565b50565b610c06610841610ddc565b82818114610c40576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610cb257610caa848483818110610c6057610c6061191b565b90506020020135878784818110610c7957610c7961191b565b9050602002016020810190610c8e919061170c565b73ffffffffffffffffffffffffffffffffffffffff169061102a565b600101610c43565b505050505050565b60008061036860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6118e1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d3857506000610368565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d8957506001610368565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610dd0868685611184565b1490505b949350505050565b6000610a606111c6565b60008061036860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6118e1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610e7f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016103b3565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f1090849061130d565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610f82576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016103b3565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110245783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103b3565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146110ee576040519150601f19603f3d011682016040523d82523d6000602084013e6110f3565b606091505b5050905080610f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103b3565b600081815b848110156111bd576111b3828787848181106111a7576111a761191b565b9050602002013561141c565b9150600101611189565b50949350505050565b6000333214806111d65750601836105b156111e057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806112fc57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061194a565b1561130657919050565b3391505090565b600061136f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114489092919063ffffffff16565b9050805160001480611390575080806020019051810190611390919061194a565b610f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b3565b600081831061143857600082815260208490526040902061082f565b5060009182526020526040902090565b6060610dd48484600085856000808673ffffffffffffffffffffffffffffffffffffffff16858760405161147c9190611990565b60006040518083038185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b50915091506114cf878383876114da565b979650505050505050565b606083156115705782516000036115695773ffffffffffffffffffffffffffffffffffffffff85163b611569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b3565b5081610dd4565b610dd483838151156115855781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b391906119ac565b6000602082840312156115cb57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461082f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610bf857600080fd5b6000806040838503121561163057600080fd5b823591506020830135611642816115fb565b809150509250929050565b60008083601f84011261165f57600080fd5b50813567ffffffffffffffff81111561167757600080fd5b6020830191508360208260051b850101111561169257600080fd5b9250929050565b60008060008060008060a087890312156116b257600080fd5b8635955060208701356116c4816115fb565b94506040870135935060608701359250608087013567ffffffffffffffff8111156116ee57600080fd5b6116fa89828a0161164d565b979a9699509497509295939492505050565b60006020828403121561171e57600080fd5b813561082f816115fb565b60006020828403121561173b57600080fd5b5035919050565b60008060006060848603121561175757600080fd5b833592506020840135611769816115fb565b929592945050506040919091013590565b60208101600583106117b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600080606087890312156117d457600080fd5b863567ffffffffffffffff808211156117ec57600080fd5b6117f88a838b0161164d565b9098509650602089013591508082111561181157600080fd5b61181d8a838b0161164d565b9096509450604089013591508082111561183657600080fd5b506116fa89828a0161164d565b6000806000806080858703121561185957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806040858703121561188b57600080fd5b843567ffffffffffffffff808211156118a357600080fd5b6118af8883890161164d565b909650945060208701359150808211156118c857600080fd5b506118d58782880161164d565b95989497509550505050565b81810381811115610368577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195c57600080fd5b8151801515811461082f57600080fd5b60005b8381101561198757818101518382015260200161196f565b50506000910152565b600082516119a281846020870161196c565b9190910192915050565b60208152600082518060208401526119cb81604085016020870161196c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206ee7aab44c30204e4f7b7d9e66b4675709345a66aee48233cb2f837d8fb9f40664736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1CCD CODESIZE SUB DUP1 PUSH3 0x1CCD DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1F7 JUMP JUMPDEST DUP1 DUP1 CALLER PUSH3 0x4D DUP2 PUSH3 0x46 PUSH3 0xA0 JUMP JUMPDEST SWAP1 PUSH3 0xD6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH3 0x8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AA6C2CD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH3 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xD0 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x236 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x12D JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x14D PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x145 PUSH3 0x151 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x181 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xD0 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x236 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x218 DUP2 PUSH3 0x1DE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x22B DUP2 PUSH3 0x1DE JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xD0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x1A33 PUSH3 0x29A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1BC ADD MSTORE PUSH2 0x6C4 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x172 ADD MSTORE DUP2 DUP2 PUSH2 0x1EE ADD MSTORE DUP2 DUP2 PUSH2 0x1209 ADD MSTORE PUSH2 0x1291 ADD MSTORE PUSH2 0x1A33 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEACDC5FF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEACDC5FF EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0x833D47B6 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x5C9A509B EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x7124094F EQ PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x120AA877 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x2035A4DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x170 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x192 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x170C JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x267 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x1742 JUMP JUMPDEST PUSH2 0x789 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x17BB JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1843 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH2 0x192 PUSH2 0xA39 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x17BB JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x2F9 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x170C JUMP JUMPDEST PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x2F9 PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x1875 JUMP JUMPDEST PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368 DUP3 PUSH2 0x362 PUSH2 0xCBA JUMP JUMPDEST SWAP1 PUSH2 0xCE8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CBA26100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x3D3 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x427 JUMPI PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP1 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xC06E9F3A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x7635807D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x50C JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23090A3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x3B3 SWAP2 DUP9 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP10 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x59F SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP5 PUSH2 0xDC2 JUMP JUMPDEST PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA041B52E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 ADD DUP1 SLOAD DUP10 SWAP3 SWAP1 PUSH2 0x66C SWAP1 DUP5 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x71C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xFC6ECD966B430510BEAE9124EFE7DD517ED5286D7ED0AE258F8556C7A9765A44 DUP10 DUP7 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x776 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x7A7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x7BE JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x7CE JUMPI PUSH1 0x2 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x811 JUMPI PUSH1 0x3 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST DUP4 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x828 JUMPI PUSH1 0x4 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x84F PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x849 PUSH2 0xDE6 JUMP JUMPDEST SWAP1 PUSH2 0xE14 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x85F JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x896 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x930 JUMPI PUSH2 0x928 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x8B6 JUMPI PUSH2 0x8B6 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x8CB SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x8DD JUMPI PUSH2 0x8DD PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x8F6 JUMPI PUSH2 0x8F6 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x90B SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x899 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x945 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP1 DUP3 LT PUSH2 0x988 JUMPI PUSH1 0x40 MLOAD PUSH32 0x779ACDFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 DUP2 MSTORE DUP3 DUP5 ADD DUP10 DUP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x80 DUP1 DUP8 ADD DUP12 DUP2 MSTORE DUP10 DUP12 MSTORE PUSH1 0x1 DUP1 DUP9 MSTORE DUP10 DUP13 KECCAK256 SWAP9 MLOAD DUP10 SSTORE SWAP6 MLOAD DUP9 DUP8 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP9 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP8 ADD SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE DUP7 SLOAD SWAP1 SWAP2 ADD SWAP1 SWAP6 SSTORE DUP3 MLOAD DUP10 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x331C648136AF10432045D8CC15DFAEE6CA9568922F85CAB02D96D5F5286C8920 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH2 0xA46 PUSH2 0xDE6 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA70 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0xA80 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xAB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x930 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xAD4 JUMPI PUSH2 0xAD4 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAE9 SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xB17 JUMPI PUSH2 0xB17 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB2C SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB3E JUMPI PUSH2 0xB3E PUSH2 0x191B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xABA JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0xBE8 PUSH2 0xDDC JUMP JUMPDEST DUP3 PUSH2 0xBF1 PUSH2 0xDE6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC06 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCB2 JUMPI PUSH2 0xCAA DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xC60 JUMPI PUSH2 0xC60 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xC79 JUMPI PUSH2 0xC79 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC8E SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xC43 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x368 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD38 JUMPI POP PUSH1 0x0 PUSH2 0x368 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD89 JUMPI POP PUSH1 0x1 PUSH2 0x368 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDD0 DUP7 DUP7 DUP6 PUSH2 0x1184 JUMP JUMPDEST EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x368 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x18E1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xE7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF10 SWAP1 DUP5 SWAP1 PUSH2 0x130D JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xF82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B3 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1024 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1094 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10EE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x11BD JUMPI PUSH2 0x11B3 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x11A7 JUMPI PUSH2 0x11A7 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1189 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11D6 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x11E0 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x12FC JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12FC SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST ISZERO PUSH2 0x1306 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x136F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1448 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1390 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1390 SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST PUSH2 0xF10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1438 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x82F JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDD4 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x14CF DUP8 DUP4 DUP4 DUP8 PUSH2 0x14DA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1570 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1569 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1569 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST POP DUP2 PUSH2 0xDD4 JUMP JUMPDEST PUSH2 0xDD4 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1585 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1642 DUP2 PUSH2 0x15FB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x16B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x16C4 DUP2 PUSH2 0x15FB JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16FA DUP10 DUP3 DUP11 ADD PUSH2 0x164D JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x82F DUP2 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x173B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1769 DUP2 PUSH2 0x15FB JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x17B5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17F8 DUP11 DUP4 DUP12 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x181D DUP11 DUP4 DUP12 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16FA DUP10 DUP3 DUP11 ADD PUSH2 0x164D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x188B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18AF DUP9 DUP4 DUP10 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x18C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18D5 DUP8 DUP3 DUP9 ADD PUSH2 0x164D JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x368 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x195C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1987 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x196F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19A2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x196C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19CB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x196C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0xE7AAB44C30204E4F7B7D9E66B46757 MULMOD CALLVALUE GAS PUSH7 0xAEE48233CB2F83 PUSH30 0x8FB9F40664736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1456:10183:32:-:0;;;5961:375;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6119:17;;6082:10;1008:63:2;6082:10:32;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:14;;;;;6152:35:32;::::2;::::0;-1:-1:-1;6148:124:32::2;;6210:51;::::0;-1:-1:-1;;;6210:51:32;;-1:-1:-1;;;;;730:32:33;;6210:51:32::2;::::0;::::2;712::33::0;685:18;;6210:51:32::2;;;;;;;6148:124;-1:-1:-1::0;;;;;;6281:48:32::2;;::::0;1456:10183;;5065:174:8;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:8:o;1567:341::-;-1:-1:-1;;;;;1655:26:8;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:8;-1:-1:-1;;;;;1697:30:8;;;;;;;1746:46;;-1:-1:-1;;1746:46:8;;-1:-1:-1;;1746:46:8;1651:152;1812:89;-1:-1:-1;;;1896:4:8;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:12:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:12;;;877:68;;925:20;;-1:-1:-1;;;925:20:12;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:12;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:12;;;;;;;;;;773:235::o;14:131:33:-;-1:-1:-1;;;;;89:31:33;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:33;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;1456:10183:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@OPERATOR_ROLE_2779":{"entryPoint":null,"id":2779,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_2783":{"entryPoint":null,"id":2783,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1595":{"entryPoint":4877,"id":1595,"parameterSlots":2,"returnSlots":0},"@_efficientHash_2633":{"entryPoint":null,"id":2633,"parameterSlots":2,"returnSlots":1},"@_hashPair_2622":{"entryPoint":5148,"id":2622,"parameterSlots":2,"returnSlots":1},"@_msgSender_3162":{"entryPoint":3548,"id":3162,"parameterSlots":0,"returnSlots":1},"@_msgSender_675":{"entryPoint":4550,"id":675,"parameterSlots":0,"returnSlots":1},"@_revert_1973":{"entryPoint":null,"id":1973,"parameterSlots":2,"returnSlots":0},"@canClaim_3148":{"entryPoint":1929,"id":3148,"parameterSlots":3,"returnSlots":1},"@claimEpochs_2804":{"entryPoint":null,"id":2804,"parameterSlots":0,"returnSlots":0},"@claim_3074":{"entryPoint":878,"id":3074,"parameterSlots":6,"returnSlots":0},"@claimed_2811":{"entryPoint":null,"id":2811,"parameterSlots":0,"returnSlots":0},"@currentEpochId_2798":{"entryPoint":null,"id":2798,"parameterSlots":0,"returnSlots":0},"@enforceIsContractOwner_374":{"entryPoint":3604,"id":374,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_587":{"entryPoint":null,"id":587,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1798":{"entryPoint":null,"id":1798,"parameterSlots":4,"returnSlots":1},"@functionCall_1734":{"entryPoint":5192,"id":1734,"parameterSlots":3,"returnSlots":1},"@isContract_1662":{"entryPoint":null,"id":1662,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_603":{"entryPoint":null,"id":603,"parameterSlots":1,"returnSlots":1},"@layout_406":{"entryPoint":3558,"id":406,"parameterSlots":0,"returnSlots":1},"@layout_554":{"entryPoint":3258,"id":554,"parameterSlots":0,"returnSlots":1},"@msgSender_761":{"entryPoint":null,"id":761,"parameterSlots":0,"returnSlots":1},"@owner_327":{"entryPoint":null,"id":327,"parameterSlots":1,"returnSlots":1},"@owner_85":{"entryPoint":2617,"id":85,"parameterSlots":0,"returnSlots":1},"@processProofCalldata_2231":{"entryPoint":4484,"id":2231,"parameterSlots":3,"returnSlots":1},"@recoverERC20s_995":{"entryPoint":2102,"id":995,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1064":{"entryPoint":2661,"id":1064,"parameterSlots":6,"returnSlots":0},"@recoverETH_930":{"entryPoint":3067,"id":930,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1301":{"entryPoint":3715,"id":1301,"parameterSlots":3,"returnSlots":0},"@sendValue_1696":{"entryPoint":4138,"id":1696,"parameterSlots":2,"returnSlots":0},"@setMerkleRoot_2930":{"entryPoint":2362,"id":2930,"parameterSlots":4,"returnSlots":0},"@supportsInterface_436":{"entryPoint":852,"id":436,"parameterSlots":1,"returnSlots":1},"@supportsInterface_542":{"entryPoint":3304,"id":542,"parameterSlots":2,"returnSlots":1},"@transferOwnership_102":{"entryPoint":3037,"id":102,"parameterSlots":1,"returnSlots":0},"@transferOwnership_314":{"entryPoint":3861,"id":314,"parameterSlots":3,"returnSlots":0},"@verifyCallResultFromTarget_1929":{"entryPoint":5338,"id":1929,"parameterSlots":4,"returnSlots":1},"@verifyCalldata_2151":{"entryPoint":3522,"id":2151,"parameterSlots":4,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":5709,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":5900,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6075,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6261,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6474,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256":{"entryPoint":6211,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":5561,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1232":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1151":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5929,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":5661,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_addresst_uint256":{"entryPoint":5954,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":5785,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6544,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed":{"entryPoint":6010,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6572,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6369,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6508,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":6427,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":5627,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:16386:33","nodeType":"YulBlock","src":"0:16386:33","statements":[{"nativeSrc":"6:3:33","nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nativeSrc":"83:263:33","nodeType":"YulBlock","src":"83:263:33","statements":[{"body":{"nativeSrc":"129:16:33","nodeType":"YulBlock","src":"129:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:33","nodeType":"YulLiteral","src":"138:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:33","nodeType":"YulLiteral","src":"141:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:33","nodeType":"YulIdentifier","src":"131:6:33"},"nativeSrc":"131:12:33","nodeType":"YulFunctionCall","src":"131:12:33"},"nativeSrc":"131:12:33","nodeType":"YulExpressionStatement","src":"131:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:33","nodeType":"YulIdentifier","src":"104:7:33"},{"name":"headStart","nativeSrc":"113:9:33","nodeType":"YulIdentifier","src":"113:9:33"}],"functionName":{"name":"sub","nativeSrc":"100:3:33","nodeType":"YulIdentifier","src":"100:3:33"},"nativeSrc":"100:23:33","nodeType":"YulFunctionCall","src":"100:23:33"},{"kind":"number","nativeSrc":"125:2:33","nodeType":"YulLiteral","src":"125:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:33","nodeType":"YulIdentifier","src":"96:3:33"},"nativeSrc":"96:32:33","nodeType":"YulFunctionCall","src":"96:32:33"},"nativeSrc":"93:52:33","nodeType":"YulIf","src":"93:52:33"},{"nativeSrc":"154:36:33","nodeType":"YulVariableDeclaration","src":"154:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:33","nodeType":"YulIdentifier","src":"180:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:33","nodeType":"YulIdentifier","src":"167:12:33"},"nativeSrc":"167:23:33","nodeType":"YulFunctionCall","src":"167:23:33"},"variables":[{"name":"value","nativeSrc":"158:5:33","nodeType":"YulTypedName","src":"158:5:33","type":""}]},{"body":{"nativeSrc":"300:16:33","nodeType":"YulBlock","src":"300:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:33","nodeType":"YulLiteral","src":"309:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:33","nodeType":"YulLiteral","src":"312:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:33","nodeType":"YulIdentifier","src":"302:6:33"},"nativeSrc":"302:12:33","nodeType":"YulFunctionCall","src":"302:12:33"},"nativeSrc":"302:12:33","nodeType":"YulExpressionStatement","src":"302:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:33","nodeType":"YulIdentifier","src":"212:5:33"},{"arguments":[{"name":"value","nativeSrc":"223:5:33","nodeType":"YulIdentifier","src":"223:5:33"},{"kind":"number","nativeSrc":"230:66:33","nodeType":"YulLiteral","src":"230:66:33","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:33","nodeType":"YulIdentifier","src":"219:3:33"},"nativeSrc":"219:78:33","nodeType":"YulFunctionCall","src":"219:78:33"}],"functionName":{"name":"eq","nativeSrc":"209:2:33","nodeType":"YulIdentifier","src":"209:2:33"},"nativeSrc":"209:89:33","nodeType":"YulFunctionCall","src":"209:89:33"}],"functionName":{"name":"iszero","nativeSrc":"202:6:33","nodeType":"YulIdentifier","src":"202:6:33"},"nativeSrc":"202:97:33","nodeType":"YulFunctionCall","src":"202:97:33"},"nativeSrc":"199:117:33","nodeType":"YulIf","src":"199:117:33"},{"nativeSrc":"325:15:33","nodeType":"YulAssignment","src":"325:15:33","value":{"name":"value","nativeSrc":"335:5:33","nodeType":"YulIdentifier","src":"335:5:33"},"variableNames":[{"name":"value0","nativeSrc":"325:6:33","nodeType":"YulIdentifier","src":"325:6:33"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:33","nodeType":"YulTypedName","src":"49:9:33","type":""},{"name":"dataEnd","nativeSrc":"60:7:33","nodeType":"YulTypedName","src":"60:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:33","nodeType":"YulTypedName","src":"72:6:33","type":""}],"src":"14:332:33"},{"body":{"nativeSrc":"446:92:33","nodeType":"YulBlock","src":"446:92:33","statements":[{"nativeSrc":"456:26:33","nodeType":"YulAssignment","src":"456:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:33","nodeType":"YulIdentifier","src":"468:9:33"},{"kind":"number","nativeSrc":"479:2:33","nodeType":"YulLiteral","src":"479:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:33","nodeType":"YulIdentifier","src":"464:3:33"},"nativeSrc":"464:18:33","nodeType":"YulFunctionCall","src":"464:18:33"},"variableNames":[{"name":"tail","nativeSrc":"456:4:33","nodeType":"YulIdentifier","src":"456:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:33","nodeType":"YulIdentifier","src":"498:9:33"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:33","nodeType":"YulIdentifier","src":"523:6:33"}],"functionName":{"name":"iszero","nativeSrc":"516:6:33","nodeType":"YulIdentifier","src":"516:6:33"},"nativeSrc":"516:14:33","nodeType":"YulFunctionCall","src":"516:14:33"}],"functionName":{"name":"iszero","nativeSrc":"509:6:33","nodeType":"YulIdentifier","src":"509:6:33"},"nativeSrc":"509:22:33","nodeType":"YulFunctionCall","src":"509:22:33"}],"functionName":{"name":"mstore","nativeSrc":"491:6:33","nodeType":"YulIdentifier","src":"491:6:33"},"nativeSrc":"491:41:33","nodeType":"YulFunctionCall","src":"491:41:33"},"nativeSrc":"491:41:33","nodeType":"YulExpressionStatement","src":"491:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:33","nodeType":"YulTypedName","src":"415:9:33","type":""},{"name":"value0","nativeSrc":"426:6:33","nodeType":"YulTypedName","src":"426:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:33","nodeType":"YulTypedName","src":"437:4:33","type":""}],"src":"351:187:33"},{"body":{"nativeSrc":"588:109:33","nodeType":"YulBlock","src":"588:109:33","statements":[{"body":{"nativeSrc":"675:16:33","nodeType":"YulBlock","src":"675:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"684:1:33","nodeType":"YulLiteral","src":"684:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"687:1:33","nodeType":"YulLiteral","src":"687:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"677:6:33","nodeType":"YulIdentifier","src":"677:6:33"},"nativeSrc":"677:12:33","nodeType":"YulFunctionCall","src":"677:12:33"},"nativeSrc":"677:12:33","nodeType":"YulExpressionStatement","src":"677:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"611:5:33","nodeType":"YulIdentifier","src":"611:5:33"},{"arguments":[{"name":"value","nativeSrc":"622:5:33","nodeType":"YulIdentifier","src":"622:5:33"},{"kind":"number","nativeSrc":"629:42:33","nodeType":"YulLiteral","src":"629:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"618:3:33","nodeType":"YulIdentifier","src":"618:3:33"},"nativeSrc":"618:54:33","nodeType":"YulFunctionCall","src":"618:54:33"}],"functionName":{"name":"eq","nativeSrc":"608:2:33","nodeType":"YulIdentifier","src":"608:2:33"},"nativeSrc":"608:65:33","nodeType":"YulFunctionCall","src":"608:65:33"}],"functionName":{"name":"iszero","nativeSrc":"601:6:33","nodeType":"YulIdentifier","src":"601:6:33"},"nativeSrc":"601:73:33","nodeType":"YulFunctionCall","src":"601:73:33"},"nativeSrc":"598:93:33","nodeType":"YulIf","src":"598:93:33"}]},"name":"validator_revert_address","nativeSrc":"543:154:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"577:5:33","nodeType":"YulTypedName","src":"577:5:33","type":""}],"src":"543:154:33"},{"body":{"nativeSrc":"789:228:33","nodeType":"YulBlock","src":"789:228:33","statements":[{"body":{"nativeSrc":"835:16:33","nodeType":"YulBlock","src":"835:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"844:1:33","nodeType":"YulLiteral","src":"844:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"847:1:33","nodeType":"YulLiteral","src":"847:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"837:6:33","nodeType":"YulIdentifier","src":"837:6:33"},"nativeSrc":"837:12:33","nodeType":"YulFunctionCall","src":"837:12:33"},"nativeSrc":"837:12:33","nodeType":"YulExpressionStatement","src":"837:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"810:7:33","nodeType":"YulIdentifier","src":"810:7:33"},{"name":"headStart","nativeSrc":"819:9:33","nodeType":"YulIdentifier","src":"819:9:33"}],"functionName":{"name":"sub","nativeSrc":"806:3:33","nodeType":"YulIdentifier","src":"806:3:33"},"nativeSrc":"806:23:33","nodeType":"YulFunctionCall","src":"806:23:33"},{"kind":"number","nativeSrc":"831:2:33","nodeType":"YulLiteral","src":"831:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"802:3:33","nodeType":"YulIdentifier","src":"802:3:33"},"nativeSrc":"802:32:33","nodeType":"YulFunctionCall","src":"802:32:33"},"nativeSrc":"799:52:33","nodeType":"YulIf","src":"799:52:33"},{"nativeSrc":"860:33:33","nodeType":"YulAssignment","src":"860:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"883:9:33","nodeType":"YulIdentifier","src":"883:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"870:12:33","nodeType":"YulIdentifier","src":"870:12:33"},"nativeSrc":"870:23:33","nodeType":"YulFunctionCall","src":"870:23:33"},"variableNames":[{"name":"value0","nativeSrc":"860:6:33","nodeType":"YulIdentifier","src":"860:6:33"}]},{"nativeSrc":"902:45:33","nodeType":"YulVariableDeclaration","src":"902:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"932:9:33","nodeType":"YulIdentifier","src":"932:9:33"},{"kind":"number","nativeSrc":"943:2:33","nodeType":"YulLiteral","src":"943:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"928:3:33","nodeType":"YulIdentifier","src":"928:3:33"},"nativeSrc":"928:18:33","nodeType":"YulFunctionCall","src":"928:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"915:12:33","nodeType":"YulIdentifier","src":"915:12:33"},"nativeSrc":"915:32:33","nodeType":"YulFunctionCall","src":"915:32:33"},"variables":[{"name":"value","nativeSrc":"906:5:33","nodeType":"YulTypedName","src":"906:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"981:5:33","nodeType":"YulIdentifier","src":"981:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"956:24:33","nodeType":"YulIdentifier","src":"956:24:33"},"nativeSrc":"956:31:33","nodeType":"YulFunctionCall","src":"956:31:33"},"nativeSrc":"956:31:33","nodeType":"YulExpressionStatement","src":"956:31:33"},{"nativeSrc":"996:15:33","nodeType":"YulAssignment","src":"996:15:33","value":{"name":"value","nativeSrc":"1006:5:33","nodeType":"YulIdentifier","src":"1006:5:33"},"variableNames":[{"name":"value1","nativeSrc":"996:6:33","nodeType":"YulIdentifier","src":"996:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"702:315:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"747:9:33","nodeType":"YulTypedName","src":"747:9:33","type":""},{"name":"dataEnd","nativeSrc":"758:7:33","nodeType":"YulTypedName","src":"758:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"770:6:33","nodeType":"YulTypedName","src":"770:6:33","type":""},{"name":"value1","nativeSrc":"778:6:33","nodeType":"YulTypedName","src":"778:6:33","type":""}],"src":"702:315:33"},{"body":{"nativeSrc":"1106:283:33","nodeType":"YulBlock","src":"1106:283:33","statements":[{"body":{"nativeSrc":"1155:16:33","nodeType":"YulBlock","src":"1155:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1164:1:33","nodeType":"YulLiteral","src":"1164:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1167:1:33","nodeType":"YulLiteral","src":"1167:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1157:6:33","nodeType":"YulIdentifier","src":"1157:6:33"},"nativeSrc":"1157:12:33","nodeType":"YulFunctionCall","src":"1157:12:33"},"nativeSrc":"1157:12:33","nodeType":"YulExpressionStatement","src":"1157:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1134:6:33","nodeType":"YulIdentifier","src":"1134:6:33"},{"kind":"number","nativeSrc":"1142:4:33","nodeType":"YulLiteral","src":"1142:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1130:3:33","nodeType":"YulIdentifier","src":"1130:3:33"},"nativeSrc":"1130:17:33","nodeType":"YulFunctionCall","src":"1130:17:33"},{"name":"end","nativeSrc":"1149:3:33","nodeType":"YulIdentifier","src":"1149:3:33"}],"functionName":{"name":"slt","nativeSrc":"1126:3:33","nodeType":"YulIdentifier","src":"1126:3:33"},"nativeSrc":"1126:27:33","nodeType":"YulFunctionCall","src":"1126:27:33"}],"functionName":{"name":"iszero","nativeSrc":"1119:6:33","nodeType":"YulIdentifier","src":"1119:6:33"},"nativeSrc":"1119:35:33","nodeType":"YulFunctionCall","src":"1119:35:33"},"nativeSrc":"1116:55:33","nodeType":"YulIf","src":"1116:55:33"},{"nativeSrc":"1180:30:33","nodeType":"YulAssignment","src":"1180:30:33","value":{"arguments":[{"name":"offset","nativeSrc":"1203:6:33","nodeType":"YulIdentifier","src":"1203:6:33"}],"functionName":{"name":"calldataload","nativeSrc":"1190:12:33","nodeType":"YulIdentifier","src":"1190:12:33"},"nativeSrc":"1190:20:33","nodeType":"YulFunctionCall","src":"1190:20:33"},"variableNames":[{"name":"length","nativeSrc":"1180:6:33","nodeType":"YulIdentifier","src":"1180:6:33"}]},{"body":{"nativeSrc":"1253:16:33","nodeType":"YulBlock","src":"1253:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1262:1:33","nodeType":"YulLiteral","src":"1262:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1265:1:33","nodeType":"YulLiteral","src":"1265:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1255:6:33","nodeType":"YulIdentifier","src":"1255:6:33"},"nativeSrc":"1255:12:33","nodeType":"YulFunctionCall","src":"1255:12:33"},"nativeSrc":"1255:12:33","nodeType":"YulExpressionStatement","src":"1255:12:33"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1225:6:33","nodeType":"YulIdentifier","src":"1225:6:33"},{"kind":"number","nativeSrc":"1233:18:33","nodeType":"YulLiteral","src":"1233:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1222:2:33","nodeType":"YulIdentifier","src":"1222:2:33"},"nativeSrc":"1222:30:33","nodeType":"YulFunctionCall","src":"1222:30:33"},"nativeSrc":"1219:50:33","nodeType":"YulIf","src":"1219:50:33"},{"nativeSrc":"1278:29:33","nodeType":"YulAssignment","src":"1278:29:33","value":{"arguments":[{"name":"offset","nativeSrc":"1294:6:33","nodeType":"YulIdentifier","src":"1294:6:33"},{"kind":"number","nativeSrc":"1302:4:33","nodeType":"YulLiteral","src":"1302:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1290:3:33","nodeType":"YulIdentifier","src":"1290:3:33"},"nativeSrc":"1290:17:33","nodeType":"YulFunctionCall","src":"1290:17:33"},"variableNames":[{"name":"arrayPos","nativeSrc":"1278:8:33","nodeType":"YulIdentifier","src":"1278:8:33"}]},{"body":{"nativeSrc":"1367:16:33","nodeType":"YulBlock","src":"1367:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1376:1:33","nodeType":"YulLiteral","src":"1376:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1379:1:33","nodeType":"YulLiteral","src":"1379:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1369:6:33","nodeType":"YulIdentifier","src":"1369:6:33"},"nativeSrc":"1369:12:33","nodeType":"YulFunctionCall","src":"1369:12:33"},"nativeSrc":"1369:12:33","nodeType":"YulExpressionStatement","src":"1369:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1330:6:33","nodeType":"YulIdentifier","src":"1330:6:33"},{"arguments":[{"kind":"number","nativeSrc":"1342:1:33","nodeType":"YulLiteral","src":"1342:1:33","type":"","value":"5"},{"name":"length","nativeSrc":"1345:6:33","nodeType":"YulIdentifier","src":"1345:6:33"}],"functionName":{"name":"shl","nativeSrc":"1338:3:33","nodeType":"YulIdentifier","src":"1338:3:33"},"nativeSrc":"1338:14:33","nodeType":"YulFunctionCall","src":"1338:14:33"}],"functionName":{"name":"add","nativeSrc":"1326:3:33","nodeType":"YulIdentifier","src":"1326:3:33"},"nativeSrc":"1326:27:33","nodeType":"YulFunctionCall","src":"1326:27:33"},{"kind":"number","nativeSrc":"1355:4:33","nodeType":"YulLiteral","src":"1355:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1322:3:33","nodeType":"YulIdentifier","src":"1322:3:33"},"nativeSrc":"1322:38:33","nodeType":"YulFunctionCall","src":"1322:38:33"},{"name":"end","nativeSrc":"1362:3:33","nodeType":"YulIdentifier","src":"1362:3:33"}],"functionName":{"name":"gt","nativeSrc":"1319:2:33","nodeType":"YulIdentifier","src":"1319:2:33"},"nativeSrc":"1319:47:33","nodeType":"YulFunctionCall","src":"1319:47:33"},"nativeSrc":"1316:67:33","nodeType":"YulIf","src":"1316:67:33"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"1022:367:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1069:6:33","nodeType":"YulTypedName","src":"1069:6:33","type":""},{"name":"end","nativeSrc":"1077:3:33","nodeType":"YulTypedName","src":"1077:3:33","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1085:8:33","nodeType":"YulTypedName","src":"1085:8:33","type":""},{"name":"length","nativeSrc":"1095:6:33","nodeType":"YulTypedName","src":"1095:6:33","type":""}],"src":"1022:367:33"},{"body":{"nativeSrc":"1567:605:33","nodeType":"YulBlock","src":"1567:605:33","statements":[{"body":{"nativeSrc":"1614:16:33","nodeType":"YulBlock","src":"1614:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1623:1:33","nodeType":"YulLiteral","src":"1623:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"1626:1:33","nodeType":"YulLiteral","src":"1626:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1616:6:33","nodeType":"YulIdentifier","src":"1616:6:33"},"nativeSrc":"1616:12:33","nodeType":"YulFunctionCall","src":"1616:12:33"},"nativeSrc":"1616:12:33","nodeType":"YulExpressionStatement","src":"1616:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1588:7:33","nodeType":"YulIdentifier","src":"1588:7:33"},{"name":"headStart","nativeSrc":"1597:9:33","nodeType":"YulIdentifier","src":"1597:9:33"}],"functionName":{"name":"sub","nativeSrc":"1584:3:33","nodeType":"YulIdentifier","src":"1584:3:33"},"nativeSrc":"1584:23:33","nodeType":"YulFunctionCall","src":"1584:23:33"},{"kind":"number","nativeSrc":"1609:3:33","nodeType":"YulLiteral","src":"1609:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1580:3:33","nodeType":"YulIdentifier","src":"1580:3:33"},"nativeSrc":"1580:33:33","nodeType":"YulFunctionCall","src":"1580:33:33"},"nativeSrc":"1577:53:33","nodeType":"YulIf","src":"1577:53:33"},{"nativeSrc":"1639:33:33","nodeType":"YulAssignment","src":"1639:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"1662:9:33","nodeType":"YulIdentifier","src":"1662:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"1649:12:33","nodeType":"YulIdentifier","src":"1649:12:33"},"nativeSrc":"1649:23:33","nodeType":"YulFunctionCall","src":"1649:23:33"},"variableNames":[{"name":"value0","nativeSrc":"1639:6:33","nodeType":"YulIdentifier","src":"1639:6:33"}]},{"nativeSrc":"1681:45:33","nodeType":"YulVariableDeclaration","src":"1681:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1711:9:33","nodeType":"YulIdentifier","src":"1711:9:33"},{"kind":"number","nativeSrc":"1722:2:33","nodeType":"YulLiteral","src":"1722:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1707:3:33","nodeType":"YulIdentifier","src":"1707:3:33"},"nativeSrc":"1707:18:33","nodeType":"YulFunctionCall","src":"1707:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1694:12:33","nodeType":"YulIdentifier","src":"1694:12:33"},"nativeSrc":"1694:32:33","nodeType":"YulFunctionCall","src":"1694:32:33"},"variables":[{"name":"value","nativeSrc":"1685:5:33","nodeType":"YulTypedName","src":"1685:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1760:5:33","nodeType":"YulIdentifier","src":"1760:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1735:24:33","nodeType":"YulIdentifier","src":"1735:24:33"},"nativeSrc":"1735:31:33","nodeType":"YulFunctionCall","src":"1735:31:33"},"nativeSrc":"1735:31:33","nodeType":"YulExpressionStatement","src":"1735:31:33"},{"nativeSrc":"1775:15:33","nodeType":"YulAssignment","src":"1775:15:33","value":{"name":"value","nativeSrc":"1785:5:33","nodeType":"YulIdentifier","src":"1785:5:33"},"variableNames":[{"name":"value1","nativeSrc":"1775:6:33","nodeType":"YulIdentifier","src":"1775:6:33"}]},{"nativeSrc":"1799:42:33","nodeType":"YulAssignment","src":"1799:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1826:9:33","nodeType":"YulIdentifier","src":"1826:9:33"},{"kind":"number","nativeSrc":"1837:2:33","nodeType":"YulLiteral","src":"1837:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1822:3:33","nodeType":"YulIdentifier","src":"1822:3:33"},"nativeSrc":"1822:18:33","nodeType":"YulFunctionCall","src":"1822:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1809:12:33","nodeType":"YulIdentifier","src":"1809:12:33"},"nativeSrc":"1809:32:33","nodeType":"YulFunctionCall","src":"1809:32:33"},"variableNames":[{"name":"value2","nativeSrc":"1799:6:33","nodeType":"YulIdentifier","src":"1799:6:33"}]},{"nativeSrc":"1850:42:33","nodeType":"YulAssignment","src":"1850:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1877:9:33","nodeType":"YulIdentifier","src":"1877:9:33"},{"kind":"number","nativeSrc":"1888:2:33","nodeType":"YulLiteral","src":"1888:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1873:3:33","nodeType":"YulIdentifier","src":"1873:3:33"},"nativeSrc":"1873:18:33","nodeType":"YulFunctionCall","src":"1873:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"1860:12:33","nodeType":"YulIdentifier","src":"1860:12:33"},"nativeSrc":"1860:32:33","nodeType":"YulFunctionCall","src":"1860:32:33"},"variableNames":[{"name":"value3","nativeSrc":"1850:6:33","nodeType":"YulIdentifier","src":"1850:6:33"}]},{"nativeSrc":"1901:47:33","nodeType":"YulVariableDeclaration","src":"1901:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1932:9:33","nodeType":"YulIdentifier","src":"1932:9:33"},{"kind":"number","nativeSrc":"1943:3:33","nodeType":"YulLiteral","src":"1943:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1928:3:33","nodeType":"YulIdentifier","src":"1928:3:33"},"nativeSrc":"1928:19:33","nodeType":"YulFunctionCall","src":"1928:19:33"}],"functionName":{"name":"calldataload","nativeSrc":"1915:12:33","nodeType":"YulIdentifier","src":"1915:12:33"},"nativeSrc":"1915:33:33","nodeType":"YulFunctionCall","src":"1915:33:33"},"variables":[{"name":"offset","nativeSrc":"1905:6:33","nodeType":"YulTypedName","src":"1905:6:33","type":""}]},{"body":{"nativeSrc":"1991:16:33","nodeType":"YulBlock","src":"1991:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2000:1:33","nodeType":"YulLiteral","src":"2000:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"2003:1:33","nodeType":"YulLiteral","src":"2003:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1993:6:33","nodeType":"YulIdentifier","src":"1993:6:33"},"nativeSrc":"1993:12:33","nodeType":"YulFunctionCall","src":"1993:12:33"},"nativeSrc":"1993:12:33","nodeType":"YulExpressionStatement","src":"1993:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1963:6:33","nodeType":"YulIdentifier","src":"1963:6:33"},{"kind":"number","nativeSrc":"1971:18:33","nodeType":"YulLiteral","src":"1971:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1960:2:33","nodeType":"YulIdentifier","src":"1960:2:33"},"nativeSrc":"1960:30:33","nodeType":"YulFunctionCall","src":"1960:30:33"},"nativeSrc":"1957:50:33","nodeType":"YulIf","src":"1957:50:33"},{"nativeSrc":"2016:96:33","nodeType":"YulVariableDeclaration","src":"2016:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2084:9:33","nodeType":"YulIdentifier","src":"2084:9:33"},{"name":"offset","nativeSrc":"2095:6:33","nodeType":"YulIdentifier","src":"2095:6:33"}],"functionName":{"name":"add","nativeSrc":"2080:3:33","nodeType":"YulIdentifier","src":"2080:3:33"},"nativeSrc":"2080:22:33","nodeType":"YulFunctionCall","src":"2080:22:33"},{"name":"dataEnd","nativeSrc":"2104:7:33","nodeType":"YulIdentifier","src":"2104:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"2042:37:33","nodeType":"YulIdentifier","src":"2042:37:33"},"nativeSrc":"2042:70:33","nodeType":"YulFunctionCall","src":"2042:70:33"},"variables":[{"name":"value4_1","nativeSrc":"2020:8:33","nodeType":"YulTypedName","src":"2020:8:33","type":""},{"name":"value5_1","nativeSrc":"2030:8:33","nodeType":"YulTypedName","src":"2030:8:33","type":""}]},{"nativeSrc":"2121:18:33","nodeType":"YulAssignment","src":"2121:18:33","value":{"name":"value4_1","nativeSrc":"2131:8:33","nodeType":"YulIdentifier","src":"2131:8:33"},"variableNames":[{"name":"value4","nativeSrc":"2121:6:33","nodeType":"YulIdentifier","src":"2121:6:33"}]},{"nativeSrc":"2148:18:33","nodeType":"YulAssignment","src":"2148:18:33","value":{"name":"value5_1","nativeSrc":"2158:8:33","nodeType":"YulIdentifier","src":"2158:8:33"},"variableNames":[{"name":"value5","nativeSrc":"2148:6:33","nodeType":"YulIdentifier","src":"2148:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"1394:778:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1493:9:33","nodeType":"YulTypedName","src":"1493:9:33","type":""},{"name":"dataEnd","nativeSrc":"1504:7:33","nodeType":"YulTypedName","src":"1504:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1516:6:33","nodeType":"YulTypedName","src":"1516:6:33","type":""},{"name":"value1","nativeSrc":"1524:6:33","nodeType":"YulTypedName","src":"1524:6:33","type":""},{"name":"value2","nativeSrc":"1532:6:33","nodeType":"YulTypedName","src":"1532:6:33","type":""},{"name":"value3","nativeSrc":"1540:6:33","nodeType":"YulTypedName","src":"1540:6:33","type":""},{"name":"value4","nativeSrc":"1548:6:33","nodeType":"YulTypedName","src":"1548:6:33","type":""},{"name":"value5","nativeSrc":"1556:6:33","nodeType":"YulTypedName","src":"1556:6:33","type":""}],"src":"1394:778:33"},{"body":{"nativeSrc":"2304:125:33","nodeType":"YulBlock","src":"2304:125:33","statements":[{"nativeSrc":"2314:26:33","nodeType":"YulAssignment","src":"2314:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"2326:9:33","nodeType":"YulIdentifier","src":"2326:9:33"},{"kind":"number","nativeSrc":"2337:2:33","nodeType":"YulLiteral","src":"2337:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2322:3:33","nodeType":"YulIdentifier","src":"2322:3:33"},"nativeSrc":"2322:18:33","nodeType":"YulFunctionCall","src":"2322:18:33"},"variableNames":[{"name":"tail","nativeSrc":"2314:4:33","nodeType":"YulIdentifier","src":"2314:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2356:9:33","nodeType":"YulIdentifier","src":"2356:9:33"},{"arguments":[{"name":"value0","nativeSrc":"2371:6:33","nodeType":"YulIdentifier","src":"2371:6:33"},{"kind":"number","nativeSrc":"2379:42:33","nodeType":"YulLiteral","src":"2379:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2367:3:33","nodeType":"YulIdentifier","src":"2367:3:33"},"nativeSrc":"2367:55:33","nodeType":"YulFunctionCall","src":"2367:55:33"}],"functionName":{"name":"mstore","nativeSrc":"2349:6:33","nodeType":"YulIdentifier","src":"2349:6:33"},"nativeSrc":"2349:74:33","nodeType":"YulFunctionCall","src":"2349:74:33"},"nativeSrc":"2349:74:33","nodeType":"YulExpressionStatement","src":"2349:74:33"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed","nativeSrc":"2177:252:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2273:9:33","nodeType":"YulTypedName","src":"2273:9:33","type":""},{"name":"value0","nativeSrc":"2284:6:33","nodeType":"YulTypedName","src":"2284:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2295:4:33","nodeType":"YulTypedName","src":"2295:4:33","type":""}],"src":"2177:252:33"},{"body":{"nativeSrc":"2549:125:33","nodeType":"YulBlock","src":"2549:125:33","statements":[{"nativeSrc":"2559:26:33","nodeType":"YulAssignment","src":"2559:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"2571:9:33","nodeType":"YulIdentifier","src":"2571:9:33"},{"kind":"number","nativeSrc":"2582:2:33","nodeType":"YulLiteral","src":"2582:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2567:3:33","nodeType":"YulIdentifier","src":"2567:3:33"},"nativeSrc":"2567:18:33","nodeType":"YulFunctionCall","src":"2567:18:33"},"variableNames":[{"name":"tail","nativeSrc":"2559:4:33","nodeType":"YulIdentifier","src":"2559:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2601:9:33","nodeType":"YulIdentifier","src":"2601:9:33"},{"arguments":[{"name":"value0","nativeSrc":"2616:6:33","nodeType":"YulIdentifier","src":"2616:6:33"},{"kind":"number","nativeSrc":"2624:42:33","nodeType":"YulLiteral","src":"2624:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2612:3:33","nodeType":"YulIdentifier","src":"2612:3:33"},"nativeSrc":"2612:55:33","nodeType":"YulFunctionCall","src":"2612:55:33"}],"functionName":{"name":"mstore","nativeSrc":"2594:6:33","nodeType":"YulIdentifier","src":"2594:6:33"},"nativeSrc":"2594:74:33","nodeType":"YulFunctionCall","src":"2594:74:33"},"nativeSrc":"2594:74:33","nodeType":"YulExpressionStatement","src":"2594:74:33"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed","nativeSrc":"2434:240:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2518:9:33","nodeType":"YulTypedName","src":"2518:9:33","type":""},{"name":"value0","nativeSrc":"2529:6:33","nodeType":"YulTypedName","src":"2529:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2540:4:33","nodeType":"YulTypedName","src":"2540:4:33","type":""}],"src":"2434:240:33"},{"body":{"nativeSrc":"2749:177:33","nodeType":"YulBlock","src":"2749:177:33","statements":[{"body":{"nativeSrc":"2795:16:33","nodeType":"YulBlock","src":"2795:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2804:1:33","nodeType":"YulLiteral","src":"2804:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"2807:1:33","nodeType":"YulLiteral","src":"2807:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2797:6:33","nodeType":"YulIdentifier","src":"2797:6:33"},"nativeSrc":"2797:12:33","nodeType":"YulFunctionCall","src":"2797:12:33"},"nativeSrc":"2797:12:33","nodeType":"YulExpressionStatement","src":"2797:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2770:7:33","nodeType":"YulIdentifier","src":"2770:7:33"},{"name":"headStart","nativeSrc":"2779:9:33","nodeType":"YulIdentifier","src":"2779:9:33"}],"functionName":{"name":"sub","nativeSrc":"2766:3:33","nodeType":"YulIdentifier","src":"2766:3:33"},"nativeSrc":"2766:23:33","nodeType":"YulFunctionCall","src":"2766:23:33"},{"kind":"number","nativeSrc":"2791:2:33","nodeType":"YulLiteral","src":"2791:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2762:3:33","nodeType":"YulIdentifier","src":"2762:3:33"},"nativeSrc":"2762:32:33","nodeType":"YulFunctionCall","src":"2762:32:33"},"nativeSrc":"2759:52:33","nodeType":"YulIf","src":"2759:52:33"},{"nativeSrc":"2820:36:33","nodeType":"YulVariableDeclaration","src":"2820:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"2846:9:33","nodeType":"YulIdentifier","src":"2846:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"2833:12:33","nodeType":"YulIdentifier","src":"2833:12:33"},"nativeSrc":"2833:23:33","nodeType":"YulFunctionCall","src":"2833:23:33"},"variables":[{"name":"value","nativeSrc":"2824:5:33","nodeType":"YulTypedName","src":"2824:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2890:5:33","nodeType":"YulIdentifier","src":"2890:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2865:24:33","nodeType":"YulIdentifier","src":"2865:24:33"},"nativeSrc":"2865:31:33","nodeType":"YulFunctionCall","src":"2865:31:33"},"nativeSrc":"2865:31:33","nodeType":"YulExpressionStatement","src":"2865:31:33"},{"nativeSrc":"2905:15:33","nodeType":"YulAssignment","src":"2905:15:33","value":{"name":"value","nativeSrc":"2915:5:33","nodeType":"YulIdentifier","src":"2915:5:33"},"variableNames":[{"name":"value0","nativeSrc":"2905:6:33","nodeType":"YulIdentifier","src":"2905:6:33"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2679:247:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2715:9:33","nodeType":"YulTypedName","src":"2715:9:33","type":""},{"name":"dataEnd","nativeSrc":"2726:7:33","nodeType":"YulTypedName","src":"2726:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2738:6:33","nodeType":"YulTypedName","src":"2738:6:33","type":""}],"src":"2679:247:33"},{"body":{"nativeSrc":"3001:110:33","nodeType":"YulBlock","src":"3001:110:33","statements":[{"body":{"nativeSrc":"3047:16:33","nodeType":"YulBlock","src":"3047:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3056:1:33","nodeType":"YulLiteral","src":"3056:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"3059:1:33","nodeType":"YulLiteral","src":"3059:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3049:6:33","nodeType":"YulIdentifier","src":"3049:6:33"},"nativeSrc":"3049:12:33","nodeType":"YulFunctionCall","src":"3049:12:33"},"nativeSrc":"3049:12:33","nodeType":"YulExpressionStatement","src":"3049:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3022:7:33","nodeType":"YulIdentifier","src":"3022:7:33"},{"name":"headStart","nativeSrc":"3031:9:33","nodeType":"YulIdentifier","src":"3031:9:33"}],"functionName":{"name":"sub","nativeSrc":"3018:3:33","nodeType":"YulIdentifier","src":"3018:3:33"},"nativeSrc":"3018:23:33","nodeType":"YulFunctionCall","src":"3018:23:33"},{"kind":"number","nativeSrc":"3043:2:33","nodeType":"YulLiteral","src":"3043:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3014:3:33","nodeType":"YulIdentifier","src":"3014:3:33"},"nativeSrc":"3014:32:33","nodeType":"YulFunctionCall","src":"3014:32:33"},"nativeSrc":"3011:52:33","nodeType":"YulIf","src":"3011:52:33"},{"nativeSrc":"3072:33:33","nodeType":"YulAssignment","src":"3072:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3095:9:33","nodeType":"YulIdentifier","src":"3095:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"3082:12:33","nodeType":"YulIdentifier","src":"3082:12:33"},"nativeSrc":"3082:23:33","nodeType":"YulFunctionCall","src":"3082:23:33"},"variableNames":[{"name":"value0","nativeSrc":"3072:6:33","nodeType":"YulIdentifier","src":"3072:6:33"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2931:180:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2967:9:33","nodeType":"YulTypedName","src":"2967:9:33","type":""},{"name":"dataEnd","nativeSrc":"2978:7:33","nodeType":"YulTypedName","src":"2978:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2990:6:33","nodeType":"YulTypedName","src":"2990:6:33","type":""}],"src":"2931:180:33"},{"body":{"nativeSrc":"3329:250:33","nodeType":"YulBlock","src":"3329:250:33","statements":[{"nativeSrc":"3339:27:33","nodeType":"YulAssignment","src":"3339:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3351:9:33","nodeType":"YulIdentifier","src":"3351:9:33"},{"kind":"number","nativeSrc":"3362:3:33","nodeType":"YulLiteral","src":"3362:3:33","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3347:3:33","nodeType":"YulIdentifier","src":"3347:3:33"},"nativeSrc":"3347:19:33","nodeType":"YulFunctionCall","src":"3347:19:33"},"variableNames":[{"name":"tail","nativeSrc":"3339:4:33","nodeType":"YulIdentifier","src":"3339:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3382:9:33","nodeType":"YulIdentifier","src":"3382:9:33"},{"name":"value0","nativeSrc":"3393:6:33","nodeType":"YulIdentifier","src":"3393:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3375:6:33","nodeType":"YulIdentifier","src":"3375:6:33"},"nativeSrc":"3375:25:33","nodeType":"YulFunctionCall","src":"3375:25:33"},"nativeSrc":"3375:25:33","nodeType":"YulExpressionStatement","src":"3375:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3420:9:33","nodeType":"YulIdentifier","src":"3420:9:33"},{"kind":"number","nativeSrc":"3431:2:33","nodeType":"YulLiteral","src":"3431:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3416:3:33","nodeType":"YulIdentifier","src":"3416:3:33"},"nativeSrc":"3416:18:33","nodeType":"YulFunctionCall","src":"3416:18:33"},{"name":"value1","nativeSrc":"3436:6:33","nodeType":"YulIdentifier","src":"3436:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3409:6:33","nodeType":"YulIdentifier","src":"3409:6:33"},"nativeSrc":"3409:34:33","nodeType":"YulFunctionCall","src":"3409:34:33"},"nativeSrc":"3409:34:33","nodeType":"YulExpressionStatement","src":"3409:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3463:9:33","nodeType":"YulIdentifier","src":"3463:9:33"},{"kind":"number","nativeSrc":"3474:2:33","nodeType":"YulLiteral","src":"3474:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3459:3:33","nodeType":"YulIdentifier","src":"3459:3:33"},"nativeSrc":"3459:18:33","nodeType":"YulFunctionCall","src":"3459:18:33"},{"name":"value2","nativeSrc":"3479:6:33","nodeType":"YulIdentifier","src":"3479:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3452:6:33","nodeType":"YulIdentifier","src":"3452:6:33"},"nativeSrc":"3452:34:33","nodeType":"YulFunctionCall","src":"3452:34:33"},"nativeSrc":"3452:34:33","nodeType":"YulExpressionStatement","src":"3452:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3506:9:33","nodeType":"YulIdentifier","src":"3506:9:33"},{"kind":"number","nativeSrc":"3517:2:33","nodeType":"YulLiteral","src":"3517:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3502:3:33","nodeType":"YulIdentifier","src":"3502:3:33"},"nativeSrc":"3502:18:33","nodeType":"YulFunctionCall","src":"3502:18:33"},{"name":"value3","nativeSrc":"3522:6:33","nodeType":"YulIdentifier","src":"3522:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3495:6:33","nodeType":"YulIdentifier","src":"3495:6:33"},"nativeSrc":"3495:34:33","nodeType":"YulFunctionCall","src":"3495:34:33"},"nativeSrc":"3495:34:33","nodeType":"YulExpressionStatement","src":"3495:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3549:9:33","nodeType":"YulIdentifier","src":"3549:9:33"},{"kind":"number","nativeSrc":"3560:3:33","nodeType":"YulLiteral","src":"3560:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3545:3:33","nodeType":"YulIdentifier","src":"3545:3:33"},"nativeSrc":"3545:19:33","nodeType":"YulFunctionCall","src":"3545:19:33"},{"name":"value4","nativeSrc":"3566:6:33","nodeType":"YulIdentifier","src":"3566:6:33"}],"functionName":{"name":"mstore","nativeSrc":"3538:6:33","nodeType":"YulIdentifier","src":"3538:6:33"},"nativeSrc":"3538:35:33","nodeType":"YulFunctionCall","src":"3538:35:33"},"nativeSrc":"3538:35:33","nodeType":"YulExpressionStatement","src":"3538:35:33"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3116:463:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3266:9:33","nodeType":"YulTypedName","src":"3266:9:33","type":""},{"name":"value4","nativeSrc":"3277:6:33","nodeType":"YulTypedName","src":"3277:6:33","type":""},{"name":"value3","nativeSrc":"3285:6:33","nodeType":"YulTypedName","src":"3285:6:33","type":""},{"name":"value2","nativeSrc":"3293:6:33","nodeType":"YulTypedName","src":"3293:6:33","type":""},{"name":"value1","nativeSrc":"3301:6:33","nodeType":"YulTypedName","src":"3301:6:33","type":""},{"name":"value0","nativeSrc":"3309:6:33","nodeType":"YulTypedName","src":"3309:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3320:4:33","nodeType":"YulTypedName","src":"3320:4:33","type":""}],"src":"3116:463:33"},{"body":{"nativeSrc":"3688:279:33","nodeType":"YulBlock","src":"3688:279:33","statements":[{"body":{"nativeSrc":"3734:16:33","nodeType":"YulBlock","src":"3734:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3743:1:33","nodeType":"YulLiteral","src":"3743:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"3746:1:33","nodeType":"YulLiteral","src":"3746:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3736:6:33","nodeType":"YulIdentifier","src":"3736:6:33"},"nativeSrc":"3736:12:33","nodeType":"YulFunctionCall","src":"3736:12:33"},"nativeSrc":"3736:12:33","nodeType":"YulExpressionStatement","src":"3736:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3709:7:33","nodeType":"YulIdentifier","src":"3709:7:33"},{"name":"headStart","nativeSrc":"3718:9:33","nodeType":"YulIdentifier","src":"3718:9:33"}],"functionName":{"name":"sub","nativeSrc":"3705:3:33","nodeType":"YulIdentifier","src":"3705:3:33"},"nativeSrc":"3705:23:33","nodeType":"YulFunctionCall","src":"3705:23:33"},{"kind":"number","nativeSrc":"3730:2:33","nodeType":"YulLiteral","src":"3730:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3701:3:33","nodeType":"YulIdentifier","src":"3701:3:33"},"nativeSrc":"3701:32:33","nodeType":"YulFunctionCall","src":"3701:32:33"},"nativeSrc":"3698:52:33","nodeType":"YulIf","src":"3698:52:33"},{"nativeSrc":"3759:33:33","nodeType":"YulAssignment","src":"3759:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"3782:9:33","nodeType":"YulIdentifier","src":"3782:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"3769:12:33","nodeType":"YulIdentifier","src":"3769:12:33"},"nativeSrc":"3769:23:33","nodeType":"YulFunctionCall","src":"3769:23:33"},"variableNames":[{"name":"value0","nativeSrc":"3759:6:33","nodeType":"YulIdentifier","src":"3759:6:33"}]},{"nativeSrc":"3801:45:33","nodeType":"YulVariableDeclaration","src":"3801:45:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3831:9:33","nodeType":"YulIdentifier","src":"3831:9:33"},{"kind":"number","nativeSrc":"3842:2:33","nodeType":"YulLiteral","src":"3842:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3827:3:33","nodeType":"YulIdentifier","src":"3827:3:33"},"nativeSrc":"3827:18:33","nodeType":"YulFunctionCall","src":"3827:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"3814:12:33","nodeType":"YulIdentifier","src":"3814:12:33"},"nativeSrc":"3814:32:33","nodeType":"YulFunctionCall","src":"3814:32:33"},"variables":[{"name":"value","nativeSrc":"3805:5:33","nodeType":"YulTypedName","src":"3805:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3880:5:33","nodeType":"YulIdentifier","src":"3880:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3855:24:33","nodeType":"YulIdentifier","src":"3855:24:33"},"nativeSrc":"3855:31:33","nodeType":"YulFunctionCall","src":"3855:31:33"},"nativeSrc":"3855:31:33","nodeType":"YulExpressionStatement","src":"3855:31:33"},{"nativeSrc":"3895:15:33","nodeType":"YulAssignment","src":"3895:15:33","value":{"name":"value","nativeSrc":"3905:5:33","nodeType":"YulIdentifier","src":"3905:5:33"},"variableNames":[{"name":"value1","nativeSrc":"3895:6:33","nodeType":"YulIdentifier","src":"3895:6:33"}]},{"nativeSrc":"3919:42:33","nodeType":"YulAssignment","src":"3919:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3946:9:33","nodeType":"YulIdentifier","src":"3946:9:33"},{"kind":"number","nativeSrc":"3957:2:33","nodeType":"YulLiteral","src":"3957:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3942:3:33","nodeType":"YulIdentifier","src":"3942:3:33"},"nativeSrc":"3942:18:33","nodeType":"YulFunctionCall","src":"3942:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"3929:12:33","nodeType":"YulIdentifier","src":"3929:12:33"},"nativeSrc":"3929:32:33","nodeType":"YulFunctionCall","src":"3929:32:33"},"variableNames":[{"name":"value2","nativeSrc":"3919:6:33","nodeType":"YulIdentifier","src":"3919:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256","nativeSrc":"3584:383:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3638:9:33","nodeType":"YulTypedName","src":"3638:9:33","type":""},{"name":"dataEnd","nativeSrc":"3649:7:33","nodeType":"YulTypedName","src":"3649:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3661:6:33","nodeType":"YulTypedName","src":"3661:6:33","type":""},{"name":"value1","nativeSrc":"3669:6:33","nodeType":"YulTypedName","src":"3669:6:33","type":""},{"name":"value2","nativeSrc":"3677:6:33","nodeType":"YulTypedName","src":"3677:6:33","type":""}],"src":"3584:383:33"},{"body":{"nativeSrc":"4086:286:33","nodeType":"YulBlock","src":"4086:286:33","statements":[{"nativeSrc":"4096:26:33","nodeType":"YulAssignment","src":"4096:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"4108:9:33","nodeType":"YulIdentifier","src":"4108:9:33"},{"kind":"number","nativeSrc":"4119:2:33","nodeType":"YulLiteral","src":"4119:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4104:3:33","nodeType":"YulIdentifier","src":"4104:3:33"},"nativeSrc":"4104:18:33","nodeType":"YulFunctionCall","src":"4104:18:33"},"variableNames":[{"name":"tail","nativeSrc":"4096:4:33","nodeType":"YulIdentifier","src":"4096:4:33"}]},{"body":{"nativeSrc":"4164:168:33","nodeType":"YulBlock","src":"4164:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4185:1:33","nodeType":"YulLiteral","src":"4185:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4188:77:33","nodeType":"YulLiteral","src":"4188:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4178:6:33","nodeType":"YulIdentifier","src":"4178:6:33"},"nativeSrc":"4178:88:33","nodeType":"YulFunctionCall","src":"4178:88:33"},"nativeSrc":"4178:88:33","nodeType":"YulExpressionStatement","src":"4178:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4286:1:33","nodeType":"YulLiteral","src":"4286:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"4289:4:33","nodeType":"YulLiteral","src":"4289:4:33","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"4279:6:33","nodeType":"YulIdentifier","src":"4279:6:33"},"nativeSrc":"4279:15:33","nodeType":"YulFunctionCall","src":"4279:15:33"},"nativeSrc":"4279:15:33","nodeType":"YulExpressionStatement","src":"4279:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4314:1:33","nodeType":"YulLiteral","src":"4314:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4317:4:33","nodeType":"YulLiteral","src":"4317:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4307:6:33","nodeType":"YulIdentifier","src":"4307:6:33"},"nativeSrc":"4307:15:33","nodeType":"YulFunctionCall","src":"4307:15:33"},"nativeSrc":"4307:15:33","nodeType":"YulExpressionStatement","src":"4307:15:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4144:6:33","nodeType":"YulIdentifier","src":"4144:6:33"},{"kind":"number","nativeSrc":"4152:1:33","nodeType":"YulLiteral","src":"4152:1:33","type":"","value":"5"}],"functionName":{"name":"lt","nativeSrc":"4141:2:33","nodeType":"YulIdentifier","src":"4141:2:33"},"nativeSrc":"4141:13:33","nodeType":"YulFunctionCall","src":"4141:13:33"}],"functionName":{"name":"iszero","nativeSrc":"4134:6:33","nodeType":"YulIdentifier","src":"4134:6:33"},"nativeSrc":"4134:21:33","nodeType":"YulFunctionCall","src":"4134:21:33"},"nativeSrc":"4131:201:33","nodeType":"YulIf","src":"4131:201:33"},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4348:9:33","nodeType":"YulIdentifier","src":"4348:9:33"},{"name":"value0","nativeSrc":"4359:6:33","nodeType":"YulIdentifier","src":"4359:6:33"}],"functionName":{"name":"mstore","nativeSrc":"4341:6:33","nodeType":"YulIdentifier","src":"4341:6:33"},"nativeSrc":"4341:25:33","nodeType":"YulFunctionCall","src":"4341:25:33"},"nativeSrc":"4341:25:33","nodeType":"YulExpressionStatement","src":"4341:25:33"}]},"name":"abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed","nativeSrc":"3972:400:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4055:9:33","nodeType":"YulTypedName","src":"4055:9:33","type":""},{"name":"value0","nativeSrc":"4066:6:33","nodeType":"YulTypedName","src":"4066:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4077:4:33","nodeType":"YulTypedName","src":"4077:4:33","type":""}],"src":"3972:400:33"},{"body":{"nativeSrc":"4601:879:33","nodeType":"YulBlock","src":"4601:879:33","statements":[{"body":{"nativeSrc":"4647:16:33","nodeType":"YulBlock","src":"4647:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4656:1:33","nodeType":"YulLiteral","src":"4656:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4659:1:33","nodeType":"YulLiteral","src":"4659:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4649:6:33","nodeType":"YulIdentifier","src":"4649:6:33"},"nativeSrc":"4649:12:33","nodeType":"YulFunctionCall","src":"4649:12:33"},"nativeSrc":"4649:12:33","nodeType":"YulExpressionStatement","src":"4649:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4622:7:33","nodeType":"YulIdentifier","src":"4622:7:33"},{"name":"headStart","nativeSrc":"4631:9:33","nodeType":"YulIdentifier","src":"4631:9:33"}],"functionName":{"name":"sub","nativeSrc":"4618:3:33","nodeType":"YulIdentifier","src":"4618:3:33"},"nativeSrc":"4618:23:33","nodeType":"YulFunctionCall","src":"4618:23:33"},{"kind":"number","nativeSrc":"4643:2:33","nodeType":"YulLiteral","src":"4643:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4614:3:33","nodeType":"YulIdentifier","src":"4614:3:33"},"nativeSrc":"4614:32:33","nodeType":"YulFunctionCall","src":"4614:32:33"},"nativeSrc":"4611:52:33","nodeType":"YulIf","src":"4611:52:33"},{"nativeSrc":"4672:37:33","nodeType":"YulVariableDeclaration","src":"4672:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"4699:9:33","nodeType":"YulIdentifier","src":"4699:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"4686:12:33","nodeType":"YulIdentifier","src":"4686:12:33"},"nativeSrc":"4686:23:33","nodeType":"YulFunctionCall","src":"4686:23:33"},"variables":[{"name":"offset","nativeSrc":"4676:6:33","nodeType":"YulTypedName","src":"4676:6:33","type":""}]},{"nativeSrc":"4718:28:33","nodeType":"YulVariableDeclaration","src":"4718:28:33","value":{"kind":"number","nativeSrc":"4728:18:33","nodeType":"YulLiteral","src":"4728:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4722:2:33","nodeType":"YulTypedName","src":"4722:2:33","type":""}]},{"body":{"nativeSrc":"4773:16:33","nodeType":"YulBlock","src":"4773:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4782:1:33","nodeType":"YulLiteral","src":"4782:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"4785:1:33","nodeType":"YulLiteral","src":"4785:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4775:6:33","nodeType":"YulIdentifier","src":"4775:6:33"},"nativeSrc":"4775:12:33","nodeType":"YulFunctionCall","src":"4775:12:33"},"nativeSrc":"4775:12:33","nodeType":"YulExpressionStatement","src":"4775:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4761:6:33","nodeType":"YulIdentifier","src":"4761:6:33"},{"name":"_1","nativeSrc":"4769:2:33","nodeType":"YulIdentifier","src":"4769:2:33"}],"functionName":{"name":"gt","nativeSrc":"4758:2:33","nodeType":"YulIdentifier","src":"4758:2:33"},"nativeSrc":"4758:14:33","nodeType":"YulFunctionCall","src":"4758:14:33"},"nativeSrc":"4755:34:33","nodeType":"YulIf","src":"4755:34:33"},{"nativeSrc":"4798:96:33","nodeType":"YulVariableDeclaration","src":"4798:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4866:9:33","nodeType":"YulIdentifier","src":"4866:9:33"},{"name":"offset","nativeSrc":"4877:6:33","nodeType":"YulIdentifier","src":"4877:6:33"}],"functionName":{"name":"add","nativeSrc":"4862:3:33","nodeType":"YulIdentifier","src":"4862:3:33"},"nativeSrc":"4862:22:33","nodeType":"YulFunctionCall","src":"4862:22:33"},{"name":"dataEnd","nativeSrc":"4886:7:33","nodeType":"YulIdentifier","src":"4886:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"4824:37:33","nodeType":"YulIdentifier","src":"4824:37:33"},"nativeSrc":"4824:70:33","nodeType":"YulFunctionCall","src":"4824:70:33"},"variables":[{"name":"value0_1","nativeSrc":"4802:8:33","nodeType":"YulTypedName","src":"4802:8:33","type":""},{"name":"value1_1","nativeSrc":"4812:8:33","nodeType":"YulTypedName","src":"4812:8:33","type":""}]},{"nativeSrc":"4903:18:33","nodeType":"YulAssignment","src":"4903:18:33","value":{"name":"value0_1","nativeSrc":"4913:8:33","nodeType":"YulIdentifier","src":"4913:8:33"},"variableNames":[{"name":"value0","nativeSrc":"4903:6:33","nodeType":"YulIdentifier","src":"4903:6:33"}]},{"nativeSrc":"4930:18:33","nodeType":"YulAssignment","src":"4930:18:33","value":{"name":"value1_1","nativeSrc":"4940:8:33","nodeType":"YulIdentifier","src":"4940:8:33"},"variableNames":[{"name":"value1","nativeSrc":"4930:6:33","nodeType":"YulIdentifier","src":"4930:6:33"}]},{"nativeSrc":"4957:48:33","nodeType":"YulVariableDeclaration","src":"4957:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4990:9:33","nodeType":"YulIdentifier","src":"4990:9:33"},{"kind":"number","nativeSrc":"5001:2:33","nodeType":"YulLiteral","src":"5001:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4986:3:33","nodeType":"YulIdentifier","src":"4986:3:33"},"nativeSrc":"4986:18:33","nodeType":"YulFunctionCall","src":"4986:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"4973:12:33","nodeType":"YulIdentifier","src":"4973:12:33"},"nativeSrc":"4973:32:33","nodeType":"YulFunctionCall","src":"4973:32:33"},"variables":[{"name":"offset_1","nativeSrc":"4961:8:33","nodeType":"YulTypedName","src":"4961:8:33","type":""}]},{"body":{"nativeSrc":"5034:16:33","nodeType":"YulBlock","src":"5034:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5043:1:33","nodeType":"YulLiteral","src":"5043:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5046:1:33","nodeType":"YulLiteral","src":"5046:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5036:6:33","nodeType":"YulIdentifier","src":"5036:6:33"},"nativeSrc":"5036:12:33","nodeType":"YulFunctionCall","src":"5036:12:33"},"nativeSrc":"5036:12:33","nodeType":"YulExpressionStatement","src":"5036:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5020:8:33","nodeType":"YulIdentifier","src":"5020:8:33"},{"name":"_1","nativeSrc":"5030:2:33","nodeType":"YulIdentifier","src":"5030:2:33"}],"functionName":{"name":"gt","nativeSrc":"5017:2:33","nodeType":"YulIdentifier","src":"5017:2:33"},"nativeSrc":"5017:16:33","nodeType":"YulFunctionCall","src":"5017:16:33"},"nativeSrc":"5014:36:33","nodeType":"YulIf","src":"5014:36:33"},{"nativeSrc":"5059:98:33","nodeType":"YulVariableDeclaration","src":"5059:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5127:9:33","nodeType":"YulIdentifier","src":"5127:9:33"},{"name":"offset_1","nativeSrc":"5138:8:33","nodeType":"YulIdentifier","src":"5138:8:33"}],"functionName":{"name":"add","nativeSrc":"5123:3:33","nodeType":"YulIdentifier","src":"5123:3:33"},"nativeSrc":"5123:24:33","nodeType":"YulFunctionCall","src":"5123:24:33"},{"name":"dataEnd","nativeSrc":"5149:7:33","nodeType":"YulIdentifier","src":"5149:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5085:37:33","nodeType":"YulIdentifier","src":"5085:37:33"},"nativeSrc":"5085:72:33","nodeType":"YulFunctionCall","src":"5085:72:33"},"variables":[{"name":"value2_1","nativeSrc":"5063:8:33","nodeType":"YulTypedName","src":"5063:8:33","type":""},{"name":"value3_1","nativeSrc":"5073:8:33","nodeType":"YulTypedName","src":"5073:8:33","type":""}]},{"nativeSrc":"5166:18:33","nodeType":"YulAssignment","src":"5166:18:33","value":{"name":"value2_1","nativeSrc":"5176:8:33","nodeType":"YulIdentifier","src":"5176:8:33"},"variableNames":[{"name":"value2","nativeSrc":"5166:6:33","nodeType":"YulIdentifier","src":"5166:6:33"}]},{"nativeSrc":"5193:18:33","nodeType":"YulAssignment","src":"5193:18:33","value":{"name":"value3_1","nativeSrc":"5203:8:33","nodeType":"YulIdentifier","src":"5203:8:33"},"variableNames":[{"name":"value3","nativeSrc":"5193:6:33","nodeType":"YulIdentifier","src":"5193:6:33"}]},{"nativeSrc":"5220:48:33","nodeType":"YulVariableDeclaration","src":"5220:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5253:9:33","nodeType":"YulIdentifier","src":"5253:9:33"},{"kind":"number","nativeSrc":"5264:2:33","nodeType":"YulLiteral","src":"5264:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5249:3:33","nodeType":"YulIdentifier","src":"5249:3:33"},"nativeSrc":"5249:18:33","nodeType":"YulFunctionCall","src":"5249:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5236:12:33","nodeType":"YulIdentifier","src":"5236:12:33"},"nativeSrc":"5236:32:33","nodeType":"YulFunctionCall","src":"5236:32:33"},"variables":[{"name":"offset_2","nativeSrc":"5224:8:33","nodeType":"YulTypedName","src":"5224:8:33","type":""}]},{"body":{"nativeSrc":"5297:16:33","nodeType":"YulBlock","src":"5297:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5306:1:33","nodeType":"YulLiteral","src":"5306:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5309:1:33","nodeType":"YulLiteral","src":"5309:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5299:6:33","nodeType":"YulIdentifier","src":"5299:6:33"},"nativeSrc":"5299:12:33","nodeType":"YulFunctionCall","src":"5299:12:33"},"nativeSrc":"5299:12:33","nodeType":"YulExpressionStatement","src":"5299:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5283:8:33","nodeType":"YulIdentifier","src":"5283:8:33"},{"name":"_1","nativeSrc":"5293:2:33","nodeType":"YulIdentifier","src":"5293:2:33"}],"functionName":{"name":"gt","nativeSrc":"5280:2:33","nodeType":"YulIdentifier","src":"5280:2:33"},"nativeSrc":"5280:16:33","nodeType":"YulFunctionCall","src":"5280:16:33"},"nativeSrc":"5277:36:33","nodeType":"YulIf","src":"5277:36:33"},{"nativeSrc":"5322:98:33","nodeType":"YulVariableDeclaration","src":"5322:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5390:9:33","nodeType":"YulIdentifier","src":"5390:9:33"},{"name":"offset_2","nativeSrc":"5401:8:33","nodeType":"YulIdentifier","src":"5401:8:33"}],"functionName":{"name":"add","nativeSrc":"5386:3:33","nodeType":"YulIdentifier","src":"5386:3:33"},"nativeSrc":"5386:24:33","nodeType":"YulFunctionCall","src":"5386:24:33"},{"name":"dataEnd","nativeSrc":"5412:7:33","nodeType":"YulIdentifier","src":"5412:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5348:37:33","nodeType":"YulIdentifier","src":"5348:37:33"},"nativeSrc":"5348:72:33","nodeType":"YulFunctionCall","src":"5348:72:33"},"variables":[{"name":"value4_1","nativeSrc":"5326:8:33","nodeType":"YulTypedName","src":"5326:8:33","type":""},{"name":"value5_1","nativeSrc":"5336:8:33","nodeType":"YulTypedName","src":"5336:8:33","type":""}]},{"nativeSrc":"5429:18:33","nodeType":"YulAssignment","src":"5429:18:33","value":{"name":"value4_1","nativeSrc":"5439:8:33","nodeType":"YulIdentifier","src":"5439:8:33"},"variableNames":[{"name":"value4","nativeSrc":"5429:6:33","nodeType":"YulIdentifier","src":"5429:6:33"}]},{"nativeSrc":"5456:18:33","nodeType":"YulAssignment","src":"5456:18:33","value":{"name":"value5_1","nativeSrc":"5466:8:33","nodeType":"YulIdentifier","src":"5466:8:33"},"variableNames":[{"name":"value5","nativeSrc":"5456:6:33","nodeType":"YulIdentifier","src":"5456:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4377:1103:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4527:9:33","nodeType":"YulTypedName","src":"4527:9:33","type":""},{"name":"dataEnd","nativeSrc":"4538:7:33","nodeType":"YulTypedName","src":"4538:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4550:6:33","nodeType":"YulTypedName","src":"4550:6:33","type":""},{"name":"value1","nativeSrc":"4558:6:33","nodeType":"YulTypedName","src":"4558:6:33","type":""},{"name":"value2","nativeSrc":"4566:6:33","nodeType":"YulTypedName","src":"4566:6:33","type":""},{"name":"value3","nativeSrc":"4574:6:33","nodeType":"YulTypedName","src":"4574:6:33","type":""},{"name":"value4","nativeSrc":"4582:6:33","nodeType":"YulTypedName","src":"4582:6:33","type":""},{"name":"value5","nativeSrc":"4590:6:33","nodeType":"YulTypedName","src":"4590:6:33","type":""}],"src":"4377:1103:33"},{"body":{"nativeSrc":"5606:264:33","nodeType":"YulBlock","src":"5606:264:33","statements":[{"body":{"nativeSrc":"5653:16:33","nodeType":"YulBlock","src":"5653:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5662:1:33","nodeType":"YulLiteral","src":"5662:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"5665:1:33","nodeType":"YulLiteral","src":"5665:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5655:6:33","nodeType":"YulIdentifier","src":"5655:6:33"},"nativeSrc":"5655:12:33","nodeType":"YulFunctionCall","src":"5655:12:33"},"nativeSrc":"5655:12:33","nodeType":"YulExpressionStatement","src":"5655:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5627:7:33","nodeType":"YulIdentifier","src":"5627:7:33"},{"name":"headStart","nativeSrc":"5636:9:33","nodeType":"YulIdentifier","src":"5636:9:33"}],"functionName":{"name":"sub","nativeSrc":"5623:3:33","nodeType":"YulIdentifier","src":"5623:3:33"},"nativeSrc":"5623:23:33","nodeType":"YulFunctionCall","src":"5623:23:33"},{"kind":"number","nativeSrc":"5648:3:33","nodeType":"YulLiteral","src":"5648:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"5619:3:33","nodeType":"YulIdentifier","src":"5619:3:33"},"nativeSrc":"5619:33:33","nodeType":"YulFunctionCall","src":"5619:33:33"},"nativeSrc":"5616:53:33","nodeType":"YulIf","src":"5616:53:33"},{"nativeSrc":"5678:33:33","nodeType":"YulAssignment","src":"5678:33:33","value":{"arguments":[{"name":"headStart","nativeSrc":"5701:9:33","nodeType":"YulIdentifier","src":"5701:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"5688:12:33","nodeType":"YulIdentifier","src":"5688:12:33"},"nativeSrc":"5688:23:33","nodeType":"YulFunctionCall","src":"5688:23:33"},"variableNames":[{"name":"value0","nativeSrc":"5678:6:33","nodeType":"YulIdentifier","src":"5678:6:33"}]},{"nativeSrc":"5720:42:33","nodeType":"YulAssignment","src":"5720:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5747:9:33","nodeType":"YulIdentifier","src":"5747:9:33"},{"kind":"number","nativeSrc":"5758:2:33","nodeType":"YulLiteral","src":"5758:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5743:3:33","nodeType":"YulIdentifier","src":"5743:3:33"},"nativeSrc":"5743:18:33","nodeType":"YulFunctionCall","src":"5743:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5730:12:33","nodeType":"YulIdentifier","src":"5730:12:33"},"nativeSrc":"5730:32:33","nodeType":"YulFunctionCall","src":"5730:32:33"},"variableNames":[{"name":"value1","nativeSrc":"5720:6:33","nodeType":"YulIdentifier","src":"5720:6:33"}]},{"nativeSrc":"5771:42:33","nodeType":"YulAssignment","src":"5771:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5798:9:33","nodeType":"YulIdentifier","src":"5798:9:33"},{"kind":"number","nativeSrc":"5809:2:33","nodeType":"YulLiteral","src":"5809:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5794:3:33","nodeType":"YulIdentifier","src":"5794:3:33"},"nativeSrc":"5794:18:33","nodeType":"YulFunctionCall","src":"5794:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5781:12:33","nodeType":"YulIdentifier","src":"5781:12:33"},"nativeSrc":"5781:32:33","nodeType":"YulFunctionCall","src":"5781:32:33"},"variableNames":[{"name":"value2","nativeSrc":"5771:6:33","nodeType":"YulIdentifier","src":"5771:6:33"}]},{"nativeSrc":"5822:42:33","nodeType":"YulAssignment","src":"5822:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5849:9:33","nodeType":"YulIdentifier","src":"5849:9:33"},{"kind":"number","nativeSrc":"5860:2:33","nodeType":"YulLiteral","src":"5860:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5845:3:33","nodeType":"YulIdentifier","src":"5845:3:33"},"nativeSrc":"5845:18:33","nodeType":"YulFunctionCall","src":"5845:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"5832:12:33","nodeType":"YulIdentifier","src":"5832:12:33"},"nativeSrc":"5832:32:33","nodeType":"YulFunctionCall","src":"5832:32:33"},"variableNames":[{"name":"value3","nativeSrc":"5822:6:33","nodeType":"YulIdentifier","src":"5822:6:33"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256","nativeSrc":"5485:385:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5548:9:33","nodeType":"YulTypedName","src":"5548:9:33","type":""},{"name":"dataEnd","nativeSrc":"5559:7:33","nodeType":"YulTypedName","src":"5559:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5571:6:33","nodeType":"YulTypedName","src":"5571:6:33","type":""},{"name":"value1","nativeSrc":"5579:6:33","nodeType":"YulTypedName","src":"5579:6:33","type":""},{"name":"value2","nativeSrc":"5587:6:33","nodeType":"YulTypedName","src":"5587:6:33","type":""},{"name":"value3","nativeSrc":"5595:6:33","nodeType":"YulTypedName","src":"5595:6:33","type":""}],"src":"5485:385:33"},{"body":{"nativeSrc":"5976:125:33","nodeType":"YulBlock","src":"5976:125:33","statements":[{"nativeSrc":"5986:26:33","nodeType":"YulAssignment","src":"5986:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"5998:9:33","nodeType":"YulIdentifier","src":"5998:9:33"},{"kind":"number","nativeSrc":"6009:2:33","nodeType":"YulLiteral","src":"6009:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5994:3:33","nodeType":"YulIdentifier","src":"5994:3:33"},"nativeSrc":"5994:18:33","nodeType":"YulFunctionCall","src":"5994:18:33"},"variableNames":[{"name":"tail","nativeSrc":"5986:4:33","nodeType":"YulIdentifier","src":"5986:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6028:9:33","nodeType":"YulIdentifier","src":"6028:9:33"},{"arguments":[{"name":"value0","nativeSrc":"6043:6:33","nodeType":"YulIdentifier","src":"6043:6:33"},{"kind":"number","nativeSrc":"6051:42:33","nodeType":"YulLiteral","src":"6051:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6039:3:33","nodeType":"YulIdentifier","src":"6039:3:33"},"nativeSrc":"6039:55:33","nodeType":"YulFunctionCall","src":"6039:55:33"}],"functionName":{"name":"mstore","nativeSrc":"6021:6:33","nodeType":"YulIdentifier","src":"6021:6:33"},"nativeSrc":"6021:74:33","nodeType":"YulFunctionCall","src":"6021:74:33"},"nativeSrc":"6021:74:33","nodeType":"YulExpressionStatement","src":"6021:74:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5875:226:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5945:9:33","nodeType":"YulTypedName","src":"5945:9:33","type":""},{"name":"value0","nativeSrc":"5956:6:33","nodeType":"YulTypedName","src":"5956:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5967:4:33","nodeType":"YulTypedName","src":"5967:4:33","type":""}],"src":"5875:226:33"},{"body":{"nativeSrc":"6331:879:33","nodeType":"YulBlock","src":"6331:879:33","statements":[{"body":{"nativeSrc":"6377:16:33","nodeType":"YulBlock","src":"6377:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6386:1:33","nodeType":"YulLiteral","src":"6386:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6389:1:33","nodeType":"YulLiteral","src":"6389:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6379:6:33","nodeType":"YulIdentifier","src":"6379:6:33"},"nativeSrc":"6379:12:33","nodeType":"YulFunctionCall","src":"6379:12:33"},"nativeSrc":"6379:12:33","nodeType":"YulExpressionStatement","src":"6379:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6352:7:33","nodeType":"YulIdentifier","src":"6352:7:33"},{"name":"headStart","nativeSrc":"6361:9:33","nodeType":"YulIdentifier","src":"6361:9:33"}],"functionName":{"name":"sub","nativeSrc":"6348:3:33","nodeType":"YulIdentifier","src":"6348:3:33"},"nativeSrc":"6348:23:33","nodeType":"YulFunctionCall","src":"6348:23:33"},{"kind":"number","nativeSrc":"6373:2:33","nodeType":"YulLiteral","src":"6373:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6344:3:33","nodeType":"YulIdentifier","src":"6344:3:33"},"nativeSrc":"6344:32:33","nodeType":"YulFunctionCall","src":"6344:32:33"},"nativeSrc":"6341:52:33","nodeType":"YulIf","src":"6341:52:33"},{"nativeSrc":"6402:37:33","nodeType":"YulVariableDeclaration","src":"6402:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"6429:9:33","nodeType":"YulIdentifier","src":"6429:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"6416:12:33","nodeType":"YulIdentifier","src":"6416:12:33"},"nativeSrc":"6416:23:33","nodeType":"YulFunctionCall","src":"6416:23:33"},"variables":[{"name":"offset","nativeSrc":"6406:6:33","nodeType":"YulTypedName","src":"6406:6:33","type":""}]},{"nativeSrc":"6448:28:33","nodeType":"YulVariableDeclaration","src":"6448:28:33","value":{"kind":"number","nativeSrc":"6458:18:33","nodeType":"YulLiteral","src":"6458:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6452:2:33","nodeType":"YulTypedName","src":"6452:2:33","type":""}]},{"body":{"nativeSrc":"6503:16:33","nodeType":"YulBlock","src":"6503:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6512:1:33","nodeType":"YulLiteral","src":"6512:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6515:1:33","nodeType":"YulLiteral","src":"6515:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6505:6:33","nodeType":"YulIdentifier","src":"6505:6:33"},"nativeSrc":"6505:12:33","nodeType":"YulFunctionCall","src":"6505:12:33"},"nativeSrc":"6505:12:33","nodeType":"YulExpressionStatement","src":"6505:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6491:6:33","nodeType":"YulIdentifier","src":"6491:6:33"},{"name":"_1","nativeSrc":"6499:2:33","nodeType":"YulIdentifier","src":"6499:2:33"}],"functionName":{"name":"gt","nativeSrc":"6488:2:33","nodeType":"YulIdentifier","src":"6488:2:33"},"nativeSrc":"6488:14:33","nodeType":"YulFunctionCall","src":"6488:14:33"},"nativeSrc":"6485:34:33","nodeType":"YulIf","src":"6485:34:33"},{"nativeSrc":"6528:96:33","nodeType":"YulVariableDeclaration","src":"6528:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6596:9:33","nodeType":"YulIdentifier","src":"6596:9:33"},{"name":"offset","nativeSrc":"6607:6:33","nodeType":"YulIdentifier","src":"6607:6:33"}],"functionName":{"name":"add","nativeSrc":"6592:3:33","nodeType":"YulIdentifier","src":"6592:3:33"},"nativeSrc":"6592:22:33","nodeType":"YulFunctionCall","src":"6592:22:33"},{"name":"dataEnd","nativeSrc":"6616:7:33","nodeType":"YulIdentifier","src":"6616:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"6554:37:33","nodeType":"YulIdentifier","src":"6554:37:33"},"nativeSrc":"6554:70:33","nodeType":"YulFunctionCall","src":"6554:70:33"},"variables":[{"name":"value0_1","nativeSrc":"6532:8:33","nodeType":"YulTypedName","src":"6532:8:33","type":""},{"name":"value1_1","nativeSrc":"6542:8:33","nodeType":"YulTypedName","src":"6542:8:33","type":""}]},{"nativeSrc":"6633:18:33","nodeType":"YulAssignment","src":"6633:18:33","value":{"name":"value0_1","nativeSrc":"6643:8:33","nodeType":"YulIdentifier","src":"6643:8:33"},"variableNames":[{"name":"value0","nativeSrc":"6633:6:33","nodeType":"YulIdentifier","src":"6633:6:33"}]},{"nativeSrc":"6660:18:33","nodeType":"YulAssignment","src":"6660:18:33","value":{"name":"value1_1","nativeSrc":"6670:8:33","nodeType":"YulIdentifier","src":"6670:8:33"},"variableNames":[{"name":"value1","nativeSrc":"6660:6:33","nodeType":"YulIdentifier","src":"6660:6:33"}]},{"nativeSrc":"6687:48:33","nodeType":"YulVariableDeclaration","src":"6687:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6720:9:33","nodeType":"YulIdentifier","src":"6720:9:33"},{"kind":"number","nativeSrc":"6731:2:33","nodeType":"YulLiteral","src":"6731:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6716:3:33","nodeType":"YulIdentifier","src":"6716:3:33"},"nativeSrc":"6716:18:33","nodeType":"YulFunctionCall","src":"6716:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"6703:12:33","nodeType":"YulIdentifier","src":"6703:12:33"},"nativeSrc":"6703:32:33","nodeType":"YulFunctionCall","src":"6703:32:33"},"variables":[{"name":"offset_1","nativeSrc":"6691:8:33","nodeType":"YulTypedName","src":"6691:8:33","type":""}]},{"body":{"nativeSrc":"6764:16:33","nodeType":"YulBlock","src":"6764:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6773:1:33","nodeType":"YulLiteral","src":"6773:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"6776:1:33","nodeType":"YulLiteral","src":"6776:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6766:6:33","nodeType":"YulIdentifier","src":"6766:6:33"},"nativeSrc":"6766:12:33","nodeType":"YulFunctionCall","src":"6766:12:33"},"nativeSrc":"6766:12:33","nodeType":"YulExpressionStatement","src":"6766:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"6750:8:33","nodeType":"YulIdentifier","src":"6750:8:33"},{"name":"_1","nativeSrc":"6760:2:33","nodeType":"YulIdentifier","src":"6760:2:33"}],"functionName":{"name":"gt","nativeSrc":"6747:2:33","nodeType":"YulIdentifier","src":"6747:2:33"},"nativeSrc":"6747:16:33","nodeType":"YulFunctionCall","src":"6747:16:33"},"nativeSrc":"6744:36:33","nodeType":"YulIf","src":"6744:36:33"},{"nativeSrc":"6789:98:33","nodeType":"YulVariableDeclaration","src":"6789:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6857:9:33","nodeType":"YulIdentifier","src":"6857:9:33"},{"name":"offset_1","nativeSrc":"6868:8:33","nodeType":"YulIdentifier","src":"6868:8:33"}],"functionName":{"name":"add","nativeSrc":"6853:3:33","nodeType":"YulIdentifier","src":"6853:3:33"},"nativeSrc":"6853:24:33","nodeType":"YulFunctionCall","src":"6853:24:33"},{"name":"dataEnd","nativeSrc":"6879:7:33","nodeType":"YulIdentifier","src":"6879:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"6815:37:33","nodeType":"YulIdentifier","src":"6815:37:33"},"nativeSrc":"6815:72:33","nodeType":"YulFunctionCall","src":"6815:72:33"},"variables":[{"name":"value2_1","nativeSrc":"6793:8:33","nodeType":"YulTypedName","src":"6793:8:33","type":""},{"name":"value3_1","nativeSrc":"6803:8:33","nodeType":"YulTypedName","src":"6803:8:33","type":""}]},{"nativeSrc":"6896:18:33","nodeType":"YulAssignment","src":"6896:18:33","value":{"name":"value2_1","nativeSrc":"6906:8:33","nodeType":"YulIdentifier","src":"6906:8:33"},"variableNames":[{"name":"value2","nativeSrc":"6896:6:33","nodeType":"YulIdentifier","src":"6896:6:33"}]},{"nativeSrc":"6923:18:33","nodeType":"YulAssignment","src":"6923:18:33","value":{"name":"value3_1","nativeSrc":"6933:8:33","nodeType":"YulIdentifier","src":"6933:8:33"},"variableNames":[{"name":"value3","nativeSrc":"6923:6:33","nodeType":"YulIdentifier","src":"6923:6:33"}]},{"nativeSrc":"6950:48:33","nodeType":"YulVariableDeclaration","src":"6950:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6983:9:33","nodeType":"YulIdentifier","src":"6983:9:33"},{"kind":"number","nativeSrc":"6994:2:33","nodeType":"YulLiteral","src":"6994:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6979:3:33","nodeType":"YulIdentifier","src":"6979:3:33"},"nativeSrc":"6979:18:33","nodeType":"YulFunctionCall","src":"6979:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"6966:12:33","nodeType":"YulIdentifier","src":"6966:12:33"},"nativeSrc":"6966:32:33","nodeType":"YulFunctionCall","src":"6966:32:33"},"variables":[{"name":"offset_2","nativeSrc":"6954:8:33","nodeType":"YulTypedName","src":"6954:8:33","type":""}]},{"body":{"nativeSrc":"7027:16:33","nodeType":"YulBlock","src":"7027:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7036:1:33","nodeType":"YulLiteral","src":"7036:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7039:1:33","nodeType":"YulLiteral","src":"7039:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7029:6:33","nodeType":"YulIdentifier","src":"7029:6:33"},"nativeSrc":"7029:12:33","nodeType":"YulFunctionCall","src":"7029:12:33"},"nativeSrc":"7029:12:33","nodeType":"YulExpressionStatement","src":"7029:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7013:8:33","nodeType":"YulIdentifier","src":"7013:8:33"},{"name":"_1","nativeSrc":"7023:2:33","nodeType":"YulIdentifier","src":"7023:2:33"}],"functionName":{"name":"gt","nativeSrc":"7010:2:33","nodeType":"YulIdentifier","src":"7010:2:33"},"nativeSrc":"7010:16:33","nodeType":"YulFunctionCall","src":"7010:16:33"},"nativeSrc":"7007:36:33","nodeType":"YulIf","src":"7007:36:33"},{"nativeSrc":"7052:98:33","nodeType":"YulVariableDeclaration","src":"7052:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7120:9:33","nodeType":"YulIdentifier","src":"7120:9:33"},{"name":"offset_2","nativeSrc":"7131:8:33","nodeType":"YulIdentifier","src":"7131:8:33"}],"functionName":{"name":"add","nativeSrc":"7116:3:33","nodeType":"YulIdentifier","src":"7116:3:33"},"nativeSrc":"7116:24:33","nodeType":"YulFunctionCall","src":"7116:24:33"},{"name":"dataEnd","nativeSrc":"7142:7:33","nodeType":"YulIdentifier","src":"7142:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"7078:37:33","nodeType":"YulIdentifier","src":"7078:37:33"},"nativeSrc":"7078:72:33","nodeType":"YulFunctionCall","src":"7078:72:33"},"variables":[{"name":"value4_1","nativeSrc":"7056:8:33","nodeType":"YulTypedName","src":"7056:8:33","type":""},{"name":"value5_1","nativeSrc":"7066:8:33","nodeType":"YulTypedName","src":"7066:8:33","type":""}]},{"nativeSrc":"7159:18:33","nodeType":"YulAssignment","src":"7159:18:33","value":{"name":"value4_1","nativeSrc":"7169:8:33","nodeType":"YulIdentifier","src":"7169:8:33"},"variableNames":[{"name":"value4","nativeSrc":"7159:6:33","nodeType":"YulIdentifier","src":"7159:6:33"}]},{"nativeSrc":"7186:18:33","nodeType":"YulAssignment","src":"7186:18:33","value":{"name":"value5_1","nativeSrc":"7196:8:33","nodeType":"YulIdentifier","src":"7196:8:33"},"variableNames":[{"name":"value5","nativeSrc":"7186:6:33","nodeType":"YulIdentifier","src":"7186:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6106:1104:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6257:9:33","nodeType":"YulTypedName","src":"6257:9:33","type":""},{"name":"dataEnd","nativeSrc":"6268:7:33","nodeType":"YulTypedName","src":"6268:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6280:6:33","nodeType":"YulTypedName","src":"6280:6:33","type":""},{"name":"value1","nativeSrc":"6288:6:33","nodeType":"YulTypedName","src":"6288:6:33","type":""},{"name":"value2","nativeSrc":"6296:6:33","nodeType":"YulTypedName","src":"6296:6:33","type":""},{"name":"value3","nativeSrc":"6304:6:33","nodeType":"YulTypedName","src":"6304:6:33","type":""},{"name":"value4","nativeSrc":"6312:6:33","nodeType":"YulTypedName","src":"6312:6:33","type":""},{"name":"value5","nativeSrc":"6320:6:33","nodeType":"YulTypedName","src":"6320:6:33","type":""}],"src":"6106:1104:33"},{"body":{"nativeSrc":"7316:76:33","nodeType":"YulBlock","src":"7316:76:33","statements":[{"nativeSrc":"7326:26:33","nodeType":"YulAssignment","src":"7326:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"7338:9:33","nodeType":"YulIdentifier","src":"7338:9:33"},{"kind":"number","nativeSrc":"7349:2:33","nodeType":"YulLiteral","src":"7349:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7334:3:33","nodeType":"YulIdentifier","src":"7334:3:33"},"nativeSrc":"7334:18:33","nodeType":"YulFunctionCall","src":"7334:18:33"},"variableNames":[{"name":"tail","nativeSrc":"7326:4:33","nodeType":"YulIdentifier","src":"7326:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7368:9:33","nodeType":"YulIdentifier","src":"7368:9:33"},{"name":"value0","nativeSrc":"7379:6:33","nodeType":"YulIdentifier","src":"7379:6:33"}],"functionName":{"name":"mstore","nativeSrc":"7361:6:33","nodeType":"YulIdentifier","src":"7361:6:33"},"nativeSrc":"7361:25:33","nodeType":"YulFunctionCall","src":"7361:25:33"},"nativeSrc":"7361:25:33","nodeType":"YulExpressionStatement","src":"7361:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"7215:177:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7285:9:33","nodeType":"YulTypedName","src":"7285:9:33","type":""},{"name":"value0","nativeSrc":"7296:6:33","nodeType":"YulTypedName","src":"7296:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7307:4:33","nodeType":"YulTypedName","src":"7307:4:33","type":""}],"src":"7215:177:33"},{"body":{"nativeSrc":"7498:76:33","nodeType":"YulBlock","src":"7498:76:33","statements":[{"nativeSrc":"7508:26:33","nodeType":"YulAssignment","src":"7508:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"7520:9:33","nodeType":"YulIdentifier","src":"7520:9:33"},{"kind":"number","nativeSrc":"7531:2:33","nodeType":"YulLiteral","src":"7531:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7516:3:33","nodeType":"YulIdentifier","src":"7516:3:33"},"nativeSrc":"7516:18:33","nodeType":"YulFunctionCall","src":"7516:18:33"},"variableNames":[{"name":"tail","nativeSrc":"7508:4:33","nodeType":"YulIdentifier","src":"7508:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7550:9:33","nodeType":"YulIdentifier","src":"7550:9:33"},{"name":"value0","nativeSrc":"7561:6:33","nodeType":"YulIdentifier","src":"7561:6:33"}],"functionName":{"name":"mstore","nativeSrc":"7543:6:33","nodeType":"YulIdentifier","src":"7543:6:33"},"nativeSrc":"7543:25:33","nodeType":"YulFunctionCall","src":"7543:25:33"},"nativeSrc":"7543:25:33","nodeType":"YulExpressionStatement","src":"7543:25:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7397:177:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7467:9:33","nodeType":"YulTypedName","src":"7467:9:33","type":""},{"name":"value0","nativeSrc":"7478:6:33","nodeType":"YulTypedName","src":"7478:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7489:4:33","nodeType":"YulTypedName","src":"7489:4:33","type":""}],"src":"7397:177:33"},{"body":{"nativeSrc":"7744:616:33","nodeType":"YulBlock","src":"7744:616:33","statements":[{"body":{"nativeSrc":"7790:16:33","nodeType":"YulBlock","src":"7790:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7799:1:33","nodeType":"YulLiteral","src":"7799:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7802:1:33","nodeType":"YulLiteral","src":"7802:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7792:6:33","nodeType":"YulIdentifier","src":"7792:6:33"},"nativeSrc":"7792:12:33","nodeType":"YulFunctionCall","src":"7792:12:33"},"nativeSrc":"7792:12:33","nodeType":"YulExpressionStatement","src":"7792:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7765:7:33","nodeType":"YulIdentifier","src":"7765:7:33"},{"name":"headStart","nativeSrc":"7774:9:33","nodeType":"YulIdentifier","src":"7774:9:33"}],"functionName":{"name":"sub","nativeSrc":"7761:3:33","nodeType":"YulIdentifier","src":"7761:3:33"},"nativeSrc":"7761:23:33","nodeType":"YulFunctionCall","src":"7761:23:33"},{"kind":"number","nativeSrc":"7786:2:33","nodeType":"YulLiteral","src":"7786:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7757:3:33","nodeType":"YulIdentifier","src":"7757:3:33"},"nativeSrc":"7757:32:33","nodeType":"YulFunctionCall","src":"7757:32:33"},"nativeSrc":"7754:52:33","nodeType":"YulIf","src":"7754:52:33"},{"nativeSrc":"7815:37:33","nodeType":"YulVariableDeclaration","src":"7815:37:33","value":{"arguments":[{"name":"headStart","nativeSrc":"7842:9:33","nodeType":"YulIdentifier","src":"7842:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"7829:12:33","nodeType":"YulIdentifier","src":"7829:12:33"},"nativeSrc":"7829:23:33","nodeType":"YulFunctionCall","src":"7829:23:33"},"variables":[{"name":"offset","nativeSrc":"7819:6:33","nodeType":"YulTypedName","src":"7819:6:33","type":""}]},{"nativeSrc":"7861:28:33","nodeType":"YulVariableDeclaration","src":"7861:28:33","value":{"kind":"number","nativeSrc":"7871:18:33","nodeType":"YulLiteral","src":"7871:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7865:2:33","nodeType":"YulTypedName","src":"7865:2:33","type":""}]},{"body":{"nativeSrc":"7916:16:33","nodeType":"YulBlock","src":"7916:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7925:1:33","nodeType":"YulLiteral","src":"7925:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7928:1:33","nodeType":"YulLiteral","src":"7928:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7918:6:33","nodeType":"YulIdentifier","src":"7918:6:33"},"nativeSrc":"7918:12:33","nodeType":"YulFunctionCall","src":"7918:12:33"},"nativeSrc":"7918:12:33","nodeType":"YulExpressionStatement","src":"7918:12:33"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7904:6:33","nodeType":"YulIdentifier","src":"7904:6:33"},{"name":"_1","nativeSrc":"7912:2:33","nodeType":"YulIdentifier","src":"7912:2:33"}],"functionName":{"name":"gt","nativeSrc":"7901:2:33","nodeType":"YulIdentifier","src":"7901:2:33"},"nativeSrc":"7901:14:33","nodeType":"YulFunctionCall","src":"7901:14:33"},"nativeSrc":"7898:34:33","nodeType":"YulIf","src":"7898:34:33"},{"nativeSrc":"7941:96:33","nodeType":"YulVariableDeclaration","src":"7941:96:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8009:9:33","nodeType":"YulIdentifier","src":"8009:9:33"},{"name":"offset","nativeSrc":"8020:6:33","nodeType":"YulIdentifier","src":"8020:6:33"}],"functionName":{"name":"add","nativeSrc":"8005:3:33","nodeType":"YulIdentifier","src":"8005:3:33"},"nativeSrc":"8005:22:33","nodeType":"YulFunctionCall","src":"8005:22:33"},{"name":"dataEnd","nativeSrc":"8029:7:33","nodeType":"YulIdentifier","src":"8029:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"7967:37:33","nodeType":"YulIdentifier","src":"7967:37:33"},"nativeSrc":"7967:70:33","nodeType":"YulFunctionCall","src":"7967:70:33"},"variables":[{"name":"value0_1","nativeSrc":"7945:8:33","nodeType":"YulTypedName","src":"7945:8:33","type":""},{"name":"value1_1","nativeSrc":"7955:8:33","nodeType":"YulTypedName","src":"7955:8:33","type":""}]},{"nativeSrc":"8046:18:33","nodeType":"YulAssignment","src":"8046:18:33","value":{"name":"value0_1","nativeSrc":"8056:8:33","nodeType":"YulIdentifier","src":"8056:8:33"},"variableNames":[{"name":"value0","nativeSrc":"8046:6:33","nodeType":"YulIdentifier","src":"8046:6:33"}]},{"nativeSrc":"8073:18:33","nodeType":"YulAssignment","src":"8073:18:33","value":{"name":"value1_1","nativeSrc":"8083:8:33","nodeType":"YulIdentifier","src":"8083:8:33"},"variableNames":[{"name":"value1","nativeSrc":"8073:6:33","nodeType":"YulIdentifier","src":"8073:6:33"}]},{"nativeSrc":"8100:48:33","nodeType":"YulVariableDeclaration","src":"8100:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8133:9:33","nodeType":"YulIdentifier","src":"8133:9:33"},{"kind":"number","nativeSrc":"8144:2:33","nodeType":"YulLiteral","src":"8144:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8129:3:33","nodeType":"YulIdentifier","src":"8129:3:33"},"nativeSrc":"8129:18:33","nodeType":"YulFunctionCall","src":"8129:18:33"}],"functionName":{"name":"calldataload","nativeSrc":"8116:12:33","nodeType":"YulIdentifier","src":"8116:12:33"},"nativeSrc":"8116:32:33","nodeType":"YulFunctionCall","src":"8116:32:33"},"variables":[{"name":"offset_1","nativeSrc":"8104:8:33","nodeType":"YulTypedName","src":"8104:8:33","type":""}]},{"body":{"nativeSrc":"8177:16:33","nodeType":"YulBlock","src":"8177:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8186:1:33","nodeType":"YulLiteral","src":"8186:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"8189:1:33","nodeType":"YulLiteral","src":"8189:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8179:6:33","nodeType":"YulIdentifier","src":"8179:6:33"},"nativeSrc":"8179:12:33","nodeType":"YulFunctionCall","src":"8179:12:33"},"nativeSrc":"8179:12:33","nodeType":"YulExpressionStatement","src":"8179:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8163:8:33","nodeType":"YulIdentifier","src":"8163:8:33"},{"name":"_1","nativeSrc":"8173:2:33","nodeType":"YulIdentifier","src":"8173:2:33"}],"functionName":{"name":"gt","nativeSrc":"8160:2:33","nodeType":"YulIdentifier","src":"8160:2:33"},"nativeSrc":"8160:16:33","nodeType":"YulFunctionCall","src":"8160:16:33"},"nativeSrc":"8157:36:33","nodeType":"YulIf","src":"8157:36:33"},{"nativeSrc":"8202:98:33","nodeType":"YulVariableDeclaration","src":"8202:98:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8270:9:33","nodeType":"YulIdentifier","src":"8270:9:33"},{"name":"offset_1","nativeSrc":"8281:8:33","nodeType":"YulIdentifier","src":"8281:8:33"}],"functionName":{"name":"add","nativeSrc":"8266:3:33","nodeType":"YulIdentifier","src":"8266:3:33"},"nativeSrc":"8266:24:33","nodeType":"YulFunctionCall","src":"8266:24:33"},{"name":"dataEnd","nativeSrc":"8292:7:33","nodeType":"YulIdentifier","src":"8292:7:33"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"8228:37:33","nodeType":"YulIdentifier","src":"8228:37:33"},"nativeSrc":"8228:72:33","nodeType":"YulFunctionCall","src":"8228:72:33"},"variables":[{"name":"value2_1","nativeSrc":"8206:8:33","nodeType":"YulTypedName","src":"8206:8:33","type":""},{"name":"value3_1","nativeSrc":"8216:8:33","nodeType":"YulTypedName","src":"8216:8:33","type":""}]},{"nativeSrc":"8309:18:33","nodeType":"YulAssignment","src":"8309:18:33","value":{"name":"value2_1","nativeSrc":"8319:8:33","nodeType":"YulIdentifier","src":"8319:8:33"},"variableNames":[{"name":"value2","nativeSrc":"8309:6:33","nodeType":"YulIdentifier","src":"8309:6:33"}]},{"nativeSrc":"8336:18:33","nodeType":"YulAssignment","src":"8336:18:33","value":{"name":"value3_1","nativeSrc":"8346:8:33","nodeType":"YulIdentifier","src":"8346:8:33"},"variableNames":[{"name":"value3","nativeSrc":"8336:6:33","nodeType":"YulIdentifier","src":"8336:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"7579:781:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7686:9:33","nodeType":"YulTypedName","src":"7686:9:33","type":""},{"name":"dataEnd","nativeSrc":"7697:7:33","nodeType":"YulTypedName","src":"7697:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7709:6:33","nodeType":"YulTypedName","src":"7709:6:33","type":""},{"name":"value1","nativeSrc":"7717:6:33","nodeType":"YulTypedName","src":"7717:6:33","type":""},{"name":"value2","nativeSrc":"7725:6:33","nodeType":"YulTypedName","src":"7725:6:33","type":""},{"name":"value3","nativeSrc":"7733:6:33","nodeType":"YulTypedName","src":"7733:6:33","type":""}],"src":"7579:781:33"},{"body":{"nativeSrc":"8522:162:33","nodeType":"YulBlock","src":"8522:162:33","statements":[{"nativeSrc":"8532:26:33","nodeType":"YulAssignment","src":"8532:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"8544:9:33","nodeType":"YulIdentifier","src":"8544:9:33"},{"kind":"number","nativeSrc":"8555:2:33","nodeType":"YulLiteral","src":"8555:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8540:3:33","nodeType":"YulIdentifier","src":"8540:3:33"},"nativeSrc":"8540:18:33","nodeType":"YulFunctionCall","src":"8540:18:33"},"variableNames":[{"name":"tail","nativeSrc":"8532:4:33","nodeType":"YulIdentifier","src":"8532:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8574:9:33","nodeType":"YulIdentifier","src":"8574:9:33"},{"name":"value0","nativeSrc":"8585:6:33","nodeType":"YulIdentifier","src":"8585:6:33"}],"functionName":{"name":"mstore","nativeSrc":"8567:6:33","nodeType":"YulIdentifier","src":"8567:6:33"},"nativeSrc":"8567:25:33","nodeType":"YulFunctionCall","src":"8567:25:33"},"nativeSrc":"8567:25:33","nodeType":"YulExpressionStatement","src":"8567:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8612:9:33","nodeType":"YulIdentifier","src":"8612:9:33"},{"kind":"number","nativeSrc":"8623:2:33","nodeType":"YulLiteral","src":"8623:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8608:3:33","nodeType":"YulIdentifier","src":"8608:3:33"},"nativeSrc":"8608:18:33","nodeType":"YulFunctionCall","src":"8608:18:33"},{"name":"value1","nativeSrc":"8628:6:33","nodeType":"YulIdentifier","src":"8628:6:33"}],"functionName":{"name":"mstore","nativeSrc":"8601:6:33","nodeType":"YulIdentifier","src":"8601:6:33"},"nativeSrc":"8601:34:33","nodeType":"YulFunctionCall","src":"8601:34:33"},"nativeSrc":"8601:34:33","nodeType":"YulExpressionStatement","src":"8601:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8655:9:33","nodeType":"YulIdentifier","src":"8655:9:33"},{"kind":"number","nativeSrc":"8666:2:33","nodeType":"YulLiteral","src":"8666:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8651:3:33","nodeType":"YulIdentifier","src":"8651:3:33"},"nativeSrc":"8651:18:33","nodeType":"YulFunctionCall","src":"8651:18:33"},{"name":"value2","nativeSrc":"8671:6:33","nodeType":"YulIdentifier","src":"8671:6:33"}],"functionName":{"name":"mstore","nativeSrc":"8644:6:33","nodeType":"YulIdentifier","src":"8644:6:33"},"nativeSrc":"8644:34:33","nodeType":"YulFunctionCall","src":"8644:34:33"},"nativeSrc":"8644:34:33","nodeType":"YulExpressionStatement","src":"8644:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"8365:319:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8475:9:33","nodeType":"YulTypedName","src":"8475:9:33","type":""},{"name":"value2","nativeSrc":"8486:6:33","nodeType":"YulTypedName","src":"8486:6:33","type":""},{"name":"value1","nativeSrc":"8494:6:33","nodeType":"YulTypedName","src":"8494:6:33","type":""},{"name":"value0","nativeSrc":"8502:6:33","nodeType":"YulTypedName","src":"8502:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8513:4:33","nodeType":"YulTypedName","src":"8513:4:33","type":""}],"src":"8365:319:33"},{"body":{"nativeSrc":"8874:255:33","nodeType":"YulBlock","src":"8874:255:33","statements":[{"nativeSrc":"8884:27:33","nodeType":"YulAssignment","src":"8884:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"8896:9:33","nodeType":"YulIdentifier","src":"8896:9:33"},{"kind":"number","nativeSrc":"8907:3:33","nodeType":"YulLiteral","src":"8907:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8892:3:33","nodeType":"YulIdentifier","src":"8892:3:33"},"nativeSrc":"8892:19:33","nodeType":"YulFunctionCall","src":"8892:19:33"},"variableNames":[{"name":"tail","nativeSrc":"8884:4:33","nodeType":"YulIdentifier","src":"8884:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8927:9:33","nodeType":"YulIdentifier","src":"8927:9:33"},{"arguments":[{"name":"value0","nativeSrc":"8942:6:33","nodeType":"YulIdentifier","src":"8942:6:33"},{"kind":"number","nativeSrc":"8950:42:33","nodeType":"YulLiteral","src":"8950:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8938:3:33","nodeType":"YulIdentifier","src":"8938:3:33"},"nativeSrc":"8938:55:33","nodeType":"YulFunctionCall","src":"8938:55:33"}],"functionName":{"name":"mstore","nativeSrc":"8920:6:33","nodeType":"YulIdentifier","src":"8920:6:33"},"nativeSrc":"8920:74:33","nodeType":"YulFunctionCall","src":"8920:74:33"},"nativeSrc":"8920:74:33","nodeType":"YulExpressionStatement","src":"8920:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9014:9:33","nodeType":"YulIdentifier","src":"9014:9:33"},{"kind":"number","nativeSrc":"9025:2:33","nodeType":"YulLiteral","src":"9025:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9010:3:33","nodeType":"YulIdentifier","src":"9010:3:33"},"nativeSrc":"9010:18:33","nodeType":"YulFunctionCall","src":"9010:18:33"},{"name":"value1","nativeSrc":"9030:6:33","nodeType":"YulIdentifier","src":"9030:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9003:6:33","nodeType":"YulIdentifier","src":"9003:6:33"},"nativeSrc":"9003:34:33","nodeType":"YulFunctionCall","src":"9003:34:33"},"nativeSrc":"9003:34:33","nodeType":"YulExpressionStatement","src":"9003:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9057:9:33","nodeType":"YulIdentifier","src":"9057:9:33"},{"kind":"number","nativeSrc":"9068:2:33","nodeType":"YulLiteral","src":"9068:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9053:3:33","nodeType":"YulIdentifier","src":"9053:3:33"},"nativeSrc":"9053:18:33","nodeType":"YulFunctionCall","src":"9053:18:33"},{"name":"value2","nativeSrc":"9073:6:33","nodeType":"YulIdentifier","src":"9073:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9046:6:33","nodeType":"YulIdentifier","src":"9046:6:33"},"nativeSrc":"9046:34:33","nodeType":"YulFunctionCall","src":"9046:34:33"},"nativeSrc":"9046:34:33","nodeType":"YulExpressionStatement","src":"9046:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9100:9:33","nodeType":"YulIdentifier","src":"9100:9:33"},{"kind":"number","nativeSrc":"9111:2:33","nodeType":"YulLiteral","src":"9111:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9096:3:33","nodeType":"YulIdentifier","src":"9096:3:33"},"nativeSrc":"9096:18:33","nodeType":"YulFunctionCall","src":"9096:18:33"},{"name":"value3","nativeSrc":"9116:6:33","nodeType":"YulIdentifier","src":"9116:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9089:6:33","nodeType":"YulIdentifier","src":"9089:6:33"},"nativeSrc":"9089:34:33","nodeType":"YulFunctionCall","src":"9089:34:33"},"nativeSrc":"9089:34:33","nodeType":"YulExpressionStatement","src":"9089:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"8689:440:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8819:9:33","nodeType":"YulTypedName","src":"8819:9:33","type":""},{"name":"value3","nativeSrc":"8830:6:33","nodeType":"YulTypedName","src":"8830:6:33","type":""},{"name":"value2","nativeSrc":"8838:6:33","nodeType":"YulTypedName","src":"8838:6:33","type":""},{"name":"value1","nativeSrc":"8846:6:33","nodeType":"YulTypedName","src":"8846:6:33","type":""},{"name":"value0","nativeSrc":"8854:6:33","nodeType":"YulTypedName","src":"8854:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8865:4:33","nodeType":"YulTypedName","src":"8865:4:33","type":""}],"src":"8689:440:33"},{"body":{"nativeSrc":"9263:119:33","nodeType":"YulBlock","src":"9263:119:33","statements":[{"nativeSrc":"9273:26:33","nodeType":"YulAssignment","src":"9273:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"9285:9:33","nodeType":"YulIdentifier","src":"9285:9:33"},{"kind":"number","nativeSrc":"9296:2:33","nodeType":"YulLiteral","src":"9296:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9281:3:33","nodeType":"YulIdentifier","src":"9281:3:33"},"nativeSrc":"9281:18:33","nodeType":"YulFunctionCall","src":"9281:18:33"},"variableNames":[{"name":"tail","nativeSrc":"9273:4:33","nodeType":"YulIdentifier","src":"9273:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9315:9:33","nodeType":"YulIdentifier","src":"9315:9:33"},{"name":"value0","nativeSrc":"9326:6:33","nodeType":"YulIdentifier","src":"9326:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9308:6:33","nodeType":"YulIdentifier","src":"9308:6:33"},"nativeSrc":"9308:25:33","nodeType":"YulFunctionCall","src":"9308:25:33"},"nativeSrc":"9308:25:33","nodeType":"YulExpressionStatement","src":"9308:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9353:9:33","nodeType":"YulIdentifier","src":"9353:9:33"},{"kind":"number","nativeSrc":"9364:2:33","nodeType":"YulLiteral","src":"9364:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9349:3:33","nodeType":"YulIdentifier","src":"9349:3:33"},"nativeSrc":"9349:18:33","nodeType":"YulFunctionCall","src":"9349:18:33"},{"name":"value1","nativeSrc":"9369:6:33","nodeType":"YulIdentifier","src":"9369:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9342:6:33","nodeType":"YulIdentifier","src":"9342:6:33"},"nativeSrc":"9342:34:33","nodeType":"YulFunctionCall","src":"9342:34:33"},"nativeSrc":"9342:34:33","nodeType":"YulExpressionStatement","src":"9342:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9134:248:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9224:9:33","nodeType":"YulTypedName","src":"9224:9:33","type":""},{"name":"value1","nativeSrc":"9235:6:33","nodeType":"YulTypedName","src":"9235:6:33","type":""},{"name":"value0","nativeSrc":"9243:6:33","nodeType":"YulTypedName","src":"9243:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9254:4:33","nodeType":"YulTypedName","src":"9254:4:33","type":""}],"src":"9134:248:33"},{"body":{"nativeSrc":"9590:257:33","nodeType":"YulBlock","src":"9590:257:33","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9607:3:33","nodeType":"YulIdentifier","src":"9607:3:33"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9620:2:33","nodeType":"YulLiteral","src":"9620:2:33","type":"","value":"96"},{"name":"value0","nativeSrc":"9624:6:33","nodeType":"YulIdentifier","src":"9624:6:33"}],"functionName":{"name":"shl","nativeSrc":"9616:3:33","nodeType":"YulIdentifier","src":"9616:3:33"},"nativeSrc":"9616:15:33","nodeType":"YulFunctionCall","src":"9616:15:33"},{"kind":"number","nativeSrc":"9633:66:33","nodeType":"YulLiteral","src":"9633:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"9612:3:33","nodeType":"YulIdentifier","src":"9612:3:33"},"nativeSrc":"9612:88:33","nodeType":"YulFunctionCall","src":"9612:88:33"}],"functionName":{"name":"mstore","nativeSrc":"9600:6:33","nodeType":"YulIdentifier","src":"9600:6:33"},"nativeSrc":"9600:101:33","nodeType":"YulFunctionCall","src":"9600:101:33"},"nativeSrc":"9600:101:33","nodeType":"YulExpressionStatement","src":"9600:101:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9721:3:33","nodeType":"YulIdentifier","src":"9721:3:33"},{"kind":"number","nativeSrc":"9726:2:33","nodeType":"YulLiteral","src":"9726:2:33","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"9717:3:33","nodeType":"YulIdentifier","src":"9717:3:33"},"nativeSrc":"9717:12:33","nodeType":"YulFunctionCall","src":"9717:12:33"},{"name":"value1","nativeSrc":"9731:6:33","nodeType":"YulIdentifier","src":"9731:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9710:6:33","nodeType":"YulIdentifier","src":"9710:6:33"},"nativeSrc":"9710:28:33","nodeType":"YulFunctionCall","src":"9710:28:33"},"nativeSrc":"9710:28:33","nodeType":"YulExpressionStatement","src":"9710:28:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9758:3:33","nodeType":"YulIdentifier","src":"9758:3:33"},{"kind":"number","nativeSrc":"9763:2:33","nodeType":"YulLiteral","src":"9763:2:33","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"9754:3:33","nodeType":"YulIdentifier","src":"9754:3:33"},"nativeSrc":"9754:12:33","nodeType":"YulFunctionCall","src":"9754:12:33"},{"name":"value2","nativeSrc":"9768:6:33","nodeType":"YulIdentifier","src":"9768:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9747:6:33","nodeType":"YulIdentifier","src":"9747:6:33"},"nativeSrc":"9747:28:33","nodeType":"YulFunctionCall","src":"9747:28:33"},"nativeSrc":"9747:28:33","nodeType":"YulExpressionStatement","src":"9747:28:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9795:3:33","nodeType":"YulIdentifier","src":"9795:3:33"},{"kind":"number","nativeSrc":"9800:2:33","nodeType":"YulLiteral","src":"9800:2:33","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"9791:3:33","nodeType":"YulIdentifier","src":"9791:3:33"},"nativeSrc":"9791:12:33","nodeType":"YulFunctionCall","src":"9791:12:33"},{"name":"value3","nativeSrc":"9805:6:33","nodeType":"YulIdentifier","src":"9805:6:33"}],"functionName":{"name":"mstore","nativeSrc":"9784:6:33","nodeType":"YulIdentifier","src":"9784:6:33"},"nativeSrc":"9784:28:33","nodeType":"YulFunctionCall","src":"9784:28:33"},"nativeSrc":"9784:28:33","nodeType":"YulExpressionStatement","src":"9784:28:33"},{"nativeSrc":"9821:20:33","nodeType":"YulAssignment","src":"9821:20:33","value":{"arguments":[{"name":"pos","nativeSrc":"9832:3:33","nodeType":"YulIdentifier","src":"9832:3:33"},{"kind":"number","nativeSrc":"9837:3:33","nodeType":"YulLiteral","src":"9837:3:33","type":"","value":"116"}],"functionName":{"name":"add","nativeSrc":"9828:3:33","nodeType":"YulIdentifier","src":"9828:3:33"},"nativeSrc":"9828:13:33","nodeType":"YulFunctionCall","src":"9828:13:33"},"variableNames":[{"name":"end","nativeSrc":"9821:3:33","nodeType":"YulIdentifier","src":"9821:3:33"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9387:460:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9542:3:33","nodeType":"YulTypedName","src":"9542:3:33","type":""},{"name":"value3","nativeSrc":"9547:6:33","nodeType":"YulTypedName","src":"9547:6:33","type":""},{"name":"value2","nativeSrc":"9555:6:33","nodeType":"YulTypedName","src":"9555:6:33","type":""},{"name":"value1","nativeSrc":"9563:6:33","nodeType":"YulTypedName","src":"9563:6:33","type":""},{"name":"value0","nativeSrc":"9571:6:33","nodeType":"YulTypedName","src":"9571:6:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9582:3:33","nodeType":"YulTypedName","src":"9582:3:33","type":""}],"src":"9387:460:33"},{"body":{"nativeSrc":"9901:233:33","nodeType":"YulBlock","src":"9901:233:33","statements":[{"nativeSrc":"9911:17:33","nodeType":"YulAssignment","src":"9911:17:33","value":{"arguments":[{"name":"x","nativeSrc":"9923:1:33","nodeType":"YulIdentifier","src":"9923:1:33"},{"name":"y","nativeSrc":"9926:1:33","nodeType":"YulIdentifier","src":"9926:1:33"}],"functionName":{"name":"sub","nativeSrc":"9919:3:33","nodeType":"YulIdentifier","src":"9919:3:33"},"nativeSrc":"9919:9:33","nodeType":"YulFunctionCall","src":"9919:9:33"},"variableNames":[{"name":"diff","nativeSrc":"9911:4:33","nodeType":"YulIdentifier","src":"9911:4:33"}]},{"body":{"nativeSrc":"9960:168:33","nodeType":"YulBlock","src":"9960:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9981:1:33","nodeType":"YulLiteral","src":"9981:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"9984:77:33","nodeType":"YulLiteral","src":"9984:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9974:6:33","nodeType":"YulIdentifier","src":"9974:6:33"},"nativeSrc":"9974:88:33","nodeType":"YulFunctionCall","src":"9974:88:33"},"nativeSrc":"9974:88:33","nodeType":"YulExpressionStatement","src":"9974:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10082:1:33","nodeType":"YulLiteral","src":"10082:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"10085:4:33","nodeType":"YulLiteral","src":"10085:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"10075:6:33","nodeType":"YulIdentifier","src":"10075:6:33"},"nativeSrc":"10075:15:33","nodeType":"YulFunctionCall","src":"10075:15:33"},"nativeSrc":"10075:15:33","nodeType":"YulExpressionStatement","src":"10075:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10110:1:33","nodeType":"YulLiteral","src":"10110:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10113:4:33","nodeType":"YulLiteral","src":"10113:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10103:6:33","nodeType":"YulIdentifier","src":"10103:6:33"},"nativeSrc":"10103:15:33","nodeType":"YulFunctionCall","src":"10103:15:33"},"nativeSrc":"10103:15:33","nodeType":"YulExpressionStatement","src":"10103:15:33"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"9943:4:33","nodeType":"YulIdentifier","src":"9943:4:33"},{"name":"x","nativeSrc":"9949:1:33","nodeType":"YulIdentifier","src":"9949:1:33"}],"functionName":{"name":"gt","nativeSrc":"9940:2:33","nodeType":"YulIdentifier","src":"9940:2:33"},"nativeSrc":"9940:11:33","nodeType":"YulFunctionCall","src":"9940:11:33"},"nativeSrc":"9937:191:33","nodeType":"YulIf","src":"9937:191:33"}]},"name":"checked_sub_t_uint256","nativeSrc":"9852:282:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9883:1:33","nodeType":"YulTypedName","src":"9883:1:33","type":""},{"name":"y","nativeSrc":"9886:1:33","nodeType":"YulTypedName","src":"9886:1:33","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"9892:4:33","nodeType":"YulTypedName","src":"9892:4:33","type":""}],"src":"9852:282:33"},{"body":{"nativeSrc":"10296:211:33","nodeType":"YulBlock","src":"10296:211:33","statements":[{"nativeSrc":"10306:26:33","nodeType":"YulAssignment","src":"10306:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"10318:9:33","nodeType":"YulIdentifier","src":"10318:9:33"},{"kind":"number","nativeSrc":"10329:2:33","nodeType":"YulLiteral","src":"10329:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10314:3:33","nodeType":"YulIdentifier","src":"10314:3:33"},"nativeSrc":"10314:18:33","nodeType":"YulFunctionCall","src":"10314:18:33"},"variableNames":[{"name":"tail","nativeSrc":"10306:4:33","nodeType":"YulIdentifier","src":"10306:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10348:9:33","nodeType":"YulIdentifier","src":"10348:9:33"},{"arguments":[{"name":"value0","nativeSrc":"10363:6:33","nodeType":"YulIdentifier","src":"10363:6:33"},{"kind":"number","nativeSrc":"10371:42:33","nodeType":"YulLiteral","src":"10371:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10359:3:33","nodeType":"YulIdentifier","src":"10359:3:33"},"nativeSrc":"10359:55:33","nodeType":"YulFunctionCall","src":"10359:55:33"}],"functionName":{"name":"mstore","nativeSrc":"10341:6:33","nodeType":"YulIdentifier","src":"10341:6:33"},"nativeSrc":"10341:74:33","nodeType":"YulFunctionCall","src":"10341:74:33"},"nativeSrc":"10341:74:33","nodeType":"YulExpressionStatement","src":"10341:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10435:9:33","nodeType":"YulIdentifier","src":"10435:9:33"},{"kind":"number","nativeSrc":"10446:2:33","nodeType":"YulLiteral","src":"10446:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10431:3:33","nodeType":"YulIdentifier","src":"10431:3:33"},"nativeSrc":"10431:18:33","nodeType":"YulFunctionCall","src":"10431:18:33"},{"name":"value1","nativeSrc":"10451:6:33","nodeType":"YulIdentifier","src":"10451:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10424:6:33","nodeType":"YulIdentifier","src":"10424:6:33"},"nativeSrc":"10424:34:33","nodeType":"YulFunctionCall","src":"10424:34:33"},"nativeSrc":"10424:34:33","nodeType":"YulExpressionStatement","src":"10424:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10478:9:33","nodeType":"YulIdentifier","src":"10478:9:33"},{"kind":"number","nativeSrc":"10489:2:33","nodeType":"YulLiteral","src":"10489:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10474:3:33","nodeType":"YulIdentifier","src":"10474:3:33"},"nativeSrc":"10474:18:33","nodeType":"YulFunctionCall","src":"10474:18:33"},{"name":"value2","nativeSrc":"10494:6:33","nodeType":"YulIdentifier","src":"10494:6:33"}],"functionName":{"name":"mstore","nativeSrc":"10467:6:33","nodeType":"YulIdentifier","src":"10467:6:33"},"nativeSrc":"10467:34:33","nodeType":"YulFunctionCall","src":"10467:34:33"},"nativeSrc":"10467:34:33","nodeType":"YulExpressionStatement","src":"10467:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"10139:368:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10249:9:33","nodeType":"YulTypedName","src":"10249:9:33","type":""},{"name":"value2","nativeSrc":"10260:6:33","nodeType":"YulTypedName","src":"10260:6:33","type":""},{"name":"value1","nativeSrc":"10268:6:33","nodeType":"YulTypedName","src":"10268:6:33","type":""},{"name":"value0","nativeSrc":"10276:6:33","nodeType":"YulTypedName","src":"10276:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10287:4:33","nodeType":"YulTypedName","src":"10287:4:33","type":""}],"src":"10139:368:33"},{"body":{"nativeSrc":"10544:152:33","nodeType":"YulBlock","src":"10544:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10561:1:33","nodeType":"YulLiteral","src":"10561:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10564:77:33","nodeType":"YulLiteral","src":"10564:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10554:6:33","nodeType":"YulIdentifier","src":"10554:6:33"},"nativeSrc":"10554:88:33","nodeType":"YulFunctionCall","src":"10554:88:33"},"nativeSrc":"10554:88:33","nodeType":"YulExpressionStatement","src":"10554:88:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10658:1:33","nodeType":"YulLiteral","src":"10658:1:33","type":"","value":"4"},{"kind":"number","nativeSrc":"10661:4:33","nodeType":"YulLiteral","src":"10661:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"10651:6:33","nodeType":"YulIdentifier","src":"10651:6:33"},"nativeSrc":"10651:15:33","nodeType":"YulFunctionCall","src":"10651:15:33"},"nativeSrc":"10651:15:33","nodeType":"YulExpressionStatement","src":"10651:15:33"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10682:1:33","nodeType":"YulLiteral","src":"10682:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10685:4:33","nodeType":"YulLiteral","src":"10685:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10675:6:33","nodeType":"YulIdentifier","src":"10675:6:33"},"nativeSrc":"10675:15:33","nodeType":"YulFunctionCall","src":"10675:15:33"},"nativeSrc":"10675:15:33","nodeType":"YulExpressionStatement","src":"10675:15:33"}]},"name":"panic_error_0x32","nativeSrc":"10512:184:33","nodeType":"YulFunctionDefinition","src":"10512:184:33"},{"body":{"nativeSrc":"10786:177:33","nodeType":"YulBlock","src":"10786:177:33","statements":[{"body":{"nativeSrc":"10832:16:33","nodeType":"YulBlock","src":"10832:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10841:1:33","nodeType":"YulLiteral","src":"10841:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"10844:1:33","nodeType":"YulLiteral","src":"10844:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10834:6:33","nodeType":"YulIdentifier","src":"10834:6:33"},"nativeSrc":"10834:12:33","nodeType":"YulFunctionCall","src":"10834:12:33"},"nativeSrc":"10834:12:33","nodeType":"YulExpressionStatement","src":"10834:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10807:7:33","nodeType":"YulIdentifier","src":"10807:7:33"},{"name":"headStart","nativeSrc":"10816:9:33","nodeType":"YulIdentifier","src":"10816:9:33"}],"functionName":{"name":"sub","nativeSrc":"10803:3:33","nodeType":"YulIdentifier","src":"10803:3:33"},"nativeSrc":"10803:23:33","nodeType":"YulFunctionCall","src":"10803:23:33"},{"kind":"number","nativeSrc":"10828:2:33","nodeType":"YulLiteral","src":"10828:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10799:3:33","nodeType":"YulIdentifier","src":"10799:3:33"},"nativeSrc":"10799:32:33","nodeType":"YulFunctionCall","src":"10799:32:33"},"nativeSrc":"10796:52:33","nodeType":"YulIf","src":"10796:52:33"},{"nativeSrc":"10857:36:33","nodeType":"YulVariableDeclaration","src":"10857:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"10883:9:33","nodeType":"YulIdentifier","src":"10883:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"10870:12:33","nodeType":"YulIdentifier","src":"10870:12:33"},"nativeSrc":"10870:23:33","nodeType":"YulFunctionCall","src":"10870:23:33"},"variables":[{"name":"value","nativeSrc":"10861:5:33","nodeType":"YulTypedName","src":"10861:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10927:5:33","nodeType":"YulIdentifier","src":"10927:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10902:24:33","nodeType":"YulIdentifier","src":"10902:24:33"},"nativeSrc":"10902:31:33","nodeType":"YulFunctionCall","src":"10902:31:33"},"nativeSrc":"10902:31:33","nodeType":"YulExpressionStatement","src":"10902:31:33"},{"nativeSrc":"10942:15:33","nodeType":"YulAssignment","src":"10942:15:33","value":{"name":"value","nativeSrc":"10952:5:33","nodeType":"YulIdentifier","src":"10952:5:33"},"variableNames":[{"name":"value0","nativeSrc":"10942:6:33","nodeType":"YulIdentifier","src":"10942:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1232","nativeSrc":"10701:262:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10752:9:33","nodeType":"YulTypedName","src":"10752:9:33","type":""},{"name":"dataEnd","nativeSrc":"10763:7:33","nodeType":"YulTypedName","src":"10763:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10775:6:33","nodeType":"YulTypedName","src":"10775:6:33","type":""}],"src":"10701:262:33"},{"body":{"nativeSrc":"11153:206:33","nodeType":"YulBlock","src":"11153:206:33","statements":[{"nativeSrc":"11163:27:33","nodeType":"YulAssignment","src":"11163:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11175:9:33","nodeType":"YulIdentifier","src":"11175:9:33"},{"kind":"number","nativeSrc":"11186:3:33","nodeType":"YulLiteral","src":"11186:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11171:3:33","nodeType":"YulIdentifier","src":"11171:3:33"},"nativeSrc":"11171:19:33","nodeType":"YulFunctionCall","src":"11171:19:33"},"variableNames":[{"name":"tail","nativeSrc":"11163:4:33","nodeType":"YulIdentifier","src":"11163:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11206:9:33","nodeType":"YulIdentifier","src":"11206:9:33"},{"name":"value0","nativeSrc":"11217:6:33","nodeType":"YulIdentifier","src":"11217:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11199:6:33","nodeType":"YulIdentifier","src":"11199:6:33"},"nativeSrc":"11199:25:33","nodeType":"YulFunctionCall","src":"11199:25:33"},"nativeSrc":"11199:25:33","nodeType":"YulExpressionStatement","src":"11199:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11244:9:33","nodeType":"YulIdentifier","src":"11244:9:33"},{"kind":"number","nativeSrc":"11255:2:33","nodeType":"YulLiteral","src":"11255:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11240:3:33","nodeType":"YulIdentifier","src":"11240:3:33"},"nativeSrc":"11240:18:33","nodeType":"YulFunctionCall","src":"11240:18:33"},{"name":"value1","nativeSrc":"11260:6:33","nodeType":"YulIdentifier","src":"11260:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11233:6:33","nodeType":"YulIdentifier","src":"11233:6:33"},"nativeSrc":"11233:34:33","nodeType":"YulFunctionCall","src":"11233:34:33"},"nativeSrc":"11233:34:33","nodeType":"YulExpressionStatement","src":"11233:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11287:9:33","nodeType":"YulIdentifier","src":"11287:9:33"},{"kind":"number","nativeSrc":"11298:2:33","nodeType":"YulLiteral","src":"11298:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11283:3:33","nodeType":"YulIdentifier","src":"11283:3:33"},"nativeSrc":"11283:18:33","nodeType":"YulFunctionCall","src":"11283:18:33"},{"name":"value2","nativeSrc":"11303:6:33","nodeType":"YulIdentifier","src":"11303:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11276:6:33","nodeType":"YulIdentifier","src":"11276:6:33"},"nativeSrc":"11276:34:33","nodeType":"YulFunctionCall","src":"11276:34:33"},"nativeSrc":"11276:34:33","nodeType":"YulExpressionStatement","src":"11276:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11330:9:33","nodeType":"YulIdentifier","src":"11330:9:33"},{"kind":"number","nativeSrc":"11341:2:33","nodeType":"YulLiteral","src":"11341:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11326:3:33","nodeType":"YulIdentifier","src":"11326:3:33"},"nativeSrc":"11326:18:33","nodeType":"YulFunctionCall","src":"11326:18:33"},{"name":"value3","nativeSrc":"11346:6:33","nodeType":"YulIdentifier","src":"11346:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11319:6:33","nodeType":"YulIdentifier","src":"11319:6:33"},"nativeSrc":"11319:34:33","nodeType":"YulFunctionCall","src":"11319:34:33"},"nativeSrc":"11319:34:33","nodeType":"YulExpressionStatement","src":"11319:34:33"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10968:391:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11098:9:33","nodeType":"YulTypedName","src":"11098:9:33","type":""},{"name":"value3","nativeSrc":"11109:6:33","nodeType":"YulTypedName","src":"11109:6:33","type":""},{"name":"value2","nativeSrc":"11117:6:33","nodeType":"YulTypedName","src":"11117:6:33","type":""},{"name":"value1","nativeSrc":"11125:6:33","nodeType":"YulTypedName","src":"11125:6:33","type":""},{"name":"value0","nativeSrc":"11133:6:33","nodeType":"YulTypedName","src":"11133:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11144:4:33","nodeType":"YulTypedName","src":"11144:4:33","type":""}],"src":"10968:391:33"},{"body":{"nativeSrc":"11450:177:33","nodeType":"YulBlock","src":"11450:177:33","statements":[{"body":{"nativeSrc":"11496:16:33","nodeType":"YulBlock","src":"11496:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11505:1:33","nodeType":"YulLiteral","src":"11505:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"11508:1:33","nodeType":"YulLiteral","src":"11508:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11498:6:33","nodeType":"YulIdentifier","src":"11498:6:33"},"nativeSrc":"11498:12:33","nodeType":"YulFunctionCall","src":"11498:12:33"},"nativeSrc":"11498:12:33","nodeType":"YulExpressionStatement","src":"11498:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11471:7:33","nodeType":"YulIdentifier","src":"11471:7:33"},{"name":"headStart","nativeSrc":"11480:9:33","nodeType":"YulIdentifier","src":"11480:9:33"}],"functionName":{"name":"sub","nativeSrc":"11467:3:33","nodeType":"YulIdentifier","src":"11467:3:33"},"nativeSrc":"11467:23:33","nodeType":"YulFunctionCall","src":"11467:23:33"},{"kind":"number","nativeSrc":"11492:2:33","nodeType":"YulLiteral","src":"11492:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11463:3:33","nodeType":"YulIdentifier","src":"11463:3:33"},"nativeSrc":"11463:32:33","nodeType":"YulFunctionCall","src":"11463:32:33"},"nativeSrc":"11460:52:33","nodeType":"YulIf","src":"11460:52:33"},{"nativeSrc":"11521:36:33","nodeType":"YulVariableDeclaration","src":"11521:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11547:9:33","nodeType":"YulIdentifier","src":"11547:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"11534:12:33","nodeType":"YulIdentifier","src":"11534:12:33"},"nativeSrc":"11534:23:33","nodeType":"YulFunctionCall","src":"11534:23:33"},"variables":[{"name":"value","nativeSrc":"11525:5:33","nodeType":"YulTypedName","src":"11525:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11591:5:33","nodeType":"YulIdentifier","src":"11591:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11566:24:33","nodeType":"YulIdentifier","src":"11566:24:33"},"nativeSrc":"11566:31:33","nodeType":"YulFunctionCall","src":"11566:31:33"},"nativeSrc":"11566:31:33","nodeType":"YulExpressionStatement","src":"11566:31:33"},{"nativeSrc":"11606:15:33","nodeType":"YulAssignment","src":"11606:15:33","value":{"name":"value","nativeSrc":"11616:5:33","nodeType":"YulIdentifier","src":"11616:5:33"},"variableNames":[{"name":"value0","nativeSrc":"11606:6:33","nodeType":"YulIdentifier","src":"11606:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1151","nativeSrc":"11364:263:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11416:9:33","nodeType":"YulTypedName","src":"11416:9:33","type":""},{"name":"dataEnd","nativeSrc":"11427:7:33","nodeType":"YulTypedName","src":"11427:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11439:6:33","nodeType":"YulTypedName","src":"11439:6:33","type":""}],"src":"11364:263:33"},{"body":{"nativeSrc":"11789:241:33","nodeType":"YulBlock","src":"11789:241:33","statements":[{"nativeSrc":"11799:26:33","nodeType":"YulAssignment","src":"11799:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"11811:9:33","nodeType":"YulIdentifier","src":"11811:9:33"},{"kind":"number","nativeSrc":"11822:2:33","nodeType":"YulLiteral","src":"11822:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11807:3:33","nodeType":"YulIdentifier","src":"11807:3:33"},"nativeSrc":"11807:18:33","nodeType":"YulFunctionCall","src":"11807:18:33"},"variableNames":[{"name":"tail","nativeSrc":"11799:4:33","nodeType":"YulIdentifier","src":"11799:4:33"}]},{"nativeSrc":"11834:52:33","nodeType":"YulVariableDeclaration","src":"11834:52:33","value":{"kind":"number","nativeSrc":"11844:42:33","nodeType":"YulLiteral","src":"11844:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"11838:2:33","nodeType":"YulTypedName","src":"11838:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11902:9:33","nodeType":"YulIdentifier","src":"11902:9:33"},{"arguments":[{"name":"value0","nativeSrc":"11917:6:33","nodeType":"YulIdentifier","src":"11917:6:33"},{"name":"_1","nativeSrc":"11925:2:33","nodeType":"YulIdentifier","src":"11925:2:33"}],"functionName":{"name":"and","nativeSrc":"11913:3:33","nodeType":"YulIdentifier","src":"11913:3:33"},"nativeSrc":"11913:15:33","nodeType":"YulFunctionCall","src":"11913:15:33"}],"functionName":{"name":"mstore","nativeSrc":"11895:6:33","nodeType":"YulIdentifier","src":"11895:6:33"},"nativeSrc":"11895:34:33","nodeType":"YulFunctionCall","src":"11895:34:33"},"nativeSrc":"11895:34:33","nodeType":"YulExpressionStatement","src":"11895:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11949:9:33","nodeType":"YulIdentifier","src":"11949:9:33"},{"kind":"number","nativeSrc":"11960:2:33","nodeType":"YulLiteral","src":"11960:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11945:3:33","nodeType":"YulIdentifier","src":"11945:3:33"},"nativeSrc":"11945:18:33","nodeType":"YulFunctionCall","src":"11945:18:33"},{"arguments":[{"name":"value1","nativeSrc":"11969:6:33","nodeType":"YulIdentifier","src":"11969:6:33"},{"name":"_1","nativeSrc":"11977:2:33","nodeType":"YulIdentifier","src":"11977:2:33"}],"functionName":{"name":"and","nativeSrc":"11965:3:33","nodeType":"YulIdentifier","src":"11965:3:33"},"nativeSrc":"11965:15:33","nodeType":"YulFunctionCall","src":"11965:15:33"}],"functionName":{"name":"mstore","nativeSrc":"11938:6:33","nodeType":"YulIdentifier","src":"11938:6:33"},"nativeSrc":"11938:43:33","nodeType":"YulFunctionCall","src":"11938:43:33"},"nativeSrc":"11938:43:33","nodeType":"YulExpressionStatement","src":"11938:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12001:9:33","nodeType":"YulIdentifier","src":"12001:9:33"},{"kind":"number","nativeSrc":"12012:2:33","nodeType":"YulLiteral","src":"12012:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11997:3:33","nodeType":"YulIdentifier","src":"11997:3:33"},"nativeSrc":"11997:18:33","nodeType":"YulFunctionCall","src":"11997:18:33"},{"name":"value2","nativeSrc":"12017:6:33","nodeType":"YulIdentifier","src":"12017:6:33"}],"functionName":{"name":"mstore","nativeSrc":"11990:6:33","nodeType":"YulIdentifier","src":"11990:6:33"},"nativeSrc":"11990:34:33","nodeType":"YulFunctionCall","src":"11990:34:33"},"nativeSrc":"11990:34:33","nodeType":"YulExpressionStatement","src":"11990:34:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"11632:398:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11742:9:33","nodeType":"YulTypedName","src":"11742:9:33","type":""},{"name":"value2","nativeSrc":"11753:6:33","nodeType":"YulTypedName","src":"11753:6:33","type":""},{"name":"value1","nativeSrc":"11761:6:33","nodeType":"YulTypedName","src":"11761:6:33","type":""},{"name":"value0","nativeSrc":"11769:6:33","nodeType":"YulTypedName","src":"11769:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11780:4:33","nodeType":"YulTypedName","src":"11780:4:33","type":""}],"src":"11632:398:33"},{"body":{"nativeSrc":"12113:177:33","nodeType":"YulBlock","src":"12113:177:33","statements":[{"body":{"nativeSrc":"12159:16:33","nodeType":"YulBlock","src":"12159:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12168:1:33","nodeType":"YulLiteral","src":"12168:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"12171:1:33","nodeType":"YulLiteral","src":"12171:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12161:6:33","nodeType":"YulIdentifier","src":"12161:6:33"},"nativeSrc":"12161:12:33","nodeType":"YulFunctionCall","src":"12161:12:33"},"nativeSrc":"12161:12:33","nodeType":"YulExpressionStatement","src":"12161:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12134:7:33","nodeType":"YulIdentifier","src":"12134:7:33"},{"name":"headStart","nativeSrc":"12143:9:33","nodeType":"YulIdentifier","src":"12143:9:33"}],"functionName":{"name":"sub","nativeSrc":"12130:3:33","nodeType":"YulIdentifier","src":"12130:3:33"},"nativeSrc":"12130:23:33","nodeType":"YulFunctionCall","src":"12130:23:33"},{"kind":"number","nativeSrc":"12155:2:33","nodeType":"YulLiteral","src":"12155:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12126:3:33","nodeType":"YulIdentifier","src":"12126:3:33"},"nativeSrc":"12126:32:33","nodeType":"YulFunctionCall","src":"12126:32:33"},"nativeSrc":"12123:52:33","nodeType":"YulIf","src":"12123:52:33"},{"nativeSrc":"12184:36:33","nodeType":"YulVariableDeclaration","src":"12184:36:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12210:9:33","nodeType":"YulIdentifier","src":"12210:9:33"}],"functionName":{"name":"calldataload","nativeSrc":"12197:12:33","nodeType":"YulIdentifier","src":"12197:12:33"},"nativeSrc":"12197:23:33","nodeType":"YulFunctionCall","src":"12197:23:33"},"variables":[{"name":"value","nativeSrc":"12188:5:33","nodeType":"YulTypedName","src":"12188:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12254:5:33","nodeType":"YulIdentifier","src":"12254:5:33"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12229:24:33","nodeType":"YulIdentifier","src":"12229:24:33"},"nativeSrc":"12229:31:33","nodeType":"YulFunctionCall","src":"12229:31:33"},"nativeSrc":"12229:31:33","nodeType":"YulExpressionStatement","src":"12229:31:33"},{"nativeSrc":"12269:15:33","nodeType":"YulAssignment","src":"12269:15:33","value":{"name":"value","nativeSrc":"12279:5:33","nodeType":"YulIdentifier","src":"12279:5:33"},"variableNames":[{"name":"value0","nativeSrc":"12269:6:33","nodeType":"YulIdentifier","src":"12269:6:33"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"12035:255:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12079:9:33","nodeType":"YulTypedName","src":"12079:9:33","type":""},{"name":"dataEnd","nativeSrc":"12090:7:33","nodeType":"YulTypedName","src":"12090:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12102:6:33","nodeType":"YulTypedName","src":"12102:6:33","type":""}],"src":"12035:255:33"},{"body":{"nativeSrc":"12424:168:33","nodeType":"YulBlock","src":"12424:168:33","statements":[{"nativeSrc":"12434:26:33","nodeType":"YulAssignment","src":"12434:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12446:9:33","nodeType":"YulIdentifier","src":"12446:9:33"},{"kind":"number","nativeSrc":"12457:2:33","nodeType":"YulLiteral","src":"12457:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12442:3:33","nodeType":"YulIdentifier","src":"12442:3:33"},"nativeSrc":"12442:18:33","nodeType":"YulFunctionCall","src":"12442:18:33"},"variableNames":[{"name":"tail","nativeSrc":"12434:4:33","nodeType":"YulIdentifier","src":"12434:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12476:9:33","nodeType":"YulIdentifier","src":"12476:9:33"},{"arguments":[{"name":"value0","nativeSrc":"12491:6:33","nodeType":"YulIdentifier","src":"12491:6:33"},{"kind":"number","nativeSrc":"12499:42:33","nodeType":"YulLiteral","src":"12499:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12487:3:33","nodeType":"YulIdentifier","src":"12487:3:33"},"nativeSrc":"12487:55:33","nodeType":"YulFunctionCall","src":"12487:55:33"}],"functionName":{"name":"mstore","nativeSrc":"12469:6:33","nodeType":"YulIdentifier","src":"12469:6:33"},"nativeSrc":"12469:74:33","nodeType":"YulFunctionCall","src":"12469:74:33"},"nativeSrc":"12469:74:33","nodeType":"YulExpressionStatement","src":"12469:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12563:9:33","nodeType":"YulIdentifier","src":"12563:9:33"},{"kind":"number","nativeSrc":"12574:2:33","nodeType":"YulLiteral","src":"12574:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12559:3:33","nodeType":"YulIdentifier","src":"12559:3:33"},"nativeSrc":"12559:18:33","nodeType":"YulFunctionCall","src":"12559:18:33"},{"name":"value1","nativeSrc":"12579:6:33","nodeType":"YulIdentifier","src":"12579:6:33"}],"functionName":{"name":"mstore","nativeSrc":"12552:6:33","nodeType":"YulIdentifier","src":"12552:6:33"},"nativeSrc":"12552:34:33","nodeType":"YulFunctionCall","src":"12552:34:33"},"nativeSrc":"12552:34:33","nodeType":"YulExpressionStatement","src":"12552:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"12295:297:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12385:9:33","nodeType":"YulTypedName","src":"12385:9:33","type":""},{"name":"value1","nativeSrc":"12396:6:33","nodeType":"YulTypedName","src":"12396:6:33","type":""},{"name":"value0","nativeSrc":"12404:6:33","nodeType":"YulTypedName","src":"12404:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12415:4:33","nodeType":"YulTypedName","src":"12415:4:33","type":""}],"src":"12295:297:33"},{"body":{"nativeSrc":"12771:179:33","nodeType":"YulBlock","src":"12771:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12788:9:33","nodeType":"YulIdentifier","src":"12788:9:33"},{"kind":"number","nativeSrc":"12799:2:33","nodeType":"YulLiteral","src":"12799:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12781:6:33","nodeType":"YulIdentifier","src":"12781:6:33"},"nativeSrc":"12781:21:33","nodeType":"YulFunctionCall","src":"12781:21:33"},"nativeSrc":"12781:21:33","nodeType":"YulExpressionStatement","src":"12781:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12822:9:33","nodeType":"YulIdentifier","src":"12822:9:33"},{"kind":"number","nativeSrc":"12833:2:33","nodeType":"YulLiteral","src":"12833:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12818:3:33","nodeType":"YulIdentifier","src":"12818:3:33"},"nativeSrc":"12818:18:33","nodeType":"YulFunctionCall","src":"12818:18:33"},{"kind":"number","nativeSrc":"12838:2:33","nodeType":"YulLiteral","src":"12838:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"12811:6:33","nodeType":"YulIdentifier","src":"12811:6:33"},"nativeSrc":"12811:30:33","nodeType":"YulFunctionCall","src":"12811:30:33"},"nativeSrc":"12811:30:33","nodeType":"YulExpressionStatement","src":"12811:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12861:9:33","nodeType":"YulIdentifier","src":"12861:9:33"},{"kind":"number","nativeSrc":"12872:2:33","nodeType":"YulLiteral","src":"12872:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12857:3:33","nodeType":"YulIdentifier","src":"12857:3:33"},"nativeSrc":"12857:18:33","nodeType":"YulFunctionCall","src":"12857:18:33"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"12877:31:33","nodeType":"YulLiteral","src":"12877:31:33","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"12850:6:33","nodeType":"YulIdentifier","src":"12850:6:33"},"nativeSrc":"12850:59:33","nodeType":"YulFunctionCall","src":"12850:59:33"},"nativeSrc":"12850:59:33","nodeType":"YulExpressionStatement","src":"12850:59:33"},{"nativeSrc":"12918:26:33","nodeType":"YulAssignment","src":"12918:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"12930:9:33","nodeType":"YulIdentifier","src":"12930:9:33"},{"kind":"number","nativeSrc":"12941:2:33","nodeType":"YulLiteral","src":"12941:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12926:3:33","nodeType":"YulIdentifier","src":"12926:3:33"},"nativeSrc":"12926:18:33","nodeType":"YulFunctionCall","src":"12926:18:33"},"variableNames":[{"name":"tail","nativeSrc":"12918:4:33","nodeType":"YulIdentifier","src":"12918:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12597:353:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12748:9:33","nodeType":"YulTypedName","src":"12748:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12762:4:33","nodeType":"YulTypedName","src":"12762:4:33","type":""}],"src":"12597:353:33"},{"body":{"nativeSrc":"13146:14:33","nodeType":"YulBlock","src":"13146:14:33","statements":[{"nativeSrc":"13148:10:33","nodeType":"YulAssignment","src":"13148:10:33","value":{"name":"pos","nativeSrc":"13155:3:33","nodeType":"YulIdentifier","src":"13155:3:33"},"variableNames":[{"name":"end","nativeSrc":"13148:3:33","nodeType":"YulIdentifier","src":"13148:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"12955:205:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13130:3:33","nodeType":"YulTypedName","src":"13130:3:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13138:3:33","nodeType":"YulTypedName","src":"13138:3:33","type":""}],"src":"12955:205:33"},{"body":{"nativeSrc":"13339:248:33","nodeType":"YulBlock","src":"13339:248:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13356:9:33","nodeType":"YulIdentifier","src":"13356:9:33"},{"kind":"number","nativeSrc":"13367:2:33","nodeType":"YulLiteral","src":"13367:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13349:6:33","nodeType":"YulIdentifier","src":"13349:6:33"},"nativeSrc":"13349:21:33","nodeType":"YulFunctionCall","src":"13349:21:33"},"nativeSrc":"13349:21:33","nodeType":"YulExpressionStatement","src":"13349:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13390:9:33","nodeType":"YulIdentifier","src":"13390:9:33"},{"kind":"number","nativeSrc":"13401:2:33","nodeType":"YulLiteral","src":"13401:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13386:3:33","nodeType":"YulIdentifier","src":"13386:3:33"},"nativeSrc":"13386:18:33","nodeType":"YulFunctionCall","src":"13386:18:33"},{"kind":"number","nativeSrc":"13406:2:33","nodeType":"YulLiteral","src":"13406:2:33","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"13379:6:33","nodeType":"YulIdentifier","src":"13379:6:33"},"nativeSrc":"13379:30:33","nodeType":"YulFunctionCall","src":"13379:30:33"},"nativeSrc":"13379:30:33","nodeType":"YulExpressionStatement","src":"13379:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13429:9:33","nodeType":"YulIdentifier","src":"13429:9:33"},{"kind":"number","nativeSrc":"13440:2:33","nodeType":"YulLiteral","src":"13440:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13425:3:33","nodeType":"YulIdentifier","src":"13425:3:33"},"nativeSrc":"13425:18:33","nodeType":"YulFunctionCall","src":"13425:18:33"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"13445:34:33","nodeType":"YulLiteral","src":"13445:34:33","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"13418:6:33","nodeType":"YulIdentifier","src":"13418:6:33"},"nativeSrc":"13418:62:33","nodeType":"YulFunctionCall","src":"13418:62:33"},"nativeSrc":"13418:62:33","nodeType":"YulExpressionStatement","src":"13418:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13500:9:33","nodeType":"YulIdentifier","src":"13500:9:33"},{"kind":"number","nativeSrc":"13511:2:33","nodeType":"YulLiteral","src":"13511:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13496:3:33","nodeType":"YulIdentifier","src":"13496:3:33"},"nativeSrc":"13496:18:33","nodeType":"YulFunctionCall","src":"13496:18:33"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"13516:28:33","nodeType":"YulLiteral","src":"13516:28:33","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"13489:6:33","nodeType":"YulIdentifier","src":"13489:6:33"},"nativeSrc":"13489:56:33","nodeType":"YulFunctionCall","src":"13489:56:33"},"nativeSrc":"13489:56:33","nodeType":"YulExpressionStatement","src":"13489:56:33"},{"nativeSrc":"13554:27:33","nodeType":"YulAssignment","src":"13554:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"13566:9:33","nodeType":"YulIdentifier","src":"13566:9:33"},{"kind":"number","nativeSrc":"13577:3:33","nodeType":"YulLiteral","src":"13577:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13562:3:33","nodeType":"YulIdentifier","src":"13562:3:33"},"nativeSrc":"13562:19:33","nodeType":"YulFunctionCall","src":"13562:19:33"},"variableNames":[{"name":"tail","nativeSrc":"13554:4:33","nodeType":"YulIdentifier","src":"13554:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13165:422:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13316:9:33","nodeType":"YulTypedName","src":"13316:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13330:4:33","nodeType":"YulTypedName","src":"13330:4:33","type":""}],"src":"13165:422:33"},{"body":{"nativeSrc":"13721:198:33","nodeType":"YulBlock","src":"13721:198:33","statements":[{"nativeSrc":"13731:26:33","nodeType":"YulAssignment","src":"13731:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"13743:9:33","nodeType":"YulIdentifier","src":"13743:9:33"},{"kind":"number","nativeSrc":"13754:2:33","nodeType":"YulLiteral","src":"13754:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13739:3:33","nodeType":"YulIdentifier","src":"13739:3:33"},"nativeSrc":"13739:18:33","nodeType":"YulFunctionCall","src":"13739:18:33"},"variableNames":[{"name":"tail","nativeSrc":"13731:4:33","nodeType":"YulIdentifier","src":"13731:4:33"}]},{"nativeSrc":"13766:52:33","nodeType":"YulVariableDeclaration","src":"13766:52:33","value":{"kind":"number","nativeSrc":"13776:42:33","nodeType":"YulLiteral","src":"13776:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"13770:2:33","nodeType":"YulTypedName","src":"13770:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13834:9:33","nodeType":"YulIdentifier","src":"13834:9:33"},{"arguments":[{"name":"value0","nativeSrc":"13849:6:33","nodeType":"YulIdentifier","src":"13849:6:33"},{"name":"_1","nativeSrc":"13857:2:33","nodeType":"YulIdentifier","src":"13857:2:33"}],"functionName":{"name":"and","nativeSrc":"13845:3:33","nodeType":"YulIdentifier","src":"13845:3:33"},"nativeSrc":"13845:15:33","nodeType":"YulFunctionCall","src":"13845:15:33"}],"functionName":{"name":"mstore","nativeSrc":"13827:6:33","nodeType":"YulIdentifier","src":"13827:6:33"},"nativeSrc":"13827:34:33","nodeType":"YulFunctionCall","src":"13827:34:33"},"nativeSrc":"13827:34:33","nodeType":"YulExpressionStatement","src":"13827:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13881:9:33","nodeType":"YulIdentifier","src":"13881:9:33"},{"kind":"number","nativeSrc":"13892:2:33","nodeType":"YulLiteral","src":"13892:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13877:3:33","nodeType":"YulIdentifier","src":"13877:3:33"},"nativeSrc":"13877:18:33","nodeType":"YulFunctionCall","src":"13877:18:33"},{"arguments":[{"name":"value1","nativeSrc":"13901:6:33","nodeType":"YulIdentifier","src":"13901:6:33"},{"name":"_1","nativeSrc":"13909:2:33","nodeType":"YulIdentifier","src":"13909:2:33"}],"functionName":{"name":"and","nativeSrc":"13897:3:33","nodeType":"YulIdentifier","src":"13897:3:33"},"nativeSrc":"13897:15:33","nodeType":"YulFunctionCall","src":"13897:15:33"}],"functionName":{"name":"mstore","nativeSrc":"13870:6:33","nodeType":"YulIdentifier","src":"13870:6:33"},"nativeSrc":"13870:43:33","nodeType":"YulFunctionCall","src":"13870:43:33"},"nativeSrc":"13870:43:33","nodeType":"YulExpressionStatement","src":"13870:43:33"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"13592:327:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13682:9:33","nodeType":"YulTypedName","src":"13682:9:33","type":""},{"name":"value1","nativeSrc":"13693:6:33","nodeType":"YulTypedName","src":"13693:6:33","type":""},{"name":"value0","nativeSrc":"13701:6:33","nodeType":"YulTypedName","src":"13701:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13712:4:33","nodeType":"YulTypedName","src":"13712:4:33","type":""}],"src":"13592:327:33"},{"body":{"nativeSrc":"14002:199:33","nodeType":"YulBlock","src":"14002:199:33","statements":[{"body":{"nativeSrc":"14048:16:33","nodeType":"YulBlock","src":"14048:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14057:1:33","nodeType":"YulLiteral","src":"14057:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"14060:1:33","nodeType":"YulLiteral","src":"14060:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14050:6:33","nodeType":"YulIdentifier","src":"14050:6:33"},"nativeSrc":"14050:12:33","nodeType":"YulFunctionCall","src":"14050:12:33"},"nativeSrc":"14050:12:33","nodeType":"YulExpressionStatement","src":"14050:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14023:7:33","nodeType":"YulIdentifier","src":"14023:7:33"},{"name":"headStart","nativeSrc":"14032:9:33","nodeType":"YulIdentifier","src":"14032:9:33"}],"functionName":{"name":"sub","nativeSrc":"14019:3:33","nodeType":"YulIdentifier","src":"14019:3:33"},"nativeSrc":"14019:23:33","nodeType":"YulFunctionCall","src":"14019:23:33"},{"kind":"number","nativeSrc":"14044:2:33","nodeType":"YulLiteral","src":"14044:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14015:3:33","nodeType":"YulIdentifier","src":"14015:3:33"},"nativeSrc":"14015:32:33","nodeType":"YulFunctionCall","src":"14015:32:33"},"nativeSrc":"14012:52:33","nodeType":"YulIf","src":"14012:52:33"},{"nativeSrc":"14073:29:33","nodeType":"YulVariableDeclaration","src":"14073:29:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14092:9:33","nodeType":"YulIdentifier","src":"14092:9:33"}],"functionName":{"name":"mload","nativeSrc":"14086:5:33","nodeType":"YulIdentifier","src":"14086:5:33"},"nativeSrc":"14086:16:33","nodeType":"YulFunctionCall","src":"14086:16:33"},"variables":[{"name":"value","nativeSrc":"14077:5:33","nodeType":"YulTypedName","src":"14077:5:33","type":""}]},{"body":{"nativeSrc":"14155:16:33","nodeType":"YulBlock","src":"14155:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14164:1:33","nodeType":"YulLiteral","src":"14164:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"14167:1:33","nodeType":"YulLiteral","src":"14167:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14157:6:33","nodeType":"YulIdentifier","src":"14157:6:33"},"nativeSrc":"14157:12:33","nodeType":"YulFunctionCall","src":"14157:12:33"},"nativeSrc":"14157:12:33","nodeType":"YulExpressionStatement","src":"14157:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14124:5:33","nodeType":"YulIdentifier","src":"14124:5:33"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14145:5:33","nodeType":"YulIdentifier","src":"14145:5:33"}],"functionName":{"name":"iszero","nativeSrc":"14138:6:33","nodeType":"YulIdentifier","src":"14138:6:33"},"nativeSrc":"14138:13:33","nodeType":"YulFunctionCall","src":"14138:13:33"}],"functionName":{"name":"iszero","nativeSrc":"14131:6:33","nodeType":"YulIdentifier","src":"14131:6:33"},"nativeSrc":"14131:21:33","nodeType":"YulFunctionCall","src":"14131:21:33"}],"functionName":{"name":"eq","nativeSrc":"14121:2:33","nodeType":"YulIdentifier","src":"14121:2:33"},"nativeSrc":"14121:32:33","nodeType":"YulFunctionCall","src":"14121:32:33"}],"functionName":{"name":"iszero","nativeSrc":"14114:6:33","nodeType":"YulIdentifier","src":"14114:6:33"},"nativeSrc":"14114:40:33","nodeType":"YulFunctionCall","src":"14114:40:33"},"nativeSrc":"14111:60:33","nodeType":"YulIf","src":"14111:60:33"},{"nativeSrc":"14180:15:33","nodeType":"YulAssignment","src":"14180:15:33","value":{"name":"value","nativeSrc":"14190:5:33","nodeType":"YulIdentifier","src":"14190:5:33"},"variableNames":[{"name":"value0","nativeSrc":"14180:6:33","nodeType":"YulIdentifier","src":"14180:6:33"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"13924:277:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13968:9:33","nodeType":"YulTypedName","src":"13968:9:33","type":""},{"name":"dataEnd","nativeSrc":"13979:7:33","nodeType":"YulTypedName","src":"13979:7:33","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13991:6:33","nodeType":"YulTypedName","src":"13991:6:33","type":""}],"src":"13924:277:33"},{"body":{"nativeSrc":"14380:232:33","nodeType":"YulBlock","src":"14380:232:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14397:9:33","nodeType":"YulIdentifier","src":"14397:9:33"},{"kind":"number","nativeSrc":"14408:2:33","nodeType":"YulLiteral","src":"14408:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14390:6:33","nodeType":"YulIdentifier","src":"14390:6:33"},"nativeSrc":"14390:21:33","nodeType":"YulFunctionCall","src":"14390:21:33"},"nativeSrc":"14390:21:33","nodeType":"YulExpressionStatement","src":"14390:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14431:9:33","nodeType":"YulIdentifier","src":"14431:9:33"},{"kind":"number","nativeSrc":"14442:2:33","nodeType":"YulLiteral","src":"14442:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14427:3:33","nodeType":"YulIdentifier","src":"14427:3:33"},"nativeSrc":"14427:18:33","nodeType":"YulFunctionCall","src":"14427:18:33"},{"kind":"number","nativeSrc":"14447:2:33","nodeType":"YulLiteral","src":"14447:2:33","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"14420:6:33","nodeType":"YulIdentifier","src":"14420:6:33"},"nativeSrc":"14420:30:33","nodeType":"YulFunctionCall","src":"14420:30:33"},"nativeSrc":"14420:30:33","nodeType":"YulExpressionStatement","src":"14420:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14470:9:33","nodeType":"YulIdentifier","src":"14470:9:33"},{"kind":"number","nativeSrc":"14481:2:33","nodeType":"YulLiteral","src":"14481:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14466:3:33","nodeType":"YulIdentifier","src":"14466:3:33"},"nativeSrc":"14466:18:33","nodeType":"YulFunctionCall","src":"14466:18:33"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"14486:34:33","nodeType":"YulLiteral","src":"14486:34:33","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"14459:6:33","nodeType":"YulIdentifier","src":"14459:6:33"},"nativeSrc":"14459:62:33","nodeType":"YulFunctionCall","src":"14459:62:33"},"nativeSrc":"14459:62:33","nodeType":"YulExpressionStatement","src":"14459:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14541:9:33","nodeType":"YulIdentifier","src":"14541:9:33"},{"kind":"number","nativeSrc":"14552:2:33","nodeType":"YulLiteral","src":"14552:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14537:3:33","nodeType":"YulIdentifier","src":"14537:3:33"},"nativeSrc":"14537:18:33","nodeType":"YulFunctionCall","src":"14537:18:33"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"14557:12:33","nodeType":"YulLiteral","src":"14557:12:33","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"14530:6:33","nodeType":"YulIdentifier","src":"14530:6:33"},"nativeSrc":"14530:40:33","nodeType":"YulFunctionCall","src":"14530:40:33"},"nativeSrc":"14530:40:33","nodeType":"YulExpressionStatement","src":"14530:40:33"},{"nativeSrc":"14579:27:33","nodeType":"YulAssignment","src":"14579:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14591:9:33","nodeType":"YulIdentifier","src":"14591:9:33"},{"kind":"number","nativeSrc":"14602:3:33","nodeType":"YulLiteral","src":"14602:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14587:3:33","nodeType":"YulIdentifier","src":"14587:3:33"},"nativeSrc":"14587:19:33","nodeType":"YulFunctionCall","src":"14587:19:33"},"variableNames":[{"name":"tail","nativeSrc":"14579:4:33","nodeType":"YulIdentifier","src":"14579:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14206:406:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14357:9:33","nodeType":"YulTypedName","src":"14357:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14371:4:33","nodeType":"YulTypedName","src":"14371:4:33","type":""}],"src":"14206:406:33"},{"body":{"nativeSrc":"14791:228:33","nodeType":"YulBlock","src":"14791:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14808:9:33","nodeType":"YulIdentifier","src":"14808:9:33"},{"kind":"number","nativeSrc":"14819:2:33","nodeType":"YulLiteral","src":"14819:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14801:6:33","nodeType":"YulIdentifier","src":"14801:6:33"},"nativeSrc":"14801:21:33","nodeType":"YulFunctionCall","src":"14801:21:33"},"nativeSrc":"14801:21:33","nodeType":"YulExpressionStatement","src":"14801:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14842:9:33","nodeType":"YulIdentifier","src":"14842:9:33"},{"kind":"number","nativeSrc":"14853:2:33","nodeType":"YulLiteral","src":"14853:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14838:3:33","nodeType":"YulIdentifier","src":"14838:3:33"},"nativeSrc":"14838:18:33","nodeType":"YulFunctionCall","src":"14838:18:33"},{"kind":"number","nativeSrc":"14858:2:33","nodeType":"YulLiteral","src":"14858:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"14831:6:33","nodeType":"YulIdentifier","src":"14831:6:33"},"nativeSrc":"14831:30:33","nodeType":"YulFunctionCall","src":"14831:30:33"},"nativeSrc":"14831:30:33","nodeType":"YulExpressionStatement","src":"14831:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14881:9:33","nodeType":"YulIdentifier","src":"14881:9:33"},{"kind":"number","nativeSrc":"14892:2:33","nodeType":"YulLiteral","src":"14892:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14877:3:33","nodeType":"YulIdentifier","src":"14877:3:33"},"nativeSrc":"14877:18:33","nodeType":"YulFunctionCall","src":"14877:18:33"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"14897:34:33","nodeType":"YulLiteral","src":"14897:34:33","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"14870:6:33","nodeType":"YulIdentifier","src":"14870:6:33"},"nativeSrc":"14870:62:33","nodeType":"YulFunctionCall","src":"14870:62:33"},"nativeSrc":"14870:62:33","nodeType":"YulExpressionStatement","src":"14870:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14952:9:33","nodeType":"YulIdentifier","src":"14952:9:33"},{"kind":"number","nativeSrc":"14963:2:33","nodeType":"YulLiteral","src":"14963:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14948:3:33","nodeType":"YulIdentifier","src":"14948:3:33"},"nativeSrc":"14948:18:33","nodeType":"YulFunctionCall","src":"14948:18:33"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"14968:8:33","nodeType":"YulLiteral","src":"14968:8:33","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"14941:6:33","nodeType":"YulIdentifier","src":"14941:6:33"},"nativeSrc":"14941:36:33","nodeType":"YulFunctionCall","src":"14941:36:33"},"nativeSrc":"14941:36:33","nodeType":"YulExpressionStatement","src":"14941:36:33"},{"nativeSrc":"14986:27:33","nodeType":"YulAssignment","src":"14986:27:33","value":{"arguments":[{"name":"headStart","nativeSrc":"14998:9:33","nodeType":"YulIdentifier","src":"14998:9:33"},{"kind":"number","nativeSrc":"15009:3:33","nodeType":"YulLiteral","src":"15009:3:33","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14994:3:33","nodeType":"YulIdentifier","src":"14994:3:33"},"nativeSrc":"14994:19:33","nodeType":"YulFunctionCall","src":"14994:19:33"},"variableNames":[{"name":"tail","nativeSrc":"14986:4:33","nodeType":"YulIdentifier","src":"14986:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14617:402:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14768:9:33","nodeType":"YulTypedName","src":"14768:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14782:4:33","nodeType":"YulTypedName","src":"14782:4:33","type":""}],"src":"14617:402:33"},{"body":{"nativeSrc":"15090:184:33","nodeType":"YulBlock","src":"15090:184:33","statements":[{"nativeSrc":"15100:10:33","nodeType":"YulVariableDeclaration","src":"15100:10:33","value":{"kind":"number","nativeSrc":"15109:1:33","nodeType":"YulLiteral","src":"15109:1:33","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"15104:1:33","nodeType":"YulTypedName","src":"15104:1:33","type":""}]},{"body":{"nativeSrc":"15169:63:33","nodeType":"YulBlock","src":"15169:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"15194:3:33","nodeType":"YulIdentifier","src":"15194:3:33"},{"name":"i","nativeSrc":"15199:1:33","nodeType":"YulIdentifier","src":"15199:1:33"}],"functionName":{"name":"add","nativeSrc":"15190:3:33","nodeType":"YulIdentifier","src":"15190:3:33"},"nativeSrc":"15190:11:33","nodeType":"YulFunctionCall","src":"15190:11:33"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"15213:3:33","nodeType":"YulIdentifier","src":"15213:3:33"},{"name":"i","nativeSrc":"15218:1:33","nodeType":"YulIdentifier","src":"15218:1:33"}],"functionName":{"name":"add","nativeSrc":"15209:3:33","nodeType":"YulIdentifier","src":"15209:3:33"},"nativeSrc":"15209:11:33","nodeType":"YulFunctionCall","src":"15209:11:33"}],"functionName":{"name":"mload","nativeSrc":"15203:5:33","nodeType":"YulIdentifier","src":"15203:5:33"},"nativeSrc":"15203:18:33","nodeType":"YulFunctionCall","src":"15203:18:33"}],"functionName":{"name":"mstore","nativeSrc":"15183:6:33","nodeType":"YulIdentifier","src":"15183:6:33"},"nativeSrc":"15183:39:33","nodeType":"YulFunctionCall","src":"15183:39:33"},"nativeSrc":"15183:39:33","nodeType":"YulExpressionStatement","src":"15183:39:33"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"15130:1:33","nodeType":"YulIdentifier","src":"15130:1:33"},{"name":"length","nativeSrc":"15133:6:33","nodeType":"YulIdentifier","src":"15133:6:33"}],"functionName":{"name":"lt","nativeSrc":"15127:2:33","nodeType":"YulIdentifier","src":"15127:2:33"},"nativeSrc":"15127:13:33","nodeType":"YulFunctionCall","src":"15127:13:33"},"nativeSrc":"15119:113:33","nodeType":"YulForLoop","post":{"nativeSrc":"15141:19:33","nodeType":"YulBlock","src":"15141:19:33","statements":[{"nativeSrc":"15143:15:33","nodeType":"YulAssignment","src":"15143:15:33","value":{"arguments":[{"name":"i","nativeSrc":"15152:1:33","nodeType":"YulIdentifier","src":"15152:1:33"},{"kind":"number","nativeSrc":"15155:2:33","nodeType":"YulLiteral","src":"15155:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15148:3:33","nodeType":"YulIdentifier","src":"15148:3:33"},"nativeSrc":"15148:10:33","nodeType":"YulFunctionCall","src":"15148:10:33"},"variableNames":[{"name":"i","nativeSrc":"15143:1:33","nodeType":"YulIdentifier","src":"15143:1:33"}]}]},"pre":{"nativeSrc":"15123:3:33","nodeType":"YulBlock","src":"15123:3:33","statements":[]},"src":"15119:113:33"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"15252:3:33","nodeType":"YulIdentifier","src":"15252:3:33"},{"name":"length","nativeSrc":"15257:6:33","nodeType":"YulIdentifier","src":"15257:6:33"}],"functionName":{"name":"add","nativeSrc":"15248:3:33","nodeType":"YulIdentifier","src":"15248:3:33"},"nativeSrc":"15248:16:33","nodeType":"YulFunctionCall","src":"15248:16:33"},{"kind":"number","nativeSrc":"15266:1:33","nodeType":"YulLiteral","src":"15266:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"15241:6:33","nodeType":"YulIdentifier","src":"15241:6:33"},"nativeSrc":"15241:27:33","nodeType":"YulFunctionCall","src":"15241:27:33"},"nativeSrc":"15241:27:33","nodeType":"YulExpressionStatement","src":"15241:27:33"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"15024:250:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"15068:3:33","nodeType":"YulTypedName","src":"15068:3:33","type":""},{"name":"dst","nativeSrc":"15073:3:33","nodeType":"YulTypedName","src":"15073:3:33","type":""},{"name":"length","nativeSrc":"15078:6:33","nodeType":"YulTypedName","src":"15078:6:33","type":""}],"src":"15024:250:33"},{"body":{"nativeSrc":"15416:150:33","nodeType":"YulBlock","src":"15416:150:33","statements":[{"nativeSrc":"15426:27:33","nodeType":"YulVariableDeclaration","src":"15426:27:33","value":{"arguments":[{"name":"value0","nativeSrc":"15446:6:33","nodeType":"YulIdentifier","src":"15446:6:33"}],"functionName":{"name":"mload","nativeSrc":"15440:5:33","nodeType":"YulIdentifier","src":"15440:5:33"},"nativeSrc":"15440:13:33","nodeType":"YulFunctionCall","src":"15440:13:33"},"variables":[{"name":"length","nativeSrc":"15430:6:33","nodeType":"YulTypedName","src":"15430:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"15501:6:33","nodeType":"YulIdentifier","src":"15501:6:33"},{"kind":"number","nativeSrc":"15509:4:33","nodeType":"YulLiteral","src":"15509:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15497:3:33","nodeType":"YulIdentifier","src":"15497:3:33"},"nativeSrc":"15497:17:33","nodeType":"YulFunctionCall","src":"15497:17:33"},{"name":"pos","nativeSrc":"15516:3:33","nodeType":"YulIdentifier","src":"15516:3:33"},{"name":"length","nativeSrc":"15521:6:33","nodeType":"YulIdentifier","src":"15521:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"15462:34:33","nodeType":"YulIdentifier","src":"15462:34:33"},"nativeSrc":"15462:66:33","nodeType":"YulFunctionCall","src":"15462:66:33"},"nativeSrc":"15462:66:33","nodeType":"YulExpressionStatement","src":"15462:66:33"},{"nativeSrc":"15537:23:33","nodeType":"YulAssignment","src":"15537:23:33","value":{"arguments":[{"name":"pos","nativeSrc":"15548:3:33","nodeType":"YulIdentifier","src":"15548:3:33"},{"name":"length","nativeSrc":"15553:6:33","nodeType":"YulIdentifier","src":"15553:6:33"}],"functionName":{"name":"add","nativeSrc":"15544:3:33","nodeType":"YulIdentifier","src":"15544:3:33"},"nativeSrc":"15544:16:33","nodeType":"YulFunctionCall","src":"15544:16:33"},"variableNames":[{"name":"end","nativeSrc":"15537:3:33","nodeType":"YulIdentifier","src":"15537:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"15279:287:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15392:3:33","nodeType":"YulTypedName","src":"15392:3:33","type":""},{"name":"value0","nativeSrc":"15397:6:33","nodeType":"YulTypedName","src":"15397:6:33","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15408:3:33","nodeType":"YulTypedName","src":"15408:3:33","type":""}],"src":"15279:287:33"},{"body":{"nativeSrc":"15745:179:33","nodeType":"YulBlock","src":"15745:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15762:9:33","nodeType":"YulIdentifier","src":"15762:9:33"},{"kind":"number","nativeSrc":"15773:2:33","nodeType":"YulLiteral","src":"15773:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15755:6:33","nodeType":"YulIdentifier","src":"15755:6:33"},"nativeSrc":"15755:21:33","nodeType":"YulFunctionCall","src":"15755:21:33"},"nativeSrc":"15755:21:33","nodeType":"YulExpressionStatement","src":"15755:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15796:9:33","nodeType":"YulIdentifier","src":"15796:9:33"},{"kind":"number","nativeSrc":"15807:2:33","nodeType":"YulLiteral","src":"15807:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15792:3:33","nodeType":"YulIdentifier","src":"15792:3:33"},"nativeSrc":"15792:18:33","nodeType":"YulFunctionCall","src":"15792:18:33"},{"kind":"number","nativeSrc":"15812:2:33","nodeType":"YulLiteral","src":"15812:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"15785:6:33","nodeType":"YulIdentifier","src":"15785:6:33"},"nativeSrc":"15785:30:33","nodeType":"YulFunctionCall","src":"15785:30:33"},"nativeSrc":"15785:30:33","nodeType":"YulExpressionStatement","src":"15785:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15835:9:33","nodeType":"YulIdentifier","src":"15835:9:33"},{"kind":"number","nativeSrc":"15846:2:33","nodeType":"YulLiteral","src":"15846:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15831:3:33","nodeType":"YulIdentifier","src":"15831:3:33"},"nativeSrc":"15831:18:33","nodeType":"YulFunctionCall","src":"15831:18:33"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"15851:31:33","nodeType":"YulLiteral","src":"15851:31:33","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"15824:6:33","nodeType":"YulIdentifier","src":"15824:6:33"},"nativeSrc":"15824:59:33","nodeType":"YulFunctionCall","src":"15824:59:33"},"nativeSrc":"15824:59:33","nodeType":"YulExpressionStatement","src":"15824:59:33"},{"nativeSrc":"15892:26:33","nodeType":"YulAssignment","src":"15892:26:33","value":{"arguments":[{"name":"headStart","nativeSrc":"15904:9:33","nodeType":"YulIdentifier","src":"15904:9:33"},{"kind":"number","nativeSrc":"15915:2:33","nodeType":"YulLiteral","src":"15915:2:33","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15900:3:33","nodeType":"YulIdentifier","src":"15900:3:33"},"nativeSrc":"15900:18:33","nodeType":"YulFunctionCall","src":"15900:18:33"},"variableNames":[{"name":"tail","nativeSrc":"15892:4:33","nodeType":"YulIdentifier","src":"15892:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15571:353:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15722:9:33","nodeType":"YulTypedName","src":"15722:9:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15736:4:33","nodeType":"YulTypedName","src":"15736:4:33","type":""}],"src":"15571:353:33"},{"body":{"nativeSrc":"16050:334:33","nodeType":"YulBlock","src":"16050:334:33","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16067:9:33","nodeType":"YulIdentifier","src":"16067:9:33"},{"kind":"number","nativeSrc":"16078:2:33","nodeType":"YulLiteral","src":"16078:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16060:6:33","nodeType":"YulIdentifier","src":"16060:6:33"},"nativeSrc":"16060:21:33","nodeType":"YulFunctionCall","src":"16060:21:33"},"nativeSrc":"16060:21:33","nodeType":"YulExpressionStatement","src":"16060:21:33"},{"nativeSrc":"16090:27:33","nodeType":"YulVariableDeclaration","src":"16090:27:33","value":{"arguments":[{"name":"value0","nativeSrc":"16110:6:33","nodeType":"YulIdentifier","src":"16110:6:33"}],"functionName":{"name":"mload","nativeSrc":"16104:5:33","nodeType":"YulIdentifier","src":"16104:5:33"},"nativeSrc":"16104:13:33","nodeType":"YulFunctionCall","src":"16104:13:33"},"variables":[{"name":"length","nativeSrc":"16094:6:33","nodeType":"YulTypedName","src":"16094:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16137:9:33","nodeType":"YulIdentifier","src":"16137:9:33"},{"kind":"number","nativeSrc":"16148:2:33","nodeType":"YulLiteral","src":"16148:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16133:3:33","nodeType":"YulIdentifier","src":"16133:3:33"},"nativeSrc":"16133:18:33","nodeType":"YulFunctionCall","src":"16133:18:33"},{"name":"length","nativeSrc":"16153:6:33","nodeType":"YulIdentifier","src":"16153:6:33"}],"functionName":{"name":"mstore","nativeSrc":"16126:6:33","nodeType":"YulIdentifier","src":"16126:6:33"},"nativeSrc":"16126:34:33","nodeType":"YulFunctionCall","src":"16126:34:33"},"nativeSrc":"16126:34:33","nodeType":"YulExpressionStatement","src":"16126:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"16208:6:33","nodeType":"YulIdentifier","src":"16208:6:33"},{"kind":"number","nativeSrc":"16216:2:33","nodeType":"YulLiteral","src":"16216:2:33","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16204:3:33","nodeType":"YulIdentifier","src":"16204:3:33"},"nativeSrc":"16204:15:33","nodeType":"YulFunctionCall","src":"16204:15:33"},{"arguments":[{"name":"headStart","nativeSrc":"16225:9:33","nodeType":"YulIdentifier","src":"16225:9:33"},{"kind":"number","nativeSrc":"16236:2:33","nodeType":"YulLiteral","src":"16236:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16221:3:33","nodeType":"YulIdentifier","src":"16221:3:33"},"nativeSrc":"16221:18:33","nodeType":"YulFunctionCall","src":"16221:18:33"},{"name":"length","nativeSrc":"16241:6:33","nodeType":"YulIdentifier","src":"16241:6:33"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"16169:34:33","nodeType":"YulIdentifier","src":"16169:34:33"},"nativeSrc":"16169:79:33","nodeType":"YulFunctionCall","src":"16169:79:33"},"nativeSrc":"16169:79:33","nodeType":"YulExpressionStatement","src":"16169:79:33"},{"nativeSrc":"16257:121:33","nodeType":"YulAssignment","src":"16257:121:33","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16273:9:33","nodeType":"YulIdentifier","src":"16273:9:33"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"16292:6:33","nodeType":"YulIdentifier","src":"16292:6:33"},{"kind":"number","nativeSrc":"16300:2:33","nodeType":"YulLiteral","src":"16300:2:33","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"16288:3:33","nodeType":"YulIdentifier","src":"16288:3:33"},"nativeSrc":"16288:15:33","nodeType":"YulFunctionCall","src":"16288:15:33"},{"kind":"number","nativeSrc":"16305:66:33","nodeType":"YulLiteral","src":"16305:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"16284:3:33","nodeType":"YulIdentifier","src":"16284:3:33"},"nativeSrc":"16284:88:33","nodeType":"YulFunctionCall","src":"16284:88:33"}],"functionName":{"name":"add","nativeSrc":"16269:3:33","nodeType":"YulIdentifier","src":"16269:3:33"},"nativeSrc":"16269:104:33","nodeType":"YulFunctionCall","src":"16269:104:33"},{"kind":"number","nativeSrc":"16375:2:33","nodeType":"YulLiteral","src":"16375:2:33","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16265:3:33","nodeType":"YulIdentifier","src":"16265:3:33"},"nativeSrc":"16265:113:33","nodeType":"YulFunctionCall","src":"16265:113:33"},"variableNames":[{"name":"tail","nativeSrc":"16257:4:33","nodeType":"YulIdentifier","src":"16257:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15929:455:33","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16019:9:33","nodeType":"YulTypedName","src":"16019:9:33","type":""},{"name":"value0","nativeSrc":"16030:6:33","nodeType":"YulTypedName","src":"16030:6:33","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16041:4:33","nodeType":"YulTypedName","src":"16041:4:33","type":""}],"src":"15929:455:33"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_bytes32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$750__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$11__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_enum$_ClaimError_$2765__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 5))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1232_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1151_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_bytes32_t_uint256__to_t_address_t_uint256_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), value2)\n        mstore(add(pos, 84), value3)\n        end := add(pos, 116)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1232(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1151(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"614":[{"length":32,"start":370},{"length":32,"start":494},{"length":32,"start":4617},{"length":32,"start":4753}],"2783":[{"length":32,"start":444},{"length":32,"start":1732}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c806373c8a95811610097578063eacdc5ff11610066578063eacdc5ff146102f0578063f2fde38b14610307578063f5b541a61461031a578063f7ba94bd1461034157600080fd5b806373c8a958146102af578063833d47b6146102c25780638da5cb5b146102d5578063c3666c36146102dd57600080fd5b80632d4c2f93116100d35780632d4c2f93146101b7578063572b6c05146101de5780635c9a509b1461022b5780637124094f1461028f57600080fd5b806301ffc9a714610105578063120aa8771461012d5780632035a4dd1461015b5780632b4c9f1614610170575b600080fd5b6101186101133660046115b9565b610354565b60405190151581526020015b60405180910390f35b61011861013b36600461161d565b600260209081526000928352604080842090915290825290205460ff1681565b61016e610169366004611699565b61036e565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101927f000000000000000000000000000000000000000000000000000000000000000081565b6101186101ec36600461170c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b610267610239366004611729565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b604080519586526020860194909452928401919091526060830152608082015260a001610124565b6102a261029d366004611742565b610789565b604051610124919061177a565b61016e6102bd3660046117bb565b610836565b61016e6102d0366004611843565b61093a565b610192610a39565b61016e6102eb3660046117bb565b610a65565b6102f960005481565b604051908152602001610124565b61016e61031536600461170c565b610bdd565b6102f97f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b61016e61034f366004611875565b610bfb565b600061036882610362610cba565b90610ce8565b92915050565b600086815260016020526040902080546103bc576040517f07cba261000000000000000000000000000000000000000000000000000000008152600481018890526024015b60405180910390fd5b600381015442908110806103d35750816004015481115b156104275760038201546004808401546040517fc06e9f3a000000000000000000000000000000000000000000000000000000008152918201849052602482019290925260448101919091526064016103b3565b600088815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16845290915290205460ff16156104be576040517f7635807d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881660048201526024810187905260448101869052606481018990526084016103b3565b858260020154101561050c5760028201546040517f23090a310000000000000000000000000000000000000000000000000000000081526103b3918891600401918252602082015260400190565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166020820152603481018790526054810186905260748101899052600090609401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120835490915061059f908690869084610dc2565b610602576040517fa041b52e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891660048201526024810188905260448101879052606481018a90526084016103b3565b600089815260026020818152604080842073ffffffffffffffffffffffffffffffffffffffff8d168552909152822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558401805489929061066c9084906118e1565b90915550506040517f26b3293f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201899052604482018890527f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16897ffc6ecd966b430510beae9124efe7dd517ed5286d7ed0ae258f8556c7a9765a44898660020154604051610776929190918252602082015260400190565b60405180910390a3505050505050505050565b600083815260016020526040812080546107a757600191505061082f565b600381015442908110806107be5750816004015481115b156107ce5760029250505061082f565b600086815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205460ff16156108115760039250505061082f565b83826002015410156108285760049250505061082f565b6000925050505b9392505050565b61084f610841610ddc565b610849610de6565b90610e14565b84838114158061085f5750808214155b15610896576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610930576109288888838181106108b6576108b661191b565b90506020020160208101906108cb919061170c565b8585848181106108dd576108dd61191b565b905060200201358888858181106108f6576108f661191b565b905060200201602081019061090b919061170c565b73ffffffffffffffffffffffffffffffffffffffff169190610e83565b600101610899565b5050505050505050565b610945610841610ddc565b808210610988576040517f779acdff00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044016103b3565b600080546040805160a081018252878152602080820188815282840189815260608085018a815260808087018b8152898b526001808852898c209851895595518887015593516002880155905160038701559151600490950194909455865490910190955582518981529081018890529182018690528101849052909182917f331c648136af10432045d8cc15dfaee6ca9568922f85cab02d96d5f5286c8920910160405180910390a25050505050565b6000610a60610a46610de6565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610a70610841610ddc565b848381141580610a805750808214155b15610ab7576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561093057858582818110610ad457610ad461191b565b9050602002016020810190610ae9919061170c565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610b1757610b1761191b565b9050602002016020810190610b2c919061170c565b878786818110610b3e57610b3e61191b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610bba57600080fd5b505af1158015610bce573d6000803e3d6000fd5b50505050806001019050610aba565b610bf8610be8610ddc565b82610bf1610de6565b9190610f15565b50565b610c06610841610ddc565b82818114610c40576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610cb257610caa848483818110610c6057610c6061191b565b90506020020135878784818110610c7957610c7961191b565b9050602002016020810190610c8e919061170c565b73ffffffffffffffffffffffffffffffffffffffff169061102a565b600101610c43565b505050505050565b60008061036860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6118e1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d3857506000610368565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d8957506001610368565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610dd0868685611184565b1490505b949350505050565b6000610a606111c6565b60008061036860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6118e1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610e7f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016103b3565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f1090849061130d565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610f82576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016103b3565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110245783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103b3565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146110ee576040519150601f19603f3d011682016040523d82523d6000602084013e6110f3565b606091505b5050905080610f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103b3565b600081815b848110156111bd576111b3828787848181106111a7576111a761191b565b9050602002013561141c565b9150600101611189565b50949350505050565b6000333214806111d65750601836105b156111e057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806112fc57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061194a565b1561130657919050565b3391505090565b600061136f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114489092919063ffffffff16565b9050805160001480611390575080806020019051810190611390919061194a565b610f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b3565b600081831061143857600082815260208490526040902061082f565b5060009182526020526040902090565b6060610dd48484600085856000808673ffffffffffffffffffffffffffffffffffffffff16858760405161147c9190611990565b60006040518083038185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b50915091506114cf878383876114da565b979650505050505050565b606083156115705782516000036115695773ffffffffffffffffffffffffffffffffffffffff85163b611569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b3565b5081610dd4565b610dd483838151156115855781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b391906119ac565b6000602082840312156115cb57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461082f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610bf857600080fd5b6000806040838503121561163057600080fd5b823591506020830135611642816115fb565b809150509250929050565b60008083601f84011261165f57600080fd5b50813567ffffffffffffffff81111561167757600080fd5b6020830191508360208260051b850101111561169257600080fd5b9250929050565b60008060008060008060a087890312156116b257600080fd5b8635955060208701356116c4816115fb565b94506040870135935060608701359250608087013567ffffffffffffffff8111156116ee57600080fd5b6116fa89828a0161164d565b979a9699509497509295939492505050565b60006020828403121561171e57600080fd5b813561082f816115fb565b60006020828403121561173b57600080fd5b5035919050565b60008060006060848603121561175757600080fd5b833592506020840135611769816115fb565b929592945050506040919091013590565b60208101600583106117b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600080606087890312156117d457600080fd5b863567ffffffffffffffff808211156117ec57600080fd5b6117f88a838b0161164d565b9098509650602089013591508082111561181157600080fd5b61181d8a838b0161164d565b9096509450604089013591508082111561183657600080fd5b506116fa89828a0161164d565b6000806000806080858703121561185957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806040858703121561188b57600080fd5b843567ffffffffffffffff808211156118a357600080fd5b6118af8883890161164d565b909650945060208701359150808211156118c857600080fd5b506118d58782880161164d565b95989497509550505050565b81810381811115610368577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561195c57600080fd5b8151801515811461082f57600080fd5b60005b8381101561198757818101518382015260200161196f565b50506000910152565b600082516119a281846020870161196c565b9190910192915050565b60208152600082518060208401526119cb81604085016020870161196c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206ee7aab44c30204e4f7b7d9e66b4675709345a66aee48233cb2f837d8fb9f40664736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEACDC5FF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEACDC5FF EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0x833D47B6 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D4C2F93 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x5C9A509B EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x7124094F EQ PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x120AA877 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x2035A4DD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x170 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x169 CALLDATASIZE PUSH1 0x4 PUSH2 0x1699 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x192 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x170C JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x267 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x1742 JUMP JUMPDEST PUSH2 0x789 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x177A JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x17BB JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1843 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH2 0x192 PUSH2 0xA39 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x17BB JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x2F9 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x170C JUMP JUMPDEST PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x2F9 PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 JUMP JUMPDEST PUSH2 0x16E PUSH2 0x34F CALLDATASIZE PUSH1 0x4 PUSH2 0x1875 JUMP JUMPDEST PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368 DUP3 PUSH2 0x362 PUSH2 0xCBA JUMP JUMPDEST SWAP1 PUSH2 0xCE8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CBA26100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x3D3 JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x427 JUMPI PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP1 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xC06E9F3A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x7635807D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x50C JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x23090A3100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x3B3 SWAP2 DUP9 SWAP2 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP10 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x59F SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP5 PUSH2 0xDC2 JUMP JUMPDEST PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA041B52E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP5 ADD DUP1 SLOAD DUP10 SWAP3 SWAP1 PUSH2 0x66C SWAP1 DUP5 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP9 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x71C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH32 0xFC6ECD966B430510BEAE9124EFE7DD517ED5286D7ED0AE258F8556C7A9765A44 DUP10 DUP7 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x776 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x7A7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD TIMESTAMP SWAP1 DUP2 LT DUP1 PUSH2 0x7BE JUMPI POP DUP2 PUSH1 0x4 ADD SLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x7CE JUMPI PUSH1 0x2 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x811 JUMPI PUSH1 0x3 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST DUP4 DUP3 PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x828 JUMPI PUSH1 0x4 SWAP3 POP POP POP PUSH2 0x82F JUMP JUMPDEST PUSH1 0x0 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x84F PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x849 PUSH2 0xDE6 JUMP JUMPDEST SWAP1 PUSH2 0xE14 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x85F JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x896 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x930 JUMPI PUSH2 0x928 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x8B6 JUMPI PUSH2 0x8B6 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x8CB SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x8DD JUMPI PUSH2 0x8DD PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x8F6 JUMPI PUSH2 0x8F6 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x90B SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x899 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x945 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP1 DUP3 LT PUSH2 0x988 JUMPI PUSH1 0x40 MLOAD PUSH32 0x779ACDFF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 DUP2 MSTORE DUP3 DUP5 ADD DUP10 DUP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x80 DUP1 DUP8 ADD DUP12 DUP2 MSTORE DUP10 DUP12 MSTORE PUSH1 0x1 DUP1 DUP9 MSTORE DUP10 DUP13 KECCAK256 SWAP9 MLOAD DUP10 SSTORE SWAP6 MLOAD DUP9 DUP8 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP9 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP8 ADD SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP1 SWAP6 ADD SWAP5 SWAP1 SWAP5 SSTORE DUP7 SLOAD SWAP1 SWAP2 ADD SWAP1 SWAP6 SSTORE DUP3 MLOAD DUP10 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x331C648136AF10432045D8CC15DFAEE6CA9568922F85CAB02D96D5F5286C8920 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH2 0xA46 PUSH2 0xDE6 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA70 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0xA80 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xAB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x930 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xAD4 JUMPI PUSH2 0xAD4 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAE9 SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xB17 JUMPI PUSH2 0xB17 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB2C SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB3E JUMPI PUSH2 0xB3E PUSH2 0x191B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xABA JUMP JUMPDEST PUSH2 0xBF8 PUSH2 0xBE8 PUSH2 0xDDC JUMP JUMPDEST DUP3 PUSH2 0xBF1 PUSH2 0xDE6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC06 PUSH2 0x841 PUSH2 0xDDC JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCB2 JUMPI PUSH2 0xCAA DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xC60 JUMPI PUSH2 0xC60 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xC79 JUMPI PUSH2 0xC79 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC8E SWAP2 SWAP1 PUSH2 0x170C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xC43 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x368 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD38 JUMPI POP PUSH1 0x0 PUSH2 0x368 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD89 JUMPI POP PUSH1 0x1 PUSH2 0x368 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDD0 DUP7 DUP7 DUP6 PUSH2 0x1184 JUMP JUMPDEST EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x368 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x18E1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xE7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF10 SWAP1 DUP5 SWAP1 PUSH2 0x130D JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xF82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3B3 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1024 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1094 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10EE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x11BD JUMPI PUSH2 0x11B3 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x11A7 JUMPI PUSH2 0x11A7 PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x141C JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1189 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11D6 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x11E0 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x12FC JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12FC SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST ISZERO PUSH2 0x1306 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x136F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1448 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x1390 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1390 SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST PUSH2 0xF10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1438 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x82F JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDD4 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x14CF DUP8 DUP4 DUP4 DUP8 PUSH2 0x14DA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1570 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1569 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1569 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B3 JUMP JUMPDEST POP DUP2 PUSH2 0xDD4 JUMP JUMPDEST PUSH2 0xDD4 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1585 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B3 SWAP2 SWAP1 PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1642 DUP2 PUSH2 0x15FB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x16B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x16C4 DUP2 PUSH2 0x15FB JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16FA DUP10 DUP3 DUP11 ADD PUSH2 0x164D JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x82F DUP2 PUSH2 0x15FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x173B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1769 DUP2 PUSH2 0x15FB JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x17B5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17F8 DUP11 DUP4 DUP12 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x181D DUP11 DUP4 DUP12 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16FA DUP10 DUP3 DUP11 ADD PUSH2 0x164D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x188B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18AF DUP9 DUP4 DUP10 ADD PUSH2 0x164D JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x18C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18D5 DUP8 DUP3 DUP9 ADD PUSH2 0x164D JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x368 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x195C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1987 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x196F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19A2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x196C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19CB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x196C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0xE7AAB44C30204E4F7B7D9E66B46757 MULMOD CALLVALUE GAS PUSH7 0xAEE48233CB2F83 PUSH30 0x8FB9F40664736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1456:10183:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:9;;;;;;:::i;:::-;;:::i;:::-;;;516:14:33;;509:22;491:41;;479:2;464:18;542:165:9;;;;;;;;4766:59:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;8440:1275;;;;;;:::i;:::-;;:::i;:::-;;728:115:13;817:19;728:115;;;2379:42:33;2367:55;;;2349:74;;2337:2;2322:18;728:115:13;2177:252:33;4053:40:32;;;;;878:149:13;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;4637:49:32;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3375:25:33;;;3431:2;3416:18;;3409:34;;;;3459:18;;;3452:34;;;;3517:2;3502:18;;3495:34;3560:3;3545:19;;3538:35;3362:3;3347:19;4637:49:32;3116:463:33;10426:748:32;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3113:464:21:-;;;;;;:::i;:::-;;:::i;6860:765:32:-;;;;;;:::i;:::-;;:::i;710:120:3:-;;;:::i;4355:493:21:-;;;;;;:::i;:::-;;:::i;4539:29:32:-;;;;;;;;;7361:25:33;;;7349:2;7334:18;4539:29:32;7215:177:33;864:152:3;;;;;;:::i;:::-;;:::i;3928:66:32:-;;3968:26;3928:66;;1942:402:21;;;;;;:::i;:::-;;:::i;542:165:9:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:9:o;8440:1275:32:-;8618:24;8645:20;;;:11;:20;;;;;8688:16;;8684:95;;8741:27;;;;;;;;7361:25:33;;;7334:18;;8741:27:32;;;;;;;;8684:95;8854:15;;;;8811;;8840:29;;;:60;;;8887:5;:13;;;8873:11;:27;8840:60;8836:165;;;8959:15;;;;8976:13;;;;;8923:67;;;;;;;;8567:25:33;;;8608:18;;;8601:34;;;;8651:18;;;8644:34;;;;8540:18;;8923:67:32;8365:319:33;8836:165:32;9015:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;;9011:119;;;9065:54;;;;;8950:42:33;8938:55;;9065:54:32;;;8920:74:33;9010:18;;;9003:34;;;9053:18;;;9046:34;;;9096:18;;;9089:34;;;8892:19;;9065:54:32;8689:440:33;9011:119:32;9163:6;9144:5;:16;;;:25;9140:111;;;9223:16;;;;9192:48;;;;;;;9215:6;;9192:48;;9308:25:33;;;9364:2;9349:18;;9342:34;9296:2;9281:18;;9134:248;9140:111:32;9286:56;;9633:66:33;9620:2;9616:15;;;9612:88;9286:56:32;;;9600:101:33;9717:12;;;9710:28;;;9754:12;;;9747:28;;;9791:12;;;9784:28;;;9261:12:32;;9828:13:33;;9286:56:32;;;;;;;;;;;;;9276:67;;9286:56;9276:67;;;;9379:16;;9276:67;;-1:-1:-1;9358:44:32;;:5;;;;9276:67;9358:20;:44::i;:::-;9353:135;;9425:52;;;;;8950:42:33;8938:55;;9425:52:32;;;8920:74:33;9010:18;;;9003:34;;;9053:18;;;9046:34;;;9096:18;;;9089:34;;;8892:19;;9425:52:32;8689:440:33;9353:135:32;9498:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;:34;;;;9528:4;9498:34;;;9542:16;;:26;;9562:6;;9498:16;9542:26;;9562:6;;9542:26;:::i;:::-;;;;-1:-1:-1;;9579:54:32;;;;;:23;10359:55:33;;;9579:54:32;;;10341:74:33;10431:18;;;10424:34;;;10474:18;;;10467:34;;;9579:15:32;:23;;;;10314:18:33;;9579:54:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9672:9;9649:59;;9663:7;9649:59;9683:6;9691:5;:16;;;9649:59;;;;;;9308:25:33;;;9364:2;9349:18;;9342:34;9296:2;9281:18;;9134:248;9649:59:32;;;;;;;;8608:1107;;;8440:1275;;;;;;:::o;10426:748::-;10547:16;10602:20;;;:11;:20;;;;;10645:16;;10641:97;;10698:29;10691:36;;;;;10641:97;10813:15;;;;10770;;10799:29;;;:60;;;10846:5;:13;;;10832:11;:27;10799:60;10795:131;;;10882:33;10875:40;;;;;;10795:131;10940:16;;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;;10936:90;;;10990:25;10983:32;;;;;;10936:90;11059:6;11040:5;:16;;;:25;11036:96;;;11088:33;11081:40;;;;;;11036:96;11149:18;11142:25;;;;10426:748;;;;;;:::o;3113:464:21:-;3244:70;3301:12;:10;:12::i;:::-;3244:33;:31;:33::i;:::-;:56;;:70::i;:::-;3341:8;3370:23;;;;;:51;;-1:-1:-1;3397:24:21;;;;3370:51;3366:90;;;3430:26;;;;;;;;;;;;;;3366:90;3471:9;3466:105;3486:6;3482:1;:10;3466:105;;;3513:47;3536:8;;3545:1;3536:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3549:7;;3557:1;3549:10;;;;;;;:::i;:::-;;;;;;;3513:6;;3520:1;3513:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3494:3;;3466:105;;;;3234:343;3113:464;;;;;;:::o;6860:765:32:-;7017:70;7074:12;:10;:12::i;7017:70::-;7123:7;7110:9;:20;7106:96;;7153:38;;;;;;;;9308:25:33;;;9349:18;;;9342:34;;;9281:18;;7153:38:32;9134:248:33;7106:96:32;7212:15;7230:14;;7277:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7254:20;;;:11;:20;;;;;;:220;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7509:16;;;;;;;;7551:67;;11199:25:33;;;11240:18;;;11233:34;;;11283:18;;;11276:34;;;11326:18;;11319:34;;;7230:14:32;;;;7551:67;;11171:19:33;7551:67:32;;;;;;;7007:618;6860:765;;;;:::o;710:120:3:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:8;;;;3556:118;782:41:3;775:48;;710:120;:::o;4355:493:21:-;4492:70;4549:12;:10;:12::i;4492:70::-;4589:8;4618:26;;;;;:55;;-1:-1:-1;4648:25:21;;;;4618:55;4614:94;;;4682:26;;;;;;;;;;;;;;4614:94;4723:9;4718:124;4738:6;4734:1;:10;4718:124;;;4765:9;;4775:1;4765:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4799:4;4806:8;;4815:1;4806:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4819:8;;4828:1;4819:11;;;;;;;:::i;:::-;4765:66;;;;;;;;;;11844:42:33;11913:15;;;4765:66:21;;;11895:34:33;11965:15;;;;11945:18;;;11938:43;-1:-1:-1;4819:11:21;;;;;;11997:18:33;;;11990:34;11807:18;;4765:66:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4746:3;;;;;4718:124;;864:152:3;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1942:402:21:-;2052:70;2109:12;:10;:12::i;2052:70::-;2149:8;2178:24;;;2174:63;;2211:26;;;;;;;;;;;;;;2174:63;2252:9;2247:91;2267:6;2263:1;:10;2247:91;;;2294:33;2316:7;;2324:1;2316:10;;;;;;;:::i;:::-;;;;;;;2294:8;;2303:1;2294:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2275:3;;2247:91;;;;2042:302;1942:402;;;;:::o;1705:174:12:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:12;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:12;1620:11;;1560:82;-1:-1:-1;1658:34:12;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1411:172:30:-;1512:4;1572;1535:33;1556:5;;1563:4;1535:20;:33::i;:::-;:41;1528:48;;1411:172;;;;;;;:::o;11229:175:32:-;11330:7;11356:41;:39;:41::i;5065:174:8:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;2379:42:33;2367:55;;4543:25:8;;;2349:74:33;2322:18;;4543:25:8;2177:252:33;4504:64:8;4413:162;;:::o;941:175:26:-;1050:58;;;12499:42:33;12487:55;;1050:58:26;;;12469:74:33;12559:18;;;;12552:34;;;1050:58:26;;;;;;;;;;12442:18:33;;;;1050:58:26;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;:::-;941:175;;;:::o;3060:369:8:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2379:42:33;2367:55;;3243:24:8;;;2349:74:33;2322:18;;3243:24:8;2177:252:33;3207:60:8;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:8;3277:146;3148:281;3060:369;;;:::o;2647:312:27:-;2761:6;2736:21;:31;;2728:73;;;;;;;12799:2:33;2728:73:27;;;12781:21:33;12838:2;12818:18;;;12811:30;12877:31;12857:18;;;12850:59;12926:18;;2728:73:27;12597:353:33;2728:73:27;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;13367:2:33;2874:78:27;;;13349:21:33;13406:2;13386:18;;;13379:30;13445:34;13425:18;;;13418:62;13516:28;13496:18;;;13489:56;13562:19;;2874:78:27;13165:422:33;2331:300:30;2424:7;2466:4;2424:7;2480:116;2500:16;;;2480:116;;;2552:33;2562:12;2576:5;;2582:1;2576:8;;;;;;;:::i;:::-;;;;;;;2552:9;:33::i;:::-;2537:48;-1:-1:-1;2518:3:30;;2480:116;;;-1:-1:-1;2612:12:30;2331:300;-1:-1:-1;;;;2331:300:30:o;784:745:14:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:14;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:14;;784:745::o;1043:95::-;462:23:17;466:14;462:23;449:37;445:2;441:46;1372:19:14;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:14;;;;;:39;13845:15:33;;;1396:59:14;;;13827:34:33;1444:10:14;13877:18:33;;;13870:43;1396:19:14;:39;;;;13739:18:33;;1396:59:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:14:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;5196:642:26:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;14408:2:33;5720:111:26;;;14390:21:33;14447:2;14427:18;;;14420:30;14486:34;14466:18;;;14459:62;14557:12;14537:18;;;14530:40;14587:19;;5720:111:26;14206:406:33;9205:147:30;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;-1:-1:-1;9426:13:30;9517:15;;;9552:4;9545:15;9598:4;9582:21;;;9205:147::o;4108:223:27:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:27:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;15773:2:33;8113:60:27;;;15755:21:33;15812:2;15792:18;;;15785:30;15851:31;15831:18;;;15824:59;15900:18;;8113:60:27;15571:353:33;8113:60:27;-1:-1:-1;8208:10:27;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:33:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:154;629:42;622:5;618:54;611:5;608:65;598:93;;687:1;684;677:12;702:315;770:6;778;831:2;819:9;810:7;806:23;802:32;799:52;;;847:1;844;837:12;799:52;883:9;870:23;860:33;;943:2;932:9;928:18;915:32;956:31;981:5;956:31;:::i;:::-;1006:5;996:15;;;702:315;;;;;:::o;1022:367::-;1085:8;1095:6;1149:3;1142:4;1134:6;1130:17;1126:27;1116:55;;1167:1;1164;1157:12;1116:55;-1:-1:-1;1190:20:33;;1233:18;1222:30;;1219:50;;;1265:1;1262;1255:12;1219:50;1302:4;1294:6;1290:17;1278:29;;1362:3;1355:4;1345:6;1342:1;1338:14;1330:6;1326:27;1322:38;1319:47;1316:67;;;1379:1;1376;1369:12;1316:67;1022:367;;;;;:::o;1394:778::-;1516:6;1524;1532;1540;1548;1556;1609:3;1597:9;1588:7;1584:23;1580:33;1577:53;;;1626:1;1623;1616:12;1577:53;1662:9;1649:23;1639:33;;1722:2;1711:9;1707:18;1694:32;1735:31;1760:5;1735:31;:::i;:::-;1785:5;-1:-1:-1;1837:2:33;1822:18;;1809:32;;-1:-1:-1;1888:2:33;1873:18;;1860:32;;-1:-1:-1;1943:3:33;1928:19;;1915:33;1971:18;1960:30;;1957:50;;;2003:1;2000;1993:12;1957:50;2042:70;2104:7;2095:6;2084:9;2080:22;2042:70;:::i;:::-;1394:778;;;;-1:-1:-1;1394:778:33;;-1:-1:-1;1394:778:33;;2131:8;;1394:778;-1:-1:-1;;;1394:778:33:o;2679:247::-;2738:6;2791:2;2779:9;2770:7;2766:23;2762:32;2759:52;;;2807:1;2804;2797:12;2759:52;2846:9;2833:23;2865:31;2890:5;2865:31;:::i;2931:180::-;2990:6;3043:2;3031:9;3022:7;3018:23;3014:32;3011:52;;;3059:1;3056;3049:12;3011:52;-1:-1:-1;3082:23:33;;2931:180;-1:-1:-1;2931:180:33:o;3584:383::-;3661:6;3669;3677;3730:2;3718:9;3709:7;3705:23;3701:32;3698:52;;;3746:1;3743;3736:12;3698:52;3782:9;3769:23;3759:33;;3842:2;3831:9;3827:18;3814:32;3855:31;3880:5;3855:31;:::i;:::-;3584:383;;3905:5;;-1:-1:-1;;;3957:2:33;3942:18;;;;3929:32;;3584:383::o;3972:400::-;4119:2;4104:18;;4152:1;4141:13;;4131:201;;4188:77;4185:1;4178:88;4289:4;4286:1;4279:15;4317:4;4314:1;4307:15;4131:201;4341:25;;;3972:400;:::o;4377:1103::-;4550:6;4558;4566;4574;4582;4590;4643:2;4631:9;4622:7;4618:23;4614:32;4611:52;;;4659:1;4656;4649:12;4611:52;4699:9;4686:23;4728:18;4769:2;4761:6;4758:14;4755:34;;;4785:1;4782;4775:12;4755:34;4824:70;4886:7;4877:6;4866:9;4862:22;4824:70;:::i;:::-;4913:8;;-1:-1:-1;4798:96:33;-1:-1:-1;5001:2:33;4986:18;;4973:32;;-1:-1:-1;5017:16:33;;;5014:36;;;5046:1;5043;5036:12;5014:36;5085:72;5149:7;5138:8;5127:9;5123:24;5085:72;:::i;:::-;5176:8;;-1:-1:-1;5059:98:33;-1:-1:-1;5264:2:33;5249:18;;5236:32;;-1:-1:-1;5280:16:33;;;5277:36;;;5309:1;5306;5299:12;5277:36;;5348:72;5412:7;5401:8;5390:9;5386:24;5348:72;:::i;5485:385::-;5571:6;5579;5587;5595;5648:3;5636:9;5627:7;5623:23;5619:33;5616:53;;;5665:1;5662;5655:12;5616:53;-1:-1:-1;;5688:23:33;;;5758:2;5743:18;;5730:32;;-1:-1:-1;5809:2:33;5794:18;;5781:32;;5860:2;5845:18;5832:32;;-1:-1:-1;5485:385:33;-1:-1:-1;5485:385:33:o;7579:781::-;7709:6;7717;7725;7733;7786:2;7774:9;7765:7;7761:23;7757:32;7754:52;;;7802:1;7799;7792:12;7754:52;7842:9;7829:23;7871:18;7912:2;7904:6;7901:14;7898:34;;;7928:1;7925;7918:12;7898:34;7967:70;8029:7;8020:6;8009:9;8005:22;7967:70;:::i;:::-;8056:8;;-1:-1:-1;7941:96:33;-1:-1:-1;8144:2:33;8129:18;;8116:32;;-1:-1:-1;8160:16:33;;;8157:36;;;8189:1;8186;8179:12;8157:36;;8228:72;8292:7;8281:8;8270:9;8266:24;8228:72;:::i;:::-;7579:781;;;;-1:-1:-1;8319:8:33;-1:-1:-1;;;;7579:781:33:o;9852:282::-;9919:9;;;9940:11;;;9937:191;;;9984:77;9981:1;9974:88;10085:4;10082:1;10075:15;10113:4;10110:1;10103:15;10512:184;10564:77;10561:1;10554:88;10661:4;10658:1;10651:15;10685:4;10682:1;10675:15;13924:277;13991:6;14044:2;14032:9;14023:7;14019:23;14015:32;14012:52;;;14060:1;14057;14050:12;14012:52;14092:9;14086:16;14145:5;14138:13;14131:21;14124:5;14121:32;14111:60;;14167:1;14164;14157:12;15024:250;15109:1;15119:113;15133:6;15130:1;15127:13;15119:113;;;15209:11;;;15203:18;15190:11;;;15183:39;15155:2;15148:10;15119:113;;;-1:-1:-1;;15266:1:33;15248:16;;15241:27;15024:250::o;15279:287::-;15408:3;15446:6;15440:13;15462:66;15521:6;15516:3;15509:4;15501:6;15497:17;15462:66;:::i;:::-;15544:16;;;;;15279:287;-1:-1:-1;;15279:287:33:o;15929:455::-;16078:2;16067:9;16060:21;16041:4;16110:6;16104:13;16153:6;16148:2;16137:9;16133:18;16126:34;16169:79;16241:6;16236:2;16225:9;16221:18;16216:2;16208:6;16204:15;16169:79;:::i;:::-;16300:2;16288:15;16305:66;16284:88;16269:104;;;;16375:2;16265:113;;15929:455;-1:-1:-1;;15929:455:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"1341400","executionCost":"infinite","totalCost":"infinite"},"external":{"OPERATOR_ROLE()":"261","POINTS_CONTRACT()":"infinite","canClaim(uint256,address,uint256)":"11421","claim(uint256,address,uint256,bytes32,bytes32[])":"infinite","claimEpochs(uint256)":"11049","claimed(uint256,address)":"2651","currentEpochId()":"2317","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setMerkleRoot(bytes32,uint256,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"OPERATOR_ROLE()":"f5b541a6","POINTS_CONTRACT()":"2d4c2f93","canClaim(uint256,address,uint256)":"7124094f","claim(uint256,address,uint256,bytes32,bytes32[])":"2035a4dd","claimEpochs(uint256)":"5c9a509b","claimed(uint256,address)":"120aa877","currentEpochId()":"eacdc5ff","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setMerkleRoot(bytes32,uint256,uint256,uint256)":"833d47b6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"ClaimEpochNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ClaimingEpochNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"}],\"name\":\"InsufficientPoolAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"InvalidRewardContractAddress\",\"type\":\"address\"}],\"name\":\"InvalidRewardContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"enum LimitedOCPointsMerkleClaim.ClaimError\",\"name\":\"error\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimEpochs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount being claimed.\",\"epochId\":\"The epoch identifier.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient of the claim.\"}}],\"ClaimEpochNotFound(uint256)\":[{\"params\":{\"epochId\":\"The epoch identifier.\"}}],\"ClaimingEpochNotActive(uint256,uint256,uint256)\":[{\"params\":{\"currentTime\":\"The current block timestamp.\",\"endTime\":\"The end time of the claiming epoch.\",\"startTime\":\"The start time of the claiming epoch.\"}}],\"InsufficientPoolAmount(uint256,uint256)\":[{\"params\":{\"amountAvailable\":\"The amount available in the pool.\",\"amountRequested\":\"The amount requested to claim.\"}}],\"InvalidClaimWindow(uint256,uint256)\":[{\"params\":{\"endTime\":\"The end time.\",\"startTime\":\"The start time.\"}}],\"InvalidProof(address,uint256,bytes32,uint256)\":[{\"params\":{\"amount\":\"The amount being claimed.\",\"epochId\":\"The epoch identifier.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient of the claim.\"}}],\"InvalidRewardContractAddress(address)\":[{\"params\":{\"InvalidRewardContractAddress\":\"The address of the invalid reward contract.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)\":{\"params\":{\"endTime\":\"The end time for claiming.\",\"epochId\":\"The epoch identifier.\",\"merkleRoot\":\"The merkle root for this epoch.\",\"startTime\":\"The start time for claiming.\",\"totalAmount\":\"The total amount available for claiming.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RewardClaimed(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount claimed.\",\"amountLeft\":\"The amount left in the pool after this claim.\",\"epochId\":\"The epoch identifier.\",\"recipient\":\"The recipient of the claim.\"}}},\"kind\":\"dev\",\"methods\":{\"canClaim(uint256,address,uint256)\":{\"details\":\"Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.Returns ClaimError.NoError if basic validation passes.\",\"params\":{\"amount\":\"The amount to be claimed.\",\"epochId\":\"The epoch identifier.\",\"recipient\":\"The recipient address.\"},\"returns\":{\"error\":\"The claim validation result.\"}},\"claim(uint256,address,uint256,bytes32,bytes32[])\":{\"details\":\"Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.Reverts with {InvalidProof} if the merkle proof verification fails.Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.Emits a {RewardClaimed} event.\",\"params\":{\"amount\":\"The amount to be claimed.\",\"epochId\":\"The epoch identifier.\",\"proof\":\"The merkle proof for verification.\",\"reasonCode\":\"The reason code for the deposit.\",\"recipient\":\"The recipient for this claim.\"}},\"constructor\":{\"details\":\"Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address.\",\"params\":{\"forwarderRegistry\":\"The address of the forwarder registry.\",\"rewardContractAddress\":\"The address of the reward contract.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"setMerkleRoot(bytes32,uint256,uint256,uint256)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InvalidClaimWindow} if startTime is not before endTime.Emits a {MerkleRootSet} event.\",\"params\":{\"endTime\":\"The end time for claiming.\",\"merkleRoot\":\"The merkle root for this epoch.\",\"startTime\":\"The start time for claiming.\",\"totalAmount\":\"The total amount available for claiming in this epoch.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"LimitedOCPointsMerkleClaim\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when trying to claim the same allocation more than once.\"}],\"ClaimEpochNotFound(uint256)\":[{\"notice\":\"Thrown when trying to access a non-existent epoch.\"}],\"ClaimingEpochNotActive(uint256,uint256,uint256)\":[{\"notice\":\"Thrown when trying to claim outside the valid time epoch.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"InsufficientPoolAmount(uint256,uint256)\":[{\"notice\":\"Thrown when the pool doesn't have enough tokens for the claim.\"}],\"InvalidClaimWindow(uint256,uint256)\":[{\"notice\":\"Thrown when the start time is not before the end time.\"}],\"InvalidProof(address,uint256,bytes32,uint256)\":[{\"notice\":\"Thrown when a proof cannot be verified.\"}],\"InvalidRewardContractAddress(address)\":[{\"notice\":\"Thrown when the reward contract address is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new merkle root is set for an epoch.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RewardClaimed(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when a reward is claimed.\"}},\"kind\":\"user\",\"methods\":{\"OPERATOR_ROLE()\":{\"notice\":\"The role identifier for the operator role.\"},\"POINTS_CONTRACT()\":{\"notice\":\"A reference to the reward contract.\"},\"canClaim(uint256,address,uint256)\":{\"notice\":\"Checks if a user can claim rewards for a given epoch.\"},\"claim(uint256,address,uint256,bytes32,bytes32[])\":{\"notice\":\"Claims rewards for a given recipient address.\"},\"claimEpochs(uint256)\":{\"notice\":\"Mapping from epoch ID to claiming epoch data.\"},\"claimed(uint256,address)\":{\"notice\":\"Mapping from epoch ID to user address to claimed status.\"},\"constructor\":{\"notice\":\"Constructor\"},\"currentEpochId()\":{\"notice\":\"Current epoch counter.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"setMerkleRoot(bytes32,uint256,uint256,uint256)\":{\"notice\":\"Sets a new merkle root for a claiming epoch.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"notice\":\"This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.Each epoch has a fixed total amount that gets depleted as users claim their allocations.Claims are based on merkle proofs and are subject to time constraints and pool availability.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/LimitedOCPointsMerkleClaim.sol\":\"LimitedOCPointsMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.22;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0x199be5843052ad12607e0edd27a617b0307ae39e0d190b1632c53be7566c40a5\",\"license\":\"GPL-3.0-or-later\"},\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x1bc6bfe11425d5f150d4c1f3c333ecea34e6ce0f262fb74c1754d80f4ac2339f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/payment/LimitedOCPointsMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"@animoca/anichess-ethereum-contracts-2.2.3/contracts/points/interface/IPoints.sol\\\";\\n\\n/// @title LimitedOCPointsMerkleClaim\\n/// @notice This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.\\n/// @notice Each epoch has a fixed total amount that gets depleted as users claim their allocations.\\n/// @notice Claims are based on merkle proofs and are subject to time constraints and pool availability.\\ncontract LimitedOCPointsMerkleClaim is TokenRecovery, ForwarderRegistryContext {\\n    /// @notice Thrown when the reward contract address is invalid.\\n    /// @param InvalidRewardContractAddress The address of the invalid reward contract.\\n    error InvalidRewardContractAddress(address InvalidRewardContractAddress);\\n\\n    /// @notice Thrown when trying to claim outside the valid time epoch.\\n    /// @param currentTime The current block timestamp.\\n    /// @param startTime The start time of the claiming epoch.\\n    /// @param endTime The end time of the claiming epoch.\\n    error ClaimingEpochNotActive(uint256 currentTime, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Thrown when trying to claim the same allocation more than once.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount being claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param epochId The epoch identifier.\\n    error AlreadyClaimed(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\\n\\n    /// @notice Thrown when a proof cannot be verified.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount being claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param epochId The epoch identifier.\\n    error InvalidProof(address recipient, uint256 amount, bytes32 reasonCode, uint256 epochId);\\n\\n    /// @notice Thrown when the pool doesn't have enough tokens for the claim.\\n    /// @param amountRequested The amount requested to claim.\\n    /// @param amountAvailable The amount available in the pool.\\n    error InsufficientPoolAmount(uint256 amountRequested, uint256 amountAvailable);\\n\\n    /// @notice Thrown when trying to access a non-existent epoch.\\n    /// @param epochId The epoch identifier.\\n    error ClaimEpochNotFound(uint256 epochId);\\n\\n    /// @notice Thrown when the start time is not before the end time.\\n    /// @param startTime The start time.\\n    /// @param endTime The end time.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime);\\n\\n    /// @notice Enum representing different claim validation errors.\\n    enum ClaimError {\\n        NoError,\\n        ClaimEpochNotFound,\\n        ClaimingEpochNotActive,\\n        AlreadyClaimed,\\n        InsufficientPoolAmount\\n    }\\n\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The role identifier for the operator role.\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice A reference to the reward contract.\\n    IPoints public immutable POINTS_CONTRACT;\\n\\n    /// @notice Struct representing a claiming epoch.\\n    struct ClaimEpoch {\\n        bytes32 merkleRoot;      // Merkle root for this epoch\\n        uint256 totalAmount;     // Total amount available for claiming\\n        uint256 amountLeft;      // Amount left to be claimed\\n        uint256 startTime;       // Start time for claiming\\n        uint256 endTime;         // End time for claiming\\n    }\\n\\n    /// @notice Current epoch counter.\\n    uint256 public currentEpochId;\\n\\n    /// @notice Mapping from epoch ID to claiming epoch data.\\n    mapping(uint256 => ClaimEpoch) public claimEpochs;\\n\\n    /// @notice Mapping from epoch ID to user address to claimed status.\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n\\n    /// @notice Emitted when a new merkle root is set for an epoch.\\n    /// @param epochId The epoch identifier.\\n    /// @param merkleRoot The merkle root for this epoch.\\n    /// @param totalAmount The total amount available for claiming.\\n    /// @param startTime The start time for claiming.\\n    /// @param endTime The end time for claiming.\\n    event MerkleRootSet(uint256 indexed epochId, bytes32 merkleRoot, uint256 totalAmount, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Emitted when a reward is claimed.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient of the claim.\\n    /// @param amount The amount claimed.\\n    /// @param amountLeft The amount left in the pool after this claim.\\n    event RewardClaimed(uint256 indexed epochId, address indexed recipient, uint256 amount, uint256 amountLeft);\\n\\n    /// @notice Constructor\\n    /// @param rewardContractAddress The address of the reward contract.\\n    /// @param forwarderRegistry The address of the forwarder registry.\\n    /// @dev Reverts with {InvalidRewardContractAddress} if the reward contract address is the zero address.\\n    constructor(\\n        address rewardContractAddress,\\n        IForwarderRegistry forwarderRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (rewardContractAddress == address(0)) {\\n            revert InvalidRewardContractAddress(rewardContractAddress);\\n        }\\n        POINTS_CONTRACT = IPoints(rewardContractAddress);\\n    }\\n\\n    /// @notice Sets a new merkle root for a claiming epoch.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InvalidClaimWindow} if startTime is not before endTime.\\n    /// @dev Emits a {MerkleRootSet} event.\\n    /// @param merkleRoot The merkle root for this epoch.\\n    /// @param totalAmount The total amount available for claiming in this epoch.\\n    /// @param startTime The start time for claiming.\\n    /// @param endTime The end time for claiming.\\n    function setMerkleRoot(\\n        bytes32 merkleRoot,\\n        uint256 totalAmount,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        \\n        if (startTime >= endTime) {\\n            revert InvalidClaimWindow(startTime, endTime);\\n        }\\n\\n        uint256 epochId = currentEpochId;\\n        claimEpochs[epochId] = ClaimEpoch({\\n            merkleRoot: merkleRoot,\\n            totalAmount: totalAmount,\\n            amountLeft: totalAmount,\\n            startTime: startTime,\\n            endTime: endTime\\n        });\\n\\n        unchecked {\\n            ++currentEpochId;\\n        }\\n\\n        emit MerkleRootSet(epochId, merkleRoot, totalAmount, startTime, endTime);\\n    }\\n\\n    /// @notice Claims rewards for a given recipient address.\\n    /// @dev Reverts with {ClaimEpochNotFound} if the epoch doesn't exist.\\n    /// @dev Reverts with {ClaimingEpochNotActive} if the current time is outside the claiming epoch.\\n    /// @dev Reverts with {AlreadyClaimed} if the user has already claimed for this epoch.\\n    /// @dev Reverts with {InvalidProof} if the merkle proof verification fails.\\n    /// @dev Reverts with {InsufficientPoolAmount} if the pool doesn't have enough tokens.\\n    /// @dev Emits a {RewardClaimed} event.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient for this claim.\\n    /// @param amount The amount to be claimed.\\n    /// @param reasonCode The reason code for the deposit.\\n    /// @param proof The merkle proof for verification.\\n    function claim(\\n        uint256 epochId,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 reasonCode,\\n        bytes32[] calldata proof\\n    ) external {\\n        ClaimEpoch storage epoch = claimEpochs[epochId];\\n        \\n        if (epoch.merkleRoot == bytes32(0)) {\\n            revert ClaimEpochNotFound(epochId);\\n        }\\n\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\\n            revert ClaimingEpochNotActive(currentTime, epoch.startTime, epoch.endTime);\\n        }\\n\\n        if (claimed[epochId][recipient]) {\\n            revert AlreadyClaimed(recipient, amount, reasonCode, epochId);\\n        }\\n\\n        if (epoch.amountLeft < amount) {\\n            revert InsufficientPoolAmount(amount, epoch.amountLeft);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, amount, reasonCode, epochId));\\n        if (!proof.verifyCalldata(epoch.merkleRoot, leaf)) {\\n            revert InvalidProof(recipient, amount, reasonCode, epochId);\\n        }\\n\\n        claimed[epochId][recipient] = true;\\n        epoch.amountLeft -= amount;\\n\\n        POINTS_CONTRACT.deposit(recipient, amount, reasonCode);\\n\\n        emit RewardClaimed(epochId, recipient, amount, epoch.amountLeft);\\n    }\\n\\n    /// @notice Checks if a user can claim rewards for a given epoch.\\n    /// @dev Returns ClaimError.ClaimEpochNotFound if the epoch doesn't exist.\\n    /// @dev Returns ClaimError.ClaimingEpochNotActive if the current time is outside the claiming epoch.\\n    /// @dev Returns ClaimError.AlreadyClaimed if the user has already claimed for this epoch.\\n    /// @dev Returns ClaimError.InsufficientPoolAmount if the pool doesn't have enough tokens.\\n    /// @dev Returns ClaimError.NoError if basic validation passes.\\n    /// @param epochId The epoch identifier.\\n    /// @param recipient The recipient address.\\n    /// @param amount The amount to be claimed.\\n    /// @return error The claim validation result.\\n    function canClaim(\\n        uint256 epochId,\\n        address recipient,\\n        uint256 amount\\n    ) public view returns (ClaimError error) {\\n        ClaimEpoch storage epoch = claimEpochs[epochId];\\n        \\n        if (epoch.merkleRoot == bytes32(0)) {\\n            return ClaimError.ClaimEpochNotFound;\\n        }\\n\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < epoch.startTime || currentTime > epoch.endTime) {\\n            return ClaimError.ClaimingEpochNotActive;\\n        }\\n\\n        if (claimed[epochId][recipient]) {\\n            return ClaimError.AlreadyClaimed;\\n        }\\n\\n        if (epoch.amountLeft < amount) {\\n            return ClaimError.InsufficientPoolAmount;\\n        }\\n\\n        return ClaimError.NoError;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n} \",\"keccak256\":\"0xf902d671b97dc347cd326b13fe7b80bba4334a8ebeb7024e3d80fcf97d7480a5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2798,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"currentEpochId","offset":0,"slot":"0","type":"t_uint256"},{"astId":2804,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"claimEpochs","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(ClaimEpoch)2795_storage)"},{"astId":2811,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_uint256,t_struct(ClaimEpoch)2795_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct LimitedOCPointsMerkleClaim.ClaimEpoch)","numberOfBytes":"32","value":"t_struct(ClaimEpoch)2795_storage"},"t_struct(ClaimEpoch)2795_storage":{"encoding":"inplace","label":"struct LimitedOCPointsMerkleClaim.ClaimEpoch","members":[{"astId":2786,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2788,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"totalAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2790,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"amountLeft","offset":0,"slot":"2","type":"t_uint256"},{"astId":2792,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"startTime","offset":0,"slot":"3","type":"t_uint256"},{"astId":2794,"contract":"contracts/payment/LimitedOCPointsMerkleClaim.sol:LimitedOCPointsMerkleClaim","label":"endTime","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256,bytes32,uint256)":[{"notice":"Thrown when trying to claim the same allocation more than once."}],"ClaimEpochNotFound(uint256)":[{"notice":"Thrown when trying to access a non-existent epoch."}],"ClaimingEpochNotActive(uint256,uint256,uint256)":[{"notice":"Thrown when trying to claim outside the valid time epoch."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"InsufficientPoolAmount(uint256,uint256)":[{"notice":"Thrown when the pool doesn't have enough tokens for the claim."}],"InvalidClaimWindow(uint256,uint256)":[{"notice":"Thrown when the start time is not before the end time."}],"InvalidProof(address,uint256,bytes32,uint256)":[{"notice":"Thrown when a proof cannot be verified."}],"InvalidRewardContractAddress(address)":[{"notice":"Thrown when the reward contract address is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"MerkleRootSet(uint256,bytes32,uint256,uint256,uint256)":{"notice":"Emitted when a new merkle root is set for an epoch."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RewardClaimed(uint256,address,uint256,uint256)":{"notice":"Emitted when a reward is claimed."}},"kind":"user","methods":{"OPERATOR_ROLE()":{"notice":"The role identifier for the operator role."},"POINTS_CONTRACT()":{"notice":"A reference to the reward contract."},"canClaim(uint256,address,uint256)":{"notice":"Checks if a user can claim rewards for a given epoch."},"claim(uint256,address,uint256,bytes32,bytes32[])":{"notice":"Claims rewards for a given recipient address."},"claimEpochs(uint256)":{"notice":"Mapping from epoch ID to claiming epoch data."},"claimed(uint256,address)":{"notice":"Mapping from epoch ID to user address to claimed status."},"constructor":{"notice":"Constructor"},"currentEpochId()":{"notice":"Current epoch counter."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"setMerkleRoot(bytes32,uint256,uint256,uint256)":{"notice":"Sets a new merkle root for a claiming epoch."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"notice":"This contract is designed for claiming reward tokens from a limited pool within fixed time epochs.Each epoch has a fixed total amount that gets depleted as users claim their allocations.Claims are based on merkle proofs and are subject to time constraints and pool availability.","version":1}}}}}}
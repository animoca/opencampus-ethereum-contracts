{"id":"eeebd51af0169c08b04963b5d5ad66ba","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {TokenMetadataStorage} from \"./../../metadata/libraries/TokenMetadataStorage.sol\";\nimport {TokenMetadataBase} from \"./../../metadata/base/TokenMetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\n    using ERC721Storage for ERC721Storage.Layout;\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @inheritdoc IERC721Metadata\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\n        return TokenMetadataBase.name();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\n        return TokenMetadataBase.symbol();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../metadata/interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../metadata/libraries/TokenMetadataStorage.sol\";\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MetadataBase} from \"./base/ERC721MetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Metadata is ERC721MetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n    /// @param name The name of the token.\n    /// @param symbol The symbol of the token.\n    /// @param metadataResolver The address of the metadata resolver contract.\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\n        ERC721Storage.initERC721Metadata();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to approve oneself.\n/// @param account The account trying to approve itself.\nerror ERC721SelfApproval(address account);\n\n/// @notice Thrown when trying to approveForAll oneself.\n/// @param account The account trying to approveForAll itself.\nerror ERC721SelfApprovalForAll(address account);\n\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when transferring a token to the zero address.\nerror ERC721TransferToAddressZero();\n\n/// @notice Thrown when a token does not exist but is required to.\n/// @param tokenId The identifier of the token that was checked.\nerror ERC721NonExistingToken(uint256 tokenId);\n\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when a token is not owned by the expected account.\n/// @param account The account that was expected to own the token.\n/// @param tokenId The identifier of the token.\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\n\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\n/// @param recipient The recipient contract.\n/// @param tokenId The identifier of the token.\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\n\n/// @notice Thrown when querying the balance of the zero address.\nerror ERC721BalanceOfAddressZero();\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when minting a token to the zero address.\nerror ERC721MintToAddressZero();\n\n/// @notice Thrown when minting a token that already exists.\n/// @param tokenId The identifier of the token that already exists.\nerror ERC721ExistingToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n/// @param tokenId The identifier of the token that has been burnt before.\nerror ERC721BurntToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when a token is transferred.\n/// @param from The previous token owner.\n/// @param to The new token owner.\n/// @param tokenId The transferred token identifier.\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n/// @notice Emitted when a single token approval is set.\n/// @param owner The token owner.\n/// @param approved The approved address.\n/// @param tokenId The approved token identifier.\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n/// @notice Emitted when an approval for all tokens is set or unset.\n/// @param owner The tokens owner.\n/// @param operator The approved address.\n/// @param approved True when then approval is set, false when it is unset.\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\ninterface IERC721BatchTransfer {\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\ninterface IERC721Burnable {\n    /// @notice Burns a token.\n    /// @dev Reverts if `tokenId` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(address from, uint256 tokenId) external;\n\n    /// @notice Burns a batch of tokens.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\ninterface IERC721Deliverable {\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the metadata URI for a token identifier.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier.\n    /// @return uri The metadata URI for the token identifier.\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\ninterface IERC721Mintable {\n    /// @notice Unsafely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(address to, uint256 tokenId) external;\n\n    /// @notice Safely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721Receiver {\n    /// @notice Handles the receipt of an ERC721 token.\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\n    /// @dev Note: The ERC721 contract address is always the message sender.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous token owner.\n    /// @param tokenId The token identifier.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse.\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n// solhint-disable-next-line max-line-length\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \"./../errors/ERC721Errors.sol\";\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \"./../errors/ERC721MintableErrors.sol\";\nimport {ERC721BurntToken} from \"./../errors/ERC721MintableOnceErrors.sol\";\nimport {InconsistentArrayLengths} from \"./../../../CommonErrors.sol\";\nimport {Transfer, Approval, ApprovalForAll} from \"./../events/ERC721Events.sol\";\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {IERC721Burnable} from \"./../interfaces/IERC721Burnable.sol\";\nimport {IERC721Receiver} from \"./../interfaces/IERC721Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC721Storage {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => uint256) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) approvals;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC721.storage\")) - 1);\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n\n    // Single token approval flag\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\n\n    // Burnt token magic value\n    // This magic number is used as the owner's value to indicate that the token has been burnt\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    function initERC721BatchTransfer() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    function initERC721Metadata() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    function initERC721Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    function initERC721Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\n    function initERC721Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param sender The message sender.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        address ownerAddress = _tokenOwner(owner);\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\n        if (to == address(0)) {\n            if (_tokenHasApproval(owner)) {\n                // remove the approval bit if it is present\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\n            }\n        } else {\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\n            if (owner != ownerWithApprovalBit) {\n                // add the approval bit if it is not present\n                s.owners[tokenId] = ownerWithApprovalBit;\n            }\n            s.approvals[tokenId] = to;\n        }\n        emit Approval(ownerAddress, to, tokenId);\n    }\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = uint256(uint160(to));\n        if (from != to) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                --s.balances[from];\n                //  cannot overflow as supply cannot overflow\n                ++s.balances[to];\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, \"\");\n        }\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(from, to, tokenId);\n        }\n\n        if (from != to && length != 0) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                s.balances[from] -= length;\n                // cannot overflow as supply cannot overflow\n                s.balances[to] += length;\n            }\n        }\n    }\n\n    /// @notice Unsafely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mint(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            s.mint(recipients[i], tokenIds[i]);\n        }\n    }\n\n    /// @notice Unsafely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mintOnce(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens once.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients once.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC721MintToAddressZero();\n\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            unchecked {\n                ++s.balances[to];\n            }\n\n            emit Transfer(address(0), to, tokenId);\n        }\n    }\n\n    /// @notice Burns a token by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n\n        unchecked {\n            // cannot underflow as balance is verified through TOKEN ownership\n            --s.balances[from];\n        }\n        emit Transfer(from, address(0), tokenId);\n    }\n\n    /// @notice Burns a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n            emit Transfer(from, address(0), tokenId);\n        }\n\n        if (length != 0) {\n            unchecked {\n                s.balances[from] -= length;\n            }\n        }\n    }\n\n    /// @notice Gets the balance of an address.\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the owner of a token.\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token.\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        return _tokenOwner(owner);\n    }\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenHasApproval(owner)) {\n            return s.approvals[tokenId];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\n        return _tokenWasBurnt(s.owners[tokenId]);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param tokenId Identifier of the token transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\n        return address(uint160(owner));\n    }\n\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\n        return uint160(owner) != 0;\n    }\n\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\n        return owner == BURNT_TOKEN_OWNER_VALUE;\n    }\n\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../libraries/TokenMetadataStorage.sol\";\n\n/// @title TokenMetadataBase (proxiable version).\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\nabstract contract TokenMetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Gets the token name. E.g. \"My Token\".\n    /// @return tokenName The token name.\n    function name() public view virtual returns (string memory tokenName) {\n        return TokenMetadataStorage.layout().name();\n    }\n\n    /// @notice Gets the token symbol. E.g. \"TOK\".\n    /// @return tokenSymbol The token symbol.\n    function symbol() public view virtual returns (string memory tokenSymbol) {\n        return TokenMetadataStorage.layout().symbol();\n    }\n\n    /// @notice Gets the token metadata resolver address.\n    /// @return tokenMetadataResolver The token metadata resolver address.\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return TokenMetadataStorage.layout().metadataResolver();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ITokenMetadataResolver\n/// @notice Interface for Token Metadata Resolvers.\ninterface ITokenMetadataResolver {\n    /// @notice Gets the token metadata URI for a token.\n    /// @param tokenContract The token contract for which to retrieve the token URI.\n    /// @param tokenId The token identifier.\n    /// @return tokenURI The token metadata URI.\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary TokenMetadataStorage {\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        ITokenMetadataResolver tokenMetadataResolver;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.phase\")) - 1);\n\n    /// @notice Initializes the metadata storage (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function constructorInit(\n        Layout storage s,\n        string memory tokenName,\n        string memory tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Initializes the metadata storage (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function proxyInit(\n        Layout storage s,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Gets the name of the token.\n    /// @return tokenName The name of the token contract.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token.\n    /// @return tokenSymbol The symbol of the token contract.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the address of the token metadata resolver.\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return s.tokenMetadataResolver;\n    }\n\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\n    /// @param tokenContract The address of the token contract.\n    /// @param tokenId The ID of the token.\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ITokenMetadataResolver} from \"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\";\nimport {IIssuersDIDRegistry} from \"./../../vc/interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./../../vc/interfaces/IRevocationRegistry.sol\";\nimport {OpenCampusCertificateNFTv1} from \"./../../vc/OpenCampusCertificateNFTv1.sol\";\n\ncontract OpenCampusCertificateNFTv1Mock is OpenCampusCertificateNFTv1 {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        IForwarderRegistry forwarderRegistry,\n        ITokenMetadataResolver metadataResolver,\n        IRevocationRegistry revocationRegistry,\n        IIssuersDIDRegistry didRegistry\n    ) OpenCampusCertificateNFTv1(tokenName, tokenSymbol, forwarderRegistry, metadataResolver, revocationRegistry, didRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title IAllowedIssuersRegistry\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\ninterface IIssuersDIDRegistry {\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\n\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\n}\n"},"contracts/vc/interfaces/IRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ninterface IRevocationRegistry {\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\n\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\n\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\n}\n"},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nlibrary CertificateNFTv1MetaData {\n    struct MetaData {\n        uint16 schemaVersion;\n        uint16 achievementType;\n        uint64 awardedDate;\n        uint64 validFrom;\n        uint64 validUtil;\n        string issuerDid;\n        string achievementId;\n    }\n}\n"},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {CertificateNFTv1MetaData} from \"./libraries/CertificateNFTv1MetaData.sol\";\nimport {OpenCampusCertificateNFTv1} from \"./OpenCampusCertificateNFTv1.sol\";\n\ncontract OpenCampusCertificateNFTMinter is ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n    OpenCampusCertificateNFTv1 internal immutable NFT_V1;\n\n    IRevocationRegistry internal _revocationRegistry;\n    /// @notice Thrown when the signature is invalid for the NFT payload.\n    error InvalidSignature();\n\n    /// @notice Thrown when the issuer is not one of the allowed issuers.\n    error IssuerNotAllowed();\n\n    /// @notice Thrown when the VC has been revoked.\n    error VcRevoked();\n\n    constructor(\n        IIssuersDIDRegistry didRegistry,\n        OpenCampusCertificateNFTv1 nftv1,\n        IRevocationRegistry revocationRegistry\n    ) ContractOwnership(msg.sender) {\n        DID_REGISTRY = didRegistry;\n        NFT_V1 = nftv1;\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @param revocationRegistry The address of the Revocation Registry contract.\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @dev Reverts with `VcRevoked` error if the token being minted has been revoked.\n    /// @dev Reverts with `IssuerNotAllowed` error if recovered issuer is not valid in the DIDRegistry.\n    /// @dev Reverts with `InvalidSignature` error if the signature is not 65 bytes in length.\n    /// @dev signature is ECDSA signature for (to, tokenId, metadata).\n    /// @dev signature is a 65 bytes raw signature without compacting.\n    /// @param to The address to which `tokenId` would be minted to.\n    /// @param tokenId The id of the token to be minted.\n    /// @param metadata On-chain metadata for the NFT.\n    /// @param signature The ECDSA signature for the payload (`to`,`tokenId`,`metadata`).\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata, bytes calldata signature) external {\n        // recover the signer\n        if (signature.length != 65) revert InvalidSignature();\n\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        assembly {\n            r := calldataload(signature.offset)\n            s := calldataload(add(signature.offset, 0x20))\n            v := calldataload(add(signature.offset, 0x21))\n        }\n\n        // Use the native ecrecover provided by the EVM\n        address signer = ecrecover(keccak256(abi.encode(to, tokenId, metadata)), v, r, s);\n        bytes32 hashedDid = keccak256(abi.encodePacked(metadata.issuerDid));\n\n        if (DID_REGISTRY.issuers(hashedDid, signer)) {\n            if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\n                revert VcRevoked();\n            }\n            NFT_V1.mint(to, tokenId, metadata);\n        } else {\n            revert IssuerNotAllowed();\n        }\n    }\n}\n"},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n// other imports\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n// access control imports\nimport {AccessControl} from \"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\";\nimport {AccessControlStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\n// ERC721 imports\nimport {IERC721} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\";\nimport {IERC721Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\";\nimport {ERC721Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\";\nimport {Transfer} from \"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\";\nimport {ERC721Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\";\nimport {ITokenMetadataResolver} from \"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\";\n// ForwardRegistry imports\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n// local imports\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {CertificateNFTv1MetaData} from \"./libraries/CertificateNFTv1MetaData.sol\";\n\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl, ForwarderRegistryContext {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\n\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n    IRevocationRegistry internal _revocationRegistry;\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n    bytes32 public constant MINTER_ROLE = \"minter\";\n    bytes32 public constant OPERATOR_ROLE = \"operator\";\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\n\n    /// @notice Thrown when burn operation cannot be executed.\n    error InvalidBurn();\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        IForwarderRegistry forwarderRegistry,\n        ITokenMetadataResolver metadataResolver,\n        IRevocationRegistry revocationRegistry,\n        IIssuersDIDRegistry didRegistry\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\n        ERC721Storage.init();\n        DID_REGISTRY = didRegistry;\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @param revocationRegistry The address of the Revocation Registry contract.\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\n    /// @param to The owner of `tokenId`\n    /// @param tokenId The id of the VC NFT to be minted\n    /// @param metadata Metadata for `tokenId`\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\n\n        ERC721Storage.layout().mint(to, tokenId);\n        vcData[tokenId] = metadata;\n    }\n\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\n    /// @param tokenId The Token Id to be burnt.\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\n    function burn(uint256 tokenId) external {\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\n\n            unchecked {\n                // cannot underflow as balance is verified through TOKEN ownership\n                --ERC721Storage.layout().balances[owner];\n            }\n            emit Transfer(owner, address(0), tokenId);\n        } else {\n            revert InvalidBurn();\n        }\n    }\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) external {\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) external {\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) external view returns (uint256 balance) {\n        return ERC721Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\n        return ERC721Storage.layout().ownerOf(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) external view returns (address approved) {\n        return ERC721Storage.layout().getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\n    }\n\n    /// @notice `sender` is operatable if the sender is a valid issuer for `tokenId` or have been granted `operator` role before\n    /// @dev Reverts with `NotRoleHolder` if `sender` is neither allowed token issuer nor an operator for this contract.\n    /// @param sender The sender that trigger the contract.\n    /// @param tokenId The identifier of the token to transfer.\n    function _isSenderOperatable(address sender, uint256 tokenId) internal view {\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\n        // either the sender is allowed to operate on behalf of the issuer\n        // or sender has operator role for this NFT\n        if (!DID_REGISTRY.issuers(hashedDid, sender)) {\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, sender);\n        }\n    }\n\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\n    /// @inheritdoc IERC721\n    function transferFrom(address from, address to, uint256 tokenId) external {\n        address sender = _msgSender();\n        _isSenderOperatable(sender, tokenId);\n        ERC721Storage.layout().transferFrom(sender, from, to, tokenId);\n    }\n\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\n        address sender = _msgSender();\n        _isSenderOperatable(sender, tokenId);\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId);\n    }\n\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\n        address sender = _msgSender();\n        _isSenderOperatable(sender, tokenId);\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId, data);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[22],"AccessControlBase":[179],"ContractOwnership":[55]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":180,"src":"58:63:1","symbolAliases":[{"foreign":{"id":13,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"66:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":56,"src":"122:58:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":18,"name":"AccessControlBase","nameLocations":["384:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"384:17:1"},"id":19,"nodeType":"InheritanceSpecifier","src":"384:17:1"},{"baseName":{"id":20,"name":"ContractOwnership","nameLocations":["403:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"403:17:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"403:17:1"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"182:167:1","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":22,"linearizedBaseContracts":[22,55,882,899,227,179,4075,331,315],"name":"AccessControl","nameLocation":"367:13:1","nodeType":"ContractDefinition","nodes":[],"scope":23,"src":"349:76:1","usedErrors":[236,259,887],"usedEvents":[277,286,295]}],"src":"32:394:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[55],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[852],"InterfaceDetection":[882]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":853,"src":"58:82:2","symbolAliases":[{"foreign":{"id":25,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":28,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":228,"src":"141:71:2","symbolAliases":[{"foreign":{"id":27,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":883,"src":"213:77:2","symbolAliases":[{"foreign":{"id":29,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":32,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":227,"src":"549:21:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":34,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":882,"src":"572:18:2"},"id":35,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":55,"linearizedBaseContracts":[55,882,899,227,4075,331],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":39,"libraryName":{"id":36,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"632:31:2"},"referencedDeclaration":625,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":49,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":695,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":54,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":55,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":56,"src":"510:570:2","usedErrors":[259,887],"usedEvents":[295]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[179],"AccessControlStorage":[594],"Context":[4075],"ContractOwnershipStorage":[852],"IAccessControl":[315]},"id":180,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":316,"src":"58:76:3","symbolAliases":[{"foreign":{"id":58,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"66:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":61,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":595,"src":"135:77:3","symbolAliases":[{"foreign":{"id":60,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"143:20:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":63,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":853,"src":"213:85:3","symbolAliases":[{"foreign":{"id":62,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"221:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":4076,"src":"299:66:3","symbolAliases":[{"foreign":{"id":64,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"307:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":67,"name":"IAccessControl","nameLocations":["632:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"632:14:3"},"id":68,"nodeType":"InheritanceSpecifier","src":"632:14:3"},{"baseName":{"id":69,"name":"Context","nameLocations":["648:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"648:7:3"},"id":70,"nodeType":"InheritanceSpecifier","src":"648:7:3"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"367:226:3","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":179,"linearizedBaseContracts":[179,4075,315],"name":"AccessControlBase","nameLocation":"611:17:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":74,"libraryName":{"id":71,"name":"AccessControlStorage","nameLocations":["668:20:3"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"668:20:3"},"nodeType":"UsingForDirective","src":"662:59:3","typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"AccessControlStorage.Layout","nameLocations":["693:20:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"693:27:3"},"referencedDeclaration":359,"src":"693:27:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":78,"libraryName":{"id":75,"name":"ContractOwnershipStorage","nameLocations":["732:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"732:24:3"},"nodeType":"UsingForDirective","src":"726:67:3","typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:3","786:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"761:31:3"},"referencedDeclaration":625,"src":"761:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":109,"nodeType":"Block","src":"1175:198:3","statements":[{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"operator","nameLocation":"1193:8:3","nodeType":"VariableDeclaration","scope":109,"src":"1185:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":90,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"1204:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:3"},{"expression":{"arguments":[{"id":96,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1283:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":91,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1226:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1226:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1226:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"ExpressionStatement","src":"1226:66:3"},{"expression":{"arguments":[{"id":104,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1342:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":105,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":106,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1357:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":99,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1302:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1302:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:3","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":410,"src":"1302:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":108,"nodeType":"ExpressionStatement","src":"1302:64:3"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"799:312:3","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":110,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"role","nameLocation":"1143:4:3","nodeType":"VariableDeclaration","scope":110,"src":"1135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":80,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"account","nameLocation":"1157:7:3","nodeType":"VariableDeclaration","scope":110,"src":"1149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1175:0:3"},"scope":179,"src":"1116:257:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":141,"nodeType":"Block","src":"1754:199:3","statements":[{"assignments":[119],"declarations":[{"constant":false,"id":119,"mutability":"mutable","name":"operator","nameLocation":"1772:8:3","nodeType":"VariableDeclaration","scope":141,"src":"1764:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":122,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":120,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"1783:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:3"},{"expression":{"arguments":[{"id":128,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1862:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":123,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1805:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1805:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1805:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1805:66:3"},{"expression":{"arguments":[{"id":136,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1922:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":137,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":138,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1937:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":131,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1881:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1881:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:3","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":447,"src":"1881:40:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"1881:65:3"}]},"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"1379:310:3","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":142,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:3","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"role","nameLocation":"1722:4:3","nodeType":"VariableDeclaration","scope":142,"src":"1714:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"1736:7:3","nodeType":"VariableDeclaration","scope":142,"src":"1728:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:3"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"1754:0:3"},"scope":179,"src":"1694:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[304],"body":{"id":158,"nodeType":"Block","src":"2039:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":153,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"2092:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":155,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2106:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":148,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2049:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"2049:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:3","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":482,"src":"2049:42:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"ExpressionStatement","src":"2049:62:3"}]},"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"1959:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":159,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:3","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"role","nameLocation":"2024:4:3","nodeType":"VariableDeclaration","scope":159,"src":"2016:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:3"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2039:0:3"},"scope":179,"src":"1994:124:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[314],"body":{"id":177,"nodeType":"Block","src":"2245:76:3","statements":[{"expression":{"arguments":[{"id":173,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":174,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":169,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2262:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"2262:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:3","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"2262:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":168,"id":176,"nodeType":"Return","src":"2255:59:3"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"2124:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":178,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:3","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"role","nameLocation":"2184:4:3","nodeType":"VariableDeclaration","scope":178,"src":"2176:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"account","nameLocation":"2198:7:3","nodeType":"VariableDeclaration","scope":178,"src":"2190:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:3"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:3","nodeType":"VariableDeclaration","scope":178,"src":"2230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":166,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:3"},"scope":179,"src":"2159:162:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":180,"src":"593:1730:3","usedErrors":[236,259],"usedEvents":[277,286]}],"src":"32:2292:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[4075],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[852],"IERC173":[331]},"id":228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":181,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":332,"src":"58:52:4","symbolAliases":[{"foreign":{"id":182,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"66:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":185,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":853,"src":"111:85:4","symbolAliases":[{"foreign":{"id":184,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"119:24:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":187,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":4076,"src":"197:66:4","symbolAliases":[{"foreign":{"id":186,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"205:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":189,"name":"IERC173","nameLocations":["586:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":331,"src":"586:7:4"},"id":190,"nodeType":"InheritanceSpecifier","src":"586:7:4"},{"baseName":{"id":191,"name":"Context","nameLocations":["595:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"595:7:4"},"id":192,"nodeType":"InheritanceSpecifier","src":"595:7:4"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"265:278:4","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":227,"linearizedBaseContracts":[227,4075,331],"name":"ContractOwnershipBase","nameLocation":"561:21:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":196,"libraryName":{"id":193,"name":"ContractOwnershipStorage","nameLocations":["615:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"615:24:4"},"nodeType":"UsingForDirective","src":"609:67:4","typeName":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:4","669:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"644:31:4"},"referencedDeclaration":625,"src":"644:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[330],"body":{"id":208,"nodeType":"Block","src":"765:65:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":202,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"782:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"782:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":772,"src":"782:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":201,"id":207,"nodeType":"Return","src":"775:48:4"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"682:23:4","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:4","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"724:2:4"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":209,"src":"756:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:4"},"scope":227,"src":"710:120:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[324],"body":{"id":225,"nodeType":"Block","src":"924:92:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"986:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1000:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":215,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"934:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"934:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:4","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":759,"src":"934:51:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"934:75:4"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"836:23:4","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":226,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:4","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:4","nodeType":"VariableDeclaration","scope":226,"src":"891:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:4"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"924:0:4"},"scope":227,"src":"864:152:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":228,"src":"543:475:4","usedErrors":[259],"usedEvents":[295]}],"src":"32:987:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245]},"id":246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":229,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"58:165:5","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":236,"name":"NotRoleHolder","nameLocation":"229:13:5","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"role","nameLocation":"251:4:5","nodeType":"VariableDeclaration","scope":236,"src":"243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"account","nameLocation":"265:7:5","nodeType":"VariableDeclaration","scope":236,"src":"257:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:5"},"src":"223:51:5"},{"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"276:238:5","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":245,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:5","nodeType":"ErrorDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:5","nodeType":"VariableDeclaration","scope":245,"src":"548:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"580:4:5","nodeType":"VariableDeclaration","scope":245,"src":"572:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"account","nameLocation":"594:7:5","nodeType":"VariableDeclaration","scope":245,"src":"586:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:5"},"src":"514:89:5"}],"src":"32:572:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[252]},"id":253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":247,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"58:128:6","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":252,"name":"TargetIsNotAContract","nameLocation":"192:20:6","nodeType":"ErrorDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:6","nodeType":"VariableDeclaration","scope":252,"src":"213:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:6"},"src":"186:51:6"}],"src":"32:206:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[259],"NotTargetContractOwner":[266]},"id":267,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":254,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"58:130:7","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":259,"name":"NotContractOwner","nameLocation":"194:16:7","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"219:7:7","nodeType":"VariableDeclaration","scope":259,"src":"211:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:7"},"src":"188:40:7"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"230:194:7","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":266,"name":"NotTargetContractOwner","nameLocation":"430:22:7","nodeType":"ErrorDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:7","nodeType":"VariableDeclaration","scope":266,"src":"453:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"account","nameLocation":"485:7:7","nodeType":"VariableDeclaration","scope":266,"src":"477:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:7"},"src":"424:70:7"}],"src":"32:463:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","exportedSymbols":{"RoleGranted":[277],"RoleRevoked":[286]},"id":287,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":268,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"anonymous":false,"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"58:223:8","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":277,"name":"RoleGranted","nameLocation":"287:11:8","nodeType":"EventDefinition","parameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"307:4:8","nodeType":"VariableDeclaration","scope":277,"src":"299:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":273,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"321:7:8","nodeType":"VariableDeclaration","scope":277,"src":"313:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":275,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"338:8:8","nodeType":"VariableDeclaration","scope":277,"src":"330:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":274,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"298:49:8"},"src":"281:67:8"},{"anonymous":false,"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"350:225:8","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":286,"name":"RoleRevoked","nameLocation":"581:11:8","nodeType":"EventDefinition","parameters":{"id":285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"601:4:8","nodeType":"VariableDeclaration","scope":286,"src":"593:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":282,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"615:7:8","nodeType":"VariableDeclaration","scope":286,"src":"607:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":284,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"632:8:8","nodeType":"VariableDeclaration","scope":286,"src":"624:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:49:8"},"src":"575:67:8"}],"src":"32:611:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[295]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":288,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"anonymous":false,"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"58:155:9","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":295,"name":"OwnershipTransferred","nameLocation":"219:20:9","nodeType":"EventDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:9","nodeType":"VariableDeclaration","scope":295,"src":"240:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":293,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:9","nodeType":"VariableDeclaration","scope":295,"src":"271:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:9"},"src":"213:84:9"}],"src":"32:269:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[315]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"58:59:10","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":315,"linearizedBaseContracts":[315],"name":"IAccessControl","nameLocation":"127:14:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"148:182:10","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":304,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"344:12:10","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"365:4:10","nodeType":"VariableDeclaration","scope":304,"src":"357:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:14:10"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[],"src":"379:0:10"},"scope":315,"src":"335:45:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"386:173:10","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"573:7:10","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"role","nameLocation":"589:4:10","nodeType":"VariableDeclaration","scope":314,"src":"581:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":306,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"603:7:10","nodeType":"VariableDeclaration","scope":314,"src":"595:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:31:10"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"hasRole_","nameLocation":"640:8:10","nodeType":"VariableDeclaration","scope":314,"src":"635:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"635:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"634:15:10"},"scope":315,"src":"564:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":316,"src":"117:535:10","usedErrors":[],"usedEvents":[]}],"src":"32:621:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[331]},"id":332,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"58:182:11","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":331,"linearizedBaseContracts":[331],"name":"IERC173","nameLocation":"250:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"264:342:11","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":324,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:11","nodeType":"FunctionDefinition","parameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:11","nodeType":"VariableDeclaration","scope":324,"src":"638:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:11"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"664:0:11"},"scope":331,"src":"611:54:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"671:116:11","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":330,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:11","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"806:2:11"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:11","nodeType":"VariableDeclaration","scope":330,"src":"832:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":327,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:11"},"scope":331,"src":"792:63:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":332,"src":"240:617:11","usedErrors":[],"usedEvents":[]}],"src":"32:826:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[594],"Address":[4053],"IAccessControl":[315],"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245],"RoleGranted":[277],"RoleRevoked":[286],"TargetIsNotAContract":[252]},"id":595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":333,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":336,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":246,"src":"58:95:12","symbolAliases":[{"foreign":{"id":334,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"66:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":335,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"81:27:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":338,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":253,"src":"154:60:12","symbolAliases":[{"foreign":{"id":337,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"162:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","file":"./../events/AccessControlEvents.sol","id":341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":287,"src":"215:77:12","symbolAliases":[{"foreign":{"id":339,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"223:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":340,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"236:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":316,"src":"293:66:12","symbolAliases":[{"foreign":{"id":342,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"301:14:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":345,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":4054,"src":"360:66:12","symbolAliases":[{"foreign":{"id":344,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"368:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":594,"linearizedBaseContracts":[594],"name":"AccessControlStorage","nameLocation":"436:20:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":348,"libraryName":{"id":346,"name":"Address","nameLocations":["469:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":4053,"src":"469:7:12"},"nodeType":"UsingForDirective","src":"463:26:12","typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"481:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":352,"libraryName":{"id":349,"name":"AccessControlStorage","nameLocations":["500:20:12"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"500:20:12"},"nodeType":"UsingForDirective","src":"494:59:12","typeName":{"id":351,"nodeType":"UserDefinedTypeName","pathNode":{"id":350,"name":"AccessControlStorage.Layout","nameLocations":["525:20:12","546:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"525:27:12"},"referencedDeclaration":359,"src":"525:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":359,"members":[{"constant":false,"id":358,"mutability":"mutable","name":"roles","nameLocation":"628:5:12","nodeType":"VariableDeclaration","scope":359,"src":"583:50:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":357,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"591:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"583:44:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":356,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"602:24:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":355,"name":"bool","nodeType":"ElementaryTypeName","src":"621:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"566:6:12","nodeType":"StructDefinition","scope":594,"src":"559:81:12","visibility":"public"},{"constant":true,"id":372,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"672:19:12","nodeType":"VariableDeclaration","scope":594,"src":"646:124:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"720:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":365,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"710:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"710:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"702:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:12","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"702:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"702:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"694:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"694:7:12","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"694:76:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":409,"nodeType":"Block","src":"1246:156:12","statements":[{"condition":{"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1260:25:12","subExpression":{"arguments":[{"id":387,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1271:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1277:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":385,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1261:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1263:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1261:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1261:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":408,"nodeType":"IfStatement","src":"1256:140:12","trueBody":{"id":407,"nodeType":"Block","src":"1287:109:12","statements":[{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":391,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1301:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1303:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1301:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":396,"indexExpression":{"id":393,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1309:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1301:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":397,"indexExpression":{"id":394,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1315:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1301:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1326:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1301:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"1301:29:12"},{"eventCall":{"arguments":[{"id":402,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1361:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":403,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1367:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":404,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"1376:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":401,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1349:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"EmitStatement","src":"1344:41:12"}]}}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"777:369:12","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":410,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1160:9:12","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"s","nameLocation":"1185:1:12","nodeType":"VariableDeclaration","scope":410,"src":"1170:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":375,"nodeType":"UserDefinedTypeName","pathNode":{"id":374,"name":"Layout","nameLocations":["1170:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1170:6:12"},"referencedDeclaration":359,"src":"1170:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1196:4:12","nodeType":"VariableDeclaration","scope":410,"src":"1188:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1188:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"account","nameLocation":"1210:7:12","nodeType":"VariableDeclaration","scope":410,"src":"1202:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":379,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":382,"mutability":"mutable","name":"operator","nameLocation":"1227:8:12","nodeType":"VariableDeclaration","scope":410,"src":"1219:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"1219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1169:67:12"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[],"src":"1246:0:12"},"scope":594,"src":"1151:251:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":446,"nodeType":"Block","src":"1876:156:12","statements":[{"condition":{"arguments":[{"id":425,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1900:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":426,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1906:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":423,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1890:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1892:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1890:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":445,"nodeType":"IfStatement","src":"1886:140:12","trueBody":{"id":444,"nodeType":"Block","src":"1916:110:12","statements":[{"expression":{"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":428,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1930:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1932:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1930:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":433,"indexExpression":{"id":430,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1938:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1930:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":434,"indexExpression":{"id":431,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1944:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1930:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1955:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1930:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":437,"nodeType":"ExpressionStatement","src":"1930:30:12"},{"eventCall":{"arguments":[{"id":439,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1991:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":440,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1997:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2006:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":438,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"1979:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"EmitStatement","src":"1974:41:12"}]}}]},"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"1408:367:12","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1789:10:12","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"s","nameLocation":"1815:1:12","nodeType":"VariableDeclaration","scope":447,"src":"1800:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":413,"nodeType":"UserDefinedTypeName","pathNode":{"id":412,"name":"Layout","nameLocations":["1800:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1800:6:12"},"referencedDeclaration":359,"src":"1800:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"role","nameLocation":"1826:4:12","nodeType":"VariableDeclaration","scope":447,"src":"1818:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1818:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"account","nameLocation":"1840:7:12","nodeType":"VariableDeclaration","scope":447,"src":"1832:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":417,"name":"address","nodeType":"ElementaryTypeName","src":"1832:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"operator","nameLocation":"1857:8:12","nodeType":"VariableDeclaration","scope":447,"src":"1849:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1799:67:12"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"1876:0:12"},"scope":594,"src":"1780:252:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":481,"nodeType":"Block","src":"2367:134:12","statements":[{"expression":{"arguments":[{"id":461,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2394:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":462,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2400:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":458,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2377:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2379:14:12","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"2377:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2377:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":464,"nodeType":"ExpressionStatement","src":"2377:30:12"},{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":465,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2417:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2419:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"2417:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":470,"indexExpression":{"id":467,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2425:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2417:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":471,"indexExpression":{"id":468,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2431:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2417:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2441:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2417:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"2417:29:12"},{"eventCall":{"arguments":[{"id":476,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2473:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2479:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":478,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2487:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":475,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2461:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2461:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":480,"nodeType":"EmitStatement","src":"2456:38:12"}]},"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"2038:245:12","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":482,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2297:12:12","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"s","nameLocation":"2325:1:12","nodeType":"VariableDeclaration","scope":482,"src":"2310:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":450,"nodeType":"UserDefinedTypeName","pathNode":{"id":449,"name":"Layout","nameLocations":["2310:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2310:6:12"},"referencedDeclaration":359,"src":"2310:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"sender","nameLocation":"2336:6:12","nodeType":"VariableDeclaration","scope":482,"src":"2328:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"role","nameLocation":"2352:4:12","nodeType":"VariableDeclaration","scope":482,"src":"2344:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2344:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2309:48:12"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[],"src":"2367:0:12"},"scope":594,"src":"2288:213:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"2789:46:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":495,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"2806:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2808:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"2806:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":498,"indexExpression":{"id":497,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"2814:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":500,"indexExpression":{"id":499,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2820:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":494,"id":501,"nodeType":"Return","src":"2799:29:12"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"2507:173:12","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2694:7:12","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"s","nameLocation":"2717:1:12","nodeType":"VariableDeclaration","scope":503,"src":"2702:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":485,"nodeType":"UserDefinedTypeName","pathNode":{"id":484,"name":"Layout","nameLocations":["2702:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2702:6:12"},"referencedDeclaration":359,"src":"2702:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"role","nameLocation":"2728:4:12","nodeType":"VariableDeclaration","scope":503,"src":"2720:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2720:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"account","nameLocation":"2742:7:12","nodeType":"VariableDeclaration","scope":503,"src":"2734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2701:49:12"},"returnParameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"hasRole_","nameLocation":"2779:8:12","nodeType":"VariableDeclaration","scope":503,"src":"2774:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":492,"name":"bool","nodeType":"ElementaryTypeName","src":"2774:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2773:15:12"},"scope":594,"src":"2685:150:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":532,"nodeType":"Block","src":"3280:164:12","statements":[{"condition":{"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3294:28:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":515,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3295:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3310:10:12","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"3295:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3295:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"IfStatement","src":"3290:77:12","trueBody":{"errorCall":{"arguments":[{"id":520,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3352:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":519,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3331:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3331:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"RevertStatement","src":"3324:43:12"}},{"expression":{"arguments":[{"id":528,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3423:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":529,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"3429:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":525,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3399:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":524,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"3384:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$315_$","typeString":"type(contract IAccessControl)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$315","typeString":"contract IAccessControl"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3415:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":314,"src":"3384:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":514,"id":531,"nodeType":"Return","src":"3377:60:12"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"2841:296:12","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":533,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3151:21:12","nodeType":"FunctionDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"targetContract","nameLocation":"3181:14:12","nodeType":"VariableDeclaration","scope":533,"src":"3173:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"3173:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"role","nameLocation":"3205:4:12","nodeType":"VariableDeclaration","scope":533,"src":"3197:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3197:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"account","nameLocation":"3219:7:12","nodeType":"VariableDeclaration","scope":533,"src":"3211:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":509,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3172:55:12"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3256:22:12","nodeType":"VariableDeclaration","scope":533,"src":"3251:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"3251:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3250:29:12"},"scope":594,"src":"3142:302:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":556,"nodeType":"Block","src":"3732:83:12","statements":[{"condition":{"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3746:25:12","subExpression":{"arguments":[{"id":546,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3757:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":547,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"3763:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":544,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"3747:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3749:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"3747:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3747:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":555,"nodeType":"IfStatement","src":"3742:66:12","trueBody":{"errorCall":{"arguments":[{"id":551,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3794:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":552,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"3800:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":550,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"3780:13:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3780:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"RevertStatement","src":"3773:35:12"}}]},"documentation":{"id":534,"nodeType":"StructuredDocumentation","src":"3450:190:12","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":557,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3654:14:12","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"s","nameLocation":"3684:1:12","nodeType":"VariableDeclaration","scope":557,"src":"3669:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":536,"nodeType":"UserDefinedTypeName","pathNode":{"id":535,"name":"Layout","nameLocations":["3669:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"3669:6:12"},"referencedDeclaration":359,"src":"3669:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"role","nameLocation":"3695:4:12","nodeType":"VariableDeclaration","scope":557,"src":"3687:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"account","nameLocation":"3709:7:12","nodeType":"VariableDeclaration","scope":557,"src":"3701:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3668:49:12"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"3732:0:12"},"scope":594,"src":"3645:170:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":580,"nodeType":"Block","src":"4234:141:12","statements":[{"condition":{"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4248:53:12","subExpression":{"arguments":[{"id":568,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4271:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4287:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"4293:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":567,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"4249:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4249:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"4244:124:12","trueBody":{"errorCall":{"arguments":[{"id":574,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4338:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":575,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4354:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":576,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"4360:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":573,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"4310:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4310:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":578,"nodeType":"RevertStatement","src":"4303:65:12"}}]},"documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"3821:301:12","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":581,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4136:28:12","nodeType":"FunctionDefinition","parameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"targetContract","nameLocation":"4173:14:12","nodeType":"VariableDeclaration","scope":581,"src":"4165:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"role","nameLocation":"4197:4:12","nodeType":"VariableDeclaration","scope":581,"src":"4189:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4189:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":564,"mutability":"mutable","name":"account","nameLocation":"4211:7:12","nodeType":"VariableDeclaration","scope":581,"src":"4203:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"4203:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4164:55:12"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"4234:0:12"},"scope":594,"src":"4127:248:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"4440:115:12","statements":[{"assignments":[588],"declarations":[{"constant":false,"id":588,"mutability":"mutable","name":"position","nameLocation":"4458:8:12","nodeType":"VariableDeclaration","scope":592,"src":"4450:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4450:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":590,"initialValue":{"id":589,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4469:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4450:38:12"},{"AST":{"nativeSrc":"4507:42:12","nodeType":"YulBlock","src":"4507:42:12","statements":[{"nativeSrc":"4521:18:12","nodeType":"YulAssignment","src":"4521:18:12","value":{"name":"position","nativeSrc":"4531:8:12","nodeType":"YulIdentifier","src":"4531:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"4521:6:12","nodeType":"YulIdentifier","src":"4521:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":588,"isOffset":false,"isSlot":false,"src":"4531:8:12","valueSize":1},{"declaration":585,"isOffset":false,"isSlot":true,"src":"4521:6:12","suffix":"slot","valueSize":1}],"id":591,"nodeType":"InlineAssembly","src":"4498:51:12"}]},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4390:6:12","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"4396:2:12"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"s","nameLocation":"4437:1:12","nodeType":"VariableDeclaration","scope":593,"src":"4422:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":584,"nodeType":"UserDefinedTypeName","pathNode":{"id":583,"name":"Layout","nameLocations":["4422:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"4422:6:12"},"referencedDeclaration":359,"src":"4422:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4421:18:12"},"scope":594,"src":"4381:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":595,"src":"428:4129:12","usedErrors":[],"usedEvents":[]}],"src":"32:4526:12"},"id":12},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[4053],"ContractOwnershipStorage":[852],"IERC173":[331],"InterfaceDetectionStorage":[1000],"NotContractOwner":[259],"NotTargetContractOwner":[266],"OwnershipTransferred":[295],"ProxyInitialization":[1280],"TargetIsNotAContract":[252]},"id":853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":596,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":267,"src":"58:97:13","symbolAliases":[{"foreign":{"id":597,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"66:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":598,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"84:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":253,"src":"156:60:13","symbolAliases":[{"foreign":{"id":600,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"164:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":296,"src":"217:66:13","symbolAliases":[{"foreign":{"id":602,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"225:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":605,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":332,"src":"284:52:13","symbolAliases":[{"foreign":{"id":604,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"292:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":4054,"src":"337:66:13","symbolAliases":[{"foreign":{"id":606,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"345:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":1281,"src":"404:84:13","symbolAliases":[{"foreign":{"id":608,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"412:19:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":1001,"src":"489:104:13","symbolAliases":[{"foreign":{"id":610,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"497:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":852,"linearizedBaseContracts":[852],"name":"ContractOwnershipStorage","nameLocation":"603:24:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":614,"libraryName":{"id":612,"name":"Address","nameLocations":["640:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":4053,"src":"640:7:13"},"nodeType":"UsingForDirective","src":"634:26:13","typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":618,"libraryName":{"id":615,"name":"ContractOwnershipStorage","nameLocations":["671:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"671:24:13"},"nodeType":"UsingForDirective","src":"665:67:13","typeName":{"id":617,"nodeType":"UserDefinedTypeName","pathNode":{"id":616,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:13","725:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"700:31:13"},"referencedDeclaration":625,"src":"700:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":622,"libraryName":{"id":619,"name":"InterfaceDetectionStorage","nameLocations":["743:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"743:25:13"},"nodeType":"UsingForDirective","src":"737:69:13","typeName":{"id":621,"nodeType":"UserDefinedTypeName","pathNode":{"id":620,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:13","799:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"773:32:13"},"referencedDeclaration":910,"src":"773:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":625,"members":[{"constant":false,"id":624,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:13","nodeType":"VariableDeclaration","scope":625,"src":"836:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:13","nodeType":"StructDefinition","scope":852,"src":"812:52:13","visibility":"public"},{"constant":true,"id":638,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:13","nodeType":"VariableDeclaration","scope":852,"src":"870:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":631,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":629,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:13","typeDescriptions":{}}},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:13","typeDescriptions":{}}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":651,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:13","nodeType":"VariableDeclaration","scope":852,"src":"1004:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":644,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:13","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:13","typeDescriptions":{}}},"id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":694,"nodeType":"Block","src":"1641:267:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":660,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1655:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:13","typeDescriptions":{}}},"id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":681,"nodeType":"IfStatement","src":"1651:152:13","trueBody":{"id":680,"nodeType":"Block","src":"1683:120:13","statements":[{"expression":{"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":666,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"1697:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"1697:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":669,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1715:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":671,"nodeType":"ExpressionStatement","src":"1697:30:13"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:13","typeDescriptions":{}}},"id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":677,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1779:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":672,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"1746:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"EmitStatement","src":"1741:51:13"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":688,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1874:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}],"id":687,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$331","typeString":"type(contract IERC173)"}},"id":690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":682,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1812:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"1812:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:13","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1812:56:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"ExpressionStatement","src":"1812:89:13"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"1139:423:13","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":695,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:13","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"s","nameLocation":"1607:1:13","nodeType":"VariableDeclaration","scope":695,"src":"1592:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":654,"nodeType":"UserDefinedTypeName","pathNode":{"id":653,"name":"Layout","nameLocations":["1592:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"1592:6:13"},"referencedDeclaration":625,"src":"1592:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:13","nodeType":"VariableDeclaration","scope":695,"src":"1610:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:13"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"1641:0:13"},"scope":852,"src":"1567:341:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":717,"nodeType":"Block","src":"2573:112:13","statements":[{"expression":{"arguments":[{"id":707,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2612:21:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":704,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2583:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1280_$","typeString":"type(library ProxyInitialization)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:13","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"2583:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"ExpressionStatement","src":"2583:54:13"},{"expression":{"arguments":[{"id":714,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2665:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":711,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"2647:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:13","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":695,"src":"2647:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"2647:31:13"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"1914:586:13","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":718,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:13","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"s","nameLocation":"2539:1:13","nodeType":"VariableDeclaration","scope":718,"src":"2524:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":698,"nodeType":"UserDefinedTypeName","pathNode":{"id":697,"name":"Layout","nameLocations":["2524:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"2524:6:13"},"referencedDeclaration":625,"src":"2524:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":701,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:13","nodeType":"VariableDeclaration","scope":718,"src":"2542:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:13"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"2573:0:13"},"scope":852,"src":"2505:180:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"3148:281:13","statements":[{"assignments":[730],"declarations":[{"constant":false,"id":730,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:13","nodeType":"VariableDeclaration","scope":758,"src":"3158:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":733,"initialValue":{"expression":{"id":731,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3182:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3182:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":734,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"3211:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":735,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3221:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":741,"nodeType":"IfStatement","src":"3207:60:13","trueBody":{"errorCall":{"arguments":[{"id":738,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"3260:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":737,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"3243:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":740,"nodeType":"RevertStatement","src":"3236:31:13"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":742,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3281:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":743,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3298:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"nodeType":"IfStatement","src":"3277:146:13","trueBody":{"id":756,"nodeType":"Block","src":"3308:115:13","statements":[{"expression":{"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":745,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3322:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3322:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":748,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3340:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":750,"nodeType":"ExpressionStatement","src":"3322:26:13"},{"eventCall":{"arguments":[{"id":752,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3388:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":753,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3403:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":751,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3367:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"EmitStatement","src":"3362:50:13"}]}}]},"documentation":{"id":719,"nodeType":"StructuredDocumentation","src":"2691:364:13","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:13","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"s","nameLocation":"3102:1:13","nodeType":"VariableDeclaration","scope":759,"src":"3087:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":721,"nodeType":"UserDefinedTypeName","pathNode":{"id":720,"name":"Layout","nameLocations":["3087:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"3087:6:13"},"referencedDeclaration":625,"src":"3087:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"sender","nameLocation":"3113:6:13","nodeType":"VariableDeclaration","scope":759,"src":"3105:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:13","nodeType":"VariableDeclaration","scope":759,"src":"3121:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":725,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:13"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"3148:0:13"},"scope":852,"src":"3060:369:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":771,"nodeType":"Block","src":"3635:39:13","statements":[{"expression":{"expression":{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"3652:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3652:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":767,"id":770,"nodeType":"Return","src":"3645:22:13"}]},"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"3435:116:13","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":772,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:13","nodeType":"FunctionDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"s","nameLocation":"3586:1:13","nodeType":"VariableDeclaration","scope":772,"src":"3571:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":762,"nodeType":"UserDefinedTypeName","pathNode":{"id":761,"name":"Layout","nameLocations":["3571:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"3571:6:13"},"referencedDeclaration":625,"src":"3571:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:13"},"returnParameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:13","nodeType":"VariableDeclaration","scope":772,"src":"3612:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:13"},"scope":852,"src":"3556:118:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":799,"nodeType":"Block","src":"4070:153:13","statements":[{"condition":{"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:13","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":782,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4085:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:13","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"4085:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":790,"nodeType":"IfStatement","src":"4080:77:13","trueBody":{"errorCall":{"arguments":[{"id":787,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4142:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":786,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4121:20:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"RevertStatement","src":"4114:43:13"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":792,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4182:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":791,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"4174:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$331","typeString":"contract IERC173"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:13","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":330,"src":"4174:29:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":796,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4209:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":781,"id":798,"nodeType":"Return","src":"4167:49:13"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"3680:261:13","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":800,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:13","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:13","nodeType":"VariableDeclaration","scope":800,"src":"3977:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"account","nameLocation":"4009:7:13","nodeType":"VariableDeclaration","scope":800,"src":"4001:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:13"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:13","nodeType":"VariableDeclaration","scope":800,"src":"4041:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":779,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:13"},"scope":852,"src":"3946:277:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":818,"nodeType":"Block","src":"4494:81:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4508:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":810,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4519:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"4519:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":817,"nodeType":"IfStatement","src":"4504:64:13","trueBody":{"errorCall":{"arguments":[{"id":814,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4560:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":813,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4543:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"RevertStatement","src":"4536:32:13"}}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"4229:179:13","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":819,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:13","nodeType":"FunctionDefinition","parameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"s","nameLocation":"4460:1:13","nodeType":"VariableDeclaration","scope":819,"src":"4445:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":803,"nodeType":"UserDefinedTypeName","pathNode":{"id":802,"name":"Layout","nameLocations":["4445:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"4445:6:13"},"referencedDeclaration":625,"src":"4445:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"account","nameLocation":"4471:7:13","nodeType":"VariableDeclaration","scope":819,"src":"4463:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:13"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[],"src":"4494:0:13"},"scope":852,"src":"4413:162:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":838,"nodeType":"Block","src":"4935:124:13","statements":[{"condition":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:13","subExpression":{"arguments":[{"id":828,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"4972:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"4988:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":827,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4950:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":837,"nodeType":"IfStatement","src":"4945:107:13","trueBody":{"errorCall":{"arguments":[{"id":833,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"5028:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":834,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"5044:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":832,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"5005:22:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":836,"nodeType":"RevertStatement","src":"4998:54:13"}}]},"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"4581:256:13","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":839,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:13","nodeType":"FunctionDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:13","nodeType":"VariableDeclaration","scope":839,"src":"4880:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"account","nameLocation":"4912:7:13","nodeType":"VariableDeclaration","scope":839,"src":"4904:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":823,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:13"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"4935:0:13"},"scope":852,"src":"4842:217:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":850,"nodeType":"Block","src":"5124:115:13","statements":[{"assignments":[846],"declarations":[{"constant":false,"id":846,"mutability":"mutable","name":"position","nameLocation":"5142:8:13","nodeType":"VariableDeclaration","scope":850,"src":"5134:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":848,"initialValue":{"id":847,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"5153:19:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:13"},{"AST":{"nativeSrc":"5191:42:13","nodeType":"YulBlock","src":"5191:42:13","statements":[{"nativeSrc":"5205:18:13","nodeType":"YulAssignment","src":"5205:18:13","value":{"name":"position","nativeSrc":"5215:8:13","nodeType":"YulIdentifier","src":"5215:8:13"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:13","nodeType":"YulIdentifier","src":"5205:6:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":846,"isOffset":false,"isSlot":false,"src":"5215:8:13","valueSize":1},{"declaration":843,"isOffset":false,"isSlot":true,"src":"5205:6:13","suffix":"slot","valueSize":1}],"id":849,"nodeType":"InlineAssembly","src":"5182:51:13"}]},"id":851,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:13","nodeType":"FunctionDefinition","parameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"5080:2:13"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"s","nameLocation":"5121:1:13","nodeType":"VariableDeclaration","scope":851,"src":"5106:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":842,"nodeType":"UserDefinedTypeName","pathNode":{"id":841,"name":"Layout","nameLocations":["5106:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"5106:6:13"},"referencedDeclaration":625,"src":"5106:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:13"},"scope":852,"src":"5065:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":853,"src":"595:4646:13","usedErrors":[],"usedEvents":[]}],"src":"32:5210:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[899],"InterfaceDetection":[882],"InterfaceDetectionStorage":[1000]},"id":883,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":854,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":856,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":883,"sourceUnit":900,"src":"58:49:14","symbolAliases":[{"foreign":{"id":855,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"66:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":858,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":883,"sourceUnit":1001,"src":"108:84:14","symbolAliases":[{"foreign":{"id":857,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"116:25:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":860,"name":"IERC165","nameLocations":["425:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":899,"src":"425:7:14"},"id":861,"nodeType":"InheritanceSpecifier","src":"425:7:14"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":859,"nodeType":"StructuredDocumentation","src":"194:191:14","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":882,"linearizedBaseContracts":[882,899],"name":"InterfaceDetection","nameLocation":"403:18:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":865,"libraryName":{"id":862,"name":"InterfaceDetectionStorage","nameLocations":["445:25:14"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"445:25:14"},"nodeType":"UsingForDirective","src":"439:69:14","typeName":{"id":864,"nodeType":"UserDefinedTypeName","pathNode":{"id":863,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:14","501:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"475:32:14"},"referencedDeclaration":910,"src":"475:32:14","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[898],"body":{"id":880,"nodeType":"Block","src":"618:89:14","statements":[{"expression":{"arguments":[{"id":877,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"688:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":873,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"635:25:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"635:32:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:14","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":987,"src":"635:52:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":872,"id":879,"nodeType":"Return","src":"628:72:14"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"514:23:14","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":881,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:14","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:14","nodeType":"VariableDeclaration","scope":881,"src":"569:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":867,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:14"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":881,"src":"612:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":870,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:14"},"scope":882,"src":"542:165:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":883,"src":"385:324:14","usedErrors":[],"usedEvents":[]}],"src":"32:678:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[887]},"id":888,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":884,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"documentation":{"id":885,"nodeType":"StructuredDocumentation","src":"58:68:15","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":887,"name":"IllegalInterfaceId","nameLocation":"132:18:15","nodeType":"ErrorDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"150:2:15"},"src":"126:27:15"}],"src":"32:122:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[899]},"id":900,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":889,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"58:173:16","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":899,"linearizedBaseContracts":[899],"name":"IERC165","nameLocation":"241:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":891,"nodeType":"StructuredDocumentation","src":"255:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":898,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:16","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:16","nodeType":"VariableDeclaration","scope":898,"src":"627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":892,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:16"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"supported","nameLocation":"675:9:16","nodeType":"VariableDeclaration","scope":898,"src":"670:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:16"},"scope":899,"src":"600:86:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":900,"src":"231:457:16","usedErrors":[],"usedEvents":[]}],"src":"32:657:16"},"id":16},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[899],"IllegalInterfaceId":[887],"InterfaceDetectionStorage":[1000]},"id":1001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":901,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":903,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1001,"sourceUnit":888,"src":"58:76:17","symbolAliases":[{"foreign":{"id":902,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1001,"sourceUnit":900,"src":"135:52:17","symbolAliases":[{"foreign":{"id":904,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"143:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1000,"linearizedBaseContracts":[1000],"name":"InterfaceDetectionStorage","nameLocation":"197:25:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":910,"members":[{"constant":false,"id":909,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:17","nodeType":"VariableDeclaration","scope":910,"src":"253:43:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":908,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":906,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":907,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:17","nodeType":"StructDefinition","scope":1000,"src":"229:74:17","visibility":"public"},{"constant":true,"id":923,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:17","nodeType":"VariableDeclaration","scope":1000,"src":"309:136:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":916,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:17","typeDescriptions":{}}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:17","typeDescriptions":{}}},"id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":926,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:17","nodeType":"VariableDeclaration","scope":1000,"src":"452:58:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":924,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"867:141:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":937,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"881:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":938,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"896:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":943,"nodeType":"IfStatement","src":"877:68:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":940,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"925:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":942,"nodeType":"RevertStatement","src":"918:27:17"}},{"expression":{"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":944,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"955:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":909,"src":"955:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":948,"indexExpression":{"id":946,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"977:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":949,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"992:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":951,"nodeType":"ExpressionStatement","src":"955:46:17"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"517:251:17","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":953,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:17","nodeType":"FunctionDefinition","parameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"s","nameLocation":"819:1:17","nodeType":"VariableDeclaration","scope":953,"src":"804:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":929,"nodeType":"UserDefinedTypeName","pathNode":{"id":928,"name":"Layout","nameLocations":["804:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"804:6:17"},"referencedDeclaration":910,"src":"804:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:17","nodeType":"VariableDeclaration","scope":953,"src":"822:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":931,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"supported","nameLocation":"847:9:17","nodeType":"VariableDeclaration","scope":953,"src":"842:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":933,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:17"},"returnParameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"867:0:17"},"scope":1000,"src":"773:235:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"1463:236:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1477:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":965,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1492:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":970,"nodeType":"IfStatement","src":"1473:78:17","trueBody":{"id":969,"nodeType":"Block","src":"1514:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":963,"id":968,"nodeType":"Return","src":"1528:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":971,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1564:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":973,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"1584:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$899_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$899_$","typeString":"type(contract IERC165)"}],"id":972,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$899","typeString":"type(contract IERC165)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":980,"nodeType":"IfStatement","src":"1560:82:17","trueBody":{"id":979,"nodeType":"Block","src":"1606:36:17","statements":[{"expression":{"hexValue":"74727565","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":963,"id":978,"nodeType":"Return","src":"1620:11:17"}]}},{"expression":{"baseExpression":{"expression":{"id":981,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"1658:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":909,"src":"1658:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":984,"indexExpression":{"id":983,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1680:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":963,"id":985,"nodeType":"Return","src":"1651:41:17"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"1014:340:17","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:17","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"s","nameLocation":"1401:1:17","nodeType":"VariableDeclaration","scope":987,"src":"1386:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":956,"nodeType":"UserDefinedTypeName","pathNode":{"id":955,"name":"Layout","nameLocations":["1386:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1386:6:17"},"referencedDeclaration":910,"src":"1386:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:17","nodeType":"VariableDeclaration","scope":987,"src":"1404:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":958,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:17"},"returnParameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"supported","nameLocation":"1452:9:17","nodeType":"VariableDeclaration","scope":987,"src":"1447:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":961,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:17"},"scope":1000,"src":"1359:340:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":998,"nodeType":"Block","src":"1764:115:17","statements":[{"assignments":[994],"declarations":[{"constant":false,"id":994,"mutability":"mutable","name":"position","nameLocation":"1782:8:17","nodeType":"VariableDeclaration","scope":998,"src":"1774:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":996,"initialValue":{"id":995,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"1793:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:17"},{"AST":{"nativeSrc":"1831:42:17","nodeType":"YulBlock","src":"1831:42:17","statements":[{"nativeSrc":"1845:18:17","nodeType":"YulAssignment","src":"1845:18:17","value":{"name":"position","nativeSrc":"1855:8:17","nodeType":"YulIdentifier","src":"1855:8:17"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:17","nodeType":"YulIdentifier","src":"1845:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":994,"isOffset":false,"isSlot":false,"src":"1855:8:17","valueSize":1},{"declaration":991,"isOffset":false,"isSlot":true,"src":"1845:6:17","suffix":"slot","valueSize":1}],"id":997,"nodeType":"InlineAssembly","src":"1822:51:17"}]},"id":999,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:17","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[],"src":"1720:2:17"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"s","nameLocation":"1761:1:17","nodeType":"VariableDeclaration","scope":999,"src":"1746:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":990,"nodeType":"UserDefinedTypeName","pathNode":{"id":989,"name":"Layout","nameLocations":["1746:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1746:6:17"},"referencedDeclaration":910,"src":"1746:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:17"},"scope":1000,"src":"1705:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1001,"src":"189:1692:17","usedErrors":[],"usedEvents":[]}],"src":"32:1850:17"},"id":17},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[1049],"ForwarderRegistryContextBase":[1169],"IERC2771":[1181],"IForwarderRegistry":[1195]},"id":1050,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1002,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":1004,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1050,"sourceUnit":1196,"src":"58:71:18","symbolAliases":[{"foreign":{"id":1003,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"66:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":1006,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1050,"sourceUnit":1182,"src":"130:51:18","symbolAliases":[{"foreign":{"id":1005,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"138:8:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":1008,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1050,"sourceUnit":1170,"src":"182:85:18","symbolAliases":[{"foreign":{"id":1007,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"190:28:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1010,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:18"],"nodeType":"IdentifierPath","referencedDeclaration":1169,"src":"575:28:18"},"id":1011,"nodeType":"InheritanceSpecifier","src":"575:28:18"},{"baseName":{"id":1012,"name":"IERC2771","nameLocations":["605:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1181,"src":"605:8:18"},"id":1013,"nodeType":"InheritanceSpecifier","src":"605:8:18"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":1009,"nodeType":"StructuredDocumentation","src":"269:260:18","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1049,"linearizedBaseContracts":[1049,1181,1169],"name":"ForwarderRegistryContext","nameLocation":"547:24:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1022,"nodeType":"Block","src":"720:2:18","statements":[]},"id":1023,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1019,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"700:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}}],"id":1020,"kind":"baseConstructorSpecifier","modifierName":{"id":1018,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:18"],"nodeType":"IdentifierPath","referencedDeclaration":1169,"src":"671:28:18"},"nodeType":"ModifierInvocation","src":"671:48:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1016,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:18","nodeType":"VariableDeclaration","scope":1023,"src":"632:37:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":1015,"nodeType":"UserDefinedTypeName","pathNode":{"id":1014,"name":"IForwarderRegistry","nameLocations":["632:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"632:18:18"},"referencedDeclaration":1195,"src":"632:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:18"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[],"src":"720:0:18"},"scope":1049,"src":"620:102:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1031,"nodeType":"Block","src":"800:43:18","statements":[{"expression":{"id":1029,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"817:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":1028,"id":1030,"nodeType":"Return","src":"810:26:18"}]},"functionSelector":"2b4c9f16","id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:18","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"754:2:18"},"returnParameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1032,"src":"780:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":1026,"nodeType":"UserDefinedTypeName","pathNode":{"id":1025,"name":"IForwarderRegistry","nameLocations":["780:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"780:18:18"},"referencedDeclaration":1195,"src":"780:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:18"},"scope":1049,"src":"728:115:18","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1180],"body":{"id":1047,"nodeType":"Block","src":"962:65:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1040,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"979:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1043,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1000:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}],"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:18","typeDescriptions":{}}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1039,"id":1046,"nodeType":"Return","src":"972:48:18"}]},"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"849:24:18","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":1048,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:18","nodeType":"FunctionDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:18","nodeType":"VariableDeclaration","scope":1048,"src":"906:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1034,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:18"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1048,"src":"956:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1037,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:18"},"scope":1049,"src":"878:149:18","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1050,"src":"529:500:18","usedErrors":[],"usedEvents":[]}],"src":"32:998:18"},"id":18},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[1224],"ForwarderRegistryContextBase":[1169],"IForwarderRegistry":[1195]},"id":1170,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1051,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":1053,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1170,"sourceUnit":1196,"src":"58:74:19","symbolAliases":[{"foreign":{"id":1052,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"66:18:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":1055,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1170,"sourceUnit":1225,"src":"133:67:19","symbolAliases":[{"foreign":{"id":1054,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"141:15:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1056,"nodeType":"StructuredDocumentation","src":"202:243:19","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1169,"linearizedBaseContracts":[1169],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:19","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1059,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:19","nodeType":"VariableDeclaration","scope":1169,"src":"498:57:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":1058,"nodeType":"UserDefinedTypeName","pathNode":{"id":1057,"name":"IForwarderRegistry","nameLocations":["498:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"498:18:19"},"referencedDeclaration":1195,"src":"498:18:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":1069,"nodeType":"Block","src":"612:56:19","statements":[{"expression":{"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1065,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"622:19:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1066,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"644:17:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"src":"622:39:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"id":1068,"nodeType":"ExpressionStatement","src":"622:39:19"}]},"id":1070,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1062,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:19","nodeType":"VariableDeclaration","scope":1070,"src":"574:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":1061,"nodeType":"UserDefinedTypeName","pathNode":{"id":1060,"name":"IForwarderRegistry","nameLocations":["574:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"574:18:19"},"referencedDeclaration":1195,"src":"574:18:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:19"},"returnParameters":{"id":1064,"nodeType":"ParameterList","parameters":[],"src":"612:0:19"},"scope":1169,"src":"562:106:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1119,"nodeType":"Block","src":"846:683:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1076,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1078,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:19","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:19","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1081,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:19","memberName":"data","nodeType":"MemberAccess","src":"1074:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:19","memberName":"length","nodeType":"MemberAccess","src":"1074:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:19","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"nodeType":"IfStatement","src":"1043:95:19","trueBody":{"id":1090,"nodeType":"Block","src":"1096:42:19","statements":[{"expression":{"expression":{"id":1087,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1075,"id":1089,"nodeType":"Return","src":"1110:17:19"}]}},{"assignments":[1093],"declarations":[{"constant":false,"id":1093,"mutability":"mutable","name":"sender","nameLocation":"1156:6:19","nodeType":"VariableDeclaration","scope":1119,"src":"1148:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1097,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1094,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1165:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1224_$","typeString":"type(library ERC2771Calldata)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:19","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1206,"src":"1165:25:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1098,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1102,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1372:19:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}],"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1100,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:19","typeDescriptions":{}}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1107,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"1436:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1108,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1105,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1396:19:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:19","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1194,"src":"1396:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1115,"nodeType":"IfStatement","src":"1346:149:19","trueBody":{"id":1114,"nodeType":"Block","src":"1457:38:19","statements":[{"expression":{"id":1112,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"1478:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1075,"id":1113,"nodeType":"Return","src":"1471:13:19"}]}},{"expression":{"expression":{"id":1116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1075,"id":1118,"nodeType":"Return","src":"1505:17:19"}]},"documentation":{"id":1071,"nodeType":"StructuredDocumentation","src":"674:105:19","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":1120,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:19","nodeType":"FunctionDefinition","parameters":{"id":1072,"nodeType":"ParameterList","parameters":[],"src":"803:2:19"},"returnParameters":{"id":1075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1120,"src":"837:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1073,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:19"},"scope":1169,"src":"784:745:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"1710:668:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1126,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1128,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:19","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:19","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:19","memberName":"data","nodeType":"MemberAccess","src":"1938:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:19","memberName":"length","nodeType":"MemberAccess","src":"1938:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:19","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1141,"nodeType":"IfStatement","src":"1907:93:19","trueBody":{"id":1140,"nodeType":"Block","src":"1960:40:19","statements":[{"expression":{"expression":{"id":1137,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:19","memberName":"data","nodeType":"MemberAccess","src":"1981:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1125,"id":1139,"nodeType":"Return","src":"1974:15:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1142,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:19","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1146,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"2183:19:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}],"id":1145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:19","typeDescriptions":{}}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1151,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"2247:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1224_$","typeString":"type(library ERC2771Calldata)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:19","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1206,"src":"2247:25:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:19","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1149,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"2207:19:19","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:19","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1194,"src":"2207:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1163,"nodeType":"IfStatement","src":"2157:189:19","trueBody":{"id":1162,"nodeType":"Block","src":"2289:57:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1158,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"2310:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1224_$","typeString":"type(library ERC2771Calldata)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:19","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":1223,"src":"2310:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1125,"id":1161,"nodeType":"Return","src":"2303:32:19"}]}},{"expression":{"expression":{"id":1164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:19","memberName":"data","nodeType":"MemberAccess","src":"2363:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1125,"id":1166,"nodeType":"Return","src":"2356:15:19"}]},"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"1535:103:19","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:19","nodeType":"FunctionDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[],"src":"1660:2:19"},"returnParameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1168,"src":"1694:14:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:19"},"scope":1169,"src":"1643:735:19","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1170,"src":"445:1935:19","usedErrors":[],"usedEvents":[]}],"src":"32:2349:19"},"id":19},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[1181]},"id":1182,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1171,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"58:110:20","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":1181,"linearizedBaseContracts":[1181],"name":"IERC2771","nameLocation":"178:8:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"193:171:20","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":1180,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:20","nodeType":"FunctionDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:20","nodeType":"VariableDeclaration","scope":1180,"src":"397:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:20"},"returnParameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:20","nodeType":"VariableDeclaration","scope":1180,"src":"439:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1177,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:20"},"scope":1181,"src":"369:86:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1182,"src":"168:289:20","usedErrors":[],"usedEvents":[]}],"src":"32:426:20"},"id":20},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[1195]},"id":1196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1183,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"58:143:21","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":1195,"linearizedBaseContracts":[1195],"name":"IForwarderRegistry","nameLocation":"211:18:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"236:314:21","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":1194,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:21","nodeType":"FunctionDefinition","parameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"sender","nameLocation":"592:6:21","nodeType":"VariableDeclaration","scope":1194,"src":"584:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:21","nodeType":"VariableDeclaration","scope":1194,"src":"600:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:21"},"returnParameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:21","nodeType":"VariableDeclaration","scope":1194,"src":"642:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1191,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:21"},"scope":1195,"src":"555:104:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1196,"src":"201:460:21","usedErrors":[],"usedEvents":[]}],"src":"32:630:21"},"id":21},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[1224]},"id":1225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1197,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"58:144:22","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":1224,"linearizedBaseContracts":[1224],"name":"ERC2771Calldata","nameLocation":"210:15:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1205,"nodeType":"Block","src":"398:105:22","statements":[{"AST":{"nativeSrc":"417:80:22","nodeType":"YulBlock","src":"417:80:22","statements":[{"nativeSrc":"431:56:22","nodeType":"YulAssignment","src":"431:56:22","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:22","nodeType":"YulLiteral","src":"445:2:22","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:22","nodeType":"YulIdentifier","src":"466:12:22"},"nativeSrc":"466:14:22","nodeType":"YulFunctionCall","src":"466:14:22"},{"kind":"number","nativeSrc":"482:2:22","nodeType":"YulLiteral","src":"482:2:22","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:22","nodeType":"YulIdentifier","src":"462:3:22"},"nativeSrc":"462:23:22","nodeType":"YulFunctionCall","src":"462:23:22"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:22","nodeType":"YulIdentifier","src":"449:12:22"},"nativeSrc":"449:37:22","nodeType":"YulFunctionCall","src":"449:37:22"}],"functionName":{"name":"shr","nativeSrc":"441:3:22","nodeType":"YulIdentifier","src":"441:3:22"},"nativeSrc":"441:46:22","nodeType":"YulFunctionCall","src":"441:46:22"},"variableNames":[{"name":"sender","nativeSrc":"431:6:22","nodeType":"YulIdentifier","src":"431:6:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1202,"isOffset":false,"isSlot":false,"src":"431:6:22","valueSize":1}],"id":1204,"nodeType":"InlineAssembly","src":"408:89:22"}]},"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"232:101:22","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":1206,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:22","nodeType":"FunctionDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"356:2:22"},"returnParameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"sender","nameLocation":"390:6:22","nodeType":"VariableDeclaration","scope":1206,"src":"382:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:22"},"scope":1224,"src":"338:165:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1222,"nodeType":"Block","src":"679:89:22","statements":[{"id":1221,"nodeType":"UncheckedBlock","src":"689:73:22","statements":[{"expression":{"baseExpression":{"expression":{"id":1212,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:22","memberName":"data","nodeType":"MemberAccess","src":"720:8:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1214,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:22","memberName":"data","nodeType":"MemberAccess","src":"730:8:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:22","memberName":"length","nodeType":"MemberAccess","src":"730:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:22","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":1211,"id":1220,"nodeType":"Return","src":"713:38:22"}]}]},"documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"509:102:22","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":1223,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:22","nodeType":"FunctionDefinition","parameters":{"id":1208,"nodeType":"ParameterList","parameters":[],"src":"632:2:22"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"data","nameLocation":"673:4:22","nodeType":"VariableDeclaration","scope":1223,"src":"658:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1209,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:22"},"scope":1224,"src":"616:152:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1225,"src":"202:568:22","usedErrors":[],"usedEvents":[]}],"src":"32:739:22"},"id":22},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1233]},"id":1234,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1226,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:23"},{"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"58:179:23","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1233,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:23","nodeType":"ErrorDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:23","nodeType":"VariableDeclaration","scope":1233,"src":"277:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:23","nodeType":"VariableDeclaration","scope":1233,"src":"299:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:23"},"src":"237:80:23"}],"src":"32:286:23"},"id":23},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1233],"ProxyInitialization":[1280],"StorageSlot":[4185]},"id":1281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1235,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1281,"sourceUnit":1234,"src":"58:92:24","symbolAliases":[{"foreign":{"id":1236,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"66:33:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1281,"sourceUnit":4186,"src":"151:74:24","symbolAliases":[{"foreign":{"id":1238,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"159:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"227:92:24","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1280,"linearizedBaseContracts":[1280],"name":"ProxyInitialization","nameLocation":"327:19:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":1278,"nodeType":"Block","src":"735:294:24","statements":[{"assignments":[1252],"declarations":[{"constant":false,"id":1252,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:24","nodeType":"VariableDeclaration","scope":1278,"src":"745:46:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1251,"nodeType":"UserDefinedTypeName","pathNode":{"id":1250,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:24","757:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"745:23:24"},"referencedDeclaration":4090,"src":"745:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1257,"initialValue":{"arguments":[{"id":1255,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"821:11:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1253,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"794:11:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$4185_$","typeString":"type(library StorageSlot)"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:24","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":4140,"src":"794:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$4090_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:24"},{"assignments":[1259],"declarations":[{"constant":false,"id":1259,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:24","nodeType":"VariableDeclaration","scope":1278,"src":"843:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1262,"initialValue":{"expression":{"id":1260,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"866:14:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:24","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4089,"src":"866:20:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1263,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"900:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1264,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"916:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1271,"nodeType":"IfStatement","src":"896:88:24","trueBody":{"errorCall":{"arguments":[{"id":1267,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"964:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1268,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"978:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1266,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"930:33:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1270,"nodeType":"RevertStatement","src":"923:61:24"}},{"expression":{"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1272,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"994:14:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:24","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4089,"src":"994:20:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1275,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"1017:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1277,"nodeType":"ExpressionStatement","src":"994:28:24"}]},"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"353:314:24","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:24","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:24","nodeType":"VariableDeclaration","scope":1279,"src":"690:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"phase","nameLocation":"719:5:24","nodeType":"VariableDeclaration","scope":1279,"src":"711:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:24"},"returnParameters":{"id":1247,"nodeType":"ParameterList","parameters":[],"src":"735:0:24"},"scope":1280,"src":"672:357:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1281,"src":"319:712:24","usedErrors":[],"usedEvents":[]}],"src":"32:1000:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","exportedSymbols":{"ERC721Metadata":[1325],"ERC721MetadataBase":[1405],"ERC721Storage":[3470],"ITokenMetadataResolver":[3536],"TokenMetadataStorage":[3723]},"id":1326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1282,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:25"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../metadata/interfaces/ITokenMetadataResolver.sol","id":1284,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1326,"sourceUnit":3537,"src":"58:91:25","symbolAliases":[{"foreign":{"id":1283,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"66:22:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../metadata/libraries/TokenMetadataStorage.sol","id":1286,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1326,"sourceUnit":3724,"src":"150:86:25","symbolAliases":[{"foreign":{"id":1285,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"158:20:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./libraries/ERC721Storage.sol","id":1288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1326,"sourceUnit":3471,"src":"237:60:25","symbolAliases":[{"foreign":{"id":1287,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"245:13:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","file":"./base/ERC721MetadataBase.sol","id":1290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1326,"sourceUnit":1406,"src":"298:65:25","symbolAliases":[{"foreign":{"id":1289,"name":"ERC721MetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"306:18:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1292,"name":"ERC721MetadataBase","nameLocations":["691:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":1405,"src":"691:18:25"},"id":1293,"nodeType":"InheritanceSpecifier","src":"691:18:25"}],"canonicalName":"ERC721Metadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"365:290:25","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1325,"linearizedBaseContracts":[1325,1405,1666,3522],"name":"ERC721Metadata","nameLocation":"673:14:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1297,"libraryName":{"id":1294,"name":"TokenMetadataStorage","nameLocations":["722:20:25"],"nodeType":"IdentifierPath","referencedDeclaration":3723,"src":"722:20:25"},"nodeType":"UsingForDirective","src":"716:59:25","typeName":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"TokenMetadataStorage.Layout","nameLocations":["747:20:25","768:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"747:27:25"},"referencedDeclaration":3550,"src":"747:27:25","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":1323,"nodeType":"Block","src":"1129:138:25","statements":[{"expression":{"arguments":[{"id":1313,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1185:4:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1314,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1191:6:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1315,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"1199:16:25","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1308,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"1139:20:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3723_$","typeString":"type(library TokenMetadataStorage)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1160:6:25","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3722,"src":"1139:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1169:15:25","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":3609,"src":"1139:45:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3550_storage_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_contract$_ITokenMetadataResolver_$3536_$returns$__$attached_to$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1317,"nodeType":"ExpressionStatement","src":"1139:77:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1318,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"1226:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:18:25","memberName":"initERC721Metadata","nodeType":"MemberAccess","referencedDeclaration":1863,"src":"1226:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1322,"nodeType":"ExpressionStatement","src":"1226:34:25"}]},"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"781:248:25","text":"@notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n @param name The name of the token.\n @param symbol The symbol of the token.\n @param metadataResolver The address of the metadata resolver contract."},"id":1324,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"name","nameLocation":"1060:4:25","nodeType":"VariableDeclaration","scope":1324,"src":"1046:18:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1299,"name":"string","nodeType":"ElementaryTypeName","src":"1046:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"symbol","nameLocation":"1080:6:25","nodeType":"VariableDeclaration","scope":1324,"src":"1066:20:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1301,"name":"string","nodeType":"ElementaryTypeName","src":"1066:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"metadataResolver","nameLocation":"1111:16:25","nodeType":"VariableDeclaration","scope":1324,"src":"1088:39:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":1304,"nodeType":"UserDefinedTypeName","pathNode":{"id":1303,"name":"ITokenMetadataResolver","nameLocations":["1088:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"1088:22:25"},"referencedDeclaration":3536,"src":"1088:22:25","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:83:25"},"returnParameters":{"id":1307,"nodeType":"ParameterList","parameters":[],"src":"1129:0:25"},"scope":1325,"src":"1034:233:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1326,"src":"655:614:25","usedErrors":[887,1434],"usedEvents":[]}],"src":"32:1238:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","exportedSymbols":{"ERC721MetadataBase":[1405],"ERC721Storage":[3470],"IERC721Metadata":[1666],"TokenMetadataBase":[3522],"TokenMetadataStorage":[3723]},"id":1406,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1327,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1329,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":1667,"src":"58:68:26","symbolAliases":[{"foreign":{"id":1328,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"66:15:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./../libraries/ERC721Storage.sol","id":1331,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":3471,"src":"127:63:26","symbolAliases":[{"foreign":{"id":1330,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"135:13:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../../metadata/libraries/TokenMetadataStorage.sol","id":1333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":3724,"src":"191:89:26","symbolAliases":[{"foreign":{"id":1332,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"199:20:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","file":"./../../metadata/base/TokenMetadataBase.sol","id":1335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":3523,"src":"281:78:26","symbolAliases":[{"foreign":{"id":1334,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"289:17:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1337,"name":"TokenMetadataBase","nameLocations":["750:17:26"],"nodeType":"IdentifierPath","referencedDeclaration":3522,"src":"750:17:26"},"id":1338,"nodeType":"InheritanceSpecifier","src":"750:17:26"},{"baseName":{"id":1339,"name":"IERC721Metadata","nameLocations":["769:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":1666,"src":"769:15:26"},"id":1340,"nodeType":"InheritanceSpecifier","src":"769:15:26"}],"canonicalName":"ERC721MetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"361:349:26","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC721 (Non-Fungible Token Standard)."},"fullyImplemented":true,"id":1405,"linearizedBaseContracts":[1405,1666,3522],"name":"ERC721MetadataBase","nameLocation":"728:18:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1344,"libraryName":{"id":1341,"name":"ERC721Storage","nameLocations":["797:13:26"],"nodeType":"IdentifierPath","referencedDeclaration":3470,"src":"797:13:26"},"nodeType":"UsingForDirective","src":"791:45:26","typeName":{"id":1343,"nodeType":"UserDefinedTypeName","pathNode":{"id":1342,"name":"ERC721Storage.Layout","nameLocations":["815:13:26","829:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"815:20:26"},"referencedDeclaration":1786,"src":"815:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1348,"libraryName":{"id":1345,"name":"TokenMetadataStorage","nameLocations":["847:20:26"],"nodeType":"IdentifierPath","referencedDeclaration":3723,"src":"847:20:26"},"nodeType":"UsingForDirective","src":"841:59:26","typeName":{"id":1347,"nodeType":"UserDefinedTypeName","pathNode":{"id":1346,"name":"TokenMetadataStorage.Layout","nameLocations":["872:20:26","893:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"872:27:26"},"referencedDeclaration":3550,"src":"872:27:26","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"baseFunctions":[1651,3494],"body":{"id":1361,"nodeType":"Block","src":"1057:48:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1357,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"1074:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3522_$","typeString":"type(contract TokenMetadataBase)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1092:4:26","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3494,"src":"1074:22:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1074:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1356,"id":1360,"nodeType":"Return","src":"1067:31:26"}]},"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"906:31:26","text":"@inheritdoc IERC721Metadata"},"functionSelector":"06fdde03","id":1362,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"951:4:26","nodeType":"FunctionDefinition","overrides":{"id":1353,"nodeType":"OverrideSpecifier","overrides":[{"id":1351,"name":"IERC721Metadata","nameLocations":["987:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":1666,"src":"987:15:26"},{"id":1352,"name":"TokenMetadataBase","nameLocations":["1004:17:26"],"nodeType":"IdentifierPath","referencedDeclaration":3522,"src":"1004:17:26"}],"src":"978:44:26"},"parameters":{"id":1350,"nodeType":"ParameterList","parameters":[],"src":"955:2:26"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1355,"mutability":"mutable","name":"tokenName","nameLocation":"1046:9:26","nodeType":"VariableDeclaration","scope":1362,"src":"1032:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1354,"name":"string","nodeType":"ElementaryTypeName","src":"1032:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1031:25:26"},"scope":1405,"src":"942:163:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1657,3507],"body":{"id":1375,"nodeType":"Block","src":"1266:50:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1371,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"1283:17:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3522_$","typeString":"type(contract TokenMetadataBase)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1301:6:26","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3507,"src":"1283:24:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1283:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1370,"id":1374,"nodeType":"Return","src":"1276:33:26"}]},"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"1111:31:26","text":"@inheritdoc IERC721Metadata"},"functionSelector":"95d89b41","id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1156:6:26","nodeType":"FunctionDefinition","overrides":{"id":1367,"nodeType":"OverrideSpecifier","overrides":[{"id":1365,"name":"IERC721Metadata","nameLocations":["1194:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":1666,"src":"1194:15:26"},{"id":1366,"name":"TokenMetadataBase","nameLocations":["1211:17:26"],"nodeType":"IdentifierPath","referencedDeclaration":3522,"src":"1211:17:26"}],"src":"1185:44:26"},"parameters":{"id":1364,"nodeType":"ParameterList","parameters":[],"src":"1162:2:26"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1253:11:26","nodeType":"VariableDeclaration","scope":1376,"src":"1239:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1368,"name":"string","nodeType":"ElementaryTypeName","src":"1239:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1238:27:26"},"scope":1405,"src":"1147:169:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1665],"body":{"id":1403,"nodeType":"Block","src":"1443:182:26","statements":[{"expression":{"arguments":[{"id":1389,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"1484:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1384,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"1453:13:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1467:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"1453:20:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:22:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1476:7:26","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"1453:30:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1391,"nodeType":"ExpressionStatement","src":"1453:39:26"},{"expression":{"arguments":[{"arguments":[{"id":1398,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1603:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1405","typeString":"contract ERC721MetadataBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1405","typeString":"contract ERC721MetadataBase"}],"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1595:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:26","typeDescriptions":{}}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1400,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"1610:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1392,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"1548:20:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3723_$","typeString":"type(library TokenMetadataStorage)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3722,"src":"1548:27:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:29:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1578:16:26","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"1548:46:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3550_storage_ptr_$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,address,uint256) view returns (string memory)"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:70:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1383,"id":1402,"nodeType":"Return","src":"1541:77:26"}]},"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"1322:31:26","text":"@inheritdoc IERC721Metadata"},"functionSelector":"c87b56dd","id":1404,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1367:8:26","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"tokenId","nameLocation":"1384:7:26","nodeType":"VariableDeclaration","scope":1404,"src":"1376:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1375:17:26"},"returnParameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"uri","nameLocation":"1438:3:26","nodeType":"VariableDeclaration","scope":1404,"src":"1424:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1381,"name":"string","nodeType":"ElementaryTypeName","src":"1424:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1423:19:26"},"scope":1405,"src":"1358:267:26","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1406,"src":"710:917:26","usedErrors":[1434],"usedEvents":[]}],"src":"32:1596:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","exportedSymbols":{"ERC721BalanceOfAddressZero":[1460],"ERC721NonApprovedForApproval":[1426],"ERC721NonApprovedForTransfer":[1443],"ERC721NonExistingToken":[1434],"ERC721NonOwnedToken":[1450],"ERC721SafeTransferRejected":[1457],"ERC721SelfApproval":[1412],"ERC721SelfApprovalForAll":[1417],"ERC721TransferToAddressZero":[1429]},"id":1461,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1407,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:27"},{"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"58:108:27","text":"@notice Thrown when trying to approve oneself.\n @param account The account trying to approve itself."},"errorSelector":"b7fdc010","id":1412,"name":"ERC721SelfApproval","nameLocation":"172:18:27","nodeType":"ErrorDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"account","nameLocation":"199:7:27","nodeType":"VariableDeclaration","scope":1412,"src":"191:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"190:17:27"},"src":"166:42:27"},{"documentation":{"id":1413,"nodeType":"StructuredDocumentation","src":"210:120:27","text":"@notice Thrown when trying to approveForAll oneself.\n @param account The account trying to approveForAll itself."},"errorSelector":"e4215c6a","id":1417,"name":"ERC721SelfApprovalForAll","nameLocation":"336:24:27","nodeType":"ErrorDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"mutability":"mutable","name":"account","nameLocation":"369:7:27","nodeType":"VariableDeclaration","scope":1417,"src":"361:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"360:17:27"},"src":"330:48:27"},{"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"380:207:27","text":"@notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"c7563a18","id":1426,"name":"ERC721NonApprovedForApproval","nameLocation":"593:28:27","nodeType":"ErrorDefinition","parameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"sender","nameLocation":"630:6:27","nodeType":"VariableDeclaration","scope":1426,"src":"622:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1419,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"owner","nameLocation":"646:5:27","nodeType":"VariableDeclaration","scope":1426,"src":"638:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1421,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:27","nodeType":"VariableDeclaration","scope":1426,"src":"653:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"653:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:48:27"},"src":"587:83:27"},{"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"672:66:27","text":"@notice Thrown when transferring a token to the zero address."},"errorSelector":"86c87067","id":1429,"name":"ERC721TransferToAddressZero","nameLocation":"744:27:27","nodeType":"ErrorDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[],"src":"771:2:27"},"src":"738:36:27"},{"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"776:132:27","text":"@notice Thrown when a token does not exist but is required to.\n @param tokenId The identifier of the token that was checked."},"errorSelector":"dd560475","id":1434,"name":"ERC721NonExistingToken","nameLocation":"914:22:27","nodeType":"ErrorDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"tokenId","nameLocation":"945:7:27","nodeType":"VariableDeclaration","scope":1434,"src":"937:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"936:17:27"},"src":"908:46:27"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"956:197:27","text":"@notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"a4a3018b","id":1443,"name":"ERC721NonApprovedForTransfer","nameLocation":"1159:28:27","nodeType":"ErrorDefinition","parameters":{"id":1442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1437,"mutability":"mutable","name":"sender","nameLocation":"1196:6:27","nodeType":"VariableDeclaration","scope":1443,"src":"1188:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1436,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"owner","nameLocation":"1212:5:27","nodeType":"VariableDeclaration","scope":1443,"src":"1204:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1438,"name":"address","nodeType":"ElementaryTypeName","src":"1204:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"tokenId","nameLocation":"1227:7:27","nodeType":"VariableDeclaration","scope":1443,"src":"1219:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1187:48:27"},"src":"1153:83:27"},{"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"1238:185:27","text":"@notice Thrown when a token is not owned by the expected account.\n @param account The account that was expected to own the token.\n @param tokenId The identifier of the token."},"errorSelector":"14dbb536","id":1450,"name":"ERC721NonOwnedToken","nameLocation":"1429:19:27","nodeType":"ErrorDefinition","parameters":{"id":1449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"account","nameLocation":"1457:7:27","nodeType":"VariableDeclaration","scope":1450,"src":"1449:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"1449:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"tokenId","nameLocation":"1474:7:27","nodeType":"VariableDeclaration","scope":1450,"src":"1466:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"1466:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:34:27"},"src":"1423:60:27"},{"documentation":{"id":1451,"nodeType":"StructuredDocumentation","src":"1485:172:27","text":"@notice Thrown when a safe transfer is rejected by the recipient contract.\n @param recipient The recipient contract.\n @param tokenId The identifier of the token."},"errorSelector":"c215a7a1","id":1457,"name":"ERC721SafeTransferRejected","nameLocation":"1663:26:27","nodeType":"ErrorDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"recipient","nameLocation":"1698:9:27","nodeType":"VariableDeclaration","scope":1457,"src":"1690:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"1690:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1455,"mutability":"mutable","name":"tokenId","nameLocation":"1717:7:27","nodeType":"VariableDeclaration","scope":1457,"src":"1709:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1689:36:27"},"src":"1657:69:27"},{"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"1728:66:27","text":"@notice Thrown when querying the balance of the zero address."},"errorSelector":"aefbce4e","id":1460,"name":"ERC721BalanceOfAddressZero","nameLocation":"1800:26:27","nodeType":"ErrorDefinition","parameters":{"id":1459,"nodeType":"ParameterList","parameters":[],"src":"1826:2:27"},"src":"1794:35:27"}],"src":"32:1798:27"},"id":27},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","exportedSymbols":{"ERC721ExistingToken":[1470],"ERC721MintToAddressZero":[1465]},"id":1471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1462,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:28"},{"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"58:61:28","text":"@notice Thrown when minting a token to the zero address."},"errorSelector":"7851b9cd","id":1465,"name":"ERC721MintToAddressZero","nameLocation":"125:23:28","nodeType":"ErrorDefinition","parameters":{"id":1464,"nodeType":"ParameterList","parameters":[],"src":"148:2:28"},"src":"119:32:28"},{"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"153:129:28","text":"@notice Thrown when minting a token that already exists.\n @param tokenId The identifier of the token that already exists."},"errorSelector":"753eceac","id":1470,"name":"ERC721ExistingToken","nameLocation":"288:19:28","nodeType":"ErrorDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"tokenId","nameLocation":"316:7:28","nodeType":"VariableDeclaration","scope":1470,"src":"308:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"308:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"307:17:28"},"src":"282:43:28"}],"src":"32:294:28"},"id":28},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","exportedSymbols":{"ERC721BurntToken":[1477]},"id":1478,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1472,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:29"},{"documentation":{"id":1473,"nodeType":"StructuredDocumentation","src":"58:174:29","text":"@notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n @param tokenId The identifier of the token that has been burnt before."},"errorSelector":"31e8d3d5","id":1477,"name":"ERC721BurntToken","nameLocation":"238:16:29","nodeType":"ErrorDefinition","parameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"tokenId","nameLocation":"263:7:29","nodeType":"VariableDeclaration","scope":1477,"src":"255:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1474,"name":"uint256","nodeType":"ElementaryTypeName","src":"255:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"254:17:29"},"src":"232:40:29"}],"src":"32:241:29"},"id":29},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","exportedSymbols":{"Approval":[1497],"ApprovalForAll":[1506],"Transfer":[1488]},"id":1507,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1479,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:30"},{"anonymous":false,"documentation":{"id":1480,"nodeType":"StructuredDocumentation","src":"58:179:30","text":"@notice Emitted when a token is transferred.\n @param from The previous token owner.\n @param to The new token owner.\n @param tokenId The transferred token identifier."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1488,"name":"Transfer","nameLocation":"243:8:30","nodeType":"EventDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1482,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"268:4:30","nodeType":"VariableDeclaration","scope":1488,"src":"252:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"252:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1484,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"290:2:30","nodeType":"VariableDeclaration","scope":1488,"src":"274:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1483,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1486,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"310:7:30","nodeType":"VariableDeclaration","scope":1488,"src":"294:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"294:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:67:30"},"src":"237:82:30"},{"anonymous":false,"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"321:183:30","text":"@notice Emitted when a single token approval is set.\n @param owner The token owner.\n @param approved The approved address.\n @param tokenId The approved token identifier."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1497,"name":"Approval","nameLocation":"510:8:30","nodeType":"EventDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"535:5:30","nodeType":"VariableDeclaration","scope":1497,"src":"519:21:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1490,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1493,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"558:8:30","nodeType":"VariableDeclaration","scope":1497,"src":"542:24:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1492,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1495,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"584:7:30","nodeType":"VariableDeclaration","scope":1497,"src":"568:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"518:74:30"},"src":"504:89:30"},{"anonymous":false,"documentation":{"id":1498,"nodeType":"StructuredDocumentation","src":"595:222:30","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1506,"name":"ApprovalForAll","nameLocation":"823:14:30","nodeType":"EventDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"854:5:30","nodeType":"VariableDeclaration","scope":1506,"src":"838:21:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1499,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1502,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"877:8:30","nodeType":"VariableDeclaration","scope":1506,"src":"861:24:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1504,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"892:8:30","nodeType":"VariableDeclaration","scope":1506,"src":"887:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1503,"name":"bool","nodeType":"ElementaryTypeName","src":"887:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:64:30"},"src":"817:85:30"}],"src":"32:872:30"},"id":30},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1592]},"id":1593,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1508,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1509,"nodeType":"StructuredDocumentation","src":"58:296:31","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1592,"linearizedBaseContracts":[1592],"name":"IERC721","nameLocation":"364:7:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1510,"nodeType":"StructuredDocumentation","src":"378:684:31","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1517,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:31","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1512,"mutability":"mutable","name":"to","nameLocation":"1092:2:31","nodeType":"VariableDeclaration","scope":1517,"src":"1084:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:31","nodeType":"VariableDeclaration","scope":1517,"src":"1096:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:31"},"returnParameters":{"id":1516,"nodeType":"ParameterList","parameters":[],"src":"1121:0:31"},"scope":1592,"src":"1067:55:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"1128:341:31","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1525,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:31","nodeType":"FunctionDefinition","parameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"mutability":"mutable","name":"operator","nameLocation":"1509:8:31","nodeType":"VariableDeclaration","scope":1525,"src":"1501:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1519,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1522,"mutability":"mutable","name":"approved","nameLocation":"1524:8:31","nodeType":"VariableDeclaration","scope":1525,"src":"1519:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1521,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:31"},"returnParameters":{"id":1524,"nodeType":"ParameterList","parameters":[],"src":"1542:0:31"},"scope":1592,"src":"1474:69:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1526,"nodeType":"StructuredDocumentation","src":"1549:667:31","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1535,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:31","nodeType":"FunctionDefinition","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"from","nameLocation":"2251:4:31","nodeType":"VariableDeclaration","scope":1535,"src":"2243:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"to","nameLocation":"2265:2:31","nodeType":"VariableDeclaration","scope":1535,"src":"2257:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:31","nodeType":"VariableDeclaration","scope":1535,"src":"2269:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:31"},"returnParameters":{"id":1534,"nodeType":"ParameterList","parameters":[],"src":"2294:0:31"},"scope":1592,"src":"2221:74:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"2301:663:31","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1545,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:31","nodeType":"FunctionDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"from","nameLocation":"3003:4:31","nodeType":"VariableDeclaration","scope":1545,"src":"2995:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1537,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1540,"mutability":"mutable","name":"to","nameLocation":"3017:2:31","nodeType":"VariableDeclaration","scope":1545,"src":"3009:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1542,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:31","nodeType":"VariableDeclaration","scope":1545,"src":"3021:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:31"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[],"src":"3046:0:31"},"scope":1592,"src":"2969:78:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"3053:735:31","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1557,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:31","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"from","nameLocation":"3827:4:31","nodeType":"VariableDeclaration","scope":1557,"src":"3819:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1547,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1550,"mutability":"mutable","name":"to","nameLocation":"3841:2:31","nodeType":"VariableDeclaration","scope":1557,"src":"3833:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1549,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1552,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:31","nodeType":"VariableDeclaration","scope":1557,"src":"3845:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"data","nameLocation":"3877:4:31","nodeType":"VariableDeclaration","scope":1557,"src":"3862:19:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1553,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:31"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"3891:0:31"},"scope":1592,"src":"3793:99:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1558,"nodeType":"StructuredDocumentation","src":"3898:209:31","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1565,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:31","nodeType":"FunctionDefinition","parameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"owner","nameLocation":"4139:5:31","nodeType":"VariableDeclaration","scope":1565,"src":"4131:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1559,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:31"},"returnParameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"balance","nameLocation":"4177:7:31","nodeType":"VariableDeclaration","scope":1565,"src":"4169:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1562,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:31"},"scope":1592,"src":"4112:74:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1566,"nodeType":"StructuredDocumentation","src":"4192:217:31","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1573,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:31","nodeType":"FunctionDefinition","parameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:31","nodeType":"VariableDeclaration","scope":1573,"src":"4431:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1567,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:31"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:31","nodeType":"VariableDeclaration","scope":1573,"src":"4471:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1570,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:31"},"scope":1592,"src":"4414:77:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"4497:285:31","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1581,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:31","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1576,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:31","nodeType":"VariableDeclaration","scope":1581,"src":"4808:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:31"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"approved","nameLocation":"4856:8:31","nodeType":"VariableDeclaration","scope":1581,"src":"4848:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1578,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:31"},"scope":1592,"src":"4787:79:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"4872:323:31","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1591,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:31","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"mutability":"mutable","name":"owner","nameLocation":"5234:5:31","nodeType":"VariableDeclaration","scope":1591,"src":"5226:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"operator","nameLocation":"5249:8:31","nodeType":"VariableDeclaration","scope":1591,"src":"5241:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:31"},"returnParameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:31","nodeType":"VariableDeclaration","scope":1591,"src":"5282:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1588,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:31"},"scope":1592,"src":"5200:103:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1593,"src":"354:4951:31","usedErrors":[],"usedEvents":[]}],"src":"32:5274:31"},"id":31},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","exportedSymbols":{"IERC721BatchTransfer":[1607]},"id":1608,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1594,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721BatchTransfer","contractDependencies":[],"contractKind":"interface","documentation":{"id":1595,"nodeType":"StructuredDocumentation","src":"58:207:32","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0xf3993d11."},"fullyImplemented":false,"id":1607,"linearizedBaseContracts":[1607],"name":"IERC721BatchTransfer","nameLocation":"275:20:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"302:578:32","text":"@notice Unsafely transfers a batch of tokens to a recipient.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"functionSelector":"f3993d11","id":1606,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"894:17:32","nodeType":"FunctionDefinition","parameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"from","nameLocation":"920:4:32","nodeType":"VariableDeclaration","scope":1606,"src":"912:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"to","nameLocation":"934:2:32","nodeType":"VariableDeclaration","scope":1606,"src":"926:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"tokenIds","nameLocation":"957:8:32","nodeType":"VariableDeclaration","scope":1606,"src":"938:27:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1602,"nodeType":"ArrayTypeName","src":"938:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"911:55:32"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[],"src":"975:0:32"},"scope":1607,"src":"885:91:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1608,"src":"265:713:32","usedErrors":[],"usedEvents":[]}],"src":"32:947:32"},"id":32},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","exportedSymbols":{"IERC721Burnable":[1628]},"id":1629,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1609,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1610,"nodeType":"StructuredDocumentation","src":"58:201:33","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5."},"fullyImplemented":false,"id":1628,"linearizedBaseContracts":[1628],"name":"IERC721Burnable","nameLocation":"269:15:33","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"291:371:33","text":"@notice Burns a token.\n @dev Reverts if `tokenId` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"functionSelector":"79cc6790","id":1618,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"676:8:33","nodeType":"FunctionDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"from","nameLocation":"693:4:33","nodeType":"VariableDeclaration","scope":1618,"src":"685:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"685:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"tokenId","nameLocation":"707:7:33","nodeType":"VariableDeclaration","scope":1618,"src":"699:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"684:31:33"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[],"src":"724:0:33"},"scope":1628,"src":"667:58:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"731:425:33","text":"@notice Burns a batch of tokens.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"functionSelector":"f2472965","id":1627,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1170:13:33","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"from","nameLocation":"1192:4:33","nodeType":"VariableDeclaration","scope":1627,"src":"1184:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1620,"name":"address","nodeType":"ElementaryTypeName","src":"1184:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"tokenIds","nameLocation":"1217:8:33","nodeType":"VariableDeclaration","scope":1627,"src":"1198:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"1198:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1623,"nodeType":"ArrayTypeName","src":"1198:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1183:43:33"},"returnParameters":{"id":1626,"nodeType":"ParameterList","parameters":[],"src":"1235:0:33"},"scope":1628,"src":"1161:75:33","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1629,"src":"259:979:33","usedErrors":[],"usedEvents":[]}],"src":"32:1207:33"},"id":33},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","exportedSymbols":{"IERC721Deliverable":[1642]},"id":1643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1630,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Deliverable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1631,"nodeType":"StructuredDocumentation","src":"58:204:34","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x9da5e832."},"fullyImplemented":false,"id":1642,"linearizedBaseContracts":[1642],"name":"IERC721Deliverable","nameLocation":"272:18:34","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1632,"nodeType":"StructuredDocumentation","src":"297:487:34","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Reverts if `recipients` and `tokenIds` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"9da5e832","id":1641,"implemented":false,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"798:7:34","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1635,"mutability":"mutable","name":"recipients","nameLocation":"825:10:34","nodeType":"VariableDeclaration","scope":1641,"src":"806:29:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"806:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1634,"nodeType":"ArrayTypeName","src":"806:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"tokenIds","nameLocation":"856:8:34","nodeType":"VariableDeclaration","scope":1641,"src":"837:27:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1636,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1637,"nodeType":"ArrayTypeName","src":"837:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"805:60:34"},"returnParameters":{"id":1640,"nodeType":"ParameterList","parameters":[],"src":"874:0:34"},"scope":1642,"src":"789:86:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1643,"src":"262:615:34","usedErrors":[],"usedEvents":[]}],"src":"32:846:34"},"id":34},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","exportedSymbols":{"IERC721Metadata":[1666]},"id":1667,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1644,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1645,"nodeType":"StructuredDocumentation","src":"58:201:35","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f."},"fullyImplemented":false,"id":1666,"linearizedBaseContracts":[1666],"name":"IERC721Metadata","nameLocation":"269:15:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"291:105:35","text":"@notice Gets the name of the token. E.g. \"My Token\".\n @return tokenName The name of the token."},"functionSelector":"06fdde03","id":1651,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"410:4:35","nodeType":"FunctionDefinition","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[],"src":"414:2:35"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"tokenName","nameLocation":"454:9:35","nodeType":"VariableDeclaration","scope":1651,"src":"440:23:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1648,"name":"string","nodeType":"ElementaryTypeName","src":"440:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"439:25:35"},"scope":1666,"src":"401:64:35","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"471:106:35","text":"@notice Gets the symbol of the token. E.g. \"TOK\".\n @return tokenSymbol The symbol of the token."},"functionSelector":"95d89b41","id":1657,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"591:6:35","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[],"src":"597:2:35"},"returnParameters":{"id":1656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"tokenSymbol","nameLocation":"637:11:35","nodeType":"VariableDeclaration","scope":1657,"src":"623:25:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1654,"name":"string","nodeType":"ElementaryTypeName","src":"623:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"622:27:35"},"scope":1666,"src":"582:68:35","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1658,"nodeType":"StructuredDocumentation","src":"656:215:35","text":"@notice Gets the metadata URI for a token identifier.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier.\n @return uri The metadata URI for the token identifier."},"functionSelector":"c87b56dd","id":1665,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"885:8:35","nodeType":"FunctionDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"tokenId","nameLocation":"902:7:35","nodeType":"VariableDeclaration","scope":1665,"src":"894:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"893:17:35"},"returnParameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"uri","nameLocation":"948:3:35","nodeType":"VariableDeclaration","scope":1665,"src":"934:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1662,"name":"string","nodeType":"ElementaryTypeName","src":"934:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"933:19:35"},"scope":1666,"src":"876:77:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1667,"src":"259:696:35","usedErrors":[],"usedEvents":[]}],"src":"32:924:35"},"id":35},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","exportedSymbols":{"IERC721Mintable":[1697]},"id":1698,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1668,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"58:201:36","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8e773e13."},"fullyImplemented":false,"id":1697,"linearizedBaseContracts":[1697],"name":"IERC721Mintable","nameLocation":"269:15:36","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"291:311:36","text":"@notice Unsafely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"functionSelector":"40c10f19","id":1677,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"616:4:36","nodeType":"FunctionDefinition","parameters":{"id":1675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"to","nameLocation":"629:2:36","nodeType":"VariableDeclaration","scope":1677,"src":"621:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"tokenId","nameLocation":"641:7:36","nodeType":"VariableDeclaration","scope":1677,"src":"633:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1673,"name":"uint256","nodeType":"ElementaryTypeName","src":"633:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"620:29:36"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[],"src":"658:0:36"},"scope":1697,"src":"607:52:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1678,"nodeType":"StructuredDocumentation","src":"665:504:36","text":"@notice Safely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"functionSelector":"8832e6e3","id":1687,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1183:8:36","nodeType":"FunctionDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1680,"mutability":"mutable","name":"to","nameLocation":"1200:2:36","nodeType":"VariableDeclaration","scope":1687,"src":"1192:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1679,"name":"address","nodeType":"ElementaryTypeName","src":"1192:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"tokenId","nameLocation":"1212:7:36","nodeType":"VariableDeclaration","scope":1687,"src":"1204:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"data","nameLocation":"1236:4:36","nodeType":"VariableDeclaration","scope":1687,"src":"1221:19:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1683,"name":"bytes","nodeType":"ElementaryTypeName","src":"1221:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1191:50:36"},"returnParameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"1250:0:36"},"scope":1697,"src":"1174:77:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1688,"nodeType":"StructuredDocumentation","src":"1257:356:36","text":"@notice Unsafely mints a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"4684d7e9","id":1696,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1627:9:36","nodeType":"FunctionDefinition","parameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1690,"mutability":"mutable","name":"to","nameLocation":"1645:2:36","nodeType":"VariableDeclaration","scope":1696,"src":"1637:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1689,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"tokenIds","nameLocation":"1668:8:36","nodeType":"VariableDeclaration","scope":1696,"src":"1649:27:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1649:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1692,"nodeType":"ArrayTypeName","src":"1649:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1636:41:36"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[],"src":"1686:0:36"},"scope":1697,"src":"1618:69:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1698,"src":"259:1430:36","usedErrors":[],"usedEvents":[]}],"src":"32:1658:36"},"id":36},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1715]},"id":1716,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1699,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:37"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"58:263:37","text":"@title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC721 contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x150b7a02."},"fullyImplemented":false,"id":1715,"linearizedBaseContracts":[1715],"name":"IERC721Receiver","nameLocation":"331:15:37","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"353:589:37","text":"@notice Handles the receipt of an ERC721 token.\n @dev Note: This function is called by an ERC721 contract after a safe transfer.\n @dev Note: The ERC721 contract address is always the message sender.\n @param operator The initiator of the safe transfer.\n @param from The previous token owner.\n @param tokenId The token identifier.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."},"functionSelector":"150b7a02","id":1714,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"956:16:37","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"operator","nameLocation":"981:8:37","nodeType":"VariableDeclaration","scope":1714,"src":"973:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"from","nameLocation":"999:4:37","nodeType":"VariableDeclaration","scope":1714,"src":"991:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"tokenId","nameLocation":"1013:7:37","nodeType":"VariableDeclaration","scope":1714,"src":"1005:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1709,"mutability":"mutable","name":"data","nameLocation":"1037:4:37","nodeType":"VariableDeclaration","scope":1714,"src":"1022:19:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1708,"name":"bytes","nodeType":"ElementaryTypeName","src":"1022:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"972:70:37"},"returnParameters":{"id":1713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"magicValue","nameLocation":"1068:10:37","nodeType":"VariableDeclaration","scope":1714,"src":"1061:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1711,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:19:37"},"scope":1715,"src":"947:133:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1716,"src":"321:761:37","usedErrors":[],"usedEvents":[]}],"src":"32:1051:37"},"id":37},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","exportedSymbols":{"Address":[4053],"Approval":[1497],"ApprovalForAll":[1506],"ERC721BalanceOfAddressZero":[1460],"ERC721BurntToken":[1477],"ERC721ExistingToken":[1470],"ERC721MintToAddressZero":[1465],"ERC721NonApprovedForApproval":[1426],"ERC721NonApprovedForTransfer":[1443],"ERC721NonExistingToken":[1434],"ERC721NonOwnedToken":[1450],"ERC721SafeTransferRejected":[1457],"ERC721SelfApproval":[1412],"ERC721SelfApprovalForAll":[1417],"ERC721Storage":[3470],"ERC721TransferToAddressZero":[1429],"IERC721":[1592],"IERC721BatchTransfer":[1607],"IERC721Burnable":[1628],"IERC721Deliverable":[1642],"IERC721Metadata":[1666],"IERC721Mintable":[1697],"IERC721Receiver":[1715],"InconsistentArrayLengths":[7],"InterfaceDetectionStorage":[1000],"Transfer":[1488]},"id":3471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1717,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:38"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","file":"./../errors/ERC721Errors.sol","id":1727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1461,"src":"103:280:38","symbolAliases":[{"foreign":{"id":1718,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"111:18:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1719,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"131:24:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1720,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"157:28:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1721,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"187:27:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1722,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"216:22:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1723,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"240:28:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1724,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"270:19:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1725,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"291:26:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1726,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"319:26:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","file":"./../errors/ERC721MintableErrors.sol","id":1730,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1471,"src":"384:98:38","symbolAliases":[{"foreign":{"id":1728,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"392:23:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1729,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"417:19:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","file":"./../errors/ERC721MintableOnceErrors.sol","id":1732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1478,"src":"483:74:38","symbolAliases":[{"foreign":{"id":1731,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"491:16:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../../CommonErrors.sol","id":1734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":11,"src":"558:69:38","symbolAliases":[{"foreign":{"id":1733,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"566:24:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","file":"./../events/ERC721Events.sol","id":1738,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1507,"src":"628:80:38","symbolAliases":[{"foreign":{"id":1735,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"636:8:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1736,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"646:8:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1737,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"656:14:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../interfaces/IERC721.sol","id":1740,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1593,"src":"709:52:38","symbolAliases":[{"foreign":{"id":1739,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"717:7:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","file":"./../interfaces/IERC721BatchTransfer.sol","id":1742,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1608,"src":"762:78:38","symbolAliases":[{"foreign":{"id":1741,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"770:20:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1744,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1667,"src":"841:68:38","symbolAliases":[{"foreign":{"id":1743,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"849:15:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"./../interfaces/IERC721Mintable.sol","id":1746,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1698,"src":"910:68:38","symbolAliases":[{"foreign":{"id":1745,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"918:15:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","file":"./../interfaces/IERC721Deliverable.sol","id":1748,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1643,"src":"979:74:38","symbolAliases":[{"foreign":{"id":1747,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"987:18:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","file":"./../interfaces/IERC721Burnable.sol","id":1750,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1629,"src":"1054:68:38","symbolAliases":[{"foreign":{"id":1749,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"1062:15:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","file":"./../interfaces/IERC721Receiver.sol","id":1752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1716,"src":"1123:68:38","symbolAliases":[{"foreign":{"id":1751,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"1131:15:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":4054,"src":"1192:66:38","symbolAliases":[{"foreign":{"id":1753,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"1200:7:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":1756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3471,"sourceUnit":1001,"src":"1259:107:38","symbolAliases":[{"foreign":{"id":1755,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1267:25:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3470,"linearizedBaseContracts":[3470],"name":"ERC721Storage","nameLocation":"1376:13:38","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1759,"libraryName":{"id":1757,"name":"Address","nameLocations":["1402:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":4053,"src":"1402:7:38"},"nodeType":"UsingForDirective","src":"1396:26:38","typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"1414:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1763,"libraryName":{"id":1760,"name":"ERC721Storage","nameLocations":["1433:13:38"],"nodeType":"IdentifierPath","referencedDeclaration":3470,"src":"1433:13:38"},"nodeType":"UsingForDirective","src":"1427:45:38","typeName":{"id":1762,"nodeType":"UserDefinedTypeName","pathNode":{"id":1761,"name":"ERC721Storage.Layout","nameLocations":["1451:13:38","1465:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"1451:20:38"},"referencedDeclaration":1786,"src":"1451:20:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1767,"libraryName":{"id":1764,"name":"InterfaceDetectionStorage","nameLocations":["1483:25:38"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"1483:25:38"},"nodeType":"UsingForDirective","src":"1477:69:38","typeName":{"id":1766,"nodeType":"UserDefinedTypeName","pathNode":{"id":1765,"name":"InterfaceDetectionStorage.Layout","nameLocations":["1513:25:38","1539:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1513:32:38"},"referencedDeclaration":910,"src":"1513:32:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC721Storage.Layout","id":1786,"members":[{"constant":false,"id":1771,"mutability":"mutable","name":"owners","nameLocation":"1604:6:38","nodeType":"VariableDeclaration","scope":1786,"src":"1576:34:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1770,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1584:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1576:27:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1775,"mutability":"mutable","name":"balances","nameLocation":"1648:8:38","nodeType":"VariableDeclaration","scope":1786,"src":"1620:36:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1774,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1772,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1620:27:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"approvals","nameLocation":"1694:9:38","nodeType":"VariableDeclaration","scope":1786,"src":"1666:37:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1778,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1776,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1666:27:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1777,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":1785,"mutability":"mutable","name":"operators","nameLocation":"1758:9:38","nodeType":"VariableDeclaration","scope":1786,"src":"1713:54:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1784,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1713:44:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1783,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"1740:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1732:24:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1782,"name":"bool","nodeType":"ElementaryTypeName","src":"1751:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"1559:6:38","nodeType":"StructDefinition","scope":3470,"src":"1552:222:38","visibility":"public"},{"constant":true,"id":1799,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1806:19:38","nodeType":"VariableDeclaration","scope":3470,"src":"1780:118:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e4552433732312e4552433732312e73746f72616765","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1854:37:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""},"value":"animoca.token.ERC721.ERC721.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""}],"id":1792,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1844:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:48:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1836:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:38","typeDescriptions":{}}},"id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1836:57:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1896:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1836:61:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1828:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1828:7:38","typeDescriptions":{}}},"id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:70:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1804,"mutability":"constant","name":"ERC721_RECEIVED","nameLocation":"1930:15:38","nodeType":"VariableDeclaration","scope":3470,"src":"1905:84:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1800,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1905:6:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":1801,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"1948:15:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1715_$","typeString":"type(contract IERC721Receiver)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1964:16:38","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"1948:32:38","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1981:8:38","memberName":"selector","nodeType":"MemberAccess","src":"1948:41:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":1809,"mutability":"constant","name":"TOKEN_APPROVAL_OWNER_FLAG","nameLocation":"2157:25:38","nodeType":"VariableDeclaration","scope":3470,"src":"2131:62:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"2131:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"},"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2185:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2190:3:38","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2185:8:38","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}},"visibility":"internal"},{"constant":true,"id":1812,"mutability":"constant","name":"BURNT_TOKEN_OWNER_VALUE","nameLocation":"2353:23:38","nodeType":"VariableDeclaration","scope":3470,"src":"2327:118:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2327:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864656164303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2379:66:38","typeDescriptions":{"typeIdentifier":"t_rational_100719116927691798707895874029850069994745719541394658707722161504685790330880_by_1","typeString":"int_const 1007...(70 digits omitted)...0880"},"value":"0xdead000000000000000000000000000000000000000000000000000000000000"},"visibility":"internal"},{"body":{"id":1828,"nodeType":"Block","src":"2555:106:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1822,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"2627:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1592_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1592_$","typeString":"type(contract IERC721)"}],"id":1821,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2622:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2622:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1592","typeString":"type(contract IERC721)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2636:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"2622:25:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2649:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1816,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2565:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2591:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"2565:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2600:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2565:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:89:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1827,"nodeType":"ExpressionStatement","src":"2565:89:38"}]},"documentation":{"id":1813,"nodeType":"StructuredDocumentation","src":"2452:73:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721."},"id":1829,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"2539:4:38","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[],"src":"2543:2:38"},"returnParameters":{"id":1815,"nodeType":"ParameterList","parameters":[],"src":"2555:0:38"},"scope":3470,"src":"2530:131:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1845,"nodeType":"Block","src":"2802:119:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1839,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2874:20:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1607_$","typeString":"type(contract IERC721BatchTransfer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1607_$","typeString":"type(contract IERC721BatchTransfer)"}],"id":1838,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2869:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2869:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721BatchTransfer_$1607","typeString":"type(contract IERC721BatchTransfer)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2896:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"2869:38:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2909:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1833,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2812:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2838:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"2812:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2847:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2812:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:102:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1844,"nodeType":"ExpressionStatement","src":"2812:102:38"}]},"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"2667:86:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer."},"id":1846,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721BatchTransfer","nameLocation":"2767:23:38","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[],"src":"2790:2:38"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[],"src":"2802:0:38"},"scope":3470,"src":"2758:163:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1862,"nodeType":"Block","src":"3052:114:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1856,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"3124:15:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1666_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1666_$","typeString":"type(contract IERC721Metadata)"}],"id":1855,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3119:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3119:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1666","typeString":"type(contract IERC721Metadata)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3141:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"3119:33:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3154:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1850,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3062:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3088:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3062:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1854,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3097:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3062:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:97:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1861,"nodeType":"ExpressionStatement","src":"3062:97:38"}]},"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"2927:81:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Metadata."},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Metadata","nameLocation":"3022:18:38","nodeType":"FunctionDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[],"src":"3040:2:38"},"returnParameters":{"id":1849,"nodeType":"ParameterList","parameters":[],"src":"3052:0:38"},"scope":3470,"src":"3013:153:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1879,"nodeType":"Block","src":"3297:114:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1873,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3369:15:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1697_$","typeString":"type(contract IERC721Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1697_$","typeString":"type(contract IERC721Mintable)"}],"id":1872,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3364:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Mintable_$1697","typeString":"type(contract IERC721Mintable)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3386:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"3364:33:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3399:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1867,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3307:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3333:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3307:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1871,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3342:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3307:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:97:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1878,"nodeType":"ExpressionStatement","src":"3307:97:38"}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"3172:81:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Mintable."},"id":1880,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Mintable","nameLocation":"3267:18:38","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[],"src":"3285:2:38"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"3297:0:38"},"scope":3470,"src":"3258:153:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1896,"nodeType":"Block","src":"3548:117:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1890,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"3620:18:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1642_$","typeString":"type(contract IERC721Deliverable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1642_$","typeString":"type(contract IERC721Deliverable)"}],"id":1889,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3615:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3615:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Deliverable_$1642","typeString":"type(contract IERC721Deliverable)"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3640:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"3615:36:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3653:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1884,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3558:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3584:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3558:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3593:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3558:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:100:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1895,"nodeType":"ExpressionStatement","src":"3558:100:38"}]},"documentation":{"id":1881,"nodeType":"StructuredDocumentation","src":"3417:84:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable."},"id":1897,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Deliverable","nameLocation":"3515:21:38","nodeType":"FunctionDefinition","parameters":{"id":1882,"nodeType":"ParameterList","parameters":[],"src":"3536:2:38"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[],"src":"3548:0:38"},"scope":3470,"src":"3506:159:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1913,"nodeType":"Block","src":"3796:114:38","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1907,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"3868:15:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1628_$","typeString":"type(contract IERC721Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1628_$","typeString":"type(contract IERC721Burnable)"}],"id":1906,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3863:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Burnable_$1628","typeString":"type(contract IERC721Burnable)"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3885:11:38","memberName":"interfaceId","nodeType":"MemberAccess","src":"3863:33:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3898:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1901,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3806:25:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3832:6:38","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3806:32:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1905,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3841:21:38","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3806:56:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:97:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1912,"nodeType":"ExpressionStatement","src":"3806:97:38"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"3671:81:38","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Burnable."},"id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Burnable","nameLocation":"3766:18:38","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"3784:2:38"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[],"src":"3796:0:38"},"scope":3470,"src":"3757:153:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2031,"nodeType":"Block","src":"4714:963:38","statements":[{"assignments":[1928],"declarations":[{"constant":false,"id":1928,"mutability":"mutable","name":"owner","nameLocation":"4732:5:38","nodeType":"VariableDeclaration","scope":2031,"src":"4724:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"4724:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1933,"initialValue":{"baseExpression":{"expression":{"id":1929,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"4740:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4742:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"4740:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1932,"indexExpression":{"id":1931,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"4749:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4740:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4724:33:38"},{"condition":{"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4771:20:38","subExpression":{"arguments":[{"id":1935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4785:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1934,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"4772:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4772:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1942,"nodeType":"IfStatement","src":"4767:64:38","trueBody":{"errorCall":{"arguments":[{"id":1939,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"4823:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1938,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"4800:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1941,"nodeType":"RevertStatement","src":"4793:38:38"}},{"assignments":[1944],"declarations":[{"constant":false,"id":1944,"mutability":"mutable","name":"ownerAddress","nameLocation":"4849:12:38","nodeType":"VariableDeclaration","scope":2031,"src":"4841:20:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1943,"name":"address","nodeType":"ElementaryTypeName","src":"4841:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1948,"initialValue":{"arguments":[{"id":1946,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4876:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1945,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"4864:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4864:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4841:41:38"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"4896:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1950,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"4902:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4896:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1956,"nodeType":"IfStatement","src":"4892:63:38","trueBody":{"errorCall":{"arguments":[{"id":1953,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"4942:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1952,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"4923:18:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4923:32:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1955,"nodeType":"RevertStatement","src":"4916:39:38"}},{"condition":{"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4969:39:38","subExpression":{"arguments":[{"id":1958,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"4984:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":1959,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"4987:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1960,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"5001:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1957,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"4970:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4970:38:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1969,"nodeType":"IfStatement","src":"4965:111:38","trueBody":{"errorCall":{"arguments":[{"id":1964,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"5046:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1965,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"5054:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1966,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"5068:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1963,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"5017:28:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:59:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1968,"nodeType":"RevertStatement","src":"5010:66:38"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"5090:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5096:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1971,"name":"address","nodeType":"ElementaryTypeName","src":"5096:7:38","typeDescriptions":{}}},"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5096:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5090:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2023,"nodeType":"Block","src":"5311:310:38","statements":[{"assignments":[1997],"declarations":[{"constant":false,"id":1997,"mutability":"mutable","name":"ownerWithApprovalBit","nameLocation":"5333:20:38","nodeType":"VariableDeclaration","scope":2023,"src":"5325:28:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"5325:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2001,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1998,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5356:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1999,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"5364:25:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5356:33:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5325:64:38"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2002,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5407:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2003,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"5416:20:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5407:29:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2014,"nodeType":"IfStatement","src":"5403:169:38","trueBody":{"id":2013,"nodeType":"Block","src":"5438:134:38","statements":[{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2005,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"5517:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2008,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5519:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"5517:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2009,"indexExpression":{"id":2007,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"5526:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5517:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2010,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"5537:20:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5517:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"5517:40:38"}]}},{"expression":{"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2015,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"5585:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5587:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"5585:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2019,"indexExpression":{"id":2017,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"5597:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5585:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2020,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"5608:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5585:25:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2022,"nodeType":"ExpressionStatement","src":"5585:25:38"}]},"id":2024,"nodeType":"IfStatement","src":"5086:535:38","trueBody":{"id":1995,"nodeType":"Block","src":"5108:197:38","statements":[{"condition":{"arguments":[{"id":1977,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"5144:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1976,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"5126:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5126:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1994,"nodeType":"IfStatement","src":"5122:173:38","trueBody":{"id":1993,"nodeType":"Block","src":"5152:143:38","statements":[{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1979,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"5230:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5232:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"5230:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1983,"indexExpression":{"id":1981,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"5239:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5230:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1988,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"5266:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5258:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1986,"name":"uint160","nodeType":"ElementaryTypeName","src":"5258:7:38","typeDescriptions":{}}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5258:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5250:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:38","typeDescriptions":{}}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5230:50:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"nodeType":"ExpressionStatement","src":"5230:50:38"}]}}]}},{"eventCall":{"arguments":[{"id":2026,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"5644:12:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2027,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"5658:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2028,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"5662:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2025,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"5635:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5635:35:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2030,"nodeType":"EmitStatement","src":"5630:40:38"}]},"documentation":{"id":1915,"nodeType":"StructuredDocumentation","src":"3916:704:38","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: This function implements {ERC721-approve(address,uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param sender The message sender.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"id":2032,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4634:7:38","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1918,"mutability":"mutable","name":"s","nameLocation":"4657:1:38","nodeType":"VariableDeclaration","scope":2032,"src":"4642:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":1917,"nodeType":"UserDefinedTypeName","pathNode":{"id":1916,"name":"Layout","nameLocations":["4642:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"4642:6:38"},"referencedDeclaration":1786,"src":"4642:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"sender","nameLocation":"4668:6:38","nodeType":"VariableDeclaration","scope":2032,"src":"4660:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"4660:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"to","nameLocation":"4684:2:38","nodeType":"VariableDeclaration","scope":2032,"src":"4676:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1921,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"tokenId","nameLocation":"4696:7:38","nodeType":"VariableDeclaration","scope":2032,"src":"4688:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4641:63:38"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[],"src":"4714:0:38"},"scope":3470,"src":"4625:1052:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2069,"nodeType":"Block","src":"6290:187:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2045,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"6304:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2046,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6316:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6304:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2052,"nodeType":"IfStatement","src":"6300:63:38","trueBody":{"errorCall":{"arguments":[{"id":2049,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6356:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2048,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"6331:24:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6331:32:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2051,"nodeType":"RevertStatement","src":"6324:39:38"}},{"expression":{"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2053,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"6373:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6375:9:38","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1785,"src":"6373:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2058,"indexExpression":{"id":2055,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6385:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6373:19:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2059,"indexExpression":{"id":2056,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"6393:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6373:29:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2060,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"6405:8:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6373:40:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2062,"nodeType":"ExpressionStatement","src":"6373:40:38"},{"eventCall":{"arguments":[{"id":2064,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6443:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2065,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"6451:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2066,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"6461:8:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2063,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"6428:14:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6428:42:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2068,"nodeType":"EmitStatement","src":"6423:47:38"}]},"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"5683:499:38","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param sender The message sender.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"id":2070,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"6196:17:38","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"s","nameLocation":"6229:1:38","nodeType":"VariableDeclaration","scope":2070,"src":"6214:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2035,"nodeType":"UserDefinedTypeName","pathNode":{"id":2034,"name":"Layout","nameLocations":["6214:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"6214:6:38"},"referencedDeclaration":1786,"src":"6214:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"sender","nameLocation":"6240:6:38","nodeType":"VariableDeclaration","scope":2070,"src":"6232:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2037,"name":"address","nodeType":"ElementaryTypeName","src":"6232:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2040,"mutability":"mutable","name":"operator","nameLocation":"6256:8:38","nodeType":"VariableDeclaration","scope":2070,"src":"6248:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2039,"name":"address","nodeType":"ElementaryTypeName","src":"6248:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2042,"mutability":"mutable","name":"approved","nameLocation":"6271:8:38","nodeType":"VariableDeclaration","scope":2070,"src":"6266:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2041,"name":"bool","nodeType":"ElementaryTypeName","src":"6266:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6213:67:38"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[],"src":"6290:0:38"},"scope":3470,"src":"6187:290:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2186,"nodeType":"Block","src":"7458:848:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7472:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7486:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7478:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2086,"name":"address","nodeType":"ElementaryTypeName","src":"7478:7:38","typeDescriptions":{}}},"id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7478:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2094,"nodeType":"IfStatement","src":"7468:58:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2091,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"7497:27:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7497:29:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2093,"nodeType":"RevertStatement","src":"7490:36:38"}},{"assignments":[2096],"declarations":[{"constant":false,"id":2096,"mutability":"mutable","name":"owner","nameLocation":"7545:5:38","nodeType":"VariableDeclaration","scope":2186,"src":"7537:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2101,"initialValue":{"baseExpression":{"expression":{"id":2097,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"7553:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7555:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"7553:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2100,"indexExpression":{"id":2099,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7562:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7553:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7537:33:38"},{"condition":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7584:20:38","subExpression":{"arguments":[{"id":2103,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"7598:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2102,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"7585:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7585:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2110,"nodeType":"IfStatement","src":"7580:64:38","trueBody":{"errorCall":{"arguments":[{"id":2107,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7636:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2106,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"7613:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"RevertStatement","src":"7606:38:38"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2112,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"7670:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2111,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"7658:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7658:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2114,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"7680:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7658:26:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2121,"nodeType":"IfStatement","src":"7654:73:38","trueBody":{"errorCall":{"arguments":[{"id":2117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"7713:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2118,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7719:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2116,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"7693:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7693:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2120,"nodeType":"RevertStatement","src":"7686:41:38"}},{"condition":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7742:31:38","subExpression":{"arguments":[{"id":2123,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"7757:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2124,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"7760:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2125,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"7766:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2122,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"7743:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7743:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2147,"nodeType":"IfStatement","src":"7738:185:38","trueBody":{"id":2146,"nodeType":"Block","src":"7775:148:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7793:25:38","subExpression":{"arguments":[{"id":2129,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"7812:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2128,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"7794:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7794:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"7822:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2133,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"7832:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2134,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7834:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"7832:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2136,"indexExpression":{"id":2135,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7844:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7832:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7822:30:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7793:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2145,"nodeType":"IfStatement","src":"7789:123:38","trueBody":{"errorCall":{"arguments":[{"id":2140,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"7890:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2141,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"7898:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2142,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7904:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2139,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"7861:28:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7861:51:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2144,"nodeType":"RevertStatement","src":"7854:58:38"}}]}},{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2148,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"7933:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7935:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"7933:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2152,"indexExpression":{"id":2150,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7942:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7933:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2157,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7969:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7961:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2155,"name":"uint160","nodeType":"ElementaryTypeName","src":"7961:7:38","typeDescriptions":{}}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7961:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7953:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"7953:7:38","typeDescriptions":{}}},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7953:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7933:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2161,"nodeType":"ExpressionStatement","src":"7933:40:38"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"7987:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2163,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7995:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7987:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2179,"nodeType":"IfStatement","src":"7983:274:38","trueBody":{"id":2178,"nodeType":"Block","src":"7999:258:38","statements":[{"id":2177,"nodeType":"UncheckedBlock","src":"8013:234:38","statements":[{"expression":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"8118:18:38","subExpression":{"baseExpression":{"expression":{"id":2165,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"8120:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2166,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8122:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"8120:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2168,"indexExpression":{"id":2167,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"8131:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8120:16:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2170,"nodeType":"ExpressionStatement","src":"8118:18:38"},{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8216:16:38","subExpression":{"baseExpression":{"expression":{"id":2171,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"8218:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8220:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"8218:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2174,"indexExpression":{"id":2173,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"8229:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8218:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"8216:16:38"}]}]}},{"eventCall":{"arguments":[{"id":2181,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"8281:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2182,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"8287:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2183,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8291:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2180,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"8272:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8272:27:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2185,"nodeType":"EmitStatement","src":"8267:32:38"}]},"documentation":{"id":2071,"nodeType":"StructuredDocumentation","src":"6483:862:38","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":2187,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7359:12:38","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"s","nameLocation":"7387:1:38","nodeType":"VariableDeclaration","scope":2187,"src":"7372:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2073,"nodeType":"UserDefinedTypeName","pathNode":{"id":2072,"name":"Layout","nameLocations":["7372:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"7372:6:38"},"referencedDeclaration":1786,"src":"7372:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2076,"mutability":"mutable","name":"sender","nameLocation":"7398:6:38","nodeType":"VariableDeclaration","scope":2187,"src":"7390:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2075,"name":"address","nodeType":"ElementaryTypeName","src":"7390:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"from","nameLocation":"7414:4:38","nodeType":"VariableDeclaration","scope":2187,"src":"7406:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2077,"name":"address","nodeType":"ElementaryTypeName","src":"7406:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"to","nameLocation":"7428:2:38","nodeType":"VariableDeclaration","scope":2187,"src":"7420:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2079,"name":"address","nodeType":"ElementaryTypeName","src":"7420:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"tokenId","nameLocation":"7440:7:38","nodeType":"VariableDeclaration","scope":2187,"src":"7432:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"7432:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7371:77:38"},"returnParameters":{"id":2084,"nodeType":"ParameterList","parameters":[],"src":"7458:0:38"},"scope":3470,"src":"7350:956:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2224,"nodeType":"Block","src":"9590:165:38","statements":[{"expression":{"arguments":[{"id":2205,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"9615:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2206,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9623:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2207,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"9629:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2208,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"9633:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2202,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"9600:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9602:12:38","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2187,"src":"9600:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9600:41:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2210,"nodeType":"ExpressionStatement","src":"9600:41:38"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2211,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"9655:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9658:10:38","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"9655:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9655:15:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"IfStatement","src":"9651:98:38","trueBody":{"id":2222,"nodeType":"Block","src":"9672:77:38","statements":[{"expression":{"arguments":[{"id":2215,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"9708:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2216,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9716:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2217,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"9722:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2218,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"9726:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9735:2:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2214,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"9686:21:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9686:52:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2221,"nodeType":"ExpressionStatement","src":"9686:52:38"}]}}]},"documentation":{"id":2188,"nodeType":"StructuredDocumentation","src":"8312:1161:38","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":2225,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"9487:16:38","nodeType":"FunctionDefinition","parameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"s","nameLocation":"9519:1:38","nodeType":"VariableDeclaration","scope":2225,"src":"9504:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2190,"nodeType":"UserDefinedTypeName","pathNode":{"id":2189,"name":"Layout","nameLocations":["9504:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"9504:6:38"},"referencedDeclaration":1786,"src":"9504:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"sender","nameLocation":"9530:6:38","nodeType":"VariableDeclaration","scope":2225,"src":"9522:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2192,"name":"address","nodeType":"ElementaryTypeName","src":"9522:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2195,"mutability":"mutable","name":"from","nameLocation":"9546:4:38","nodeType":"VariableDeclaration","scope":2225,"src":"9538:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2194,"name":"address","nodeType":"ElementaryTypeName","src":"9538:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2197,"mutability":"mutable","name":"to","nameLocation":"9560:2:38","nodeType":"VariableDeclaration","scope":2225,"src":"9552:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2196,"name":"address","nodeType":"ElementaryTypeName","src":"9552:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2199,"mutability":"mutable","name":"tokenId","nameLocation":"9572:7:38","nodeType":"VariableDeclaration","scope":2225,"src":"9564:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2198,"name":"uint256","nodeType":"ElementaryTypeName","src":"9564:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9503:77:38"},"returnParameters":{"id":2201,"nodeType":"ParameterList","parameters":[],"src":"9590:0:38"},"scope":3470,"src":"9478:277:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2264,"nodeType":"Block","src":"11138:167:38","statements":[{"expression":{"arguments":[{"id":2245,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"11163:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2246,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"11171:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2247,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"11177:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2248,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"11181:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2242,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"11148:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11150:12:38","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2187,"src":"11148:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11148:41:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"ExpressionStatement","src":"11148:41:38"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2251,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"11203:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11206:10:38","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"11203:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:15:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2263,"nodeType":"IfStatement","src":"11199:100:38","trueBody":{"id":2262,"nodeType":"Block","src":"11220:79:38","statements":[{"expression":{"arguments":[{"id":2255,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"11256:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2256,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"11264:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2257,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"11270:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2258,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"11274:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2259,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"11283:4:38","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2254,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"11234:21:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11234:54:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2261,"nodeType":"ExpressionStatement","src":"11234:54:38"}]}}]},"documentation":{"id":2226,"nodeType":"StructuredDocumentation","src":"9761:1239:38","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"id":2265,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"11014:16:38","nodeType":"FunctionDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"s","nameLocation":"11046:1:38","nodeType":"VariableDeclaration","scope":2265,"src":"11031:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2228,"nodeType":"UserDefinedTypeName","pathNode":{"id":2227,"name":"Layout","nameLocations":["11031:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"11031:6:38"},"referencedDeclaration":1786,"src":"11031:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"sender","nameLocation":"11057:6:38","nodeType":"VariableDeclaration","scope":2265,"src":"11049:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2230,"name":"address","nodeType":"ElementaryTypeName","src":"11049:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"from","nameLocation":"11073:4:38","nodeType":"VariableDeclaration","scope":2265,"src":"11065:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"11065:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2235,"mutability":"mutable","name":"to","nameLocation":"11087:2:38","nodeType":"VariableDeclaration","scope":2265,"src":"11079:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2234,"name":"address","nodeType":"ElementaryTypeName","src":"11079:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2237,"mutability":"mutable","name":"tokenId","nameLocation":"11099:7:38","nodeType":"VariableDeclaration","scope":2265,"src":"11091:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2236,"name":"uint256","nodeType":"ElementaryTypeName","src":"11091:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2239,"mutability":"mutable","name":"data","nameLocation":"11123:4:38","nodeType":"VariableDeclaration","scope":2265,"src":"11108:19:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2238,"name":"bytes","nodeType":"ElementaryTypeName","src":"11108:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11030:98:38"},"returnParameters":{"id":2241,"nodeType":"ParameterList","parameters":[],"src":"11138:0:38"},"scope":3470,"src":"11005:300:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2416,"nodeType":"Block","src":"12362:1084:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2281,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"12376:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12390:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"12382:7:38","typeDescriptions":{}}},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12376:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2290,"nodeType":"IfStatement","src":"12372:58:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2287,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"12401:27:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12401:29:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2289,"nodeType":"RevertStatement","src":"12394:36:38"}},{"assignments":[2292],"declarations":[{"constant":false,"id":2292,"mutability":"mutable","name":"operatable","nameLocation":"12445:10:38","nodeType":"VariableDeclaration","scope":2416,"src":"12440:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2291,"name":"bool","nodeType":"ElementaryTypeName","src":"12440:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2298,"initialValue":{"arguments":[{"id":2294,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"12472:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2295,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"12475:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2296,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"12481:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2293,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"12458:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12458:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12440:48:38"},{"assignments":[2300],"declarations":[{"constant":false,"id":2300,"mutability":"mutable","name":"length","nameLocation":"12507:6:38","nodeType":"VariableDeclaration","scope":2416,"src":"12499:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"12499:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2303,"initialValue":{"expression":{"id":2301,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"12516:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12525:6:38","memberName":"length","nodeType":"MemberAccess","src":"12516:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12499:32:38"},{"body":{"id":2388,"nodeType":"Block","src":"12574:552:38","statements":[{"assignments":[2314],"declarations":[{"constant":false,"id":2314,"mutability":"mutable","name":"tokenId","nameLocation":"12596:7:38","nodeType":"VariableDeclaration","scope":2388,"src":"12588:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"12588:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2318,"initialValue":{"baseExpression":{"id":2315,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"12606:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2317,"indexExpression":{"id":2316,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"12615:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12606:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12588:29:38"},{"assignments":[2320],"declarations":[{"constant":false,"id":2320,"mutability":"mutable","name":"owner","nameLocation":"12639:5:38","nodeType":"VariableDeclaration","scope":2388,"src":"12631:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2319,"name":"uint256","nodeType":"ElementaryTypeName","src":"12631:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2325,"initialValue":{"baseExpression":{"expression":{"id":2321,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"12647:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12649:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"12647:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2324,"indexExpression":{"id":2323,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12656:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12647:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12631:33:38"},{"condition":{"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12682:20:38","subExpression":{"arguments":[{"id":2327,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"12696:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2326,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"12683:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12683:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2334,"nodeType":"IfStatement","src":"12678:64:38","trueBody":{"errorCall":{"arguments":[{"id":2331,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12734:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2330,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"12711:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12711:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2333,"nodeType":"RevertStatement","src":"12704:38:38"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2336,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"12772:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2335,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"12760:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12760:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2338,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"12782:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12760:26:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2345,"nodeType":"IfStatement","src":"12756:73:38","trueBody":{"errorCall":{"arguments":[{"id":2341,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"12815:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2342,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12821:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2340,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"12795:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12795:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2344,"nodeType":"RevertStatement","src":"12788:41:38"}},{"condition":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12847:11:38","subExpression":{"id":2346,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"12848:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2367,"nodeType":"IfStatement","src":"12843:173:38","trueBody":{"id":2366,"nodeType":"Block","src":"12860:156:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12882:25:38","subExpression":{"arguments":[{"id":2349,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"12901:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2348,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"12883:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12883:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2352,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"12911:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2353,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"12921:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12923:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"12921:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2356,"indexExpression":{"id":2355,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12933:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12921:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12911:30:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12882:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2365,"nodeType":"IfStatement","src":"12878:123:38","trueBody":{"errorCall":{"arguments":[{"id":2360,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"12979:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2361,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"12987:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12993:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2359,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"12950:28:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12950:51:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2364,"nodeType":"RevertStatement","src":"12943:58:38"}}]}},{"expression":{"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2368,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"13029:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13031:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"13029:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2372,"indexExpression":{"id":2370,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"13038:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13029:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2377,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"13065:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13057:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2375,"name":"uint160","nodeType":"ElementaryTypeName","src":"13057:7:38","typeDescriptions":{}}},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13057:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13049:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2373,"name":"uint256","nodeType":"ElementaryTypeName","src":"13049:7:38","typeDescriptions":{}}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13049:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13029:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2381,"nodeType":"ExpressionStatement","src":"13029:40:38"},{"eventCall":{"arguments":[{"id":2383,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"13097:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2384,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"13103:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2385,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"13107:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2382,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"13088:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13088:27:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2387,"nodeType":"EmitStatement","src":"13083:32:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2307,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"12557:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2308,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"12561:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12557:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2389,"initializationExpression":{"assignments":[2305],"declarations":[{"constant":false,"id":2305,"mutability":"mutable","name":"i","nameLocation":"12554:1:38","nodeType":"VariableDeclaration","scope":2389,"src":"12546:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"12546:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2306,"nodeType":"VariableDeclarationStatement","src":"12546:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12569:3:38","subExpression":{"id":2310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"12571:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2312,"nodeType":"ExpressionStatement","src":"12569:3:38"},"nodeType":"ForStatement","src":"12541:585:38"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2390,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"13140:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2391,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"13148:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13140:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2393,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"13154:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13164:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13154:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13140:25:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2415,"nodeType":"IfStatement","src":"13136:304:38","trueBody":{"id":2414,"nodeType":"Block","src":"13167:273:38","statements":[{"id":2413,"nodeType":"UncheckedBlock","src":"13181:249:38","statements":[{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2397,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"13286:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13288:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"13286:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2401,"indexExpression":{"id":2399,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"13297:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13286:16:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2402,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"13306:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13286:26:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"13286:26:38"},{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2405,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"13391:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13393:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"13391:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2409,"indexExpression":{"id":2407,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"13402:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13391:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2410,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"13409:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13391:24:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"13391:24:38"}]}]}}]},"documentation":{"id":2266,"nodeType":"StructuredDocumentation","src":"11311:921:38","text":"@notice Unsafely transfers a batch of tokens to a recipient by a sender.\n @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event for each of `tokenIds`.\n @param sender The message sender.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"id":2417,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"12246:17:38","nodeType":"FunctionDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"s","nameLocation":"12279:1:38","nodeType":"VariableDeclaration","scope":2417,"src":"12264:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2268,"nodeType":"UserDefinedTypeName","pathNode":{"id":2267,"name":"Layout","nameLocations":["12264:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"12264:6:38"},"referencedDeclaration":1786,"src":"12264:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"sender","nameLocation":"12290:6:38","nodeType":"VariableDeclaration","scope":2417,"src":"12282:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2270,"name":"address","nodeType":"ElementaryTypeName","src":"12282:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2273,"mutability":"mutable","name":"from","nameLocation":"12306:4:38","nodeType":"VariableDeclaration","scope":2417,"src":"12298:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2272,"name":"address","nodeType":"ElementaryTypeName","src":"12298:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"to","nameLocation":"12320:2:38","nodeType":"VariableDeclaration","scope":2417,"src":"12312:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2274,"name":"address","nodeType":"ElementaryTypeName","src":"12312:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"tokenIds","nameLocation":"12343:8:38","nodeType":"VariableDeclaration","scope":2417,"src":"12324:27:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"12324:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ArrayTypeName","src":"12324:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12263:89:38"},"returnParameters":{"id":2280,"nodeType":"ParameterList","parameters":[],"src":"12362:0:38"},"scope":3470,"src":"12237:1209:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2479,"nodeType":"Block","src":"14068:390:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"14082:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14096:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14088:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"14088:7:38","typeDescriptions":{}}},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14088:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14082:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2437,"nodeType":"IfStatement","src":"14078:54:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2434,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"14107:23:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14107:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"RevertStatement","src":"14100:32:38"}},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2439,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"14159:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2440,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14161:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"14159:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2442,"indexExpression":{"id":2441,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"14168:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14159:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2438,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"14146:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14146:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2448,"nodeType":"IfStatement","src":"14142:72:38","trueBody":{"errorCall":{"arguments":[{"id":2445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"14206:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2444,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"14186:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14186:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2447,"nodeType":"RevertStatement","src":"14179:35:38"}},{"expression":{"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2449,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"14225:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2452,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14227:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"14225:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2453,"indexExpression":{"id":2451,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"14234:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14225:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2458,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"14261:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14253:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2456,"name":"uint160","nodeType":"ElementaryTypeName","src":"14253:7:38","typeDescriptions":{}}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14253:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14245:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2454,"name":"uint256","nodeType":"ElementaryTypeName","src":"14245:7:38","typeDescriptions":{}}},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14245:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14225:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ExpressionStatement","src":"14225:40:38"},{"id":2469,"nodeType":"UncheckedBlock","src":"14276:127:38","statements":[{"expression":{"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"14376:16:38","subExpression":{"baseExpression":{"expression":{"id":2463,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"14378:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14380:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"14378:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2466,"indexExpression":{"id":2465,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"14389:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14378:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2468,"nodeType":"ExpressionStatement","src":"14376:16:38"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14435:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14427:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2471,"name":"address","nodeType":"ElementaryTypeName","src":"14427:7:38","typeDescriptions":{}}},"id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14427:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2475,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"14439:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2476,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"14443:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2470,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"14418:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14418:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2478,"nodeType":"EmitStatement","src":"14413:38:38"}]},"documentation":{"id":2418,"nodeType":"StructuredDocumentation","src":"13452:541:38","text":"@notice Unsafely mints a token.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2480,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"14007:4:38","nodeType":"FunctionDefinition","parameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"s","nameLocation":"14027:1:38","nodeType":"VariableDeclaration","scope":2480,"src":"14012:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2420,"nodeType":"UserDefinedTypeName","pathNode":{"id":2419,"name":"Layout","nameLocations":["14012:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"14012:6:38"},"referencedDeclaration":1786,"src":"14012:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2423,"mutability":"mutable","name":"to","nameLocation":"14038:2:38","nodeType":"VariableDeclaration","scope":2480,"src":"14030:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2422,"name":"address","nodeType":"ElementaryTypeName","src":"14030:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2425,"mutability":"mutable","name":"tokenId","nameLocation":"14050:7:38","nodeType":"VariableDeclaration","scope":2480,"src":"14042:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"14042:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14011:47:38"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[],"src":"14068:0:38"},"scope":3470,"src":"13998:460:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2518,"nodeType":"Block","src":"15502:151:38","statements":[{"expression":{"arguments":[{"id":2498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"15519:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2499,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"15523:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2495,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"15512:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15514:4:38","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2480,"src":"15512:6:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15512:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2501,"nodeType":"ExpressionStatement","src":"15512:19:38"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2502,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"15545:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15548:10:38","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"15545:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15545:15:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2517,"nodeType":"IfStatement","src":"15541:106:38","trueBody":{"id":2516,"nodeType":"Block","src":"15562:85:38","statements":[{"expression":{"arguments":[{"id":2506,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"15598:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15614:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15606:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"15606:7:38","typeDescriptions":{}}},"id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15606:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2511,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"15618:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2512,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"15622:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2513,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"15631:4:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2505,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"15576:21:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15576:60:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2515,"nodeType":"ExpressionStatement","src":"15576:60:38"}]}}]},"documentation":{"id":2481,"nodeType":"StructuredDocumentation","src":"14464:924:38","text":"@notice Safely mints a token.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2519,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"15402:8:38","nodeType":"FunctionDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"s","nameLocation":"15426:1:38","nodeType":"VariableDeclaration","scope":2519,"src":"15411:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2483,"nodeType":"UserDefinedTypeName","pathNode":{"id":2482,"name":"Layout","nameLocations":["15411:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"15411:6:38"},"referencedDeclaration":1786,"src":"15411:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"sender","nameLocation":"15437:6:38","nodeType":"VariableDeclaration","scope":2519,"src":"15429:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2485,"name":"address","nodeType":"ElementaryTypeName","src":"15429:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2488,"mutability":"mutable","name":"to","nameLocation":"15453:2:38","nodeType":"VariableDeclaration","scope":2519,"src":"15445:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"15445:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2490,"mutability":"mutable","name":"tokenId","nameLocation":"15465:7:38","nodeType":"VariableDeclaration","scope":2519,"src":"15457:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"15457:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"data","nameLocation":"15487:4:38","nodeType":"VariableDeclaration","scope":2519,"src":"15474:17:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2491,"name":"bytes","nodeType":"ElementaryTypeName","src":"15474:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15410:82:38"},"returnParameters":{"id":2494,"nodeType":"ParameterList","parameters":[],"src":"15502:0:38"},"scope":3470,"src":"15393:260:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2606,"nodeType":"Block","src":"16352:472:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"16366:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16380:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16372:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"16372:7:38","typeDescriptions":{}}},"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16372:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16366:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2540,"nodeType":"IfStatement","src":"16362:54:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2537,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"16391:23:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16391:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2539,"nodeType":"RevertStatement","src":"16384:32:38"}},{"assignments":[2542],"declarations":[{"constant":false,"id":2542,"mutability":"mutable","name":"length","nameLocation":"16435:6:38","nodeType":"VariableDeclaration","scope":2606,"src":"16427:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2541,"name":"uint256","nodeType":"ElementaryTypeName","src":"16427:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2545,"initialValue":{"expression":{"id":2543,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"16444:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16453:6:38","memberName":"length","nodeType":"MemberAccess","src":"16444:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16427:32:38"},{"body":{"id":2595,"nodeType":"Block","src":"16502:247:38","statements":[{"assignments":[2556],"declarations":[{"constant":false,"id":2556,"mutability":"mutable","name":"tokenId","nameLocation":"16524:7:38","nodeType":"VariableDeclaration","scope":2595,"src":"16516:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"16516:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2560,"initialValue":{"baseExpression":{"id":2557,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"16534:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2559,"indexExpression":{"id":2558,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"16543:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16534:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16516:29:38"},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2562,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"16576:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16578:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"16576:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2565,"indexExpression":{"id":2564,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"16585:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16576:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2561,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"16563:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16563:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2571,"nodeType":"IfStatement","src":"16559:72:38","trueBody":{"errorCall":{"arguments":[{"id":2568,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"16623:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2567,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"16603:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16603:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2570,"nodeType":"RevertStatement","src":"16596:35:38"}},{"expression":{"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2572,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"16646:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16648:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"16646:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2576,"indexExpression":{"id":2574,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"16655:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16646:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2581,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"16682:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16674:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2579,"name":"uint160","nodeType":"ElementaryTypeName","src":"16674:7:38","typeDescriptions":{}}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16674:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16666:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"16666:7:38","typeDescriptions":{}}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16666:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16646:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2585,"nodeType":"ExpressionStatement","src":"16646:40:38"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16722:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16714:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2587,"name":"address","nodeType":"ElementaryTypeName","src":"16714:7:38","typeDescriptions":{}}},"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16714:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2591,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"16726:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"16730:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2586,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"16705:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16705:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2594,"nodeType":"EmitStatement","src":"16700:38:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2549,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"16485:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2550,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"16489:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16485:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2596,"initializationExpression":{"assignments":[2547],"declarations":[{"constant":false,"id":2547,"mutability":"mutable","name":"i","nameLocation":"16482:1:38","nodeType":"VariableDeclaration","scope":2596,"src":"16474:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"16474:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2548,"nodeType":"VariableDeclarationStatement","src":"16474:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16497:3:38","subExpression":{"id":2552,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"16499:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ExpressionStatement","src":"16497:3:38"},"nodeType":"ForStatement","src":"16469:280:38"},{"id":2605,"nodeType":"UncheckedBlock","src":"16759:59:38","statements":[{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2597,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"16783:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16785:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"16783:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2601,"indexExpression":{"id":2599,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"16794:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16783:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2602,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"16801:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16783:24:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"16783:24:38"}]}]},"documentation":{"id":2520,"nodeType":"StructuredDocumentation","src":"15659:603:38","text":"@notice Unsafely mints a batch of tokens.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":2607,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"16276:9:38","nodeType":"FunctionDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"s","nameLocation":"16301:1:38","nodeType":"VariableDeclaration","scope":2607,"src":"16286:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2522,"nodeType":"UserDefinedTypeName","pathNode":{"id":2521,"name":"Layout","nameLocations":["16286:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"16286:6:38"},"referencedDeclaration":1786,"src":"16286:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"to","nameLocation":"16312:2:38","nodeType":"VariableDeclaration","scope":2607,"src":"16304:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"16304:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2528,"mutability":"mutable","name":"tokenIds","nameLocation":"16333:8:38","nodeType":"VariableDeclaration","scope":2607,"src":"16316:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"16316:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2527,"nodeType":"ArrayTypeName","src":"16316:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16285:57:38"},"returnParameters":{"id":2530,"nodeType":"ParameterList","parameters":[],"src":"16352:0:38"},"scope":3470,"src":"16267:557:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2655,"nodeType":"Block","src":"17700:226:38","statements":[{"assignments":[2621],"declarations":[{"constant":false,"id":2621,"mutability":"mutable","name":"length","nameLocation":"17718:6:38","nodeType":"VariableDeclaration","scope":2655,"src":"17710:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2620,"name":"uint256","nodeType":"ElementaryTypeName","src":"17710:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2624,"initialValue":{"expression":{"id":2622,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"17727:10:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17738:6:38","memberName":"length","nodeType":"MemberAccess","src":"17727:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17710:34:38"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2625,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2621,"src":"17758:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2626,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"17768:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17777:6:38","memberName":"length","nodeType":"MemberAccess","src":"17768:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17758:25:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2632,"nodeType":"IfStatement","src":"17754:64:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2629,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"17792:24:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17792:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2631,"nodeType":"RevertStatement","src":"17785:33:38"}},{"body":{"id":2653,"nodeType":"Block","src":"17861:59:38","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2645,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"17882:10:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2647,"indexExpression":{"id":2646,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"17893:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17882:13:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2648,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"17897:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2650,"indexExpression":{"id":2649,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"17906:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17897:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2642,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"17875:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17877:4:38","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2480,"src":"17875:6:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17875:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2652,"nodeType":"ExpressionStatement","src":"17875:34:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2636,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"17844:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2637,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2621,"src":"17848:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17844:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2654,"initializationExpression":{"assignments":[2634],"declarations":[{"constant":false,"id":2634,"mutability":"mutable","name":"i","nameLocation":"17841:1:38","nodeType":"VariableDeclaration","scope":2654,"src":"17833:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2633,"name":"uint256","nodeType":"ElementaryTypeName","src":"17833:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2635,"nodeType":"VariableDeclarationStatement","src":"17833:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17856:3:38","subExpression":{"id":2639,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"17858:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2641,"nodeType":"ExpressionStatement","src":"17856:3:38"},"nodeType":"ForStatement","src":"17828:92:38"}]},"documentation":{"id":2608,"nodeType":"StructuredDocumentation","src":"16830:765:38","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":2656,"implemented":true,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"17609:7:38","nodeType":"FunctionDefinition","parameters":{"id":2618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"s","nameLocation":"17632:1:38","nodeType":"VariableDeclaration","scope":2656,"src":"17617:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2610,"nodeType":"UserDefinedTypeName","pathNode":{"id":2609,"name":"Layout","nameLocations":["17617:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"17617:6:38"},"referencedDeclaration":1786,"src":"17617:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2614,"mutability":"mutable","name":"recipients","nameLocation":"17652:10:38","nodeType":"VariableDeclaration","scope":2656,"src":"17635:27:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2612,"name":"address","nodeType":"ElementaryTypeName","src":"17635:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2613,"nodeType":"ArrayTypeName","src":"17635:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2617,"mutability":"mutable","name":"tokenIds","nameLocation":"17681:8:38","nodeType":"VariableDeclaration","scope":2656,"src":"17664:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2615,"name":"uint256","nodeType":"ElementaryTypeName","src":"17664:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2616,"nodeType":"ArrayTypeName","src":"17664:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17616:74:38"},"returnParameters":{"id":2619,"nodeType":"ParameterList","parameters":[],"src":"17700:0:38"},"scope":3470,"src":"17600:326:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2730,"nodeType":"Block","src":"18642:491:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"18656:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18670:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18662:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2668,"name":"address","nodeType":"ElementaryTypeName","src":"18662:7:38","typeDescriptions":{}}},"id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18662:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18656:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2676,"nodeType":"IfStatement","src":"18652:54:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2673,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"18681:23:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18681:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2675,"nodeType":"RevertStatement","src":"18674:32:38"}},{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"owner","nameLocation":"18725:5:38","nodeType":"VariableDeclaration","scope":2730,"src":"18717:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"18717:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2683,"initialValue":{"baseExpression":{"expression":{"id":2679,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"18733:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18735:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"18733:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2682,"indexExpression":{"id":2681,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"18742:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18733:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18717:33:38"},{"condition":{"arguments":[{"id":2685,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"18777:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2684,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"18764:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18764:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2691,"nodeType":"IfStatement","src":"18760:60:38","trueBody":{"errorCall":{"arguments":[{"id":2688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"18812:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2687,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"18792:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18792:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"RevertStatement","src":"18785:35:38"}},{"condition":{"arguments":[{"id":2693,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"18849:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2692,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"18834:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18834:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2699,"nodeType":"IfStatement","src":"18830:59:38","trueBody":{"errorCall":{"arguments":[{"id":2696,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"18881:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2695,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"18864:16:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18864:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2698,"nodeType":"RevertStatement","src":"18857:32:38"}},{"expression":{"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2700,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"18900:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18902:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"18900:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2704,"indexExpression":{"id":2702,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"18909:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18900:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2709,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"18936:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18928:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2707,"name":"uint160","nodeType":"ElementaryTypeName","src":"18928:7:38","typeDescriptions":{}}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18928:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18920:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"18920:7:38","typeDescriptions":{}}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18920:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18900:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2713,"nodeType":"ExpressionStatement","src":"18900:40:38"},{"id":2720,"nodeType":"UncheckedBlock","src":"18951:127:38","statements":[{"expression":{"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19051:16:38","subExpression":{"baseExpression":{"expression":{"id":2714,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"19053:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19055:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"19053:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2717,"indexExpression":{"id":2716,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"19064:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19053:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2719,"nodeType":"ExpressionStatement","src":"19051:16:38"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19110:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19102:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2722,"name":"address","nodeType":"ElementaryTypeName","src":"19102:7:38","typeDescriptions":{}}},"id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19102:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2726,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"19114:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2727,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"19118:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2721,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"19093:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19093:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2729,"nodeType":"EmitStatement","src":"19088:38:38"}]},"documentation":{"id":2657,"nodeType":"StructuredDocumentation","src":"17932:631:38","text":"@notice Unsafely mints a token once.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2731,"implemented":true,"kind":"function","modifiers":[],"name":"mintOnce","nameLocation":"18577:8:38","nodeType":"FunctionDefinition","parameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"s","nameLocation":"18601:1:38","nodeType":"VariableDeclaration","scope":2731,"src":"18586:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2659,"nodeType":"UserDefinedTypeName","pathNode":{"id":2658,"name":"Layout","nameLocations":["18586:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"18586:6:38"},"referencedDeclaration":1786,"src":"18586:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"to","nameLocation":"18612:2:38","nodeType":"VariableDeclaration","scope":2731,"src":"18604:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2661,"name":"address","nodeType":"ElementaryTypeName","src":"18604:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"tokenId","nameLocation":"18624:7:38","nodeType":"VariableDeclaration","scope":2731,"src":"18616:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"18616:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18585:47:38"},"returnParameters":{"id":2666,"nodeType":"ParameterList","parameters":[],"src":"18642:0:38"},"scope":3470,"src":"18568:565:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2769,"nodeType":"Block","src":"20142:155:38","statements":[{"expression":{"arguments":[{"id":2749,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"20163:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2750,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"20167:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2746,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"20152:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20154:8:38","memberName":"mintOnce","nodeType":"MemberAccess","referencedDeclaration":2731,"src":"20152:10:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20152:23:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2752,"nodeType":"ExpressionStatement","src":"20152:23:38"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2753,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"20189:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20192:10:38","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"20189:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20189:15:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2768,"nodeType":"IfStatement","src":"20185:106:38","trueBody":{"id":2767,"nodeType":"Block","src":"20206:85:38","statements":[{"expression":{"arguments":[{"id":2757,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"20242:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20258:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20250:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2758,"name":"address","nodeType":"ElementaryTypeName","src":"20250:7:38","typeDescriptions":{}}},"id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20250:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2762,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"20262:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2763,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"20266:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2764,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"20275:4:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2756,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"20220:21:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20220:60:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2766,"nodeType":"ExpressionStatement","src":"20220:60:38"}]}}]},"documentation":{"id":2732,"nodeType":"StructuredDocumentation","src":"19139:885:38","text":"@notice Safely mints a token once.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2770,"implemented":true,"kind":"function","modifiers":[],"name":"safeMintOnce","nameLocation":"20038:12:38","nodeType":"FunctionDefinition","parameters":{"id":2744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2735,"mutability":"mutable","name":"s","nameLocation":"20066:1:38","nodeType":"VariableDeclaration","scope":2770,"src":"20051:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2734,"nodeType":"UserDefinedTypeName","pathNode":{"id":2733,"name":"Layout","nameLocations":["20051:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"20051:6:38"},"referencedDeclaration":1786,"src":"20051:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2737,"mutability":"mutable","name":"sender","nameLocation":"20077:6:38","nodeType":"VariableDeclaration","scope":2770,"src":"20069:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2736,"name":"address","nodeType":"ElementaryTypeName","src":"20069:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2739,"mutability":"mutable","name":"to","nameLocation":"20093:2:38","nodeType":"VariableDeclaration","scope":2770,"src":"20085:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2738,"name":"address","nodeType":"ElementaryTypeName","src":"20085:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2741,"mutability":"mutable","name":"tokenId","nameLocation":"20105:7:38","nodeType":"VariableDeclaration","scope":2770,"src":"20097:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2740,"name":"uint256","nodeType":"ElementaryTypeName","src":"20097:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2743,"mutability":"mutable","name":"data","nameLocation":"20127:4:38","nodeType":"VariableDeclaration","scope":2770,"src":"20114:17:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2742,"name":"bytes","nodeType":"ElementaryTypeName","src":"20114:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20050:82:38"},"returnParameters":{"id":2745,"nodeType":"ParameterList","parameters":[],"src":"20142:0:38"},"scope":3470,"src":"20029:268:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2869,"nodeType":"Block","src":"21098:581:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2782,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"21112:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21126:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21118:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2783,"name":"address","nodeType":"ElementaryTypeName","src":"21118:7:38","typeDescriptions":{}}},"id":2786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21118:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21112:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2791,"nodeType":"IfStatement","src":"21108:54:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2788,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"21137:23:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21137:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2790,"nodeType":"RevertStatement","src":"21130:32:38"}},{"assignments":[2793],"declarations":[{"constant":false,"id":2793,"mutability":"mutable","name":"length","nameLocation":"21181:6:38","nodeType":"VariableDeclaration","scope":2869,"src":"21173:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"21173:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2796,"initialValue":{"expression":{"id":2794,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"21190:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21199:6:38","memberName":"length","nodeType":"MemberAccess","src":"21190:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21173:32:38"},{"body":{"id":2858,"nodeType":"Block","src":"21248:356:38","statements":[{"assignments":[2807],"declarations":[{"constant":false,"id":2807,"mutability":"mutable","name":"tokenId","nameLocation":"21270:7:38","nodeType":"VariableDeclaration","scope":2858,"src":"21262:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"21262:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2811,"initialValue":{"baseExpression":{"id":2808,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"21280:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2810,"indexExpression":{"id":2809,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"21289:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21280:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21262:29:38"},{"assignments":[2813],"declarations":[{"constant":false,"id":2813,"mutability":"mutable","name":"owner","nameLocation":"21313:5:38","nodeType":"VariableDeclaration","scope":2858,"src":"21305:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2812,"name":"uint256","nodeType":"ElementaryTypeName","src":"21305:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2818,"initialValue":{"baseExpression":{"expression":{"id":2814,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"21321:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21323:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"21321:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2817,"indexExpression":{"id":2816,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"21330:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21321:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21305:33:38"},{"condition":{"arguments":[{"id":2820,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"21369:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2819,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"21356:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21356:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2826,"nodeType":"IfStatement","src":"21352:60:38","trueBody":{"errorCall":{"arguments":[{"id":2823,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"21404:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2822,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"21384:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21384:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2825,"nodeType":"RevertStatement","src":"21377:35:38"}},{"condition":{"arguments":[{"id":2828,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"21445:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2827,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"21430:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21430:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2834,"nodeType":"IfStatement","src":"21426:59:38","trueBody":{"errorCall":{"arguments":[{"id":2831,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"21477:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2830,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"21460:16:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21460:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2833,"nodeType":"RevertStatement","src":"21453:32:38"}},{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2835,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"21500:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21502:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"21500:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2839,"indexExpression":{"id":2837,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"21509:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21500:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2844,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"21536:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21528:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2842,"name":"uint160","nodeType":"ElementaryTypeName","src":"21528:7:38","typeDescriptions":{}}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21528:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21520:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"21520:7:38","typeDescriptions":{}}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21520:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21500:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ExpressionStatement","src":"21500:40:38"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21577:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21569:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2850,"name":"address","nodeType":"ElementaryTypeName","src":"21569:7:38","typeDescriptions":{}}},"id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21569:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2854,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"21581:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2855,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"21585:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2849,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"21560:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21560:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2857,"nodeType":"EmitStatement","src":"21555:38:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"21231:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2801,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"21235:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21231:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2859,"initializationExpression":{"assignments":[2798],"declarations":[{"constant":false,"id":2798,"mutability":"mutable","name":"i","nameLocation":"21228:1:38","nodeType":"VariableDeclaration","scope":2859,"src":"21220:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"21220:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2799,"nodeType":"VariableDeclarationStatement","src":"21220:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21243:3:38","subExpression":{"id":2803,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"21245:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2805,"nodeType":"ExpressionStatement","src":"21243:3:38"},"nodeType":"ForStatement","src":"21215:389:38"},{"id":2868,"nodeType":"UncheckedBlock","src":"21614:59:38","statements":[{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2860,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"21638:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2863,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21640:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"21638:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2864,"indexExpression":{"id":2862,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"21649:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21638:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2865,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"21656:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21638:24:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2867,"nodeType":"ExpressionStatement","src":"21638:24:38"}]}]},"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"20303:701:38","text":"@notice Unsafely mints a batch of tokens once.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":2870,"implemented":true,"kind":"function","modifiers":[],"name":"batchMintOnce","nameLocation":"21018:13:38","nodeType":"FunctionDefinition","parameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2774,"mutability":"mutable","name":"s","nameLocation":"21047:1:38","nodeType":"VariableDeclaration","scope":2870,"src":"21032:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2773,"nodeType":"UserDefinedTypeName","pathNode":{"id":2772,"name":"Layout","nameLocations":["21032:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"21032:6:38"},"referencedDeclaration":1786,"src":"21032:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2776,"mutability":"mutable","name":"to","nameLocation":"21058:2:38","nodeType":"VariableDeclaration","scope":2870,"src":"21050:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2775,"name":"address","nodeType":"ElementaryTypeName","src":"21050:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"tokenIds","nameLocation":"21079:8:38","nodeType":"VariableDeclaration","scope":2870,"src":"21062:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"21062:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2778,"nodeType":"ArrayTypeName","src":"21062:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"21031:57:38"},"returnParameters":{"id":2781,"nodeType":"ParameterList","parameters":[],"src":"21098:0:38"},"scope":3470,"src":"21009:670:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2982,"nodeType":"Block","src":"22657:704:38","statements":[{"assignments":[2884],"declarations":[{"constant":false,"id":2884,"mutability":"mutable","name":"length","nameLocation":"22675:6:38","nodeType":"VariableDeclaration","scope":2982,"src":"22667:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"22667:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2887,"initialValue":{"expression":{"id":2885,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"22684:10:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22695:6:38","memberName":"length","nodeType":"MemberAccess","src":"22684:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22667:34:38"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2888,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"22715:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2889,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"22725:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22734:6:38","memberName":"length","nodeType":"MemberAccess","src":"22725:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22715:25:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2895,"nodeType":"IfStatement","src":"22711:64:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2892,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"22749:24:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22749:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2894,"nodeType":"RevertStatement","src":"22742:33:38"}},{"body":{"id":2980,"nodeType":"Block","src":"22818:537:38","statements":[{"assignments":[2906],"declarations":[{"constant":false,"id":2906,"mutability":"mutable","name":"to","nameLocation":"22840:2:38","nodeType":"VariableDeclaration","scope":2980,"src":"22832:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2905,"name":"address","nodeType":"ElementaryTypeName","src":"22832:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2910,"initialValue":{"baseExpression":{"id":2907,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"22845:10:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2909,"indexExpression":{"id":2908,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"22856:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22845:13:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"22832:26:38"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2911,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"22876:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22890:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22882:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2912,"name":"address","nodeType":"ElementaryTypeName","src":"22882:7:38","typeDescriptions":{}}},"id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22882:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22876:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2920,"nodeType":"IfStatement","src":"22872:54:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2917,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"22901:23:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22901:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2919,"nodeType":"RevertStatement","src":"22894:32:38"}},{"assignments":[2922],"declarations":[{"constant":false,"id":2922,"mutability":"mutable","name":"tokenId","nameLocation":"22949:7:38","nodeType":"VariableDeclaration","scope":2980,"src":"22941:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2921,"name":"uint256","nodeType":"ElementaryTypeName","src":"22941:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2926,"initialValue":{"baseExpression":{"id":2923,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"22959:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2925,"indexExpression":{"id":2924,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"22968:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22959:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22941:29:38"},{"assignments":[2928],"declarations":[{"constant":false,"id":2928,"mutability":"mutable","name":"owner","nameLocation":"22992:5:38","nodeType":"VariableDeclaration","scope":2980,"src":"22984:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"22984:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2933,"initialValue":{"baseExpression":{"expression":{"id":2929,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"23000:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23002:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"23000:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2932,"indexExpression":{"id":2931,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"23009:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23000:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22984:33:38"},{"condition":{"arguments":[{"id":2935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"23048:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2934,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"23035:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23035:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2941,"nodeType":"IfStatement","src":"23031:60:38","trueBody":{"errorCall":{"arguments":[{"id":2938,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"23083:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2937,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"23063:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23063:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2940,"nodeType":"RevertStatement","src":"23056:35:38"}},{"condition":{"arguments":[{"id":2943,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"23124:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2942,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"23109:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23109:21:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2949,"nodeType":"IfStatement","src":"23105:59:38","trueBody":{"errorCall":{"arguments":[{"id":2946,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"23156:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2945,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"23139:16:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23139:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2948,"nodeType":"RevertStatement","src":"23132:32:38"}},{"expression":{"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2950,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"23179:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23181:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"23179:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2954,"indexExpression":{"id":2952,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"23188:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23179:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2959,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"23215:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23207:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2957,"name":"uint160","nodeType":"ElementaryTypeName","src":"23207:7:38","typeDescriptions":{}}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23207:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23199:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2955,"name":"uint256","nodeType":"ElementaryTypeName","src":"23199:7:38","typeDescriptions":{}}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23199:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23179:40:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2963,"nodeType":"ExpressionStatement","src":"23179:40:38"},{"id":2970,"nodeType":"UncheckedBlock","src":"23233:59:38","statements":[{"expression":{"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"23261:16:38","subExpression":{"baseExpression":{"expression":{"id":2964,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"23263:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2965,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23265:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"23263:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2967,"indexExpression":{"id":2966,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"23274:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23263:14:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2969,"nodeType":"ExpressionStatement","src":"23261:16:38"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23328:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23320:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2972,"name":"address","nodeType":"ElementaryTypeName","src":"23320:7:38","typeDescriptions":{}}},"id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23320:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2976,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"23332:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2977,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"23336:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2971,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"23311:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23311:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2979,"nodeType":"EmitStatement","src":"23306:38:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2899,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"22801:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2900,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"22805:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22801:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2981,"initializationExpression":{"assignments":[2897],"declarations":[{"constant":false,"id":2897,"mutability":"mutable","name":"i","nameLocation":"22798:1:38","nodeType":"VariableDeclaration","scope":2981,"src":"22790:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"22790:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2898,"nodeType":"VariableDeclarationStatement","src":"22790:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"22813:3:38","subExpression":{"id":2902,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"22815:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2904,"nodeType":"ExpressionStatement","src":"22813:3:38"},"nodeType":"ForStatement","src":"22785:570:38"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"21685:863:38","text":"@notice Unsafely mints tokens to multiple recipients once.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":2983,"implemented":true,"kind":"function","modifiers":[],"name":"deliverOnce","nameLocation":"22562:11:38","nodeType":"FunctionDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"mutability":"mutable","name":"s","nameLocation":"22589:1:38","nodeType":"VariableDeclaration","scope":2983,"src":"22574:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2873,"nodeType":"UserDefinedTypeName","pathNode":{"id":2872,"name":"Layout","nameLocations":["22574:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"22574:6:38"},"referencedDeclaration":1786,"src":"22574:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"recipients","nameLocation":"22609:10:38","nodeType":"VariableDeclaration","scope":2983,"src":"22592:27:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2875,"name":"address","nodeType":"ElementaryTypeName","src":"22592:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2876,"nodeType":"ArrayTypeName","src":"22592:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2880,"mutability":"mutable","name":"tokenIds","nameLocation":"22638:8:38","nodeType":"VariableDeclaration","scope":2983,"src":"22621:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"22621:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2879,"nodeType":"ArrayTypeName","src":"22621:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22573:74:38"},"returnParameters":{"id":2882,"nodeType":"ParameterList","parameters":[],"src":"22657:0:38"},"scope":3470,"src":"22553:808:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3073,"nodeType":"Block","src":"24029:648:38","statements":[{"assignments":[2997],"declarations":[{"constant":false,"id":2997,"mutability":"mutable","name":"owner","nameLocation":"24047:5:38","nodeType":"VariableDeclaration","scope":3073,"src":"24039:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2996,"name":"uint256","nodeType":"ElementaryTypeName","src":"24039:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3002,"initialValue":{"baseExpression":{"expression":{"id":2998,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"24055:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2999,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24057:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"24055:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3001,"indexExpression":{"id":3000,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24064:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24055:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24039:33:38"},{"condition":{"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24086:20:38","subExpression":{"arguments":[{"id":3004,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"24100:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3003,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"24087:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24087:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3011,"nodeType":"IfStatement","src":"24082:64:38","trueBody":{"errorCall":{"arguments":[{"id":3008,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24138:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3007,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"24115:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24115:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3010,"nodeType":"RevertStatement","src":"24108:38:38"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3013,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"24172:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3012,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"24160:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24160:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3015,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24182:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24160:26:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3022,"nodeType":"IfStatement","src":"24156:73:38","trueBody":{"errorCall":{"arguments":[{"id":3018,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24215:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3019,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24221:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3017,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"24195:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24195:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3021,"nodeType":"RevertStatement","src":"24188:41:38"}},{"condition":{"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24244:31:38","subExpression":{"arguments":[{"id":3024,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"24259:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":3025,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24262:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3026,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"24268:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3023,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"24245:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24245:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3048,"nodeType":"IfStatement","src":"24240:185:38","trueBody":{"id":3047,"nodeType":"Block","src":"24277:148:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24295:25:38","subExpression":{"arguments":[{"id":3030,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"24314:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3029,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"24296:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24296:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3033,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"24324:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":3034,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"24334:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24336:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"24334:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3037,"indexExpression":{"id":3036,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24346:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24334:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24324:30:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24295:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3046,"nodeType":"IfStatement","src":"24291:123:38","trueBody":{"errorCall":{"arguments":[{"id":3041,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"24392:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3042,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24400:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3043,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24406:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3040,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"24363:28:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24363:51:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3045,"nodeType":"RevertStatement","src":"24356:58:38"}}]}},{"expression":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3049,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"24435:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24437:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"24435:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3053,"indexExpression":{"id":3051,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24444:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24435:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3054,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"24455:23:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24435:43:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3056,"nodeType":"ExpressionStatement","src":"24435:43:38"},{"id":3063,"nodeType":"UncheckedBlock","src":"24489:132:38","statements":[{"expression":{"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"24592:18:38","subExpression":{"baseExpression":{"expression":{"id":3057,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"24594:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3058,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24596:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"24594:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3060,"indexExpression":{"id":3059,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24605:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24594:16:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ExpressionStatement","src":"24592:18:38"}]},{"eventCall":{"arguments":[{"id":3065,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"24644:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24658:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24650:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3066,"name":"address","nodeType":"ElementaryTypeName","src":"24650:7:38","typeDescriptions":{}}},"id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24650:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3070,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"24662:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3064,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"24635:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24635:35:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3072,"nodeType":"EmitStatement","src":"24630:40:38"}]},"documentation":{"id":2984,"nodeType":"StructuredDocumentation","src":"23367:565:38","text":"@notice Burns a token by a sender.\n @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @param sender The message sender.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"23946:8:38","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"s","nameLocation":"23970:1:38","nodeType":"VariableDeclaration","scope":3074,"src":"23955:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2986,"nodeType":"UserDefinedTypeName","pathNode":{"id":2985,"name":"Layout","nameLocations":["23955:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"23955:6:38"},"referencedDeclaration":1786,"src":"23955:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"sender","nameLocation":"23981:6:38","nodeType":"VariableDeclaration","scope":3074,"src":"23973:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2988,"name":"address","nodeType":"ElementaryTypeName","src":"23973:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2991,"mutability":"mutable","name":"from","nameLocation":"23997:4:38","nodeType":"VariableDeclaration","scope":3074,"src":"23989:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2990,"name":"address","nodeType":"ElementaryTypeName","src":"23989:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2993,"mutability":"mutable","name":"tokenId","nameLocation":"24011:7:38","nodeType":"VariableDeclaration","scope":3074,"src":"24003:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2992,"name":"uint256","nodeType":"ElementaryTypeName","src":"24003:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23954:65:38"},"returnParameters":{"id":2995,"nodeType":"ParameterList","parameters":[],"src":"24029:0:38"},"scope":3470,"src":"23937:740:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3198,"nodeType":"Block","src":"25423:833:38","statements":[{"assignments":[3089],"declarations":[{"constant":false,"id":3089,"mutability":"mutable","name":"operatable","nameLocation":"25438:10:38","nodeType":"VariableDeclaration","scope":3198,"src":"25433:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3088,"name":"bool","nodeType":"ElementaryTypeName","src":"25433:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3095,"initialValue":{"arguments":[{"id":3091,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"25465:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":3092,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"25468:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3093,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"25474:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3090,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3412,"src":"25451:13:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25451:30:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"25433:48:38"},{"assignments":[3097],"declarations":[{"constant":false,"id":3097,"mutability":"mutable","name":"length","nameLocation":"25500:6:38","nodeType":"VariableDeclaration","scope":3198,"src":"25492:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3096,"name":"uint256","nodeType":"ElementaryTypeName","src":"25492:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3100,"initialValue":{"expression":{"id":3098,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"25509:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25518:6:38","memberName":"length","nodeType":"MemberAccess","src":"25509:15:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25492:32:38"},{"body":{"id":3182,"nodeType":"Block","src":"25567:563:38","statements":[{"assignments":[3111],"declarations":[{"constant":false,"id":3111,"mutability":"mutable","name":"tokenId","nameLocation":"25589:7:38","nodeType":"VariableDeclaration","scope":3182,"src":"25581:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"25581:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3115,"initialValue":{"baseExpression":{"id":3112,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"25599:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3114,"indexExpression":{"id":3113,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"25608:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25599:11:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25581:29:38"},{"assignments":[3117],"declarations":[{"constant":false,"id":3117,"mutability":"mutable","name":"owner","nameLocation":"25632:5:38","nodeType":"VariableDeclaration","scope":3182,"src":"25624:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3116,"name":"uint256","nodeType":"ElementaryTypeName","src":"25624:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3122,"initialValue":{"baseExpression":{"expression":{"id":3118,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"25640:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25642:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"25640:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3121,"indexExpression":{"id":3120,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"25649:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25640:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25624:33:38"},{"condition":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25675:20:38","subExpression":{"arguments":[{"id":3124,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"25689:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3123,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"25676:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25676:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3131,"nodeType":"IfStatement","src":"25671:64:38","trueBody":{"errorCall":{"arguments":[{"id":3128,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"25727:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3127,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"25704:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25704:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3130,"nodeType":"RevertStatement","src":"25697:38:38"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3133,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"25765:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3132,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"25753:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25753:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3135,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"25775:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25753:26:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3142,"nodeType":"IfStatement","src":"25749:73:38","trueBody":{"errorCall":{"arguments":[{"id":3138,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"25808:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3139,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"25814:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3137,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"25788:19:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25788:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3141,"nodeType":"RevertStatement","src":"25781:41:38"}},{"condition":{"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25840:11:38","subExpression":{"id":3143,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"25841:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3164,"nodeType":"IfStatement","src":"25836:173:38","trueBody":{"id":3163,"nodeType":"Block","src":"25853:156:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25875:25:38","subExpression":{"arguments":[{"id":3146,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"25894:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3145,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"25876:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25876:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3149,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"25904:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":3150,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"25914:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25916:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"25914:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3153,"indexExpression":{"id":3152,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"25926:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25914:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25904:30:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25875:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3162,"nodeType":"IfStatement","src":"25871:123:38","trueBody":{"errorCall":{"arguments":[{"id":3157,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"25972:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3158,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"25980:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3159,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"25986:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3156,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"25943:28:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25943:51:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3161,"nodeType":"RevertStatement","src":"25936:58:38"}}]}},{"expression":{"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3165,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"26022:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26024:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"26022:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3169,"indexExpression":{"id":3167,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"26031:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26022:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3170,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"26042:23:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26022:43:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3172,"nodeType":"ExpressionStatement","src":"26022:43:38"},{"eventCall":{"arguments":[{"id":3174,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"26093:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26107:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26099:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3175,"name":"address","nodeType":"ElementaryTypeName","src":"26099:7:38","typeDescriptions":{}}},"id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26099:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3179,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"26111:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3173,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"26084:8:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26084:35:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3181,"nodeType":"EmitStatement","src":"26079:40:38"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3104,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"25550:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3105,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"25554:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25550:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3183,"initializationExpression":{"assignments":[3102],"declarations":[{"constant":false,"id":3102,"mutability":"mutable","name":"i","nameLocation":"25547:1:38","nodeType":"VariableDeclaration","scope":3183,"src":"25539:9:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"25539:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3103,"nodeType":"VariableDeclarationStatement","src":"25539:9:38"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"25562:3:38","subExpression":{"id":3107,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"25564:1:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3109,"nodeType":"ExpressionStatement","src":"25562:3:38"},"nodeType":"ForStatement","src":"25534:596:38"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3184,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"26144:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26154:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26144:11:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3197,"nodeType":"IfStatement","src":"26140:110:38","trueBody":{"id":3196,"nodeType":"Block","src":"26157:93:38","statements":[{"id":3195,"nodeType":"UncheckedBlock","src":"26171:69:38","statements":[{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3187,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"26199:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3190,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26201:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"26199:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3191,"indexExpression":{"id":3189,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"26210:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26199:16:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3192,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"26219:6:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26199:26:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3194,"nodeType":"ExpressionStatement","src":"26199:26:38"}]}]}}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"24683:626:38","text":"@notice Burns a batch of tokens by a sender.\n @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param sender The message sender.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"id":3199,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"25323:13:38","nodeType":"FunctionDefinition","parameters":{"id":3086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3078,"mutability":"mutable","name":"s","nameLocation":"25352:1:38","nodeType":"VariableDeclaration","scope":3199,"src":"25337:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3077,"nodeType":"UserDefinedTypeName","pathNode":{"id":3076,"name":"Layout","nameLocations":["25337:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"25337:6:38"},"referencedDeclaration":1786,"src":"25337:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3080,"mutability":"mutable","name":"sender","nameLocation":"25363:6:38","nodeType":"VariableDeclaration","scope":3199,"src":"25355:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3079,"name":"address","nodeType":"ElementaryTypeName","src":"25355:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3082,"mutability":"mutable","name":"from","nameLocation":"25379:4:38","nodeType":"VariableDeclaration","scope":3199,"src":"25371:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3081,"name":"address","nodeType":"ElementaryTypeName","src":"25371:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"tokenIds","nameLocation":"25404:8:38","nodeType":"VariableDeclaration","scope":3199,"src":"25385:27:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"25385:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"nodeType":"ArrayTypeName","src":"25385:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"25336:77:38"},"returnParameters":{"id":3087,"nodeType":"ParameterList","parameters":[],"src":"25423:0:38"},"scope":3470,"src":"25314:942:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3225,"nodeType":"Block","src":"26675:111:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3210,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"26689:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26706:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26698:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3211,"name":"address","nodeType":"ElementaryTypeName","src":"26698:7:38","typeDescriptions":{}}},"id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26698:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"26689:19:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3219,"nodeType":"IfStatement","src":"26685:60:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3216,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"26717:26:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26717:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3218,"nodeType":"RevertStatement","src":"26710:35:38"}},{"expression":{"baseExpression":{"expression":{"id":3220,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"26762:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26764:8:38","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"26762:10:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3223,"indexExpression":{"id":3222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"26773:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26762:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3209,"id":3224,"nodeType":"Return","src":"26755:24:38"}]},"documentation":{"id":3200,"nodeType":"StructuredDocumentation","src":"26262:316:38","text":"@notice Gets the balance of an address.\n @dev Note: This function implements {ERC721-balanceOf(address)}.\n @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"id":3226,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"26592:9:38","nodeType":"FunctionDefinition","parameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"s","nameLocation":"26617:1:38","nodeType":"VariableDeclaration","scope":3226,"src":"26602:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3202,"nodeType":"UserDefinedTypeName","pathNode":{"id":3201,"name":"Layout","nameLocations":["26602:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"26602:6:38"},"referencedDeclaration":1786,"src":"26602:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3205,"mutability":"mutable","name":"owner","nameLocation":"26628:5:38","nodeType":"VariableDeclaration","scope":3226,"src":"26620:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3204,"name":"address","nodeType":"ElementaryTypeName","src":"26620:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26601:33:38"},"returnParameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"balance","nameLocation":"26666:7:38","nodeType":"VariableDeclaration","scope":3226,"src":"26658:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"26658:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26657:17:38"},"scope":3470,"src":"26583:203:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3257,"nodeType":"Block","src":"27199:159:38","statements":[{"assignments":[3238],"declarations":[{"constant":false,"id":3238,"mutability":"mutable","name":"owner","nameLocation":"27217:5:38","nodeType":"VariableDeclaration","scope":3257,"src":"27209:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"27209:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3243,"initialValue":{"baseExpression":{"expression":{"id":3239,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"27225:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27227:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"27225:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3242,"indexExpression":{"id":3241,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"27234:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27225:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27209:33:38"},{"condition":{"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27256:20:38","subExpression":{"arguments":[{"id":3245,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"27270:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3244,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"27257:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27257:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3252,"nodeType":"IfStatement","src":"27252:64:38","trueBody":{"errorCall":{"arguments":[{"id":3249,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"27308:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3248,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"27285:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27285:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3251,"nodeType":"RevertStatement","src":"27278:38:38"}},{"expression":{"arguments":[{"id":3254,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"27345:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3253,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"27333:11:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27333:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3236,"id":3256,"nodeType":"Return","src":"27326:25:38"}]},"documentation":{"id":3227,"nodeType":"StructuredDocumentation","src":"26792:307:38","text":"@notice Gets the owner of a token.\n @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token."},"id":3258,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"27113:7:38","nodeType":"FunctionDefinition","parameters":{"id":3233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3230,"mutability":"mutable","name":"s","nameLocation":"27136:1:38","nodeType":"VariableDeclaration","scope":3258,"src":"27121:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3229,"nodeType":"UserDefinedTypeName","pathNode":{"id":3228,"name":"Layout","nameLocations":["27121:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"27121:6:38"},"referencedDeclaration":1786,"src":"27121:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"tokenId","nameLocation":"27147:7:38","nodeType":"VariableDeclaration","scope":3258,"src":"27139:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3231,"name":"uint256","nodeType":"ElementaryTypeName","src":"27139:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27120:35:38"},"returnParameters":{"id":3236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3235,"mutability":"mutable","name":"tokenOwner","nameLocation":"27187:10:38","nodeType":"VariableDeclaration","scope":3258,"src":"27179:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3234,"name":"address","nodeType":"ElementaryTypeName","src":"27179:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27178:20:38"},"scope":3470,"src":"27104:254:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3301,"nodeType":"Block","src":"27856:263:38","statements":[{"assignments":[3270],"declarations":[{"constant":false,"id":3270,"mutability":"mutable","name":"owner","nameLocation":"27874:5:38","nodeType":"VariableDeclaration","scope":3301,"src":"27866:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"27866:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3275,"initialValue":{"baseExpression":{"expression":{"id":3271,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"27882:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27884:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"27882:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3274,"indexExpression":{"id":3273,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"27891:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27882:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27866:33:38"},{"condition":{"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27913:20:38","subExpression":{"arguments":[{"id":3277,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"27927:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3276,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"27914:12:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27914:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3284,"nodeType":"IfStatement","src":"27909:64:38","trueBody":{"errorCall":{"arguments":[{"id":3281,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"27965:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3280,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"27942:22:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27942:31:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3283,"nodeType":"RevertStatement","src":"27935:38:38"}},{"condition":{"arguments":[{"id":3286,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"28005:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3285,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"27987:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27987:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3299,"nodeType":"Block","src":"28071:42:38","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28100:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28092:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3294,"name":"address","nodeType":"ElementaryTypeName","src":"28092:7:38","typeDescriptions":{}}},"id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28092:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3268,"id":3298,"nodeType":"Return","src":"28085:17:38"}]},"id":3300,"nodeType":"IfStatement","src":"27983:130:38","trueBody":{"id":3293,"nodeType":"Block","src":"28013:52:38","statements":[{"expression":{"baseExpression":{"expression":{"id":3288,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"28034:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28036:9:38","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"28034:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3291,"indexExpression":{"id":3290,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"28046:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28034:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3268,"id":3292,"nodeType":"Return","src":"28027:27:38"}]}}]},"documentation":{"id":3259,"nodeType":"StructuredDocumentation","src":"27364:390:38","text":"@notice Gets the approved address for a token.\n @dev Note: This function implements {ERC721-getApproved(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"id":3302,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"27768:11:38","nodeType":"FunctionDefinition","parameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3262,"mutability":"mutable","name":"s","nameLocation":"27795:1:38","nodeType":"VariableDeclaration","scope":3302,"src":"27780:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3261,"nodeType":"UserDefinedTypeName","pathNode":{"id":3260,"name":"Layout","nameLocations":["27780:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"27780:6:38"},"referencedDeclaration":1786,"src":"27780:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3264,"mutability":"mutable","name":"tokenId","nameLocation":"27806:7:38","nodeType":"VariableDeclaration","scope":3302,"src":"27798:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"27798:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27779:35:38"},"returnParameters":{"id":3268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"approved","nameLocation":"27846:8:38","nodeType":"VariableDeclaration","scope":3302,"src":"27838:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3266,"name":"address","nodeType":"ElementaryTypeName","src":"27838:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27837:18:38"},"scope":3470,"src":"27759:360:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3322,"nodeType":"Block","src":"28662:52:38","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":3315,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"28679:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28681:9:38","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1785,"src":"28679:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3318,"indexExpression":{"id":3317,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"28691:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:18:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3320,"indexExpression":{"id":3319,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"28698:8:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:28:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3314,"id":3321,"nodeType":"Return","src":"28672:35:38"}]},"documentation":{"id":3303,"nodeType":"StructuredDocumentation","src":"28125:411:38","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"id":3323,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"28550:16:38","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"s","nameLocation":"28582:1:38","nodeType":"VariableDeclaration","scope":3323,"src":"28567:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3305,"nodeType":"UserDefinedTypeName","pathNode":{"id":3304,"name":"Layout","nameLocations":["28567:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"28567:6:38"},"referencedDeclaration":1786,"src":"28567:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3308,"mutability":"mutable","name":"owner","nameLocation":"28593:5:38","nodeType":"VariableDeclaration","scope":3323,"src":"28585:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3307,"name":"address","nodeType":"ElementaryTypeName","src":"28585:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"operator","nameLocation":"28608:8:38","nodeType":"VariableDeclaration","scope":3323,"src":"28600:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3309,"name":"address","nodeType":"ElementaryTypeName","src":"28600:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28566:51:38"},"returnParameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"approvedForAll","nameLocation":"28646:14:38","nodeType":"VariableDeclaration","scope":3323,"src":"28641:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3312,"name":"bool","nodeType":"ElementaryTypeName","src":"28641:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28640:21:38"},"scope":3470,"src":"28541:173:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3341,"nodeType":"Block","src":"28968:57:38","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":3335,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"29000:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3336,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"29002:6:38","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"29000:8:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3338,"indexExpression":{"id":3337,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"29009:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29000:17:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3334,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"28985:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28985:33:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3333,"id":3340,"nodeType":"Return","src":"28978:40:38"}]},"documentation":{"id":3324,"nodeType":"StructuredDocumentation","src":"28720:147:38","text":"@notice Gets whether a token was burnt.\n @param tokenId The token identifier.\n @return tokenWasBurnt Whether the token was burnt."},"id":3342,"implemented":true,"kind":"function","modifiers":[],"name":"wasBurnt","nameLocation":"28881:8:38","nodeType":"FunctionDefinition","parameters":{"id":3330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3327,"mutability":"mutable","name":"s","nameLocation":"28905:1:38","nodeType":"VariableDeclaration","scope":3342,"src":"28890:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3326,"nodeType":"UserDefinedTypeName","pathNode":{"id":3325,"name":"Layout","nameLocations":["28890:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"28890:6:38"},"referencedDeclaration":1786,"src":"28890:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3329,"mutability":"mutable","name":"tokenId","nameLocation":"28916:7:38","nodeType":"VariableDeclaration","scope":3342,"src":"28908:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3328,"name":"uint256","nodeType":"ElementaryTypeName","src":"28908:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28889:35:38"},"returnParameters":{"id":3333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3332,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"28953:13:38","nodeType":"VariableDeclaration","scope":3342,"src":"28948:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3331,"name":"bool","nodeType":"ElementaryTypeName","src":"28948:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28947:20:38"},"scope":3470,"src":"28872:153:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3353,"nodeType":"Block","src":"29090:115:38","statements":[{"assignments":[3349],"declarations":[{"constant":false,"id":3349,"mutability":"mutable","name":"position","nameLocation":"29108:8:38","nodeType":"VariableDeclaration","scope":3353,"src":"29100:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"29100:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3351,"initialValue":{"id":3350,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"29119:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"29100:38:38"},{"AST":{"nativeSrc":"29157:42:38","nodeType":"YulBlock","src":"29157:42:38","statements":[{"nativeSrc":"29171:18:38","nodeType":"YulAssignment","src":"29171:18:38","value":{"name":"position","nativeSrc":"29181:8:38","nodeType":"YulIdentifier","src":"29181:8:38"},"variableNames":[{"name":"s.slot","nativeSrc":"29171:6:38","nodeType":"YulIdentifier","src":"29171:6:38"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3349,"isOffset":false,"isSlot":false,"src":"29181:8:38","valueSize":1},{"declaration":3346,"isOffset":false,"isSlot":true,"src":"29171:6:38","suffix":"slot","valueSize":1}],"id":3352,"nodeType":"InlineAssembly","src":"29148:51:38"}]},"id":3354,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"29040:6:38","nodeType":"FunctionDefinition","parameters":{"id":3343,"nodeType":"ParameterList","parameters":[],"src":"29046:2:38"},"returnParameters":{"id":3347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3346,"mutability":"mutable","name":"s","nameLocation":"29087:1:38","nodeType":"VariableDeclaration","scope":3354,"src":"29072:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3345,"nodeType":"UserDefinedTypeName","pathNode":{"id":3344,"name":"Layout","nameLocations":["29072:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"29072:6:38"},"referencedDeclaration":1786,"src":"29072:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"}],"src":"29071:18:38"},"scope":3470,"src":"29031:174:38","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3385,"nodeType":"Block","src":"29779:153:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3372,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"29830:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3373,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"29838:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3374,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"29844:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3375,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"29853:4:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3369,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"29809:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3368,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"29793:15:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1715_$","typeString":"type(contract IERC721Receiver)"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1715","typeString":"contract IERC721Receiver"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29813:16:38","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"29793:36:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:65:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3377,"name":"ERC721_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"29862:15:38","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"29793:84:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3384,"nodeType":"IfStatement","src":"29789:136:38","trueBody":{"errorCall":{"arguments":[{"id":3380,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"29913:2:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3381,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"29917:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3379,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"29886:26:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29886:39:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3383,"nodeType":"RevertStatement","src":"29879:46:38"}}]},"documentation":{"id":3355,"nodeType":"StructuredDocumentation","src":"29211:446:38","text":"@notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param tokenId Identifier of the token transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3386,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC721Received","nameLocation":"29671:21:38","nodeType":"FunctionDefinition","parameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3357,"mutability":"mutable","name":"sender","nameLocation":"29701:6:38","nodeType":"VariableDeclaration","scope":3386,"src":"29693:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3356,"name":"address","nodeType":"ElementaryTypeName","src":"29693:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3359,"mutability":"mutable","name":"from","nameLocation":"29717:4:38","nodeType":"VariableDeclaration","scope":3386,"src":"29709:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3358,"name":"address","nodeType":"ElementaryTypeName","src":"29709:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3361,"mutability":"mutable","name":"to","nameLocation":"29731:2:38","nodeType":"VariableDeclaration","scope":3386,"src":"29723:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3360,"name":"address","nodeType":"ElementaryTypeName","src":"29723:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"tokenId","nameLocation":"29743:7:38","nodeType":"VariableDeclaration","scope":3386,"src":"29735:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3362,"name":"uint256","nodeType":"ElementaryTypeName","src":"29735:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"data","nameLocation":"29765:4:38","nodeType":"VariableDeclaration","scope":3386,"src":"29752:17:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3364,"name":"bytes","nodeType":"ElementaryTypeName","src":"29752:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"29692:78:38"},"returnParameters":{"id":3367,"nodeType":"ParameterList","parameters":[],"src":"29779:0:38"},"scope":3470,"src":"29662:270:38","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3411,"nodeType":"Block","src":"30357:73:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3399,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"30375:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3400,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"30384:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"30375:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3402,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"30374:18:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":3403,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"30396:1:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30398:9:38","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1785,"src":"30396:11:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3406,"indexExpression":{"id":3405,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"30408:5:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:18:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3408,"indexExpression":{"id":3407,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"30415:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:27:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30374:49:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3398,"id":3410,"nodeType":"Return","src":"30367:56:38"}]},"documentation":{"id":3387,"nodeType":"StructuredDocumentation","src":"29938:302:38","text":"@notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n @param owner The token owner.\n @param account The account to check the operatability of.\n @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise."},"id":3412,"implemented":true,"kind":"function","modifiers":[],"name":"_isOperatable","nameLocation":"30254:13:38","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3390,"mutability":"mutable","name":"s","nameLocation":"30283:1:38","nodeType":"VariableDeclaration","scope":3412,"src":"30268:16:38","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3389,"nodeType":"UserDefinedTypeName","pathNode":{"id":3388,"name":"Layout","nameLocations":["30268:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"30268:6:38"},"referencedDeclaration":1786,"src":"30268:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3392,"mutability":"mutable","name":"owner","nameLocation":"30294:5:38","nodeType":"VariableDeclaration","scope":3412,"src":"30286:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3391,"name":"address","nodeType":"ElementaryTypeName","src":"30286:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3394,"mutability":"mutable","name":"account","nameLocation":"30309:7:38","nodeType":"VariableDeclaration","scope":3412,"src":"30301:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3393,"name":"address","nodeType":"ElementaryTypeName","src":"30301:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30267:50:38"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"operatable","nameLocation":"30345:10:38","nodeType":"VariableDeclaration","scope":3412,"src":"30340:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3396,"name":"bool","nodeType":"ElementaryTypeName","src":"30340:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30339:17:38"},"scope":3470,"src":"30245:185:38","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3427,"nodeType":"Block","src":"30514:47:38","statements":[{"expression":{"arguments":[{"arguments":[{"id":3423,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"30547:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30539:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3421,"name":"uint160","nodeType":"ElementaryTypeName","src":"30539:7:38","typeDescriptions":{}}},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30539:14:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30531:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3419,"name":"address","nodeType":"ElementaryTypeName","src":"30531:7:38","typeDescriptions":{}}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30531:23:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3418,"id":3426,"nodeType":"Return","src":"30524:30:38"}]},"id":3428,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenOwner","nameLocation":"30445:11:38","nodeType":"FunctionDefinition","parameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"owner","nameLocation":"30465:5:38","nodeType":"VariableDeclaration","scope":3428,"src":"30457:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"30457:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30456:15:38"},"returnParameters":{"id":3418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"tokenOwner","nameLocation":"30502:10:38","nodeType":"VariableDeclaration","scope":3428,"src":"30494:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3416,"name":"address","nodeType":"ElementaryTypeName","src":"30494:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30493:20:38"},"scope":3470,"src":"30436:125:38","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3442,"nodeType":"Block","src":"30644:43:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3437,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"30669:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30661:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3435,"name":"uint160","nodeType":"ElementaryTypeName","src":"30661:7:38","typeDescriptions":{}}},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30661:14:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30679:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30661:19:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3434,"id":3441,"nodeType":"Return","src":"30654:26:38"}]},"id":3443,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenExists","nameLocation":"30576:12:38","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"owner","nameLocation":"30597:5:38","nodeType":"VariableDeclaration","scope":3443,"src":"30589:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"30589:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30588:15:38"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"tokenExists","nameLocation":"30631:11:38","nodeType":"VariableDeclaration","scope":3443,"src":"30626:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3432,"name":"bool","nodeType":"ElementaryTypeName","src":"30626:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30625:18:38"},"scope":3470,"src":"30567:120:38","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3454,"nodeType":"Block","src":"30774:56:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3450,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"30791:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3451,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"30800:23:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30791:32:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3449,"id":3453,"nodeType":"Return","src":"30784:39:38"}]},"id":3455,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenWasBurnt","nameLocation":"30702:14:38","nodeType":"FunctionDefinition","parameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"owner","nameLocation":"30725:5:38","nodeType":"VariableDeclaration","scope":3455,"src":"30717:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3444,"name":"uint256","nodeType":"ElementaryTypeName","src":"30717:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30716:15:38"},"returnParameters":{"id":3449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3448,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"30759:13:38","nodeType":"VariableDeclaration","scope":3455,"src":"30754:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3447,"name":"bool","nodeType":"ElementaryTypeName","src":"30754:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30753:20:38"},"scope":3470,"src":"30693:137:38","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3468,"nodeType":"Block","src":"30923:62:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3462,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"30940:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3463,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"30948:25:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30940:33:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30977:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30940:38:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3461,"id":3467,"nodeType":"Return","src":"30933:45:38"}]},"id":3469,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenHasApproval","nameLocation":"30845:17:38","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3457,"mutability":"mutable","name":"owner","nameLocation":"30871:5:38","nodeType":"VariableDeclaration","scope":3469,"src":"30863:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"30863:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30862:15:38"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"tokenHasApproval","nameLocation":"30905:16:38","nodeType":"VariableDeclaration","scope":3469,"src":"30900:21:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3459,"name":"bool","nodeType":"ElementaryTypeName","src":"30900:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30899:23:38"},"scope":3470,"src":"30836:149:38","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3471,"src":"1368:29619:38","usedErrors":[],"usedEvents":[]}],"src":"32:30956:38"},"id":38},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","exportedSymbols":{"ITokenMetadataResolver":[3536],"TokenMetadataBase":[3522],"TokenMetadataStorage":[3723]},"id":3523,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3472,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:39"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3474,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3523,"sourceUnit":3537,"src":"58:82:39","symbolAliases":[{"foreign":{"id":3473,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"66:22:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../libraries/TokenMetadataStorage.sol","id":3476,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3523,"sourceUnit":3724,"src":"141:77:39","symbolAliases":[{"foreign":{"id":3475,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"149:20:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"TokenMetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":3477,"nodeType":"StructuredDocumentation","src":"220:283:39","text":"@title TokenMetadataBase (proxiable version).\n @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation."},"fullyImplemented":true,"id":3522,"linearizedBaseContracts":[3522],"name":"TokenMetadataBase","nameLocation":"521:17:39","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3481,"libraryName":{"id":3478,"name":"TokenMetadataStorage","nameLocations":["551:20:39"],"nodeType":"IdentifierPath","referencedDeclaration":3723,"src":"551:20:39"},"nodeType":"UsingForDirective","src":"545:59:39","typeName":{"id":3480,"nodeType":"UserDefinedTypeName","pathNode":{"id":3479,"name":"TokenMetadataStorage.Layout","nameLocations":["576:20:39","597:6:39"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"576:27:39"},"referencedDeclaration":3550,"src":"576:27:39","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":3493,"nodeType":"Block","src":"776:60:39","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3487,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"793:20:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3723_$","typeString":"type(library TokenMetadataStorage)"}},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"814:6:39","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3722,"src":"793:27:39","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:29:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3490,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"823:4:39","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3662,"src":"793:34:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3550_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:36:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3486,"id":3492,"nodeType":"Return","src":"786:43:39"}]},"documentation":{"id":3482,"nodeType":"StructuredDocumentation","src":"610:91:39","text":"@notice Gets the token name. E.g. \"My Token\".\n @return tokenName The token name."},"functionSelector":"06fdde03","id":3494,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"715:4:39","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[],"src":"719:2:39"},"returnParameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"tokenName","nameLocation":"765:9:39","nodeType":"VariableDeclaration","scope":3494,"src":"751:23:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3484,"name":"string","nodeType":"ElementaryTypeName","src":"751:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"750:25:39"},"scope":3522,"src":"706:130:39","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3506,"nodeType":"Block","src":"1013:62:39","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3500,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"1030:20:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3723_$","typeString":"type(library TokenMetadataStorage)"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:39","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3722,"src":"1030:27:39","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:29:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1060:6:39","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3675,"src":"1030:36:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3550_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:38:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3499,"id":3505,"nodeType":"Return","src":"1023:45:39"}]},"documentation":{"id":3495,"nodeType":"StructuredDocumentation","src":"842:92:39","text":"@notice Gets the token symbol. E.g. \"TOK\".\n @return tokenSymbol The token symbol."},"functionSelector":"95d89b41","id":3507,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"948:6:39","nodeType":"FunctionDefinition","parameters":{"id":3496,"nodeType":"ParameterList","parameters":[],"src":"954:2:39"},"returnParameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1000:11:39","nodeType":"VariableDeclaration","scope":3507,"src":"986:25:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3497,"name":"string","nodeType":"ElementaryTypeName","src":"986:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"985:27:39"},"scope":3522,"src":"939:136:39","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3520,"nodeType":"Block","src":"1319:72:39","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3514,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"1336:20:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3723_$","typeString":"type(library TokenMetadataStorage)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1357:6:39","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3722,"src":"1336:27:39","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:29:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1366:16:39","memberName":"metadataResolver","nodeType":"MemberAccess","referencedDeclaration":3689,"src":"1336:46:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3550_storage_ptr_$returns$_t_contract$_ITokenMetadataResolver_$3536_$attached_to$_t_struct$_Layout_$3550_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (contract ITokenMetadataResolver)"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:48:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3513,"id":3519,"nodeType":"Return","src":"1329:55:39"}]},"documentation":{"id":3508,"nodeType":"StructuredDocumentation","src":"1081:128:39","text":"@notice Gets the token metadata resolver address.\n @return tokenMetadataResolver The token metadata resolver address."},"functionSelector":"a0c76f62","id":3521,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"1223:16:39","nodeType":"FunctionDefinition","parameters":{"id":3509,"nodeType":"ParameterList","parameters":[],"src":"1239:2:39"},"returnParameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1296:21:39","nodeType":"VariableDeclaration","scope":3521,"src":"1273:44:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3511,"nodeType":"UserDefinedTypeName","pathNode":{"id":3510,"name":"ITokenMetadataResolver","nameLocations":["1273:22:39"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"1273:22:39"},"referencedDeclaration":3536,"src":"1273:22:39","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1272:46:39"},"scope":3522,"src":"1214:177:39","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3523,"src":"503:890:39","usedErrors":[],"usedEvents":[]}],"src":"32:1362:39"},"id":39},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","exportedSymbols":{"ITokenMetadataResolver":[3536]},"id":3537,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3524,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:40"},{"abstract":false,"baseContracts":[],"canonicalName":"ITokenMetadataResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3525,"nodeType":"StructuredDocumentation","src":"58:86:40","text":"@title ITokenMetadataResolver\n @notice Interface for Token Metadata Resolvers."},"fullyImplemented":false,"id":3536,"linearizedBaseContracts":[3536],"name":"ITokenMetadataResolver","nameLocation":"154:22:40","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3526,"nodeType":"StructuredDocumentation","src":"183:231:40","text":"@notice Gets the token metadata URI for a token.\n @param tokenContract The token contract for which to retrieve the token URI.\n @param tokenId The token identifier.\n @return tokenURI The token metadata URI."},"functionSelector":"f724dad7","id":3535,"implemented":false,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"428:16:40","nodeType":"FunctionDefinition","parameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3528,"mutability":"mutable","name":"tokenContract","nameLocation":"453:13:40","nodeType":"VariableDeclaration","scope":3535,"src":"445:21:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3527,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3530,"mutability":"mutable","name":"tokenId","nameLocation":"476:7:40","nodeType":"VariableDeclaration","scope":3535,"src":"468:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"444:40:40"},"returnParameters":{"id":3534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3533,"mutability":"mutable","name":"tokenURI","nameLocation":"522:8:40","nodeType":"VariableDeclaration","scope":3535,"src":"508:22:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3532,"name":"string","nodeType":"ElementaryTypeName","src":"508:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"507:24:40"},"scope":3536,"src":"419:113:40","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3537,"src":"144:390:40","usedErrors":[],"usedEvents":[]}],"src":"32:503:40"},"id":40},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","exportedSymbols":{"ITokenMetadataResolver":[3536],"ProxyInitialization":[1280],"TokenMetadataStorage":[3723]},"id":3724,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3538,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:41"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3724,"sourceUnit":3537,"src":"58:82:41","symbolAliases":[{"foreign":{"id":3539,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"66:22:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":3542,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3724,"sourceUnit":1281,"src":"141:87:41","symbolAliases":[{"foreign":{"id":3541,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"149:19:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenMetadataStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3723,"linearizedBaseContracts":[3723],"name":"TokenMetadataStorage","nameLocation":"238:20:41","nodeType":"ContractDefinition","nodes":[{"canonicalName":"TokenMetadataStorage.Layout","id":3550,"members":[{"constant":false,"id":3544,"mutability":"mutable","name":"tokenName","nameLocation":"296:9:41","nodeType":"VariableDeclaration","scope":3550,"src":"289:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3543,"name":"string","nodeType":"ElementaryTypeName","src":"289:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3546,"mutability":"mutable","name":"tokenSymbol","nameLocation":"322:11:41","nodeType":"VariableDeclaration","scope":3550,"src":"315:18:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3545,"name":"string","nodeType":"ElementaryTypeName","src":"315:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"366:21:41","nodeType":"VariableDeclaration","scope":3550,"src":"343:44:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3548,"nodeType":"UserDefinedTypeName","pathNode":{"id":3547,"name":"ITokenMetadataResolver","nameLocations":["343:22:41"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"343:22:41"},"referencedDeclaration":3536,"src":"343:22:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"name":"Layout","nameLocation":"272:6:41","nodeType":"StructDefinition","scope":3723,"src":"265:129:41","visibility":"public"},{"constant":true,"id":3563,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"426:19:41","nodeType":"VariableDeclaration","scope":3723,"src":"400:127:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"400:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e73746f72616765","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"474:46:41","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""},"value":"animoca.token.metadata.TokenMetadata.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""}],"id":3556,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"464:9:41","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"464:57:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"456:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3554,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:41","typeDescriptions":{}}},"id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"456:66:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"525:1:41","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"456:70:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"448:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:41","typeDescriptions":{}}},"id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"448:79:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":3576,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"559:21:41","nodeType":"VariableDeclaration","scope":3723,"src":"533:127:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"533:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e7068617365","id":3570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"609:44:41","typeDescriptions":{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""},"value":"animoca.token.metadata.TokenMetadata.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""}],"id":3569,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"599:9:41","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"599:55:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"591:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:41","typeDescriptions":{}}},"id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"591:64:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"658:1:41","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"591:68:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"583:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:41","typeDescriptions":{}}},"id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"583:77:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":3608,"nodeType":"Block","src":"1209:134:41","statements":[{"expression":{"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3590,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"1219:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1221:9:41","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3544,"src":"1219:11:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3593,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"1233:9:41","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1219:23:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3595,"nodeType":"ExpressionStatement","src":"1219:23:41"},{"expression":{"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3596,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"1252:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3598,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1254:11:41","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3546,"src":"1252:13:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3599,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1268:11:41","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1252:27:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3601,"nodeType":"ExpressionStatement","src":"1252:27:41"},{"expression":{"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3602,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"1289:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1291:21:41","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3549,"src":"1289:23:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3605,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"1315:21:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"src":"1289:47:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"id":3607,"nodeType":"ExpressionStatement","src":"1289:47:41"}]},"documentation":{"id":3577,"nodeType":"StructuredDocumentation","src":"667:349:41","text":"@notice Initializes the metadata storage (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3609,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1030:15:41","nodeType":"FunctionDefinition","parameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"s","nameLocation":"1070:1:41","nodeType":"VariableDeclaration","scope":3609,"src":"1055:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3579,"nodeType":"UserDefinedTypeName","pathNode":{"id":3578,"name":"Layout","nameLocations":["1055:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"1055:6:41"},"referencedDeclaration":3550,"src":"1055:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"tokenName","nameLocation":"1095:9:41","nodeType":"VariableDeclaration","scope":3609,"src":"1081:23:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3581,"name":"string","nodeType":"ElementaryTypeName","src":"1081:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3584,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1128:11:41","nodeType":"VariableDeclaration","scope":3609,"src":"1114:25:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3583,"name":"string","nodeType":"ElementaryTypeName","src":"1114:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1172:21:41","nodeType":"VariableDeclaration","scope":3609,"src":"1149:44:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3586,"nodeType":"UserDefinedTypeName","pathNode":{"id":3585,"name":"ITokenMetadataResolver","nameLocations":["1149:22:41"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"1149:22:41"},"referencedDeclaration":3536,"src":"1149:22:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:154:41"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[],"src":"1209:0:41"},"scope":3723,"src":"1021:322:41","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3648,"nodeType":"Block","src":"2052:198:41","statements":[{"expression":{"arguments":[{"id":3626,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"2091:21:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":3627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2114:1:41","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":3623,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2062:19:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1280_$","typeString":"type(library ProxyInitialization)"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2082:8:41","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"2062:28:41","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2062:54:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3629,"nodeType":"ExpressionStatement","src":"2062:54:41"},{"expression":{"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3630,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"2126:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2128:9:41","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3544,"src":"2126:11:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3633,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"2140:9:41","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2126:23:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3635,"nodeType":"ExpressionStatement","src":"2126:23:41"},{"expression":{"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3636,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"2159:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2161:11:41","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3546,"src":"2159:13:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3639,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"2175:11:41","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2159:27:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3641,"nodeType":"ExpressionStatement","src":"2159:27:41"},{"expression":{"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3642,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"2196:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2198:21:41","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3549,"src":"2196:23:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3645,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"2222:21:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"src":"2196:47:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"id":3647,"nodeType":"ExpressionStatement","src":"2196:47:41"}]},"documentation":{"id":3610,"nodeType":"StructuredDocumentation","src":"1349:512:41","text":"@notice Initializes the metadata storage (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3649,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1875:9:41","nodeType":"FunctionDefinition","parameters":{"id":3621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3613,"mutability":"mutable","name":"s","nameLocation":"1909:1:41","nodeType":"VariableDeclaration","scope":3649,"src":"1894:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3612,"nodeType":"UserDefinedTypeName","pathNode":{"id":3611,"name":"Layout","nameLocations":["1894:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"1894:6:41"},"referencedDeclaration":3550,"src":"1894:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3615,"mutability":"mutable","name":"tokenName","nameLocation":"1936:9:41","nodeType":"VariableDeclaration","scope":3649,"src":"1920:25:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3614,"name":"string","nodeType":"ElementaryTypeName","src":"1920:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3617,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1971:11:41","nodeType":"VariableDeclaration","scope":3649,"src":"1955:27:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3616,"name":"string","nodeType":"ElementaryTypeName","src":"1955:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2015:21:41","nodeType":"VariableDeclaration","scope":3649,"src":"1992:44:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3619,"nodeType":"UserDefinedTypeName","pathNode":{"id":3618,"name":"ITokenMetadataResolver","nameLocations":["1992:22:41"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"1992:22:41"},"referencedDeclaration":3536,"src":"1992:22:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1884:158:41"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[],"src":"2052:0:41"},"scope":3723,"src":"1866:384:41","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3661,"nodeType":"Block","src":"2438:35:41","statements":[{"expression":{"expression":{"id":3658,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"2455:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2457:9:41","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3544,"src":"2455:11:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3657,"id":3660,"nodeType":"Return","src":"2448:18:41"}]},"documentation":{"id":3650,"nodeType":"StructuredDocumentation","src":"2256:97:41","text":"@notice Gets the name of the token.\n @return tokenName The name of the token contract."},"id":3662,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2367:4:41","nodeType":"FunctionDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3653,"mutability":"mutable","name":"s","nameLocation":"2387:1:41","nodeType":"VariableDeclaration","scope":3662,"src":"2372:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3652,"nodeType":"UserDefinedTypeName","pathNode":{"id":3651,"name":"Layout","nameLocations":["2372:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"2372:6:41"},"referencedDeclaration":3550,"src":"2372:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2371:18:41"},"returnParameters":{"id":3657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3656,"mutability":"mutable","name":"tokenName","nameLocation":"2427:9:41","nodeType":"VariableDeclaration","scope":3662,"src":"2413:23:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3655,"name":"string","nodeType":"ElementaryTypeName","src":"2413:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2412:25:41"},"scope":3723,"src":"2358:115:41","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3674,"nodeType":"Block","src":"2671:37:41","statements":[{"expression":{"expression":{"id":3671,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"2688:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2690:11:41","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3546,"src":"2688:13:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3670,"id":3673,"nodeType":"Return","src":"2681:20:41"}]},"documentation":{"id":3663,"nodeType":"StructuredDocumentation","src":"2479:103:41","text":"@notice Gets the symbol of the token.\n @return tokenSymbol The symbol of the token contract."},"id":3675,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2596:6:41","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"s","nameLocation":"2618:1:41","nodeType":"VariableDeclaration","scope":3675,"src":"2603:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3665,"nodeType":"UserDefinedTypeName","pathNode":{"id":3664,"name":"Layout","nameLocations":["2603:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"2603:6:41"},"referencedDeclaration":3550,"src":"2603:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2602:18:41"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"mutability":"mutable","name":"tokenSymbol","nameLocation":"2658:11:41","nodeType":"VariableDeclaration","scope":3675,"src":"2644:25:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3668,"name":"string","nodeType":"ElementaryTypeName","src":"2644:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2643:27:41"},"scope":3723,"src":"2587:121:41","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3688,"nodeType":"Block","src":"2974:47:41","statements":[{"expression":{"expression":{"id":3685,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"2991:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:21:41","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3549,"src":"2991:23:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3684,"id":3687,"nodeType":"Return","src":"2984:30:41"}]},"documentation":{"id":3676,"nodeType":"StructuredDocumentation","src":"2714:142:41","text":"@notice Gets the address of the token metadata resolver.\n @return tokenMetadataResolver The address of the token metadata resolver."},"id":3689,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"2870:16:41","nodeType":"FunctionDefinition","parameters":{"id":3680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3679,"mutability":"mutable","name":"s","nameLocation":"2902:1:41","nodeType":"VariableDeclaration","scope":3689,"src":"2887:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3678,"nodeType":"UserDefinedTypeName","pathNode":{"id":3677,"name":"Layout","nameLocations":["2887:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"2887:6:41"},"referencedDeclaration":3550,"src":"2887:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2886:18:41"},"returnParameters":{"id":3684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3683,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2951:21:41","nodeType":"VariableDeclaration","scope":3689,"src":"2928:44:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3682,"nodeType":"UserDefinedTypeName","pathNode":{"id":3681,"name":"ITokenMetadataResolver","nameLocations":["2928:22:41"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"2928:22:41"},"referencedDeclaration":3536,"src":"2928:22:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"2927:46:41"},"scope":3723,"src":"2861:160:41","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3709,"nodeType":"Block","src":"3347:88:41","statements":[{"expression":{"arguments":[{"id":3705,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"3405:13:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3706,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"3420:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":3702,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3364:1:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3366:21:41","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3549,"src":"3364:23:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3388:16:41","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3535,"src":"3364:40:41","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (address,uint256) view external returns (string memory)"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:64:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3701,"id":3708,"nodeType":"Return","src":"3357:71:41"}]},"documentation":{"id":3690,"nodeType":"StructuredDocumentation","src":"3027:193:41","text":"@notice Gets the token metadata URI retieved from the metadata resolver contract.\n @param tokenContract The address of the token contract.\n @param tokenId The ID of the token."},"id":3710,"implemented":true,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"3234:16:41","nodeType":"FunctionDefinition","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"s","nameLocation":"3266:1:41","nodeType":"VariableDeclaration","scope":3710,"src":"3251:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3692,"nodeType":"UserDefinedTypeName","pathNode":{"id":3691,"name":"Layout","nameLocations":["3251:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"3251:6:41"},"referencedDeclaration":3550,"src":"3251:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"tokenContract","nameLocation":"3277:13:41","nodeType":"VariableDeclaration","scope":3710,"src":"3269:21:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3694,"name":"address","nodeType":"ElementaryTypeName","src":"3269:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"tokenId","nameLocation":"3300:7:41","nodeType":"VariableDeclaration","scope":3710,"src":"3292:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"3292:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3250:58:41"},"returnParameters":{"id":3701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3710,"src":"3332:13:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3699,"name":"string","nodeType":"ElementaryTypeName","src":"3332:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3331:15:41"},"scope":3723,"src":"3225:210:41","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3721,"nodeType":"Block","src":"3500:115:41","statements":[{"assignments":[3717],"declarations":[{"constant":false,"id":3717,"mutability":"mutable","name":"position","nameLocation":"3518:8:41","nodeType":"VariableDeclaration","scope":3721,"src":"3510:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3510:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3719,"initialValue":{"id":3718,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"3529:19:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3510:38:41"},{"AST":{"nativeSrc":"3567:42:41","nodeType":"YulBlock","src":"3567:42:41","statements":[{"nativeSrc":"3581:18:41","nodeType":"YulAssignment","src":"3581:18:41","value":{"name":"position","nativeSrc":"3591:8:41","nodeType":"YulIdentifier","src":"3591:8:41"},"variableNames":[{"name":"s.slot","nativeSrc":"3581:6:41","nodeType":"YulIdentifier","src":"3581:6:41"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3717,"isOffset":false,"isSlot":false,"src":"3591:8:41","valueSize":1},{"declaration":3714,"isOffset":false,"isSlot":true,"src":"3581:6:41","suffix":"slot","valueSize":1}],"id":3720,"nodeType":"InlineAssembly","src":"3558:51:41"}]},"id":3722,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3450:6:41","nodeType":"FunctionDefinition","parameters":{"id":3711,"nodeType":"ParameterList","parameters":[],"src":"3456:2:41"},"returnParameters":{"id":3715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"s","nameLocation":"3497:1:41","nodeType":"VariableDeclaration","scope":3722,"src":"3482:16:41","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3713,"nodeType":"UserDefinedTypeName","pathNode":{"id":3712,"name":"Layout","nameLocations":["3482:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"3482:6:41"},"referencedDeclaration":3550,"src":"3482:6:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3550_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"3481:18:41"},"scope":3723,"src":"3441:174:41","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3724,"src":"230:3387:41","usedErrors":[],"usedEvents":[]}],"src":"32:3586:41"},"id":41},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[4053]},"id":4054,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3725,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:42"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3726,"nodeType":"StructuredDocumentation","src":"126:67:42","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4053,"linearizedBaseContracts":[4053],"name":"Address","nameLocation":"202:7:42","nodeType":"ContractDefinition","nodes":[{"body":{"id":3740,"nodeType":"Block","src":"1478:254:42","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3734,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"1702:7:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:42","memberName":"code","nodeType":"MemberAccess","src":"1702:12:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:42","memberName":"length","nodeType":"MemberAccess","src":"1702:19:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3733,"id":3739,"nodeType":"Return","src":"1695:30:42"}]},"documentation":{"id":3727,"nodeType":"StructuredDocumentation","src":"216:1191:42","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3741,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:42","nodeType":"FunctionDefinition","parameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"account","nameLocation":"1440:7:42","nodeType":"VariableDeclaration","scope":3741,"src":"1432:15:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3728,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:42"},"returnParameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3741,"src":"1472:4:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3731,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:42"},"scope":4053,"src":"1412:320:42","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3774,"nodeType":"Block","src":"2718:241:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3752,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:42","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4053","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4053","typeString":"library Address"}],"id":3751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3750,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:42","typeDescriptions":{}}},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:42","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3755,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"2761:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3759,"nodeType":"ExpressionStatement","src":"2728:73:42"},{"assignments":[3761,null],"declarations":[{"constant":false,"id":3761,"mutability":"mutable","name":"success","nameLocation":"2818:7:42","nodeType":"VariableDeclaration","scope":3774,"src":"2813:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3760,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3768,"initialValue":{"arguments":[{"hexValue":"","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3762,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"2831:9:42","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:42","memberName":"call","nodeType":"MemberAccess","src":"2831:14:42","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3764,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"2853:6:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:42","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:42"},{"expression":{"arguments":[{"id":3770,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"2882:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3773,"nodeType":"ExpressionStatement","src":"2874:78:42"}]},"documentation":{"id":3742,"nodeType":"StructuredDocumentation","src":"1738:904:42","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3775,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:42","nodeType":"FunctionDefinition","parameters":{"id":3747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:42","nodeType":"VariableDeclaration","scope":3775,"src":"2666:25:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3743,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:42","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3746,"mutability":"mutable","name":"amount","nameLocation":"2701:6:42","nodeType":"VariableDeclaration","scope":3775,"src":"2693:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3745,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:42"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[],"src":"2718:0:42"},"scope":4053,"src":"2647:312:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3792,"nodeType":"Block","src":"3790:96:42","statements":[{"expression":{"arguments":[{"id":3786,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"3829:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3787,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"3837:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3785,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3833,3877],"referencedDeclaration":3877,"src":"3807:21:42","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3784,"id":3791,"nodeType":"Return","src":"3800:79:42"}]},"documentation":{"id":3776,"nodeType":"StructuredDocumentation","src":"2965:731:42","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3793,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:42","nodeType":"FunctionDefinition","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3778,"mutability":"mutable","name":"target","nameLocation":"3731:6:42","nodeType":"VariableDeclaration","scope":3793,"src":"3723:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3777,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3780,"mutability":"mutable","name":"data","nameLocation":"3752:4:42","nodeType":"VariableDeclaration","scope":3793,"src":"3739:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3779,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:42"},"returnParameters":{"id":3784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"3776:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3782,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:42"},"scope":4053,"src":"3701:185:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3812,"nodeType":"Block","src":"4255:76:42","statements":[{"expression":{"arguments":[{"id":3806,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"4294:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3807,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"4302:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3809,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"4311:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3805,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3833,3877],"referencedDeclaration":3877,"src":"4272:21:42","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3804,"id":3811,"nodeType":"Return","src":"4265:59:42"}]},"documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"3892:211:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3813,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:42","nodeType":"FunctionDefinition","parameters":{"id":3801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"mutability":"mutable","name":"target","nameLocation":"4147:6:42","nodeType":"VariableDeclaration","scope":3813,"src":"4139:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3795,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3798,"mutability":"mutable","name":"data","nameLocation":"4176:4:42","nodeType":"VariableDeclaration","scope":3813,"src":"4163:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3797,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3800,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:42","nodeType":"VariableDeclaration","scope":3813,"src":"4190:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3799,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:42"},"returnParameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3813,"src":"4241:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3802,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:42"},"scope":4053,"src":"4108:223:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3832,"nodeType":"Block","src":"4806:111:42","statements":[{"expression":{"arguments":[{"id":3826,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"4845:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3827,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"4853:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"4859:5:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3825,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3833,3877],"referencedDeclaration":3877,"src":"4823:21:42","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3824,"id":3831,"nodeType":"Return","src":"4816:94:42"}]},"documentation":{"id":3814,"nodeType":"StructuredDocumentation","src":"4337:351:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3833,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:42","nodeType":"FunctionDefinition","parameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3816,"mutability":"mutable","name":"target","nameLocation":"4732:6:42","nodeType":"VariableDeclaration","scope":3833,"src":"4724:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3815,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"data","nameLocation":"4753:4:42","nodeType":"VariableDeclaration","scope":3833,"src":"4740:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3817,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3820,"mutability":"mutable","name":"value","nameLocation":"4767:5:42","nodeType":"VariableDeclaration","scope":3833,"src":"4759:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:42"},"returnParameters":{"id":3824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3833,"src":"4792:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3822,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:42"},"scope":4053,"src":"4693:224:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3876,"nodeType":"Block","src":"5344:267:42","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3850,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:42","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4053","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4053","typeString":"library Address"}],"id":3849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:42","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3848,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:42","typeDescriptions":{}}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:42","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"5387:5:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3847,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3857,"nodeType":"ExpressionStatement","src":"5354:81:42"},{"assignments":[3859,3861],"declarations":[{"constant":false,"id":3859,"mutability":"mutable","name":"success","nameLocation":"5451:7:42","nodeType":"VariableDeclaration","scope":3876,"src":"5446:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3858,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:42","nodeType":"VariableDeclaration","scope":3876,"src":"5460:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3860,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3868,"initialValue":{"arguments":[{"id":3866,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"5513:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3862,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"5487:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:42","memberName":"call","nodeType":"MemberAccess","src":"5487:11:42","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"5506:5:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:42","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:42"},{"expression":{"arguments":[{"id":3870,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"5562:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3871,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"5570:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3872,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"5579:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3873,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"5591:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3869,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"5535:26:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3846,"id":3875,"nodeType":"Return","src":"5528:76:42"}]},"documentation":{"id":3834,"nodeType":"StructuredDocumentation","src":"4923:237:42","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3877,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:42","nodeType":"FunctionDefinition","parameters":{"id":3843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3836,"mutability":"mutable","name":"target","nameLocation":"5213:6:42","nodeType":"VariableDeclaration","scope":3877,"src":"5205:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3835,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3838,"mutability":"mutable","name":"data","nameLocation":"5242:4:42","nodeType":"VariableDeclaration","scope":3877,"src":"5229:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3837,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3840,"mutability":"mutable","name":"value","nameLocation":"5264:5:42","nodeType":"VariableDeclaration","scope":3877,"src":"5256:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3839,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3842,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:42","nodeType":"VariableDeclaration","scope":3877,"src":"5279:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3841,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:42"},"returnParameters":{"id":3846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3877,"src":"5330:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3844,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:42"},"scope":4053,"src":"5165:446:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3893,"nodeType":"Block","src":"5888:97:42","statements":[{"expression":{"arguments":[{"id":3888,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"5924:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3889,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"5932:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3887,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3894,3923],"referencedDeclaration":3923,"src":"5905:18:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3886,"id":3892,"nodeType":"Return","src":"5898:80:42"}]},"documentation":{"id":3878,"nodeType":"StructuredDocumentation","src":"5617:166:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3894,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:42","nodeType":"FunctionDefinition","parameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"mutability":"mutable","name":"target","nameLocation":"5824:6:42","nodeType":"VariableDeclaration","scope":3894,"src":"5816:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3882,"mutability":"mutable","name":"data","nameLocation":"5845:4:42","nodeType":"VariableDeclaration","scope":3894,"src":"5832:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3881,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:42"},"returnParameters":{"id":3886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3894,"src":"5874:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3884,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:42"},"scope":4053,"src":"5788:197:42","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3922,"nodeType":"Block","src":"6327:168:42","statements":[{"assignments":[3907,3909],"declarations":[{"constant":false,"id":3907,"mutability":"mutable","name":"success","nameLocation":"6343:7:42","nodeType":"VariableDeclaration","scope":3922,"src":"6338:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3906,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3909,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:42","nodeType":"VariableDeclaration","scope":3922,"src":"6352:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3908,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3914,"initialValue":{"arguments":[{"id":3912,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"6397:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3910,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3897,"src":"6379:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:42","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:42","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:42"},{"expression":{"arguments":[{"id":3916,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3897,"src":"6446:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3917,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"6454:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3918,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3909,"src":"6463:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3919,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6475:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3915,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"6419:26:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3905,"id":3921,"nodeType":"Return","src":"6412:76:42"}]},"documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"5991:173:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3923,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:42","nodeType":"FunctionDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"target","nameLocation":"6214:6:42","nodeType":"VariableDeclaration","scope":3923,"src":"6206:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3896,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3899,"mutability":"mutable","name":"data","nameLocation":"6243:4:42","nodeType":"VariableDeclaration","scope":3923,"src":"6230:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3898,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3901,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:42","nodeType":"VariableDeclaration","scope":3923,"src":"6257:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3900,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:42"},"returnParameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3923,"src":"6313:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3903,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:42"},"scope":4053,"src":"6169:326:42","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3939,"nodeType":"Block","src":"6771:101:42","statements":[{"expression":{"arguments":[{"id":3934,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"6809:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3935,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"6817:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3933,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3940,3969],"referencedDeclaration":3969,"src":"6788:20:42","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3932,"id":3938,"nodeType":"Return","src":"6781:84:42"}]},"documentation":{"id":3924,"nodeType":"StructuredDocumentation","src":"6501:168:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3940,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:42","nodeType":"FunctionDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"target","nameLocation":"6712:6:42","nodeType":"VariableDeclaration","scope":3940,"src":"6704:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"data","nameLocation":"6733:4:42","nodeType":"VariableDeclaration","scope":3940,"src":"6720:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3927,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:42"},"returnParameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3940,"src":"6757:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3930,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:42"},"scope":4053,"src":"6674:198:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3968,"nodeType":"Block","src":"7213:170:42","statements":[{"assignments":[3953,3955],"declarations":[{"constant":false,"id":3953,"mutability":"mutable","name":"success","nameLocation":"7229:7:42","nodeType":"VariableDeclaration","scope":3968,"src":"7224:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3952,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3955,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:42","nodeType":"VariableDeclaration","scope":3968,"src":"7238:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3954,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3960,"initialValue":{"arguments":[{"id":3958,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"7285:4:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3956,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"7265:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:42","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:42","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:42"},{"expression":{"arguments":[{"id":3962,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"7334:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3963,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"7342:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3964,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"7351:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3965,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"7363:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3961,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"7307:26:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3951,"id":3967,"nodeType":"Return","src":"7300:76:42"}]},"documentation":{"id":3941,"nodeType":"StructuredDocumentation","src":"6878:175:42","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3969,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:42","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"target","nameLocation":"7105:6:42","nodeType":"VariableDeclaration","scope":3969,"src":"7097:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3942,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3945,"mutability":"mutable","name":"data","nameLocation":"7134:4:42","nodeType":"VariableDeclaration","scope":3969,"src":"7121:17:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3944,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:42","nodeType":"VariableDeclaration","scope":3969,"src":"7148:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3946,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:42"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3969,"src":"7199:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3949,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:42"},"scope":4053,"src":"7058:325:42","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4007,"nodeType":"Block","src":"7865:434:42","statements":[{"condition":{"id":3983,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"7879:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4005,"nodeType":"Block","src":"8235:58:42","statements":[{"expression":{"arguments":[{"id":4001,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"8257:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4002,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"8269:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4000,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"8249:7:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4004,"nodeType":"ExpressionStatement","src":"8249:33:42"}]},"id":4006,"nodeType":"IfStatement","src":"7875:418:42","trueBody":{"id":3999,"nodeType":"Block","src":"7888:341:42","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3984,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"7906:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:42","memberName":"length","nodeType":"MemberAccess","src":"7906:17:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3996,"nodeType":"IfStatement","src":"7902:286:42","trueBody":{"id":3995,"nodeType":"Block","src":"7930:258:42","statements":[{"expression":{"arguments":[{"arguments":[{"id":3990,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"8132:6:42","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3989,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"8121:10:42","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:42","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3988,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:42","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3994,"nodeType":"ExpressionStatement","src":"8113:60:42"}]}},{"expression":{"id":3997,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"8208:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3982,"id":3998,"nodeType":"Return","src":"8201:17:42"}]}}]},"documentation":{"id":3970,"nodeType":"StructuredDocumentation","src":"7389:277:42","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":4008,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:42","nodeType":"FunctionDefinition","parameters":{"id":3979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3972,"mutability":"mutable","name":"target","nameLocation":"7724:6:42","nodeType":"VariableDeclaration","scope":4008,"src":"7716:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3971,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3974,"mutability":"mutable","name":"success","nameLocation":"7745:7:42","nodeType":"VariableDeclaration","scope":4008,"src":"7740:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3973,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3976,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:42","nodeType":"VariableDeclaration","scope":4008,"src":"7762:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3975,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3978,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:42","nodeType":"VariableDeclaration","scope":4008,"src":"7795:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3977,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:42"},"returnParameters":{"id":3982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4008,"src":"7851:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3980,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:42"},"scope":4053,"src":"7671:628:42","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4031,"nodeType":"Block","src":"8680:135:42","statements":[{"condition":{"id":4020,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"8694:7:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4029,"nodeType":"Block","src":"8751:58:42","statements":[{"expression":{"arguments":[{"id":4025,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8773:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4026,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"8785:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4024,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"8765:7:42","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4028,"nodeType":"ExpressionStatement","src":"8765:33:42"}]},"id":4030,"nodeType":"IfStatement","src":"8690:119:42","trueBody":{"id":4023,"nodeType":"Block","src":"8703:42:42","statements":[{"expression":{"id":4021,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8724:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4019,"id":4022,"nodeType":"Return","src":"8717:17:42"}]}}]},"documentation":{"id":4009,"nodeType":"StructuredDocumentation","src":"8305:210:42","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":4032,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:42","nodeType":"FunctionDefinition","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"success","nameLocation":"8560:7:42","nodeType":"VariableDeclaration","scope":4032,"src":"8555:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4010,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4013,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:42","nodeType":"VariableDeclaration","scope":4032,"src":"8577:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4012,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4015,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:42","nodeType":"VariableDeclaration","scope":4032,"src":"8610:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4014,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:42"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4032,"src":"8666:12:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4017,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:42"},"scope":4053,"src":"8520:295:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4051,"nodeType":"Block","src":"8904:457:42","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4039,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"8980:10:42","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:42","memberName":"length","nodeType":"MemberAccess","src":"8980:17:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:42","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4049,"nodeType":"Block","src":"9310:45:42","statements":[{"expression":{"arguments":[{"id":4046,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"9331:12:42","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4045,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:42","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:42","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4048,"nodeType":"ExpressionStatement","src":"9324:20:42"}]},"id":4050,"nodeType":"IfStatement","src":"8976:379:42","trueBody":{"id":4044,"nodeType":"Block","src":"9003:301:42","statements":[{"AST":{"nativeSrc":"9161:133:42","nodeType":"YulBlock","src":"9161:133:42","statements":[{"nativeSrc":"9179:40:42","nodeType":"YulVariableDeclaration","src":"9179:40:42","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:42","nodeType":"YulIdentifier","src":"9208:10:42"}],"functionName":{"name":"mload","nativeSrc":"9202:5:42","nodeType":"YulIdentifier","src":"9202:5:42"},"nativeSrc":"9202:17:42","nodeType":"YulFunctionCall","src":"9202:17:42"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:42","nodeType":"YulTypedName","src":"9183:15:42","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:42","nodeType":"YulLiteral","src":"9247:2:42","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:42","nodeType":"YulIdentifier","src":"9251:10:42"}],"functionName":{"name":"add","nativeSrc":"9243:3:42","nodeType":"YulIdentifier","src":"9243:3:42"},"nativeSrc":"9243:19:42","nodeType":"YulFunctionCall","src":"9243:19:42"},{"name":"returndata_size","nativeSrc":"9264:15:42","nodeType":"YulIdentifier","src":"9264:15:42"}],"functionName":{"name":"revert","nativeSrc":"9236:6:42","nodeType":"YulIdentifier","src":"9236:6:42"},"nativeSrc":"9236:44:42","nodeType":"YulFunctionCall","src":"9236:44:42"},"nativeSrc":"9236:44:42","nodeType":"YulExpressionStatement","src":"9236:44:42"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4034,"isOffset":false,"isSlot":false,"src":"9208:10:42","valueSize":1},{"declaration":4034,"isOffset":false,"isSlot":false,"src":"9251:10:42","valueSize":1}],"id":4043,"nodeType":"InlineAssembly","src":"9152:142:42"}]}}]},"id":4052,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:42","nodeType":"FunctionDefinition","parameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4034,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:42","nodeType":"VariableDeclaration","scope":4052,"src":"8838:23:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4033,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4036,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:42","nodeType":"VariableDeclaration","scope":4052,"src":"8863:26:42","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4035,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:42"},"returnParameters":{"id":4038,"nodeType":"ParameterList","parameters":[],"src":"8904:0:42"},"scope":4053,"src":"8821:540:42","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4054,"src":"194:9169:42","usedErrors":[],"usedEvents":[]}],"src":"101:9263:42"},"id":42},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4075]},"id":4076,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4055,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:43"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4056,"nodeType":"StructuredDocumentation","src":"111:496:43","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4075,"linearizedBaseContracts":[4075],"name":"Context","nameLocation":"626:7:43","nodeType":"ContractDefinition","nodes":[{"body":{"id":4064,"nodeType":"Block","src":"702:34:43","statements":[{"expression":{"expression":{"id":4061,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:43","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:43","memberName":"sender","nodeType":"MemberAccess","src":"719:10:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4060,"id":4063,"nodeType":"Return","src":"712:17:43"}]},"id":4065,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:43","nodeType":"FunctionDefinition","parameters":{"id":4057,"nodeType":"ParameterList","parameters":[],"src":"659:2:43"},"returnParameters":{"id":4060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4065,"src":"693:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4058,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:43"},"scope":4075,"src":"640:96:43","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4073,"nodeType":"Block","src":"809:32:43","statements":[{"expression":{"expression":{"id":4070,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:43","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:43","memberName":"data","nodeType":"MemberAccess","src":"826:8:43","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4069,"id":4072,"nodeType":"Return","src":"819:15:43"}]},"id":4074,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:43","nodeType":"FunctionDefinition","parameters":{"id":4066,"nodeType":"ParameterList","parameters":[],"src":"759:2:43"},"returnParameters":{"id":4069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4074,"src":"793:14:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4067,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:43"},"scope":4075,"src":"742:99:43","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4076,"src":"608:235:43","usedErrors":[],"usedEvents":[]}],"src":"86:758:43"},"id":43},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[4185]},"id":4186,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4077,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:44"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":4078,"nodeType":"StructuredDocumentation","src":"218:1201:44","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":4185,"linearizedBaseContracts":[4185],"name":"StorageSlot","nameLocation":"1428:11:44","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":4081,"members":[{"constant":false,"id":4080,"mutability":"mutable","name":"value","nameLocation":"1483:5:44","nodeType":"VariableDeclaration","scope":4081,"src":"1475:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4079,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:44","nodeType":"StructDefinition","scope":4185,"src":"1446:49:44","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":4084,"members":[{"constant":false,"id":4083,"mutability":"mutable","name":"value","nameLocation":"1535:5:44","nodeType":"VariableDeclaration","scope":4084,"src":"1530:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4082,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:44","nodeType":"StructDefinition","scope":4185,"src":"1501:46:44","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":4087,"members":[{"constant":false,"id":4086,"mutability":"mutable","name":"value","nameLocation":"1590:5:44","nodeType":"VariableDeclaration","scope":4087,"src":"1582:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:44","nodeType":"StructDefinition","scope":4185,"src":"1553:49:44","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":4090,"members":[{"constant":false,"id":4089,"mutability":"mutable","name":"value","nameLocation":"1645:5:44","nodeType":"VariableDeclaration","scope":4090,"src":"1637:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4088,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:44","nodeType":"StructDefinition","scope":4185,"src":"1608:49:44","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":4093,"members":[{"constant":false,"id":4092,"mutability":"mutable","name":"value","nameLocation":"1698:5:44","nodeType":"VariableDeclaration","scope":4093,"src":"1691:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4091,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:44","nodeType":"StructDefinition","scope":4185,"src":"1663:47:44","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":4096,"members":[{"constant":false,"id":4095,"mutability":"mutable","name":"value","nameLocation":"1749:5:44","nodeType":"VariableDeclaration","scope":4096,"src":"1743:11:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4094,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:44","nodeType":"StructDefinition","scope":4185,"src":"1716:45:44","visibility":"public"},{"body":{"id":4106,"nodeType":"Block","src":"1943:106:44","statements":[{"AST":{"nativeSrc":"2005:38:44","nodeType":"YulBlock","src":"2005:38:44","statements":[{"nativeSrc":"2019:14:44","nodeType":"YulAssignment","src":"2019:14:44","value":{"name":"slot","nativeSrc":"2029:4:44","nodeType":"YulIdentifier","src":"2029:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:44","nodeType":"YulIdentifier","src":"2019:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4103,"isOffset":false,"isSlot":true,"src":"2019:6:44","suffix":"slot","valueSize":1},{"declaration":4099,"isOffset":false,"isSlot":false,"src":"2029:4:44","valueSize":1}],"id":4105,"nodeType":"InlineAssembly","src":"1996:47:44"}]},"documentation":{"id":4097,"nodeType":"StructuredDocumentation","src":"1767:87:44","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":4107,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:44","nodeType":"FunctionDefinition","parameters":{"id":4100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4099,"mutability":"mutable","name":"slot","nameLocation":"1891:4:44","nodeType":"VariableDeclaration","scope":4107,"src":"1883:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:44"},"returnParameters":{"id":4104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4103,"mutability":"mutable","name":"r","nameLocation":"1940:1:44","nodeType":"VariableDeclaration","scope":4107,"src":"1920:21:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4081_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":4102,"nodeType":"UserDefinedTypeName","pathNode":{"id":4101,"name":"AddressSlot","nameLocations":["1920:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":4081,"src":"1920:11:44"},"referencedDeclaration":4081,"src":"1920:11:44","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4081_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:44"},"scope":4185,"src":"1859:190:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4117,"nodeType":"Block","src":"2231:106:44","statements":[{"AST":{"nativeSrc":"2293:38:44","nodeType":"YulBlock","src":"2293:38:44","statements":[{"nativeSrc":"2307:14:44","nodeType":"YulAssignment","src":"2307:14:44","value":{"name":"slot","nativeSrc":"2317:4:44","nodeType":"YulIdentifier","src":"2317:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:44","nodeType":"YulIdentifier","src":"2307:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4114,"isOffset":false,"isSlot":true,"src":"2307:6:44","suffix":"slot","valueSize":1},{"declaration":4110,"isOffset":false,"isSlot":false,"src":"2317:4:44","valueSize":1}],"id":4116,"nodeType":"InlineAssembly","src":"2284:47:44"}]},"documentation":{"id":4108,"nodeType":"StructuredDocumentation","src":"2055:87:44","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":4118,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:44","nodeType":"FunctionDefinition","parameters":{"id":4111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4110,"mutability":"mutable","name":"slot","nameLocation":"2179:4:44","nodeType":"VariableDeclaration","scope":4118,"src":"2171:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:44"},"returnParameters":{"id":4115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4114,"mutability":"mutable","name":"r","nameLocation":"2228:1:44","nodeType":"VariableDeclaration","scope":4118,"src":"2208:21:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4084_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":4113,"nodeType":"UserDefinedTypeName","pathNode":{"id":4112,"name":"BooleanSlot","nameLocations":["2208:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":4084,"src":"2208:11:44"},"referencedDeclaration":4084,"src":"2208:11:44","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4084_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:44"},"scope":4185,"src":"2147:190:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4128,"nodeType":"Block","src":"2519:106:44","statements":[{"AST":{"nativeSrc":"2581:38:44","nodeType":"YulBlock","src":"2581:38:44","statements":[{"nativeSrc":"2595:14:44","nodeType":"YulAssignment","src":"2595:14:44","value":{"name":"slot","nativeSrc":"2605:4:44","nodeType":"YulIdentifier","src":"2605:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:44","nodeType":"YulIdentifier","src":"2595:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4125,"isOffset":false,"isSlot":true,"src":"2595:6:44","suffix":"slot","valueSize":1},{"declaration":4121,"isOffset":false,"isSlot":false,"src":"2605:4:44","valueSize":1}],"id":4127,"nodeType":"InlineAssembly","src":"2572:47:44"}]},"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"2343:87:44","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":4129,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:44","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4121,"mutability":"mutable","name":"slot","nameLocation":"2467:4:44","nodeType":"VariableDeclaration","scope":4129,"src":"2459:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:44"},"returnParameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4125,"mutability":"mutable","name":"r","nameLocation":"2516:1:44","nodeType":"VariableDeclaration","scope":4129,"src":"2496:21:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4087_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":4124,"nodeType":"UserDefinedTypeName","pathNode":{"id":4123,"name":"Bytes32Slot","nameLocations":["2496:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":4087,"src":"2496:11:44"},"referencedDeclaration":4087,"src":"2496:11:44","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4087_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:44"},"scope":4185,"src":"2435:190:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4139,"nodeType":"Block","src":"2807:106:44","statements":[{"AST":{"nativeSrc":"2869:38:44","nodeType":"YulBlock","src":"2869:38:44","statements":[{"nativeSrc":"2883:14:44","nodeType":"YulAssignment","src":"2883:14:44","value":{"name":"slot","nativeSrc":"2893:4:44","nodeType":"YulIdentifier","src":"2893:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:44","nodeType":"YulIdentifier","src":"2883:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4136,"isOffset":false,"isSlot":true,"src":"2883:6:44","suffix":"slot","valueSize":1},{"declaration":4132,"isOffset":false,"isSlot":false,"src":"2893:4:44","valueSize":1}],"id":4138,"nodeType":"InlineAssembly","src":"2860:47:44"}]},"documentation":{"id":4130,"nodeType":"StructuredDocumentation","src":"2631:87:44","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":4140,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:44","nodeType":"FunctionDefinition","parameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"slot","nameLocation":"2755:4:44","nodeType":"VariableDeclaration","scope":4140,"src":"2747:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:44"},"returnParameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4136,"mutability":"mutable","name":"r","nameLocation":"2804:1:44","nodeType":"VariableDeclaration","scope":4140,"src":"2784:21:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":4135,"nodeType":"UserDefinedTypeName","pathNode":{"id":4134,"name":"Uint256Slot","nameLocations":["2784:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"2784:11:44"},"referencedDeclaration":4090,"src":"2784:11:44","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4090_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:44"},"scope":4185,"src":"2723:190:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4150,"nodeType":"Block","src":"3092:106:44","statements":[{"AST":{"nativeSrc":"3154:38:44","nodeType":"YulBlock","src":"3154:38:44","statements":[{"nativeSrc":"3168:14:44","nodeType":"YulAssignment","src":"3168:14:44","value":{"name":"slot","nativeSrc":"3178:4:44","nodeType":"YulIdentifier","src":"3178:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:44","nodeType":"YulIdentifier","src":"3168:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4147,"isOffset":false,"isSlot":true,"src":"3168:6:44","suffix":"slot","valueSize":1},{"declaration":4143,"isOffset":false,"isSlot":false,"src":"3178:4:44","valueSize":1}],"id":4149,"nodeType":"InlineAssembly","src":"3145:47:44"}]},"documentation":{"id":4141,"nodeType":"StructuredDocumentation","src":"2919:86:44","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":4151,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:44","nodeType":"FunctionDefinition","parameters":{"id":4144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4143,"mutability":"mutable","name":"slot","nameLocation":"3041:4:44","nodeType":"VariableDeclaration","scope":4151,"src":"3033:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:44"},"returnParameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"r","nameLocation":"3089:1:44","nodeType":"VariableDeclaration","scope":4151,"src":"3070:20:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4093_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4146,"nodeType":"UserDefinedTypeName","pathNode":{"id":4145,"name":"StringSlot","nameLocations":["3070:10:44"],"nodeType":"IdentifierPath","referencedDeclaration":4093,"src":"3070:10:44"},"referencedDeclaration":4093,"src":"3070:10:44","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4093_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:44"},"scope":4185,"src":"3010:188:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4161,"nodeType":"Block","src":"3400:112:44","statements":[{"AST":{"nativeSrc":"3462:44:44","nodeType":"YulBlock","src":"3462:44:44","statements":[{"nativeSrc":"3476:20:44","nodeType":"YulAssignment","src":"3476:20:44","value":{"name":"store.slot","nativeSrc":"3486:10:44","nodeType":"YulIdentifier","src":"3486:10:44"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:44","nodeType":"YulIdentifier","src":"3476:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4158,"isOffset":false,"isSlot":true,"src":"3476:6:44","suffix":"slot","valueSize":1},{"declaration":4154,"isOffset":false,"isSlot":true,"src":"3486:10:44","suffix":"slot","valueSize":1}],"id":4160,"nodeType":"InlineAssembly","src":"3453:53:44"}]},"documentation":{"id":4152,"nodeType":"StructuredDocumentation","src":"3204:101:44","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":4162,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:44","nodeType":"FunctionDefinition","parameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4154,"mutability":"mutable","name":"store","nameLocation":"3348:5:44","nodeType":"VariableDeclaration","scope":4162,"src":"3333:20:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4153,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:44"},"returnParameters":{"id":4159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4158,"mutability":"mutable","name":"r","nameLocation":"3397:1:44","nodeType":"VariableDeclaration","scope":4162,"src":"3378:20:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4093_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4157,"nodeType":"UserDefinedTypeName","pathNode":{"id":4156,"name":"StringSlot","nameLocations":["3378:10:44"],"nodeType":"IdentifierPath","referencedDeclaration":4093,"src":"3378:10:44"},"referencedDeclaration":4093,"src":"3378:10:44","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4093_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:44"},"scope":4185,"src":"3310:202:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4172,"nodeType":"Block","src":"3688:106:44","statements":[{"AST":{"nativeSrc":"3750:38:44","nodeType":"YulBlock","src":"3750:38:44","statements":[{"nativeSrc":"3764:14:44","nodeType":"YulAssignment","src":"3764:14:44","value":{"name":"slot","nativeSrc":"3774:4:44","nodeType":"YulIdentifier","src":"3774:4:44"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:44","nodeType":"YulIdentifier","src":"3764:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4169,"isOffset":false,"isSlot":true,"src":"3764:6:44","suffix":"slot","valueSize":1},{"declaration":4165,"isOffset":false,"isSlot":false,"src":"3774:4:44","valueSize":1}],"id":4171,"nodeType":"InlineAssembly","src":"3741:47:44"}]},"documentation":{"id":4163,"nodeType":"StructuredDocumentation","src":"3518:85:44","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":4173,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:44","nodeType":"FunctionDefinition","parameters":{"id":4166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4165,"mutability":"mutable","name":"slot","nameLocation":"3638:4:44","nodeType":"VariableDeclaration","scope":4173,"src":"3630:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:44"},"returnParameters":{"id":4170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4169,"mutability":"mutable","name":"r","nameLocation":"3685:1:44","nodeType":"VariableDeclaration","scope":4173,"src":"3667:19:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4096_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4168,"nodeType":"UserDefinedTypeName","pathNode":{"id":4167,"name":"BytesSlot","nameLocations":["3667:9:44"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"3667:9:44"},"referencedDeclaration":4096,"src":"3667:9:44","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4096_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:44"},"scope":4185,"src":"3608:186:44","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4183,"nodeType":"Block","src":"3991:112:44","statements":[{"AST":{"nativeSrc":"4053:44:44","nodeType":"YulBlock","src":"4053:44:44","statements":[{"nativeSrc":"4067:20:44","nodeType":"YulAssignment","src":"4067:20:44","value":{"name":"store.slot","nativeSrc":"4077:10:44","nodeType":"YulIdentifier","src":"4077:10:44"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:44","nodeType":"YulIdentifier","src":"4067:6:44"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4180,"isOffset":false,"isSlot":true,"src":"4067:6:44","suffix":"slot","valueSize":1},{"declaration":4176,"isOffset":false,"isSlot":true,"src":"4077:10:44","suffix":"slot","valueSize":1}],"id":4182,"nodeType":"InlineAssembly","src":"4044:53:44"}]},"documentation":{"id":4174,"nodeType":"StructuredDocumentation","src":"3800:99:44","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":4184,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:44","nodeType":"FunctionDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4176,"mutability":"mutable","name":"store","nameLocation":"3940:5:44","nodeType":"VariableDeclaration","scope":4184,"src":"3926:19:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4175,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:44"},"returnParameters":{"id":4181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"mutability":"mutable","name":"r","nameLocation":"3988:1:44","nodeType":"VariableDeclaration","scope":4184,"src":"3970:19:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4096_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4179,"nodeType":"UserDefinedTypeName","pathNode":{"id":4178,"name":"BytesSlot","nameLocations":["3970:9:44"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"3970:9:44"},"referencedDeclaration":4096,"src":"3970:9:44","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4096_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:44"},"scope":4185,"src":"3904:199:44","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4186,"src":"1420:2685:44","usedErrors":[],"usedEvents":[]}],"src":"193:3913:44"},"id":44},"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol":{"ast":{"absolutePath":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol","exportedSymbols":{"IForwarderRegistry":[1195],"IIssuersDIDRegistry":[4969],"IRevocationRegistry":[5000],"ITokenMetadataResolver":[3536],"OpenCampusCertificateNFTv1":[4947],"OpenCampusCertificateNFTv1Mock":[4237]},"id":4238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4187,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:45"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":4189,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4238,"sourceUnit":1196,"src":"57:114:45","symbolAliases":[{"foreign":{"id":4188,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"65:18:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","id":4191,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4238,"sourceUnit":3537,"src":"172:130:45","symbolAliases":[{"foreign":{"id":4190,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"180:22:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./../../vc/interfaces/IIssuersDIDRegistry.sol","id":4193,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4238,"sourceUnit":4970,"src":"303:82:45","symbolAliases":[{"foreign":{"id":4192,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"311:19:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./../../vc/interfaces/IRevocationRegistry.sol","id":4195,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4238,"sourceUnit":5001,"src":"386:82:45","symbolAliases":[{"foreign":{"id":4194,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"394:19:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/OpenCampusCertificateNFTv1.sol","file":"./../../vc/OpenCampusCertificateNFTv1.sol","id":4197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4238,"sourceUnit":4948,"src":"469:85:45","symbolAliases":[{"foreign":{"id":4196,"name":"OpenCampusCertificateNFTv1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"477:26:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4198,"name":"OpenCampusCertificateNFTv1","nameLocations":["599:26:45"],"nodeType":"IdentifierPath","referencedDeclaration":4947,"src":"599:26:45"},"id":4199,"nodeType":"InheritanceSpecifier","src":"599:26:45"}],"canonicalName":"OpenCampusCertificateNFTv1Mock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4237,"linearizedBaseContracts":[4237,4947,1049,1181,1169,22,55,882,899,227,179,4075,331,315,1325,1405,1666,3522,1592],"name":"OpenCampusCertificateNFTv1Mock","nameLocation":"565:30:45","nodeType":"ContractDefinition","nodes":[{"body":{"id":4226,"nodeType":"Block","src":"1023:2:45","statements":[]},"id":4227,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4218,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"929:9:45","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4219,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"940:11:45","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4220,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"953:17:45","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},{"id":4221,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"972:16:45","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},{"id":4222,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"990:18:45","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},{"id":4223,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"1010:11:45","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}}],"id":4224,"kind":"baseConstructorSpecifier","modifierName":{"id":4217,"name":"OpenCampusCertificateNFTv1","nameLocations":["902:26:45"],"nodeType":"IdentifierPath","referencedDeclaration":4947,"src":"902:26:45"},"nodeType":"ModifierInvocation","src":"902:120:45"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4201,"mutability":"mutable","name":"tokenName","nameLocation":"667:9:45","nodeType":"VariableDeclaration","scope":4227,"src":"653:23:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4200,"name":"string","nodeType":"ElementaryTypeName","src":"653:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4203,"mutability":"mutable","name":"tokenSymbol","nameLocation":"700:11:45","nodeType":"VariableDeclaration","scope":4227,"src":"686:25:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4202,"name":"string","nodeType":"ElementaryTypeName","src":"686:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4206,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"740:17:45","nodeType":"VariableDeclaration","scope":4227,"src":"721:36:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":4205,"nodeType":"UserDefinedTypeName","pathNode":{"id":4204,"name":"IForwarderRegistry","nameLocations":["721:18:45"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"721:18:45"},"referencedDeclaration":1195,"src":"721:18:45","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"constant":false,"id":4209,"mutability":"mutable","name":"metadataResolver","nameLocation":"790:16:45","nodeType":"VariableDeclaration","scope":4227,"src":"767:39:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":4208,"nodeType":"UserDefinedTypeName","pathNode":{"id":4207,"name":"ITokenMetadataResolver","nameLocations":["767:22:45"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"767:22:45"},"referencedDeclaration":3536,"src":"767:22:45","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"},{"constant":false,"id":4212,"mutability":"mutable","name":"revocationRegistry","nameLocation":"836:18:45","nodeType":"VariableDeclaration","scope":4227,"src":"816:38:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4211,"nodeType":"UserDefinedTypeName","pathNode":{"id":4210,"name":"IRevocationRegistry","nameLocations":["816:19:45"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"816:19:45"},"referencedDeclaration":5000,"src":"816:19:45","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"constant":false,"id":4215,"mutability":"mutable","name":"didRegistry","nameLocation":"884:11:45","nodeType":"VariableDeclaration","scope":4227,"src":"864:31:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4214,"nodeType":"UserDefinedTypeName","pathNode":{"id":4213,"name":"IIssuersDIDRegistry","nameLocations":["864:19:45"],"nodeType":"IdentifierPath","referencedDeclaration":4969,"src":"864:19:45"},"referencedDeclaration":4969,"src":"864:19:45","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"}],"src":"643:258:45"},"returnParameters":{"id":4225,"nodeType":"ParameterList","parameters":[],"src":"1023:0:45"},"scope":4237,"src":"632:393:45","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4235,"nodeType":"Block","src":"1091:34:45","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4232,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[4946],"referencedDeclaration":4946,"src":"1108:8:45","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1108:10:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4231,"id":4234,"nodeType":"Return","src":"1101:17:45"}]},"functionSelector":"31e66e1e","id":4236,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"1040:9:45","nodeType":"FunctionDefinition","parameters":{"id":4228,"nodeType":"ParameterList","parameters":[],"src":"1049:2:45"},"returnParameters":{"id":4231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4236,"src":"1075:14:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4229,"name":"bytes","nodeType":"ElementaryTypeName","src":"1075:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1074:16:45"},"scope":4237,"src":"1031:94:45","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4238,"src":"556:571:45","usedErrors":[236,259,887,1412,1417,1426,1429,1434,1443,1450,1457,1460,1465,1470,4503],"usedEvents":[277,286,295,1488,1497,1506]}],"src":"32:1096:45"},"id":45},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateNFTMinter.sol","exportedSymbols":{"CertificateNFTv1MetaData":[5018],"ContractOwnership":[55],"ContractOwnershipStorage":[852],"IIssuersDIDRegistry":[4969],"IRevocationRegistry":[5000],"OpenCampusCertificateNFTMinter":[4413],"OpenCampusCertificateNFTv1":[4947]},"id":4414,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4239,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:46"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":4241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":56,"src":"58:101:46","symbolAliases":[{"foreign":{"id":4240,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"66:17:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":4243,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":853,"src":"160:125:46","symbolAliases":[{"foreign":{"id":4242,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"168:24:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":4245,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":4970,"src":"286:73:46","symbolAliases":[{"foreign":{"id":4244,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"294:19:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":4247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":5001,"src":"360:73:46","symbolAliases":[{"foreign":{"id":4246,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"368:19:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","file":"./libraries/CertificateNFTv1MetaData.sol","id":4249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":5019,"src":"434:82:46","symbolAliases":[{"foreign":{"id":4248,"name":"CertificateNFTv1MetaData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"442:24:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/OpenCampusCertificateNFTv1.sol","file":"./OpenCampusCertificateNFTv1.sol","id":4251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4414,"sourceUnit":4948,"src":"517:76:46","symbolAliases":[{"foreign":{"id":4250,"name":"OpenCampusCertificateNFTv1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4947,"src":"525:26:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4252,"name":"ContractOwnership","nameLocations":["638:17:46"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"638:17:46"},"id":4253,"nodeType":"InheritanceSpecifier","src":"638:17:46"}],"canonicalName":"OpenCampusCertificateNFTMinter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4413,"linearizedBaseContracts":[4413,55,882,899,227,4075,331],"name":"OpenCampusCertificateNFTMinter","nameLocation":"604:30:46","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4257,"libraryName":{"id":4254,"name":"ContractOwnershipStorage","nameLocations":["668:24:46"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"668:24:46"},"nodeType":"UsingForDirective","src":"662:67:46","typeName":{"id":4256,"nodeType":"UserDefinedTypeName","pathNode":{"id":4255,"name":"ContractOwnershipStorage.Layout","nameLocations":["697:24:46","722:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"697:31:46"},"referencedDeclaration":625,"src":"697:31:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"id":4260,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"774:12:46","nodeType":"VariableDeclaration","scope":4413,"src":"735:51:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4259,"nodeType":"UserDefinedTypeName","pathNode":{"id":4258,"name":"IIssuersDIDRegistry","nameLocations":["735:19:46"],"nodeType":"IdentifierPath","referencedDeclaration":4969,"src":"735:19:46"},"referencedDeclaration":4969,"src":"735:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":4263,"mutability":"immutable","name":"NFT_V1","nameLocation":"838:6:46","nodeType":"VariableDeclaration","scope":4413,"src":"792:52:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"},"typeName":{"id":4262,"nodeType":"UserDefinedTypeName","pathNode":{"id":4261,"name":"OpenCampusCertificateNFTv1","nameLocations":["792:26:46"],"nodeType":"IdentifierPath","referencedDeclaration":4947,"src":"792:26:46"},"referencedDeclaration":4947,"src":"792:26:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"visibility":"internal"},{"constant":false,"id":4266,"mutability":"mutable","name":"_revocationRegistry","nameLocation":"880:19:46","nodeType":"VariableDeclaration","scope":4413,"src":"851:48:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4265,"nodeType":"UserDefinedTypeName","pathNode":{"id":4264,"name":"IRevocationRegistry","nameLocations":["851:19:46"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"851:19:46"},"referencedDeclaration":5000,"src":"851:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"905:69:46","text":"@notice Thrown when the signature is invalid for the NFT payload."},"errorSelector":"8baa579f","id":4269,"name":"InvalidSignature","nameLocation":"985:16:46","nodeType":"ErrorDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[],"src":"1001:2:46"},"src":"979:25:46"},{"documentation":{"id":4270,"nodeType":"StructuredDocumentation","src":"1010:69:46","text":"@notice Thrown when the issuer is not one of the allowed issuers."},"errorSelector":"e41bfc58","id":4272,"name":"IssuerNotAllowed","nameLocation":"1090:16:46","nodeType":"ErrorDefinition","parameters":{"id":4271,"nodeType":"ParameterList","parameters":[],"src":"1106:2:46"},"src":"1084:25:46"},{"documentation":{"id":4273,"nodeType":"StructuredDocumentation","src":"1115:48:46","text":"@notice Thrown when the VC has been revoked."},"errorSelector":"6e803857","id":4275,"name":"VcRevoked","nameLocation":"1174:9:46","nodeType":"ErrorDefinition","parameters":{"id":4274,"nodeType":"ParameterList","parameters":[],"src":"1183:2:46"},"src":"1168:18:46"},{"body":{"id":4303,"nodeType":"Block","src":"1371:117:46","statements":[{"expression":{"id":4293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4291,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"1381:12:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4292,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4278,"src":"1396:11:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"src":"1381:26:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"id":4294,"nodeType":"ExpressionStatement","src":"1381:26:46"},{"expression":{"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4295,"name":"NFT_V1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"1417:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4296,"name":"nftv1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"1426:5:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"src":"1417:14:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"id":4298,"nodeType":"ExpressionStatement","src":"1417:14:46"},{"expression":{"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4299,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"1441:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4300,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"1463:18:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"src":"1441:40:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4302,"nodeType":"ExpressionStatement","src":"1441:40:46"}]},"id":4304,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":4287,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1359:3:46","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1363:6:46","memberName":"sender","nodeType":"MemberAccess","src":"1359:10:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4289,"kind":"baseConstructorSpecifier","modifierName":{"id":4286,"name":"ContractOwnership","nameLocations":["1341:17:46"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"1341:17:46"},"nodeType":"ModifierInvocation","src":"1341:29:46"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4278,"mutability":"mutable","name":"didRegistry","nameLocation":"1233:11:46","nodeType":"VariableDeclaration","scope":4304,"src":"1213:31:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4277,"nodeType":"UserDefinedTypeName","pathNode":{"id":4276,"name":"IIssuersDIDRegistry","nameLocations":["1213:19:46"],"nodeType":"IdentifierPath","referencedDeclaration":4969,"src":"1213:19:46"},"referencedDeclaration":4969,"src":"1213:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":4281,"mutability":"mutable","name":"nftv1","nameLocation":"1281:5:46","nodeType":"VariableDeclaration","scope":4304,"src":"1254:32:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"},"typeName":{"id":4280,"nodeType":"UserDefinedTypeName","pathNode":{"id":4279,"name":"OpenCampusCertificateNFTv1","nameLocations":["1254:26:46"],"nodeType":"IdentifierPath","referencedDeclaration":4947,"src":"1254:26:46"},"referencedDeclaration":4947,"src":"1254:26:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"visibility":"internal"},{"constant":false,"id":4284,"mutability":"mutable","name":"revocationRegistry","nameLocation":"1316:18:46","nodeType":"VariableDeclaration","scope":4304,"src":"1296:38:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4283,"nodeType":"UserDefinedTypeName","pathNode":{"id":4282,"name":"IRevocationRegistry","nameLocations":["1296:19:46"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"1296:19:46"},"referencedDeclaration":5000,"src":"1296:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"1203:137:46"},"returnParameters":{"id":4290,"nodeType":"ParameterList","parameters":[],"src":"1371:0:46"},"scope":4413,"src":"1192:296:46","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4324,"nodeType":"Block","src":"1657:137:46","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4316,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"1724:10:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1724:12:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4311,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1667:24:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1692:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1667:31:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1667:33:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1701:22:46","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1667:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1667:70:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4319,"nodeType":"ExpressionStatement","src":"1667:70:46"},{"expression":{"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4320,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"1747:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4321,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"1769:18:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"src":"1747:40:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4323,"nodeType":"ExpressionStatement","src":"1747:40:46"}]},"documentation":{"id":4305,"nodeType":"StructuredDocumentation","src":"1494:78:46","text":"@param revocationRegistry The address of the Revocation Registry contract."},"functionSelector":"95f94bc4","id":4325,"implemented":true,"kind":"function","modifiers":[],"name":"setRevocationRegistry","nameLocation":"1586:21:46","nodeType":"FunctionDefinition","parameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"mutability":"mutable","name":"revocationRegistry","nameLocation":"1628:18:46","nodeType":"VariableDeclaration","scope":4325,"src":"1608:38:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4307,"nodeType":"UserDefinedTypeName","pathNode":{"id":4306,"name":"IRevocationRegistry","nameLocations":["1608:19:46"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"1608:19:46"},"referencedDeclaration":5000,"src":"1608:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"1607:40:46"},"returnParameters":{"id":4310,"nodeType":"ParameterList","parameters":[],"src":"1657:0:46"},"scope":4413,"src":"1577:217:46","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4411,"nodeType":"Block","src":"2631:865:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4338,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"2675:9:46","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2685:6:46","memberName":"length","nodeType":"MemberAccess","src":"2675:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3635","id":4340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2695:2:46","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2675:22:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4345,"nodeType":"IfStatement","src":"2671:53:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4342,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"2706:16:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2706:18:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4344,"nodeType":"RevertStatement","src":"2699:25:46"}},{"assignments":[4347],"declarations":[{"constant":false,"id":4347,"mutability":"mutable","name":"v","nameLocation":"2741:1:46","nodeType":"VariableDeclaration","scope":4411,"src":"2735:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4346,"name":"uint8","nodeType":"ElementaryTypeName","src":"2735:5:46","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4348,"nodeType":"VariableDeclarationStatement","src":"2735:7:46"},{"assignments":[4350],"declarations":[{"constant":false,"id":4350,"mutability":"mutable","name":"r","nameLocation":"2760:1:46","nodeType":"VariableDeclaration","scope":4411,"src":"2752:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2752:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4351,"nodeType":"VariableDeclarationStatement","src":"2752:9:46"},{"assignments":[4353],"declarations":[{"constant":false,"id":4353,"mutability":"mutable","name":"s","nameLocation":"2779:1:46","nodeType":"VariableDeclaration","scope":4411,"src":"2771:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2771:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4354,"nodeType":"VariableDeclarationStatement","src":"2771:9:46"},{"AST":{"nativeSrc":"2799:177:46","nodeType":"YulBlock","src":"2799:177:46","statements":[{"nativeSrc":"2813:35:46","nodeType":"YulAssignment","src":"2813:35:46","value":{"arguments":[{"name":"signature.offset","nativeSrc":"2831:16:46","nodeType":"YulIdentifier","src":"2831:16:46"}],"functionName":{"name":"calldataload","nativeSrc":"2818:12:46","nodeType":"YulIdentifier","src":"2818:12:46"},"nativeSrc":"2818:30:46","nodeType":"YulFunctionCall","src":"2818:30:46"},"variableNames":[{"name":"r","nativeSrc":"2813:1:46","nodeType":"YulIdentifier","src":"2813:1:46"}]},{"nativeSrc":"2861:46:46","nodeType":"YulAssignment","src":"2861:46:46","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2883:16:46","nodeType":"YulIdentifier","src":"2883:16:46"},{"kind":"number","nativeSrc":"2901:4:46","nodeType":"YulLiteral","src":"2901:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2879:3:46","nodeType":"YulIdentifier","src":"2879:3:46"},"nativeSrc":"2879:27:46","nodeType":"YulFunctionCall","src":"2879:27:46"}],"functionName":{"name":"calldataload","nativeSrc":"2866:12:46","nodeType":"YulIdentifier","src":"2866:12:46"},"nativeSrc":"2866:41:46","nodeType":"YulFunctionCall","src":"2866:41:46"},"variableNames":[{"name":"s","nativeSrc":"2861:1:46","nodeType":"YulIdentifier","src":"2861:1:46"}]},{"nativeSrc":"2920:46:46","nodeType":"YulAssignment","src":"2920:46:46","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2942:16:46","nodeType":"YulIdentifier","src":"2942:16:46"},{"kind":"number","nativeSrc":"2960:4:46","nodeType":"YulLiteral","src":"2960:4:46","type":"","value":"0x21"}],"functionName":{"name":"add","nativeSrc":"2938:3:46","nodeType":"YulIdentifier","src":"2938:3:46"},"nativeSrc":"2938:27:46","nodeType":"YulFunctionCall","src":"2938:27:46"}],"functionName":{"name":"calldataload","nativeSrc":"2925:12:46","nodeType":"YulIdentifier","src":"2925:12:46"},"nativeSrc":"2925:41:46","nodeType":"YulFunctionCall","src":"2925:41:46"},"variableNames":[{"name":"v","nativeSrc":"2920:1:46","nodeType":"YulIdentifier","src":"2920:1:46"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4350,"isOffset":false,"isSlot":false,"src":"2813:1:46","valueSize":1},{"declaration":4353,"isOffset":false,"isSlot":false,"src":"2861:1:46","valueSize":1},{"declaration":4335,"isOffset":true,"isSlot":false,"src":"2831:16:46","suffix":"offset","valueSize":1},{"declaration":4335,"isOffset":true,"isSlot":false,"src":"2883:16:46","suffix":"offset","valueSize":1},{"declaration":4335,"isOffset":true,"isSlot":false,"src":"2942:16:46","suffix":"offset","valueSize":1},{"declaration":4347,"isOffset":false,"isSlot":false,"src":"2920:1:46","valueSize":1}],"id":4355,"nodeType":"InlineAssembly","src":"2790:186:46"},{"assignments":[4357],"declarations":[{"constant":false,"id":4357,"mutability":"mutable","name":"signer","nameLocation":"3050:6:46","nodeType":"VariableDeclaration","scope":4411,"src":"3042:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4356,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4371,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":4362,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"3090:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4363,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"3094:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4364,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"3103:8:46","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}],"expression":{"id":4360,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3079:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3083:6:46","memberName":"encode","nodeType":"MemberAccess","src":"3079:10:46","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:33:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4359,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3069:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3069:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4367,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"3115:1:46","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4368,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"3118:1:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4369,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"3121:1:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4358,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"3059:9:46","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3059:64:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3042:81:46"},{"assignments":[4373],"declarations":[{"constant":false,"id":4373,"mutability":"mutable","name":"hashedDid","nameLocation":"3141:9:46","nodeType":"VariableDeclaration","scope":4411,"src":"3133:17:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3133:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4381,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":4377,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"3180:8:46","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3189:9:46","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":5014,"src":"3180:18:46","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":4375,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3163:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3167:12:46","memberName":"encodePacked","nodeType":"MemberAccess","src":"3163:16:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3163:36:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4374,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3153:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3153:47:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3133:67:46"},{"condition":{"arguments":[{"id":4384,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4373,"src":"3236:9:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4385,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"3247:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4382,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"3215:12:46","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3228:7:46","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":4959,"src":"3215:20:46","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3215:39:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4409,"nodeType":"Block","src":"3440:50:46","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4406,"name":"IssuerNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"3461:16:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3461:18:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"RevertStatement","src":"3454:25:46"}]},"id":4410,"nodeType":"IfStatement","src":"3211:279:46","trueBody":{"id":4405,"nodeType":"Block","src":"3256:178:46","statements":[{"condition":{"arguments":[{"id":4389,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4373,"src":"3304:9:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4390,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"3315:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4387,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"3274:19:46","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3294:9:46","memberName":"isRevoked","nodeType":"MemberAccess","referencedDeclaration":4999,"src":"3274:29:46","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,uint256) view external returns (bool)"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3274:49:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4396,"nodeType":"IfStatement","src":"3270:106:46","trueBody":{"id":4395,"nodeType":"Block","src":"3325:51:46","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4392,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4275,"src":"3350:9:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3350:11:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4394,"nodeType":"RevertStatement","src":"3343:18:46"}]}},{"expression":{"arguments":[{"id":4400,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"3401:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4401,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"3405:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4402,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"3414:8:46","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}],"expression":{"id":4397,"name":"NFT_V1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"3389:6:46","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4947","typeString":"contract OpenCampusCertificateNFTv1"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:4:46","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":4606,"src":"3389:11:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_struct$_MetaData_$5017_memory_ptr_$returns$__$","typeString":"function (address,uint256,struct CertificateNFTv1MetaData.MetaData memory) external"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3389:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4404,"nodeType":"ExpressionStatement","src":"3389:34:46"}]}}]},"documentation":{"id":4326,"nodeType":"StructuredDocumentation","src":"1800:695:46","text":"@dev Reverts with `VcRevoked` error if the token being minted has been revoked.\n @dev Reverts with `IssuerNotAllowed` error if recovered issuer is not valid in the DIDRegistry.\n @dev Reverts with `InvalidSignature` error if the signature is not 65 bytes in length.\n @dev signature is ECDSA signature for (to, tokenId, metadata).\n @dev signature is a 65 bytes raw signature without compacting.\n @param to The address to which `tokenId` would be minted to.\n @param tokenId The id of the token to be minted.\n @param metadata On-chain metadata for the NFT.\n @param signature The ECDSA signature for the payload (`to`,`tokenId`,`metadata`)."},"functionSelector":"4d5b0423","id":4412,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2509:4:46","nodeType":"FunctionDefinition","parameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4328,"mutability":"mutable","name":"to","nameLocation":"2522:2:46","nodeType":"VariableDeclaration","scope":4412,"src":"2514:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4327,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4330,"mutability":"mutable","name":"tokenId","nameLocation":"2534:7:46","nodeType":"VariableDeclaration","scope":4412,"src":"2526:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2526:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4333,"mutability":"mutable","name":"metadata","nameLocation":"2586:8:46","nodeType":"VariableDeclaration","scope":4412,"src":"2543:51:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"},"typeName":{"id":4332,"nodeType":"UserDefinedTypeName","pathNode":{"id":4331,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2543:24:46","2568:8:46"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"2543:33:46"},"referencedDeclaration":5017,"src":"2543:33:46","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}},"visibility":"internal"},{"constant":false,"id":4335,"mutability":"mutable","name":"signature","nameLocation":"2611:9:46","nodeType":"VariableDeclaration","scope":4412,"src":"2596:24:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4334,"name":"bytes","nodeType":"ElementaryTypeName","src":"2596:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2513:108:46"},"returnParameters":{"id":4337,"nodeType":"ParameterList","parameters":[],"src":"2631:0:46"},"scope":4413,"src":"2500:996:46","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4414,"src":"595:2903:46","usedErrors":[259,887,4269,4272,4275],"usedEvents":[295]}],"src":"32:3467:46"},"id":46},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateNFTv1.sol","exportedSymbols":{"AccessControl":[22],"AccessControlStorage":[594],"Address":[4053],"CertificateNFTv1MetaData":[5018],"Context":[4075],"ContractOwnership":[55],"ContractOwnershipStorage":[852],"ERC721Metadata":[1325],"ERC721Storage":[3470],"ForwarderRegistryContext":[1049],"ForwarderRegistryContextBase":[1169],"IERC721":[1592],"IERC721Receiver":[1715],"IForwarderRegistry":[1195],"IIssuersDIDRegistry":[4969],"IRevocationRegistry":[5000],"ITokenMetadataResolver":[3536],"OpenCampusCertificateNFTv1":[4947],"Transfer":[1488]},"id":4948,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4415,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:47"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":4417,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":4054,"src":"75:66:47","symbolAliases":[{"foreign":{"id":4416,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"83:7:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":4419,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":4076,"src":"142:66:47","symbolAliases":[{"foreign":{"id":4418,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"150:7:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","id":4421,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":23,"src":"235:93:47","symbolAliases":[{"foreign":{"id":4420,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"243:13:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","id":4423,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":595,"src":"329:117:47","symbolAliases":[{"foreign":{"id":4422,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"337:20:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":4425,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":56,"src":"447:101:47","symbolAliases":[{"foreign":{"id":4424,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"455:17:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":4427,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":853,"src":"549:125:47","symbolAliases":[{"foreign":{"id":4426,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"557:24:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","id":4429,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1593,"src":"693:98:47","symbolAliases":[{"foreign":{"id":4428,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"701:7:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","id":4431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1716,"src":"792:114:47","symbolAliases":[{"foreign":{"id":4430,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"800:15:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","id":4433,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1326,"src":"907:101:47","symbolAliases":[{"foreign":{"id":4432,"name":"ERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"915:14:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","id":4435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1507,"src":"1009:100:47","symbolAliases":[{"foreign":{"id":4434,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"1017:8:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","id":4437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":3471,"src":"1110:109:47","symbolAliases":[{"foreign":{"id":4436,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"1118:13:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","id":4439,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":3537,"src":"1220:130:47","symbolAliases":[{"foreign":{"id":4438,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"1228:22:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":4441,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1196,"src":"1378:114:47","symbolAliases":[{"foreign":{"id":4440,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1386:18:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":4443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1170,"src":"1493:128:47","symbolAliases":[{"foreign":{"id":4442,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"1501:28:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":4445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":1050,"src":"1622:115:47","symbolAliases":[{"foreign":{"id":4444,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"1630:24:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":4447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":4970,"src":"1755:73:47","symbolAliases":[{"foreign":{"id":4446,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"1763:19:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":4449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":5001,"src":"1829:73:47","symbolAliases":[{"foreign":{"id":4448,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"1837:19:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","file":"./libraries/CertificateNFTv1MetaData.sol","id":4451,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4948,"sourceUnit":5019,"src":"1903:82:47","symbolAliases":[{"foreign":{"id":4450,"name":"CertificateNFTv1MetaData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"1911:24:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4452,"name":"IERC721","nameLocations":["2026:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":1592,"src":"2026:7:47"},"id":4453,"nodeType":"InheritanceSpecifier","src":"2026:7:47"},{"baseName":{"id":4454,"name":"ERC721Metadata","nameLocations":["2035:14:47"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"2035:14:47"},"id":4455,"nodeType":"InheritanceSpecifier","src":"2035:14:47"},{"baseName":{"id":4456,"name":"AccessControl","nameLocations":["2051:13:47"],"nodeType":"IdentifierPath","referencedDeclaration":22,"src":"2051:13:47"},"id":4457,"nodeType":"InheritanceSpecifier","src":"2051:13:47"},{"baseName":{"id":4458,"name":"ForwarderRegistryContext","nameLocations":["2066:24:47"],"nodeType":"IdentifierPath","referencedDeclaration":1049,"src":"2066:24:47"},"id":4459,"nodeType":"InheritanceSpecifier","src":"2066:24:47"}],"canonicalName":"OpenCampusCertificateNFTv1","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4947,"linearizedBaseContracts":[4947,1049,1181,1169,22,55,882,899,227,179,4075,331,315,1325,1405,1666,3522,1592],"name":"OpenCampusCertificateNFTv1","nameLocation":"1996:26:47","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4462,"libraryName":{"id":4460,"name":"Address","nameLocations":["2103:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":4053,"src":"2103:7:47"},"nodeType":"UsingForDirective","src":"2097:26:47","typeName":{"id":4461,"name":"address","nodeType":"ElementaryTypeName","src":"2115:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":4466,"libraryName":{"id":4463,"name":"ERC721Storage","nameLocations":["2134:13:47"],"nodeType":"IdentifierPath","referencedDeclaration":3470,"src":"2134:13:47"},"nodeType":"UsingForDirective","src":"2128:45:47","typeName":{"id":4465,"nodeType":"UserDefinedTypeName","pathNode":{"id":4464,"name":"ERC721Storage.Layout","nameLocations":["2152:13:47","2166:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"2152:20:47"},"referencedDeclaration":1786,"src":"2152:20:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":4470,"libraryName":{"id":4467,"name":"AccessControlStorage","nameLocations":["2184:20:47"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"2184:20:47"},"nodeType":"UsingForDirective","src":"2178:59:47","typeName":{"id":4469,"nodeType":"UserDefinedTypeName","pathNode":{"id":4468,"name":"AccessControlStorage.Layout","nameLocations":["2209:20:47","2230:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2209:27:47"},"referencedDeclaration":359,"src":"2209:27:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":4474,"libraryName":{"id":4471,"name":"ContractOwnershipStorage","nameLocations":["2248:24:47"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"2248:24:47"},"nodeType":"UsingForDirective","src":"2242:67:47","typeName":{"id":4473,"nodeType":"UserDefinedTypeName","pathNode":{"id":4472,"name":"ContractOwnershipStorage.Layout","nameLocations":["2277:24:47","2302:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"2277:31:47"},"referencedDeclaration":625,"src":"2277:31:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":4478,"libraryName":{"id":4475,"name":"CertificateNFTv1MetaData","nameLocations":["2320:24:47"],"nodeType":"IdentifierPath","referencedDeclaration":5018,"src":"2320:24:47"},"nodeType":"UsingForDirective","src":"2314:69:47","typeName":{"id":4477,"nodeType":"UserDefinedTypeName","pathNode":{"id":4476,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2349:24:47","2374:8:47"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"2349:33:47"},"referencedDeclaration":5017,"src":"2349:33:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}}},{"constant":false,"id":4481,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"2428:12:47","nodeType":"VariableDeclaration","scope":4947,"src":"2389:51:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4480,"nodeType":"UserDefinedTypeName","pathNode":{"id":4479,"name":"IIssuersDIDRegistry","nameLocations":["2389:19:47"],"nodeType":"IdentifierPath","referencedDeclaration":4969,"src":"2389:19:47"},"referencedDeclaration":4969,"src":"2389:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":4484,"mutability":"mutable","name":"_revocationRegistry","nameLocation":"2475:19:47","nodeType":"VariableDeclaration","scope":4947,"src":"2446:48:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4483,"nodeType":"UserDefinedTypeName","pathNode":{"id":4482,"name":"IRevocationRegistry","nameLocations":["2446:19:47"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"2446:19:47"},"referencedDeclaration":5000,"src":"2446:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"constant":true,"id":4489,"mutability":"constant","name":"ERC721_RECEIVED","nameLocation":"2526:15:47","nodeType":"VariableDeclaration","scope":4947,"src":"2501:84:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4485,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2501:6:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":4486,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"2544:15:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1715_$","typeString":"type(contract IERC721Receiver)"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2560:16:47","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"2544:32:47","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":4488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2577:8:47","memberName":"selector","nodeType":"MemberAccess","src":"2544:41:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"functionSelector":"d5391393","id":4492,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"2615:11:47","nodeType":"VariableDeclaration","scope":4947,"src":"2591:46:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2591:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6d696e746572","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2629:8:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7","typeString":"literal_string \"minter\""},"value":"minter"},"visibility":"public"},{"constant":true,"functionSelector":"f5b541a6","id":4495,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"2667:13:47","nodeType":"VariableDeclaration","scope":4947,"src":"2643:50:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2643:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6f70657261746f72","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2683:10:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622","typeString":"literal_string \"operator\""},"value":"operator"},"visibility":"public"},{"constant":false,"functionSelector":"4bae2be8","id":4500,"mutability":"mutable","name":"vcData","nameLocation":"2760:6:47","nodeType":"VariableDeclaration","scope":4947,"src":"2699:67:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$5017_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)"},"typeName":{"id":4499,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4496,"name":"uint256","nodeType":"ElementaryTypeName","src":"2707:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2699:53:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$5017_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4498,"nodeType":"UserDefinedTypeName","pathNode":{"id":4497,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2718:24:47","2743:8:47"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"2718:33:47"},"referencedDeclaration":5017,"src":"2718:33:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}}},"visibility":"public"},{"documentation":{"id":4501,"nodeType":"StructuredDocumentation","src":"2773:58:47","text":"@notice Thrown when burn operation cannot be executed."},"errorSelector":"eeddf6ab","id":4503,"name":"InvalidBurn","nameLocation":"2842:11:47","nodeType":"ErrorDefinition","parameters":{"id":4502,"nodeType":"ParameterList","parameters":[],"src":"2853:2:47"},"src":"2836:20:47"},{"body":{"id":4547,"nodeType":"Block","src":"3263:123:47","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4534,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"3273:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3287:4:47","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1829,"src":"3273:18:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3273:20:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4538,"nodeType":"ExpressionStatement","src":"3273:20:47"},{"expression":{"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4539,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"3303:12:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4540,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"3318:11:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"src":"3303:26:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"id":4542,"nodeType":"ExpressionStatement","src":"3303:26:47"},{"expression":{"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4543,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"3339:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4544,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"3361:18:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"src":"3339:40:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4546,"nodeType":"ExpressionStatement","src":"3339:40:47"}]},"id":4548,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":4522,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3150:3:47","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3154:6:47","memberName":"sender","nodeType":"MemberAccess","src":"3150:10:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4524,"kind":"baseConstructorSpecifier","modifierName":{"id":4521,"name":"ContractOwnership","nameLocations":["3132:17:47"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"3132:17:47"},"nodeType":"ModifierInvocation","src":"3132:29:47"},{"arguments":[{"id":4526,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"3187:17:47","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}}],"id":4527,"kind":"baseConstructorSpecifier","modifierName":{"id":4525,"name":"ForwarderRegistryContext","nameLocations":["3162:24:47"],"nodeType":"IdentifierPath","referencedDeclaration":1049,"src":"3162:24:47"},"nodeType":"ModifierInvocation","src":"3162:43:47"},{"arguments":[{"id":4529,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"3221:9:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4530,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"3232:11:47","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4531,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"3245:16:47","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}}],"id":4532,"kind":"baseConstructorSpecifier","modifierName":{"id":4528,"name":"ERC721Metadata","nameLocations":["3206:14:47"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"3206:14:47"},"nodeType":"ModifierInvocation","src":"3206:56:47"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"tokenName","nameLocation":"2897:9:47","nodeType":"VariableDeclaration","scope":4548,"src":"2883:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4504,"name":"string","nodeType":"ElementaryTypeName","src":"2883:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4507,"mutability":"mutable","name":"tokenSymbol","nameLocation":"2930:11:47","nodeType":"VariableDeclaration","scope":4548,"src":"2916:25:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4506,"name":"string","nodeType":"ElementaryTypeName","src":"2916:6:47","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4510,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2970:17:47","nodeType":"VariableDeclaration","scope":4548,"src":"2951:36:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"},"typeName":{"id":4509,"nodeType":"UserDefinedTypeName","pathNode":{"id":4508,"name":"IForwarderRegistry","nameLocations":["2951:18:47"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"2951:18:47"},"referencedDeclaration":1195,"src":"2951:18:47","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1195","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"constant":false,"id":4513,"mutability":"mutable","name":"metadataResolver","nameLocation":"3020:16:47","nodeType":"VariableDeclaration","scope":4548,"src":"2997:39:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":4512,"nodeType":"UserDefinedTypeName","pathNode":{"id":4511,"name":"ITokenMetadataResolver","nameLocations":["2997:22:47"],"nodeType":"IdentifierPath","referencedDeclaration":3536,"src":"2997:22:47"},"referencedDeclaration":3536,"src":"2997:22:47","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3536","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"revocationRegistry","nameLocation":"3066:18:47","nodeType":"VariableDeclaration","scope":4548,"src":"3046:38:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4515,"nodeType":"UserDefinedTypeName","pathNode":{"id":4514,"name":"IRevocationRegistry","nameLocations":["3046:19:47"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"3046:19:47"},"referencedDeclaration":5000,"src":"3046:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"constant":false,"id":4519,"mutability":"mutable","name":"didRegistry","nameLocation":"3114:11:47","nodeType":"VariableDeclaration","scope":4548,"src":"3094:31:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4518,"nodeType":"UserDefinedTypeName","pathNode":{"id":4517,"name":"IIssuersDIDRegistry","nameLocations":["3094:19:47"],"nodeType":"IdentifierPath","referencedDeclaration":4969,"src":"3094:19:47"},"referencedDeclaration":4969,"src":"3094:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"}],"src":"2873:258:47"},"returnParameters":{"id":4533,"nodeType":"ParameterList","parameters":[],"src":"3263:0:47"},"scope":4947,"src":"2862:524:47","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4568,"nodeType":"Block","src":"3555:137:47","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4560,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"3622:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3622:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4555,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"3565:24:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3590:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"3565:31:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3599:22:47","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"3565:56:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:70:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4563,"nodeType":"ExpressionStatement","src":"3565:70:47"},{"expression":{"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4564,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"3645:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4565,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4552,"src":"3667:18:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"src":"3645:40:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4567,"nodeType":"ExpressionStatement","src":"3645:40:47"}]},"documentation":{"id":4549,"nodeType":"StructuredDocumentation","src":"3392:78:47","text":"@param revocationRegistry The address of the Revocation Registry contract."},"functionSelector":"95f94bc4","id":4569,"implemented":true,"kind":"function","modifiers":[],"name":"setRevocationRegistry","nameLocation":"3484:21:47","nodeType":"FunctionDefinition","parameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4552,"mutability":"mutable","name":"revocationRegistry","nameLocation":"3526:18:47","nodeType":"VariableDeclaration","scope":4569,"src":"3506:38:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"},"typeName":{"id":4551,"nodeType":"UserDefinedTypeName","pathNode":{"id":4550,"name":"IRevocationRegistry","nameLocations":["3506:19:47"],"nodeType":"IdentifierPath","referencedDeclaration":5000,"src":"3506:19:47"},"referencedDeclaration":5000,"src":"3506:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"3505:40:47"},"returnParameters":{"id":4554,"nodeType":"ParameterList","parameters":[],"src":"3555:0:47"},"scope":4947,"src":"3475:217:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4605,"nodeType":"Block","src":"4037:173:47","statements":[{"expression":{"arguments":[{"id":4585,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"4092:11:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4586,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4105:3:47","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4109:6:47","memberName":"sender","nodeType":"MemberAccess","src":"4105:10:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4580,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4047:20:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4068:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"4047:27:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4047:29:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4077:14:47","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"4047:44:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4047:69:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4589,"nodeType":"ExpressionStatement","src":"4047:69:47"},{"expression":{"arguments":[{"id":4595,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4572,"src":"4155:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4596,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"4159:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4590,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4127:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4141:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"4127:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4127:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4594,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4150:4:47","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2480,"src":"4127:27:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4127:40:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4598,"nodeType":"ExpressionStatement","src":"4127:40:47"},{"expression":{"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4599,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"4177:6:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$5017_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4601,"indexExpression":{"id":4600,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"4184:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4177:15:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4602,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4577,"src":"4195:8:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}},"src":"4177:26:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4604,"nodeType":"ExpressionStatement","src":"4177:26:47"}]},"documentation":{"id":4570,"nodeType":"StructuredDocumentation","src":"3698:229:47","text":"@dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\n @param to The owner of `tokenId`\n @param tokenId The id of the VC NFT to be minted\n @param metadata Metadata for `tokenId`"},"functionSelector":"54c7be06","id":4606,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"3941:4:47","nodeType":"FunctionDefinition","parameters":{"id":4578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"mutability":"mutable","name":"to","nameLocation":"3954:2:47","nodeType":"VariableDeclaration","scope":4606,"src":"3946:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4571,"name":"address","nodeType":"ElementaryTypeName","src":"3946:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4574,"mutability":"mutable","name":"tokenId","nameLocation":"3966:7:47","nodeType":"VariableDeclaration","scope":4606,"src":"3958:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3958:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4577,"mutability":"mutable","name":"metadata","nameLocation":"4018:8:47","nodeType":"VariableDeclaration","scope":4606,"src":"3975:51:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"},"typeName":{"id":4576,"nodeType":"UserDefinedTypeName","pathNode":{"id":4575,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["3975:24:47","4000:8:47"],"nodeType":"IdentifierPath","referencedDeclaration":5017,"src":"3975:33:47"},"referencedDeclaration":5017,"src":"3975:33:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}},"visibility":"internal"}],"src":"3945:82:47"},"returnParameters":{"id":4579,"nodeType":"ParameterList","parameters":[],"src":"4037:0:47"},"scope":4947,"src":"3932:278:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4673,"nodeType":"Block","src":"4558:613:47","statements":[{"assignments":[4613],"declarations":[{"constant":false,"id":4613,"mutability":"mutable","name":"hashedDid","nameLocation":"4576:9:47","nodeType":"VariableDeclaration","scope":4673,"src":"4568:17:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4612,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4568:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4623,"initialValue":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":4617,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"4615:6:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$5017_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4619,"indexExpression":{"id":4618,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"4622:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4615:15:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4631:9:47","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":5014,"src":"4615:25:47","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4615,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4598:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4602:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"4598:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4598:43:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4614,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4588:9:47","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:54:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4568:74:47"},{"condition":{"arguments":[{"id":4626,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"4686:9:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4627,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"4697:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4624,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"4656:19:47","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$5000","typeString":"contract IRevocationRegistry"}},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4676:9:47","memberName":"isRevoked","nodeType":"MemberAccess","referencedDeclaration":4999,"src":"4656:29:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,uint256) view external returns (bool)"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4656:49:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4671,"nodeType":"Block","src":"5120:45:47","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4668,"name":"InvalidBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"5141:11:47","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5141:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4670,"nodeType":"RevertStatement","src":"5134:20:47"}]},"id":4672,"nodeType":"IfStatement","src":"4652:513:47","trueBody":{"id":4667,"nodeType":"Block","src":"4707:407:47","statements":[{"assignments":[4630],"declarations":[{"constant":false,"id":4630,"mutability":"mutable","name":"owner","nameLocation":"4729:5:47","nodeType":"VariableDeclaration","scope":4667,"src":"4721:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4629,"name":"address","nodeType":"ElementaryTypeName","src":"4721:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4637,"initialValue":{"arguments":[{"id":4635,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"4768:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4631,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4737:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4751:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"4737:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4737:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4760:7:47","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"4737:30:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4737:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4721:55:47"},{"expression":{"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4638,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4790:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4804:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"4790:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4790:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4813:6:47","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1771,"src":"4790:29:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4644,"indexExpression":{"id":4643,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"4820:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4790:38:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4645,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4831:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4845:23:47","memberName":"BURNT_TOKEN_OWNER_VALUE","nodeType":"MemberAccess","referencedDeclaration":1812,"src":"4831:37:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4790:78:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4648,"nodeType":"ExpressionStatement","src":"4790:78:47"},{"id":4657,"nodeType":"UncheckedBlock","src":"4883:166:47","statements":[{"expression":{"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"4994:40:47","subExpression":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4649,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4996:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5010:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"4996:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4652,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5019:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1775,"src":"4996:31:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4654,"indexExpression":{"id":4653,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"5028:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4996:38:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4656,"nodeType":"ExpressionStatement","src":"4994:40:47"}]},{"eventCall":{"arguments":[{"id":4659,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"5076:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5091:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5083:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4660,"name":"address","nodeType":"ElementaryTypeName","src":"5083:7:47","typeDescriptions":{}}},"id":4663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5083:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4664,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"5095:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4658,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"5067:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5067:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4666,"nodeType":"EmitStatement","src":"5062:41:47"}]}}]},"documentation":{"id":4607,"nodeType":"StructuredDocumentation","src":"4216:297:47","text":"@dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\n @dev Emit a `Transfer` event to address 0 when the token has been burnt.\n @param tokenId The Token Id to be burnt.\n Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry."},"functionSelector":"42966c68","id":4674,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"4527:4:47","nodeType":"FunctionDefinition","parameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"mutability":"mutable","name":"tokenId","nameLocation":"4540:7:47","nodeType":"VariableDeclaration","scope":4674,"src":"4532:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4608,"name":"uint256","nodeType":"ElementaryTypeName","src":"4532:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4531:17:47"},"returnParameters":{"id":4611,"nodeType":"ParameterList","parameters":[],"src":"4558:0:47"},"scope":4947,"src":"4518:653:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1517],"body":{"id":4693,"nodeType":"Block","src":"5260:74:47","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4687,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"5301:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5301:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4689,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"5315:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4690,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"5319:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4682,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5270:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5284:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"5270:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5270:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5293:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2032,"src":"5270:30:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,uint256)"}},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5270:57:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4692,"nodeType":"ExpressionStatement","src":"5270:57:47"}]},"documentation":{"id":4675,"nodeType":"StructuredDocumentation","src":"5177:23:47","text":"@inheritdoc IERC721"},"functionSelector":"095ea7b3","id":4694,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"5214:7:47","nodeType":"FunctionDefinition","parameters":{"id":4680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4677,"mutability":"mutable","name":"to","nameLocation":"5230:2:47","nodeType":"VariableDeclaration","scope":4694,"src":"5222:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4676,"name":"address","nodeType":"ElementaryTypeName","src":"5222:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4679,"mutability":"mutable","name":"tokenId","nameLocation":"5242:7:47","nodeType":"VariableDeclaration","scope":4694,"src":"5234:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4678,"name":"uint256","nodeType":"ElementaryTypeName","src":"5234:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5221:29:47"},"returnParameters":{"id":4681,"nodeType":"ParameterList","parameters":[],"src":"5260:0:47"},"scope":4947,"src":"5205:129:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1525],"body":{"id":4713,"nodeType":"Block","src":"5437:91:47","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4707,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"5488:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5488:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4709,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"5502:8:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4710,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4699,"src":"5512:8:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4702,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5447:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5461:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"5447:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5470:17:47","memberName":"setApprovalForAll","nodeType":"MemberAccess","referencedDeclaration":2070,"src":"5447:40:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,bool)"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:74:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4712,"nodeType":"ExpressionStatement","src":"5447:74:47"}]},"documentation":{"id":4695,"nodeType":"StructuredDocumentation","src":"5340:23:47","text":"@inheritdoc IERC721"},"functionSelector":"a22cb465","id":4714,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5377:17:47","nodeType":"FunctionDefinition","parameters":{"id":4700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"operator","nameLocation":"5403:8:47","nodeType":"VariableDeclaration","scope":4714,"src":"5395:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4696,"name":"address","nodeType":"ElementaryTypeName","src":"5395:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4699,"mutability":"mutable","name":"approved","nameLocation":"5418:8:47","nodeType":"VariableDeclaration","scope":4714,"src":"5413:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4698,"name":"bool","nodeType":"ElementaryTypeName","src":"5413:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5394:33:47"},"returnParameters":{"id":4701,"nodeType":"ParameterList","parameters":[],"src":"5437:0:47"},"scope":4947,"src":"5368:160:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1565],"body":{"id":4729,"nodeType":"Block","src":"5636:63:47","statements":[{"expression":{"arguments":[{"id":4726,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4717,"src":"5686:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4722,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5653:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5667:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"5653:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:9:47","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3226,"src":"5653:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address) view returns (uint256)"}},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4721,"id":4728,"nodeType":"Return","src":"5646:46:47"}]},"documentation":{"id":4715,"nodeType":"StructuredDocumentation","src":"5534:23:47","text":"@inheritdoc IERC721"},"functionSelector":"70a08231","id":4730,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"5571:9:47","nodeType":"FunctionDefinition","parameters":{"id":4718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4717,"mutability":"mutable","name":"owner","nameLocation":"5589:5:47","nodeType":"VariableDeclaration","scope":4730,"src":"5581:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4716,"name":"address","nodeType":"ElementaryTypeName","src":"5581:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5580:15:47"},"returnParameters":{"id":4721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4720,"mutability":"mutable","name":"balance","nameLocation":"5627:7:47","nodeType":"VariableDeclaration","scope":4730,"src":"5619:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4719,"name":"uint256","nodeType":"ElementaryTypeName","src":"5619:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5618:17:47"},"scope":4947,"src":"5562:137:47","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1573],"body":{"id":4745,"nodeType":"Block","src":"5810:63:47","statements":[{"expression":{"arguments":[{"id":4742,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4733,"src":"5858:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4738,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"5827:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5841:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"5827:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5827:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5850:7:47","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"5827:30:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5827:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4737,"id":4744,"nodeType":"Return","src":"5820:46:47"}]},"documentation":{"id":4731,"nodeType":"StructuredDocumentation","src":"5705:23:47","text":"@inheritdoc IERC721"},"functionSelector":"6352211e","id":4746,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"5742:7:47","nodeType":"FunctionDefinition","parameters":{"id":4734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4733,"mutability":"mutable","name":"tokenId","nameLocation":"5758:7:47","nodeType":"VariableDeclaration","scope":4746,"src":"5750:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4732,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5749:17:47"},"returnParameters":{"id":4737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4736,"mutability":"mutable","name":"tokenOwner","nameLocation":"5798:10:47","nodeType":"VariableDeclaration","scope":4746,"src":"5790:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4735,"name":"address","nodeType":"ElementaryTypeName","src":"5790:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5789:20:47"},"scope":4947,"src":"5733:140:47","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1581],"body":{"id":4761,"nodeType":"Block","src":"5986:67:47","statements":[{"expression":{"arguments":[{"id":4758,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"6038:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4754,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6003:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6017:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"6003:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6003:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6026:11:47","memberName":"getApproved","nodeType":"MemberAccess","referencedDeclaration":3302,"src":"6003:34:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6003:43:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4753,"id":4760,"nodeType":"Return","src":"5996:50:47"}]},"documentation":{"id":4747,"nodeType":"StructuredDocumentation","src":"5879:23:47","text":"@inheritdoc IERC721"},"functionSelector":"081812fc","id":4762,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"5916:11:47","nodeType":"FunctionDefinition","parameters":{"id":4750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4749,"mutability":"mutable","name":"tokenId","nameLocation":"5936:7:47","nodeType":"VariableDeclaration","scope":4762,"src":"5928:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4748,"name":"uint256","nodeType":"ElementaryTypeName","src":"5928:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5927:17:47"},"returnParameters":{"id":4753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"approved","nameLocation":"5976:8:47","nodeType":"VariableDeclaration","scope":4762,"src":"5968:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4751,"name":"address","nodeType":"ElementaryTypeName","src":"5968:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5967:18:47"},"scope":4947,"src":"5907:146:47","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1591],"body":{"id":4780,"nodeType":"Block","src":"6190:80:47","statements":[{"expression":{"arguments":[{"id":4776,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"6247:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4777,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4767,"src":"6254:8:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4772,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"6207:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6221:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"6207:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6207:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6230:16:47","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":3323,"src":"6207:39:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6207:56:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4771,"id":4779,"nodeType":"Return","src":"6200:63:47"}]},"documentation":{"id":4763,"nodeType":"StructuredDocumentation","src":"6059:23:47","text":"@inheritdoc IERC721"},"functionSelector":"e985e9c5","id":4781,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"6096:16:47","nodeType":"FunctionDefinition","parameters":{"id":4768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"owner","nameLocation":"6121:5:47","nodeType":"VariableDeclaration","scope":4781,"src":"6113:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4764,"name":"address","nodeType":"ElementaryTypeName","src":"6113:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4767,"mutability":"mutable","name":"operator","nameLocation":"6136:8:47","nodeType":"VariableDeclaration","scope":4781,"src":"6128:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4766,"name":"address","nodeType":"ElementaryTypeName","src":"6128:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6112:33:47"},"returnParameters":{"id":4771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4770,"mutability":"mutable","name":"approvedForAll","nameLocation":"6174:14:47","nodeType":"VariableDeclaration","scope":4781,"src":"6169:19:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4769,"name":"bool","nodeType":"ElementaryTypeName","src":"6169:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6168:21:47"},"scope":4947,"src":"6087:183:47","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4818,"nodeType":"Block","src":"6726:365:47","statements":[{"assignments":[4790],"declarations":[{"constant":false,"id":4790,"mutability":"mutable","name":"hashedDid","nameLocation":"6744:9:47","nodeType":"VariableDeclaration","scope":4818,"src":"6736:17:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6736:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4800,"initialValue":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":4794,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"6783:6:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$5017_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4796,"indexExpression":{"id":4795,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"6790:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6783:15:47","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$5017_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4797,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6799:9:47","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":5014,"src":"6783:25:47","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4792,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6766:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6770:12:47","memberName":"encodePacked","nodeType":"MemberAccess","src":"6766:16:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:43:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4791,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6756:9:47","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6756:54:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6736:74:47"},{"condition":{"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6951:40:47","subExpression":{"arguments":[{"id":4803,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"6973:9:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4804,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"6984:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4801,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"6952:12:47","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4969","typeString":"contract IIssuersDIDRegistry"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6965:7:47","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":4959,"src":"6952:20:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6952:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4817,"nodeType":"IfStatement","src":"6947:138:47","trueBody":{"id":4816,"nodeType":"Block","src":"6993:92:47","statements":[{"expression":{"arguments":[{"id":4812,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"7052:13:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4813,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"7067:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4807,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7007:20:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7028:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"7007:27:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7007:29:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7037:14:47","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"7007:44:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7007:67:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4815,"nodeType":"ExpressionStatement","src":"7007:67:47"}]}}]},"documentation":{"id":4782,"nodeType":"StructuredDocumentation","src":"6276:369:47","text":"@notice `sender` is operatable if the sender is a valid issuer for `tokenId` or have been granted `operator` role before\n @dev Reverts with `NotRoleHolder` if `sender` is neither allowed token issuer nor an operator for this contract.\n @param sender The sender that trigger the contract.\n @param tokenId The identifier of the token to transfer."},"id":4819,"implemented":true,"kind":"function","modifiers":[],"name":"_isSenderOperatable","nameLocation":"6659:19:47","nodeType":"FunctionDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"mutability":"mutable","name":"sender","nameLocation":"6687:6:47","nodeType":"VariableDeclaration","scope":4819,"src":"6679:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4783,"name":"address","nodeType":"ElementaryTypeName","src":"6679:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4786,"mutability":"mutable","name":"tokenId","nameLocation":"6703:7:47","nodeType":"VariableDeclaration","scope":4819,"src":"6695:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4785,"name":"uint256","nodeType":"ElementaryTypeName","src":"6695:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6678:33:47"},"returnParameters":{"id":4788,"nodeType":"ParameterList","parameters":[],"src":"6726:0:47"},"scope":4947,"src":"6650:441:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[1535],"body":{"id":4850,"nodeType":"Block","src":"7339:164:47","statements":[{"assignments":[4830],"declarations":[{"constant":false,"id":4830,"mutability":"mutable","name":"sender","nameLocation":"7357:6:47","nodeType":"VariableDeclaration","scope":4850,"src":"7349:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4829,"name":"address","nodeType":"ElementaryTypeName","src":"7349:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4833,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4831,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"7366:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7366:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7349:29:47"},{"expression":{"arguments":[{"id":4835,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"7408:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4836,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4826,"src":"7416:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4834,"name":"_isSenderOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"7388:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) view"}},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7388:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4838,"nodeType":"ExpressionStatement","src":"7388:36:47"},{"expression":{"arguments":[{"id":4844,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"7470:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4845,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"7478:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4846,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"7484:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4826,"src":"7488:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4839,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"7434:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7448:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"7434:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7434:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7457:12:47","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2187,"src":"7434:35:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7434:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4849,"nodeType":"ExpressionStatement","src":"7434:62:47"}]},"documentation":{"id":4820,"nodeType":"StructuredDocumentation","src":"7097:163:47","text":"@notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\n @inheritdoc IERC721"},"functionSelector":"23b872dd","id":4851,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7274:12:47","nodeType":"FunctionDefinition","parameters":{"id":4827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4822,"mutability":"mutable","name":"from","nameLocation":"7295:4:47","nodeType":"VariableDeclaration","scope":4851,"src":"7287:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4821,"name":"address","nodeType":"ElementaryTypeName","src":"7287:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4824,"mutability":"mutable","name":"to","nameLocation":"7309:2:47","nodeType":"VariableDeclaration","scope":4851,"src":"7301:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4823,"name":"address","nodeType":"ElementaryTypeName","src":"7301:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4826,"mutability":"mutable","name":"tokenId","nameLocation":"7321:7:47","nodeType":"VariableDeclaration","scope":4851,"src":"7313:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4825,"name":"uint256","nodeType":"ElementaryTypeName","src":"7313:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7286:43:47"},"returnParameters":{"id":4828,"nodeType":"ParameterList","parameters":[],"src":"7339:0:47"},"scope":4947,"src":"7265:238:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1545],"body":{"id":4882,"nodeType":"Block","src":"7759:168:47","statements":[{"assignments":[4862],"declarations":[{"constant":false,"id":4862,"mutability":"mutable","name":"sender","nameLocation":"7777:6:47","nodeType":"VariableDeclaration","scope":4882,"src":"7769:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4861,"name":"address","nodeType":"ElementaryTypeName","src":"7769:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4865,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4863,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"7786:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7786:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7769:29:47"},{"expression":{"arguments":[{"id":4867,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"7828:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4868,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"7836:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4866,"name":"_isSenderOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"7808:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) view"}},"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7808:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4870,"nodeType":"ExpressionStatement","src":"7808:36:47"},{"expression":{"arguments":[{"id":4876,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"7894:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4877,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"7902:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4878,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4856,"src":"7908:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4879,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"7912:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4871,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"7854:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7868:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"7854:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7854:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4875,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7877:16:47","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2225,"src":"7854:39:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7854:66:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4881,"nodeType":"ExpressionStatement","src":"7854:66:47"}]},"documentation":{"id":4852,"nodeType":"StructuredDocumentation","src":"7509:167:47","text":"@notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\n @inheritdoc IERC721"},"functionSelector":"42842e0e","id":4883,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"7690:16:47","nodeType":"FunctionDefinition","parameters":{"id":4859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4854,"mutability":"mutable","name":"from","nameLocation":"7715:4:47","nodeType":"VariableDeclaration","scope":4883,"src":"7707:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4853,"name":"address","nodeType":"ElementaryTypeName","src":"7707:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4856,"mutability":"mutable","name":"to","nameLocation":"7729:2:47","nodeType":"VariableDeclaration","scope":4883,"src":"7721:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4855,"name":"address","nodeType":"ElementaryTypeName","src":"7721:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4858,"mutability":"mutable","name":"tokenId","nameLocation":"7741:7:47","nodeType":"VariableDeclaration","scope":4883,"src":"7733:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4857,"name":"uint256","nodeType":"ElementaryTypeName","src":"7733:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7706:43:47"},"returnParameters":{"id":4860,"nodeType":"ParameterList","parameters":[],"src":"7759:0:47"},"scope":4947,"src":"7681:246:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1557],"body":{"id":4917,"nodeType":"Block","src":"8204:174:47","statements":[{"assignments":[4896],"declarations":[{"constant":false,"id":4896,"mutability":"mutable","name":"sender","nameLocation":"8222:6:47","nodeType":"VariableDeclaration","scope":4917,"src":"8214:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4895,"name":"address","nodeType":"ElementaryTypeName","src":"8214:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4899,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4897,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[4932],"referencedDeclaration":4932,"src":"8231:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8231:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8214:29:47"},{"expression":{"arguments":[{"id":4901,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"8273:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4902,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4890,"src":"8281:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4900,"name":"_isSenderOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"8253:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) view"}},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8253:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4904,"nodeType":"ExpressionStatement","src":"8253:36:47"},{"expression":{"arguments":[{"id":4910,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"8339:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4911,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"8347:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4912,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"8353:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4913,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4890,"src":"8357:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4914,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4892,"src":"8366:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4905,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"8299:13:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3470_$","typeString":"type(library ERC721Storage)"}},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8313:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"8299:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8299:22:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1786_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4909,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8322:16:47","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2265,"src":"8299:39:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1786_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$attached_to$_t_struct$_Layout_$1786_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8299:72:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4916,"nodeType":"ExpressionStatement","src":"8299:72:47"}]},"documentation":{"id":4884,"nodeType":"StructuredDocumentation","src":"7933:167:47","text":"@notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\n @inheritdoc IERC721"},"functionSelector":"b88d4fde","id":4918,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"8114:16:47","nodeType":"FunctionDefinition","parameters":{"id":4893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4886,"mutability":"mutable","name":"from","nameLocation":"8139:4:47","nodeType":"VariableDeclaration","scope":4918,"src":"8131:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4885,"name":"address","nodeType":"ElementaryTypeName","src":"8131:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4888,"mutability":"mutable","name":"to","nameLocation":"8153:2:47","nodeType":"VariableDeclaration","scope":4918,"src":"8145:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4887,"name":"address","nodeType":"ElementaryTypeName","src":"8145:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4890,"mutability":"mutable","name":"tokenId","nameLocation":"8165:7:47","nodeType":"VariableDeclaration","scope":4918,"src":"8157:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4889,"name":"uint256","nodeType":"ElementaryTypeName","src":"8157:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4892,"mutability":"mutable","name":"data","nameLocation":"8189:4:47","nodeType":"VariableDeclaration","scope":4918,"src":"8174:19:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4891,"name":"bytes","nodeType":"ElementaryTypeName","src":"8174:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8130:64:47"},"returnParameters":{"id":4894,"nodeType":"ParameterList","parameters":[],"src":"8204:0:47"},"scope":4947,"src":"8105:273:47","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1120,4065],"body":{"id":4931,"nodeType":"Block","src":"8535:65:47","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4927,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8552:28:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1169_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":4928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8581:10:47","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":1120,"src":"8552:39:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8552:41:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4926,"id":4930,"nodeType":"Return","src":"8545:48:47"}]},"documentation":{"id":4919,"nodeType":"StructuredDocumentation","src":"8384:44:47","text":"@inheritdoc ForwarderRegistryContextBase"},"id":4932,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"8442:10:47","nodeType":"FunctionDefinition","overrides":{"id":4923,"nodeType":"OverrideSpecifier","overrides":[{"id":4921,"name":"Context","nameLocations":["8478:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"8478:7:47"},{"id":4922,"name":"ForwarderRegistryContextBase","nameLocations":["8487:28:47"],"nodeType":"IdentifierPath","referencedDeclaration":1169,"src":"8487:28:47"}],"src":"8469:47:47"},"parameters":{"id":4920,"nodeType":"ParameterList","parameters":[],"src":"8452:2:47"},"returnParameters":{"id":4926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4932,"src":"8526:7:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4924,"name":"address","nodeType":"ElementaryTypeName","src":"8526:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8525:9:47"},"scope":4947,"src":"8433:167:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[1168,4074],"body":{"id":4945,"nodeType":"Block","src":"8762:63:47","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4941,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8779:28:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1169_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8808:8:47","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":1168,"src":"8779:37:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8779:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4940,"id":4944,"nodeType":"Return","src":"8772:46:47"}]},"documentation":{"id":4933,"nodeType":"StructuredDocumentation","src":"8606:44:47","text":"@inheritdoc ForwarderRegistryContextBase"},"id":4946,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"8664:8:47","nodeType":"FunctionDefinition","overrides":{"id":4937,"nodeType":"OverrideSpecifier","overrides":[{"id":4935,"name":"Context","nameLocations":["8698:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":4075,"src":"8698:7:47"},{"id":4936,"name":"ForwarderRegistryContextBase","nameLocations":["8707:28:47"],"nodeType":"IdentifierPath","referencedDeclaration":1169,"src":"8707:28:47"}],"src":"8689:47:47"},"parameters":{"id":4934,"nodeType":"ParameterList","parameters":[],"src":"8672:2:47"},"returnParameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4939,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4946,"src":"8746:14:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4938,"name":"bytes","nodeType":"ElementaryTypeName","src":"8746:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8745:16:47"},"scope":4947,"src":"8655:170:47","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4948,"src":"1987:6840:47","usedErrors":[236,259,887,1412,1417,1426,1429,1434,1443,1450,1457,1460,1465,1470,4503],"usedEvents":[277,286,295,1488,1497,1506]}],"src":"32:8796:47"},"id":47},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","exportedSymbols":{"IIssuersDIDRegistry":[4969]},"id":4970,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4949,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:48"},{"abstract":false,"baseContracts":[],"canonicalName":"IIssuersDIDRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":4950,"nodeType":"StructuredDocumentation","src":"58:119:48","text":"@title IAllowedIssuersRegistry\n @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs"},"fullyImplemented":false,"id":4969,"linearizedBaseContracts":[4969],"name":"IIssuersDIDRegistry","nameLocation":"187:19:48","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f9236a39","id":4959,"implemented":false,"kind":"function","modifiers":[],"name":"issuers","nameLocation":"222:7:48","nodeType":"FunctionDefinition","parameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4952,"mutability":"mutable","name":"hashedDid","nameLocation":"238:9:48","nodeType":"VariableDeclaration","scope":4959,"src":"230:17:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"230:7:48","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4954,"mutability":"mutable","name":"issuerAddress","nameLocation":"257:13:48","nodeType":"VariableDeclaration","scope":4959,"src":"249:21:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4953,"name":"address","nodeType":"ElementaryTypeName","src":"249:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"229:42:48"},"returnParameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4957,"mutability":"mutable","name":"allowed","nameLocation":"300:7:48","nodeType":"VariableDeclaration","scope":4959,"src":"295:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4956,"name":"bool","nodeType":"ElementaryTypeName","src":"295:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"294:14:48"},"scope":4969,"src":"213:96:48","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f176f7e","id":4968,"implemented":false,"kind":"function","modifiers":[],"name":"isIssuerAllowed","nameLocation":"324:15:48","nodeType":"FunctionDefinition","parameters":{"id":4964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4961,"mutability":"mutable","name":"did","nameLocation":"356:3:48","nodeType":"VariableDeclaration","scope":4968,"src":"340:19:48","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4960,"name":"string","nodeType":"ElementaryTypeName","src":"340:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4963,"mutability":"mutable","name":"issuerAddress","nameLocation":"369:13:48","nodeType":"VariableDeclaration","scope":4968,"src":"361:21:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4962,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"339:44:48"},"returnParameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4966,"mutability":"mutable","name":"allowed","nameLocation":"412:7:48","nodeType":"VariableDeclaration","scope":4968,"src":"407:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4965,"name":"bool","nodeType":"ElementaryTypeName","src":"407:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"406:14:48"},"scope":4969,"src":"315:106:48","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4970,"src":"177:246:48","usedErrors":[],"usedEvents":[]}],"src":"32:392:48"},"id":48},"contracts/vc/interfaces/IRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","exportedSymbols":{"IRevocationRegistry":[5000]},"id":5001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4971,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:49"},{"abstract":false,"baseContracts":[],"canonicalName":"IRevocationRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5000,"linearizedBaseContracts":[5000],"name":"IRevocationRegistry","nameLocation":"68:19:49","nodeType":"ContractDefinition","nodes":[{"functionSelector":"98fc75a2","id":4980,"implemented":false,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"103:8:49","nodeType":"FunctionDefinition","parameters":{"id":4978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"120:15:49","nodeType":"VariableDeclaration","scope":4980,"src":"112:23:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"112:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4975,"mutability":"mutable","name":"vcId","nameLocation":"145:4:49","nodeType":"VariableDeclaration","scope":4980,"src":"137:12:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4974,"name":"uint256","nodeType":"ElementaryTypeName","src":"137:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4977,"mutability":"mutable","name":"signature","nameLocation":"166:9:49","nodeType":"VariableDeclaration","scope":4980,"src":"151:24:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4976,"name":"bytes","nodeType":"ElementaryTypeName","src":"151:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"111:65:49"},"returnParameters":{"id":4979,"nodeType":"ParameterList","parameters":[],"src":"185:0:49"},"scope":5000,"src":"94:92:49","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e688c27b","id":4990,"implemented":false,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"201:14:49","nodeType":"FunctionDefinition","parameters":{"id":4988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4982,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"224:15:49","nodeType":"VariableDeclaration","scope":4990,"src":"216:23:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"216:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4985,"mutability":"mutable","name":"vcIds","nameLocation":"260:5:49","nodeType":"VariableDeclaration","scope":4990,"src":"241:24:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4983,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4984,"nodeType":"ArrayTypeName","src":"241:9:49","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4987,"mutability":"mutable","name":"signature","nameLocation":"282:9:49","nodeType":"VariableDeclaration","scope":4990,"src":"267:24:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4986,"name":"bytes","nodeType":"ElementaryTypeName","src":"267:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"215:77:49"},"returnParameters":{"id":4989,"nodeType":"ParameterList","parameters":[],"src":"301:0:49"},"scope":5000,"src":"192:110:49","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a3a2656a","id":4999,"implemented":false,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"317:9:49","nodeType":"FunctionDefinition","parameters":{"id":4995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4992,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"335:15:49","nodeType":"VariableDeclaration","scope":4999,"src":"327:23:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4991,"name":"bytes32","nodeType":"ElementaryTypeName","src":"327:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4994,"mutability":"mutable","name":"vcId","nameLocation":"360:4:49","nodeType":"VariableDeclaration","scope":4999,"src":"352:12:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4993,"name":"uint256","nodeType":"ElementaryTypeName","src":"352:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"326:39:49"},"returnParameters":{"id":4998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4997,"mutability":"mutable","name":"revoked","nameLocation":"394:7:49","nodeType":"VariableDeclaration","scope":4999,"src":"389:12:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4996,"name":"bool","nodeType":"ElementaryTypeName","src":"389:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"388:14:49"},"scope":5000,"src":"308:95:49","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5001,"src":"58:347:49","usedErrors":[],"usedEvents":[]}],"src":"32:374:49"},"id":49},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"ast":{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","exportedSymbols":{"CertificateNFTv1MetaData":[5018]},"id":5019,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5002,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:50"},{"abstract":false,"baseContracts":[],"canonicalName":"CertificateNFTv1MetaData","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5018,"linearizedBaseContracts":[5018],"name":"CertificateNFTv1MetaData","nameLocation":"66:24:50","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CertificateNFTv1MetaData.MetaData","id":5017,"members":[{"constant":false,"id":5004,"mutability":"mutable","name":"schemaVersion","nameLocation":"130:13:50","nodeType":"VariableDeclaration","scope":5017,"src":"123:20:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5003,"name":"uint16","nodeType":"ElementaryTypeName","src":"123:6:50","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5006,"mutability":"mutable","name":"achievementType","nameLocation":"160:15:50","nodeType":"VariableDeclaration","scope":5017,"src":"153:22:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5005,"name":"uint16","nodeType":"ElementaryTypeName","src":"153:6:50","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5008,"mutability":"mutable","name":"awardedDate","nameLocation":"192:11:50","nodeType":"VariableDeclaration","scope":5017,"src":"185:18:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5007,"name":"uint64","nodeType":"ElementaryTypeName","src":"185:6:50","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5010,"mutability":"mutable","name":"validFrom","nameLocation":"220:9:50","nodeType":"VariableDeclaration","scope":5017,"src":"213:16:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5009,"name":"uint64","nodeType":"ElementaryTypeName","src":"213:6:50","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5012,"mutability":"mutable","name":"validUtil","nameLocation":"246:9:50","nodeType":"VariableDeclaration","scope":5017,"src":"239:16:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5011,"name":"uint64","nodeType":"ElementaryTypeName","src":"239:6:50","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5014,"mutability":"mutable","name":"issuerDid","nameLocation":"272:9:50","nodeType":"VariableDeclaration","scope":5017,"src":"265:16:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5013,"name":"string","nodeType":"ElementaryTypeName","src":"265:6:50","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5016,"mutability":"mutable","name":"achievementId","nameLocation":"298:13:50","nodeType":"VariableDeclaration","scope":5017,"src":"291:20:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5015,"name":"string","nodeType":"ElementaryTypeName","src":"291:6:50","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"MetaData","nameLocation":"104:8:50","nodeType":"StructDefinition","scope":5018,"src":"97:221:50","visibility":"public"}],"scope":5019,"src":"58:262:50","usedErrors":[],"usedEvents":[]}],"src":"32:289:50"},"id":50}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4dec3e681a4a3c2735847a4f5f0ae2b32979f9bc8911002e3fd438425686a5864736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xDE 0xC3 0xE6 DUP2 LOG4 LOG3 0xC2 PUSH20 0x5847A4F5F0AE2B32979F9BC8911002E3FD438425 PUSH9 0x6A5864736F6C634300 ADDMOD AND STOP CALLER ","sourceMap":"428:4129:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;428:4129:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4dec3e681a4a3c2735847a4f5f0ae2b32979f9bc8911002e3fd438425686a5864736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xDE 0xC3 0xE6 DUP2 LOG4 LOG3 0xC2 PUSH20 0x5847A4F5F0AE2B32979F9BC8911002E3FD438425 PUSH9 0x6A5864736F6C634300 ADDMOD AND STOP CALLER ","sourceMap":"428:4129:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ERC721Metadata":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"constructor":{"params":{"metadataResolver":"The address of the metadata resolver contract.","name":"The name of the token.","symbol":"The symbol of the token."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"metadataResolver\":\"The address of the metadata resolver contract.\",\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC721Metadata.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":\"ERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interfaces as supported: ERC721Metadata."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ERC721MetadataBase":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":\"ERC721MetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}]},"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"IERC721BatchTransfer":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.","kind":"dev","methods":{"batchTransferFrom(address,address,uint256[])":{"details":"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.","params":{"from":"Current tokens owner.","to":"Address of the new token owner.","tokenIds":"Identifiers of the tokens to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransferFrom(address,address,uint256[])":"f3993d11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.\",\"kind\":\"dev\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"details\":\"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.\",\"params\":{\"from\":\"Current tokens owner.\",\"to\":\"Address of the new token owner.\",\"tokenIds\":\"Identifiers of the tokens to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"notice\":\"Unsafely transfers a batch of tokens to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":\"IERC721BatchTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransferFrom(address,address,uint256[])":{"notice":"Unsafely transfers a batch of tokens to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"IERC721Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.","kind":"dev","methods":{"batchBurnFrom(address,uint256[])":{"details":"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.","params":{"from":"The current tokens owner.","tokenIds":"The identifiers of the tokens to burn."}},"burnFrom(address,uint256)":{"details":"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.","params":{"from":"The current token owner.","tokenId":"The identifier of the token to burn."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[])":"f2472965","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"details\":\"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\",\"params\":{\"from\":\"The current tokens owner.\",\"tokenIds\":\"The identifiers of the tokens to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.\",\"params\":{\"from\":\"The current token owner.\",\"tokenId\":\"The identifier of the token to burn.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"notice\":\"Burns a batch of tokens.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":\"IERC721Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[])":{"notice":"Burns a batch of tokens."},"burnFrom(address,uint256)":{"notice":"Burns a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"IERC721Deliverable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"deliver","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.","kind":"dev","methods":{"deliver(address[],uint256[])":{"details":"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.","params":{"recipients":"Addresses of the new tokens owners.","tokenIds":"Identifiers of the tokens to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deliver(address[],uint256[])":"9da5e832"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.\",\"kind\":\"dev\",\"methods\":{\"deliver(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\",\"params\":{\"recipients\":\"Addresses of the new tokens owners.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(address[],uint256[])\":{\"notice\":\"Unsafely mints tokens to multiple recipients.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":\"IERC721Deliverable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deliver(address[],uint256[])":{"notice":"Unsafely mints tokens to multiple recipients."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.","kind":"dev","methods":{"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.\",\"kind\":\"dev\",\"methods\":{\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"IERC721Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.","kind":"dev","methods":{"batchMint(address,uint256[])":{"details":"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"safeMint(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address,uint256[])":"4684d7e9","mint(address,uint256)":"40c10f19","safeMint(address,uint256,bytes)":"8832e6e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[])\":{\"details\":\"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":\"IERC721Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.","params":{"data":"Optional additional data with no specified format.","from":"The previous token owner.","operator":"The initiator of the safe transfer.","tokenId":"The token identifier."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."}}},"title":"ERC721 Non-Fungible Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous token owner.\",\"operator\":\"The initiator of the safe transfer.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of an ERC721 token.\"}},\"notice\":\"Interface for supporting safe transfers from ERC721 contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of an ERC721 token."}},"notice":"Interface for supporting safe transfers from ERC721 contracts.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ERC721Storage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f33e12fece2d0f7d886ba42f4e492c112090989c77a3dc44341279767998eda764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN RETURNDATACOPY SLT INVALID 0xCE 0x2D 0xF PUSH30 0x886BA42F4E492C112090989C77A3DC44341279767998EDA764736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1368:29619:38:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1368:29619:38;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f33e12fece2d0f7d886ba42f4e492c112090989c77a3dc44341279767998eda764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN RETURNDATACOPY SLT INVALID 0xCE 0x2D 0xF PUSH30 0x886BA42F4E492C112090989C77A3DC44341279767998EDA764736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1368:29619:38:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOnERC721Received(address,address,address,uint256,bytes memory)":"infinite","_isOperatable(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","_tokenExists(uint256)":"infinite","_tokenHasApproval(uint256)":"infinite","_tokenOwner(uint256)":"infinite","_tokenWasBurnt(uint256)":"infinite","approve(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","balanceOf(struct ERC721Storage.Layout storage pointer,address)":"infinite","batchBurnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256[] calldata)":"infinite","batchMint(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchMintOnce(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256[] calldata)":"infinite","burnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","deliver(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","deliverOnce(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","getApproved(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","init()":"infinite","initERC721BatchTransfer()":"infinite","initERC721Burnable()":"infinite","initERC721Deliverable()":"infinite","initERC721Metadata()":"infinite","initERC721Mintable()":"infinite","isApprovedForAll(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","layout()":"infinite","mint(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","mintOnce(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","ownerOf(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","safeMint(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeMintOnce(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)":"infinite","setApprovalForAll(struct ERC721Storage.Layout storage pointer,address,address,bool)":"infinite","transferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","wasBurnt(struct ERC721Storage.Layout storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":\"ERC721Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"TokenMetadataBase":{"abi":[{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.","kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The token name."}},"symbol()":{"returns":{"tokenSymbol":"The token symbol."}}},"title":"TokenMetadataBase (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The token name.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The token symbol.\"}}},\"title\":\"TokenMetadataBase (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the token name. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the token symbol. E.g. \\\"TOK\\\".\"}},\"notice\":\"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":\"TokenMetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the token name. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the token symbol. E.g. \"TOK\"."}},"notice":"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ITokenMetadataResolver":{"abi":[{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenMetadataURI","outputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"tokenMetadataURI(address,uint256)":{"params":{"tokenContract":"The token contract for which to retrieve the token URI.","tokenId":"The token identifier."},"returns":{"tokenURI":"The token metadata URI."}}},"title":"ITokenMetadataResolver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokenMetadataURI(address,uint256)":"f724dad7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"params\":{\"tokenContract\":\"The token contract for which to retrieve the token URI.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenURI\":\"The token metadata URI.\"}}},\"title\":\"ITokenMetadataResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"notice\":\"Gets the token metadata URI for a token.\"}},\"notice\":\"Interface for Token Metadata Resolvers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":\"ITokenMetadataResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"tokenMetadataURI(address,uint256)":{"notice":"Gets the token metadata URI for a token."}},"notice":"Interface for Token Metadata Resolvers.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"TokenMetadataStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028c417df087b66ebee642c0e92dee9cbbe8d6ba0131b7c7b08d03e7403ee522a64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0xC4 OR 0xDF ADDMOD PUSH28 0x66EBEE642C0E92DEE9CBBE8D6BA0131B7C7B08D03E7403EE522A6473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"230:3387:41:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;230:3387:41;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028c417df087b66ebee642c0e92dee9cbbe8d6ba0131b7c7b08d03e7403ee522a64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0xC4 OR 0xDF ADDMOD PUSH28 0x66EBEE642C0E92DEE9CBBE8D6BA0131B7C7B08D03E7403EE522A6473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"230:3387:41:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)":"infinite","layout()":"infinite","metadataResolver(struct TokenMetadataStorage.Layout storage pointer)":"infinite","name(struct TokenMetadataStorage.Layout storage pointer)":"infinite","proxyInit(struct TokenMetadataStorage.Layout storage pointer,string calldata,string calldata,contract ITokenMetadataResolver)":"infinite","symbol(struct TokenMetadataStorage.Layout storage pointer)":"infinite","tokenMetadataURI(struct TokenMetadataStorage.Layout storage pointer,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":\"TokenMetadataStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:42:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:42;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:42:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:44:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:44;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:44:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol":{"OpenCampusCertificateNFTv1Mock":{"abi":[{"inputs":[{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"},{"internalType":"contract ITokenMetadataResolver","name":"metadataResolver","type":"address"},{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"},{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForApproval","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApproval","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApprovalForAll","type":"error"},{"inputs":[],"name":"ERC721TransferToAddressZero","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidBurn","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"internalType":"struct CertificateNFTv1MetaData.MetaData","name":"metadata","type":"tuple"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"name":"setRevocationRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vcData","outputs":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"ERC721SelfApproval(address)":[{"params":{"account":"The account trying to approve itself."}}],"ERC721SelfApprovalForAll(address)":[{"params":{"account":"The account trying to approveForAll itself."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"burn(uint256)":{"details":"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.","params":{"tokenId":"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":{"details":"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.","params":{"metadata":"Metadata for `tokenId`","to":"The owner of `tokenId`","tokenId":"The id of the VC NFT to be minted"}},"name()":{"returns":{"tokenName":"The name of the token."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"setRevocationRegistry(address)":{"params":{"revocationRegistry":"The address of the Revocation Registry contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1023":{"entryPoint":null,"id":1023,"parameterSlots":1,"returnSlots":0},"@_1070":{"entryPoint":null,"id":1070,"parameterSlots":1,"returnSlots":0},"@_1324":{"entryPoint":null,"id":1324,"parameterSlots":3,"returnSlots":0},"@_4227":{"entryPoint":null,"id":4227,"parameterSlots":6,"returnSlots":0},"@_4548":{"entryPoint":null,"id":4548,"parameterSlots":6,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@constructorInit_3609":{"entryPoint":264,"id":3609,"parameterSlots":4,"returnSlots":0},"@constructorInit_695":{"entryPoint":417,"id":695,"parameterSlots":2,"returnSlots":0},"@initERC721Metadata_1863":{"entryPoint":335,"id":1863,"parameterSlots":0,"returnSlots":0},"@init_1829":{"entryPoint":532,"id":1829,"parameterSlots":0,"returnSlots":0},"@layout_3722":{"entryPoint":210,"id":3722,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":369,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":551,"id":999,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_953":{"entryPoint":599,"id":953,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory":{"entryPoint":917,"id":null,"parameterSlots":2,"returnSlots":6},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1109,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1203,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1288,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1143,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":692,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IForwarderRegistry":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:5252:51","nodeType":"YulBlock","src":"0:5252:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"46:95:51","nodeType":"YulBlock","src":"46:95:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:51","nodeType":"YulLiteral","src":"63:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:51","nodeType":"YulLiteral","src":"70:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:51","nodeType":"YulLiteral","src":"75:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:51","nodeType":"YulIdentifier","src":"66:3:51"},"nativeSrc":"66:20:51","nodeType":"YulFunctionCall","src":"66:20:51"}],"functionName":{"name":"mstore","nativeSrc":"56:6:51","nodeType":"YulIdentifier","src":"56:6:51"},"nativeSrc":"56:31:51","nodeType":"YulFunctionCall","src":"56:31:51"},"nativeSrc":"56:31:51","nodeType":"YulExpressionStatement","src":"56:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:51","nodeType":"YulLiteral","src":"103:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:51","nodeType":"YulLiteral","src":"106:4:51","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:51","nodeType":"YulIdentifier","src":"96:6:51"},"nativeSrc":"96:15:51","nodeType":"YulFunctionCall","src":"96:15:51"},"nativeSrc":"96:15:51","nodeType":"YulExpressionStatement","src":"96:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:51","nodeType":"YulLiteral","src":"127:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:51","nodeType":"YulLiteral","src":"130:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:51","nodeType":"YulIdentifier","src":"120:6:51"},"nativeSrc":"120:15:51","nodeType":"YulFunctionCall","src":"120:15:51"},"nativeSrc":"120:15:51","nodeType":"YulExpressionStatement","src":"120:15:51"}]},"name":"panic_error_0x41","nativeSrc":"14:127:51","nodeType":"YulFunctionDefinition","src":"14:127:51"},{"body":{"nativeSrc":"210:780:51","nodeType":"YulBlock","src":"210:780:51","statements":[{"body":{"nativeSrc":"259:16:51","nodeType":"YulBlock","src":"259:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"268:1:51","nodeType":"YulLiteral","src":"268:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"271:1:51","nodeType":"YulLiteral","src":"271:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"261:6:51","nodeType":"YulIdentifier","src":"261:6:51"},"nativeSrc":"261:12:51","nodeType":"YulFunctionCall","src":"261:12:51"},"nativeSrc":"261:12:51","nodeType":"YulExpressionStatement","src":"261:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"238:6:51","nodeType":"YulIdentifier","src":"238:6:51"},{"kind":"number","nativeSrc":"246:4:51","nodeType":"YulLiteral","src":"246:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"234:3:51","nodeType":"YulIdentifier","src":"234:3:51"},"nativeSrc":"234:17:51","nodeType":"YulFunctionCall","src":"234:17:51"},{"name":"end","nativeSrc":"253:3:51","nodeType":"YulIdentifier","src":"253:3:51"}],"functionName":{"name":"slt","nativeSrc":"230:3:51","nodeType":"YulIdentifier","src":"230:3:51"},"nativeSrc":"230:27:51","nodeType":"YulFunctionCall","src":"230:27:51"}],"functionName":{"name":"iszero","nativeSrc":"223:6:51","nodeType":"YulIdentifier","src":"223:6:51"},"nativeSrc":"223:35:51","nodeType":"YulFunctionCall","src":"223:35:51"},"nativeSrc":"220:55:51","nodeType":"YulIf","src":"220:55:51"},{"nativeSrc":"284:23:51","nodeType":"YulVariableDeclaration","src":"284:23:51","value":{"arguments":[{"name":"offset","nativeSrc":"300:6:51","nodeType":"YulIdentifier","src":"300:6:51"}],"functionName":{"name":"mload","nativeSrc":"294:5:51","nodeType":"YulIdentifier","src":"294:5:51"},"nativeSrc":"294:13:51","nodeType":"YulFunctionCall","src":"294:13:51"},"variables":[{"name":"_1","nativeSrc":"288:2:51","nodeType":"YulTypedName","src":"288:2:51","type":""}]},{"nativeSrc":"316:28:51","nodeType":"YulVariableDeclaration","src":"316:28:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"334:2:51","nodeType":"YulLiteral","src":"334:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"338:1:51","nodeType":"YulLiteral","src":"338:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"330:3:51","nodeType":"YulIdentifier","src":"330:3:51"},"nativeSrc":"330:10:51","nodeType":"YulFunctionCall","src":"330:10:51"},{"kind":"number","nativeSrc":"342:1:51","nodeType":"YulLiteral","src":"342:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"326:3:51","nodeType":"YulIdentifier","src":"326:3:51"},"nativeSrc":"326:18:51","nodeType":"YulFunctionCall","src":"326:18:51"},"variables":[{"name":"_2","nativeSrc":"320:2:51","nodeType":"YulTypedName","src":"320:2:51","type":""}]},{"body":{"nativeSrc":"367:22:51","nodeType":"YulBlock","src":"367:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"369:16:51","nodeType":"YulIdentifier","src":"369:16:51"},"nativeSrc":"369:18:51","nodeType":"YulFunctionCall","src":"369:18:51"},"nativeSrc":"369:18:51","nodeType":"YulExpressionStatement","src":"369:18:51"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"359:2:51","nodeType":"YulIdentifier","src":"359:2:51"},{"name":"_2","nativeSrc":"363:2:51","nodeType":"YulIdentifier","src":"363:2:51"}],"functionName":{"name":"gt","nativeSrc":"356:2:51","nodeType":"YulIdentifier","src":"356:2:51"},"nativeSrc":"356:10:51","nodeType":"YulFunctionCall","src":"356:10:51"},"nativeSrc":"353:36:51","nodeType":"YulIf","src":"353:36:51"},{"nativeSrc":"398:17:51","nodeType":"YulVariableDeclaration","src":"398:17:51","value":{"arguments":[{"kind":"number","nativeSrc":"412:2:51","nodeType":"YulLiteral","src":"412:2:51","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"408:3:51","nodeType":"YulIdentifier","src":"408:3:51"},"nativeSrc":"408:7:51","nodeType":"YulFunctionCall","src":"408:7:51"},"variables":[{"name":"_3","nativeSrc":"402:2:51","nodeType":"YulTypedName","src":"402:2:51","type":""}]},{"nativeSrc":"424:23:51","nodeType":"YulVariableDeclaration","src":"424:23:51","value":{"arguments":[{"kind":"number","nativeSrc":"444:2:51","nodeType":"YulLiteral","src":"444:2:51","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"438:5:51","nodeType":"YulIdentifier","src":"438:5:51"},"nativeSrc":"438:9:51","nodeType":"YulFunctionCall","src":"438:9:51"},"variables":[{"name":"memPtr","nativeSrc":"428:6:51","nodeType":"YulTypedName","src":"428:6:51","type":""}]},{"nativeSrc":"456:71:51","nodeType":"YulVariableDeclaration","src":"456:71:51","value":{"arguments":[{"name":"memPtr","nativeSrc":"478:6:51","nodeType":"YulIdentifier","src":"478:6:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"502:2:51","nodeType":"YulIdentifier","src":"502:2:51"},{"kind":"number","nativeSrc":"506:4:51","nodeType":"YulLiteral","src":"506:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"498:3:51","nodeType":"YulIdentifier","src":"498:3:51"},"nativeSrc":"498:13:51","nodeType":"YulFunctionCall","src":"498:13:51"},{"name":"_3","nativeSrc":"513:2:51","nodeType":"YulIdentifier","src":"513:2:51"}],"functionName":{"name":"and","nativeSrc":"494:3:51","nodeType":"YulIdentifier","src":"494:3:51"},"nativeSrc":"494:22:51","nodeType":"YulFunctionCall","src":"494:22:51"},{"kind":"number","nativeSrc":"518:2:51","nodeType":"YulLiteral","src":"518:2:51","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"490:3:51","nodeType":"YulIdentifier","src":"490:3:51"},"nativeSrc":"490:31:51","nodeType":"YulFunctionCall","src":"490:31:51"},{"name":"_3","nativeSrc":"523:2:51","nodeType":"YulIdentifier","src":"523:2:51"}],"functionName":{"name":"and","nativeSrc":"486:3:51","nodeType":"YulIdentifier","src":"486:3:51"},"nativeSrc":"486:40:51","nodeType":"YulFunctionCall","src":"486:40:51"}],"functionName":{"name":"add","nativeSrc":"474:3:51","nodeType":"YulIdentifier","src":"474:3:51"},"nativeSrc":"474:53:51","nodeType":"YulFunctionCall","src":"474:53:51"},"variables":[{"name":"newFreePtr","nativeSrc":"460:10:51","nodeType":"YulTypedName","src":"460:10:51","type":""}]},{"body":{"nativeSrc":"586:22:51","nodeType":"YulBlock","src":"586:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"588:16:51","nodeType":"YulIdentifier","src":"588:16:51"},"nativeSrc":"588:18:51","nodeType":"YulFunctionCall","src":"588:18:51"},"nativeSrc":"588:18:51","nodeType":"YulExpressionStatement","src":"588:18:51"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"545:10:51","nodeType":"YulIdentifier","src":"545:10:51"},{"name":"_2","nativeSrc":"557:2:51","nodeType":"YulIdentifier","src":"557:2:51"}],"functionName":{"name":"gt","nativeSrc":"542:2:51","nodeType":"YulIdentifier","src":"542:2:51"},"nativeSrc":"542:18:51","nodeType":"YulFunctionCall","src":"542:18:51"},{"arguments":[{"name":"newFreePtr","nativeSrc":"565:10:51","nodeType":"YulIdentifier","src":"565:10:51"},{"name":"memPtr","nativeSrc":"577:6:51","nodeType":"YulIdentifier","src":"577:6:51"}],"functionName":{"name":"lt","nativeSrc":"562:2:51","nodeType":"YulIdentifier","src":"562:2:51"},"nativeSrc":"562:22:51","nodeType":"YulFunctionCall","src":"562:22:51"}],"functionName":{"name":"or","nativeSrc":"539:2:51","nodeType":"YulIdentifier","src":"539:2:51"},"nativeSrc":"539:46:51","nodeType":"YulFunctionCall","src":"539:46:51"},"nativeSrc":"536:72:51","nodeType":"YulIf","src":"536:72:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"624:2:51","nodeType":"YulLiteral","src":"624:2:51","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"628:10:51","nodeType":"YulIdentifier","src":"628:10:51"}],"functionName":{"name":"mstore","nativeSrc":"617:6:51","nodeType":"YulIdentifier","src":"617:6:51"},"nativeSrc":"617:22:51","nodeType":"YulFunctionCall","src":"617:22:51"},"nativeSrc":"617:22:51","nodeType":"YulExpressionStatement","src":"617:22:51"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"655:6:51","nodeType":"YulIdentifier","src":"655:6:51"},{"name":"_1","nativeSrc":"663:2:51","nodeType":"YulIdentifier","src":"663:2:51"}],"functionName":{"name":"mstore","nativeSrc":"648:6:51","nodeType":"YulIdentifier","src":"648:6:51"},"nativeSrc":"648:18:51","nodeType":"YulFunctionCall","src":"648:18:51"},"nativeSrc":"648:18:51","nodeType":"YulExpressionStatement","src":"648:18:51"},{"nativeSrc":"675:14:51","nodeType":"YulVariableDeclaration","src":"675:14:51","value":{"kind":"number","nativeSrc":"685:4:51","nodeType":"YulLiteral","src":"685:4:51","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"679:2:51","nodeType":"YulTypedName","src":"679:2:51","type":""}]},{"body":{"nativeSrc":"737:16:51","nodeType":"YulBlock","src":"737:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"746:1:51","nodeType":"YulLiteral","src":"746:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"749:1:51","nodeType":"YulLiteral","src":"749:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"739:6:51","nodeType":"YulIdentifier","src":"739:6:51"},"nativeSrc":"739:12:51","nodeType":"YulFunctionCall","src":"739:12:51"},"nativeSrc":"739:12:51","nodeType":"YulExpressionStatement","src":"739:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"712:6:51","nodeType":"YulIdentifier","src":"712:6:51"},{"name":"_1","nativeSrc":"720:2:51","nodeType":"YulIdentifier","src":"720:2:51"}],"functionName":{"name":"add","nativeSrc":"708:3:51","nodeType":"YulIdentifier","src":"708:3:51"},"nativeSrc":"708:15:51","nodeType":"YulFunctionCall","src":"708:15:51"},{"kind":"number","nativeSrc":"725:4:51","nodeType":"YulLiteral","src":"725:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"704:3:51","nodeType":"YulIdentifier","src":"704:3:51"},"nativeSrc":"704:26:51","nodeType":"YulFunctionCall","src":"704:26:51"},{"name":"end","nativeSrc":"732:3:51","nodeType":"YulIdentifier","src":"732:3:51"}],"functionName":{"name":"gt","nativeSrc":"701:2:51","nodeType":"YulIdentifier","src":"701:2:51"},"nativeSrc":"701:35:51","nodeType":"YulFunctionCall","src":"701:35:51"},"nativeSrc":"698:55:51","nodeType":"YulIf","src":"698:55:51"},{"nativeSrc":"762:10:51","nodeType":"YulVariableDeclaration","src":"762:10:51","value":{"kind":"number","nativeSrc":"771:1:51","nodeType":"YulLiteral","src":"771:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"766:1:51","nodeType":"YulTypedName","src":"766:1:51","type":""}]},{"body":{"nativeSrc":"827:87:51","nodeType":"YulBlock","src":"827:87:51","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"856:6:51","nodeType":"YulIdentifier","src":"856:6:51"},{"name":"i","nativeSrc":"864:1:51","nodeType":"YulIdentifier","src":"864:1:51"}],"functionName":{"name":"add","nativeSrc":"852:3:51","nodeType":"YulIdentifier","src":"852:3:51"},"nativeSrc":"852:14:51","nodeType":"YulFunctionCall","src":"852:14:51"},{"name":"_4","nativeSrc":"868:2:51","nodeType":"YulIdentifier","src":"868:2:51"}],"functionName":{"name":"add","nativeSrc":"848:3:51","nodeType":"YulIdentifier","src":"848:3:51"},"nativeSrc":"848:23:51","nodeType":"YulFunctionCall","src":"848:23:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"887:6:51","nodeType":"YulIdentifier","src":"887:6:51"},{"name":"i","nativeSrc":"895:1:51","nodeType":"YulIdentifier","src":"895:1:51"}],"functionName":{"name":"add","nativeSrc":"883:3:51","nodeType":"YulIdentifier","src":"883:3:51"},"nativeSrc":"883:14:51","nodeType":"YulFunctionCall","src":"883:14:51"},{"name":"_4","nativeSrc":"899:2:51","nodeType":"YulIdentifier","src":"899:2:51"}],"functionName":{"name":"add","nativeSrc":"879:3:51","nodeType":"YulIdentifier","src":"879:3:51"},"nativeSrc":"879:23:51","nodeType":"YulFunctionCall","src":"879:23:51"}],"functionName":{"name":"mload","nativeSrc":"873:5:51","nodeType":"YulIdentifier","src":"873:5:51"},"nativeSrc":"873:30:51","nodeType":"YulFunctionCall","src":"873:30:51"}],"functionName":{"name":"mstore","nativeSrc":"841:6:51","nodeType":"YulIdentifier","src":"841:6:51"},"nativeSrc":"841:63:51","nodeType":"YulFunctionCall","src":"841:63:51"},"nativeSrc":"841:63:51","nodeType":"YulExpressionStatement","src":"841:63:51"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"792:1:51","nodeType":"YulIdentifier","src":"792:1:51"},{"name":"_1","nativeSrc":"795:2:51","nodeType":"YulIdentifier","src":"795:2:51"}],"functionName":{"name":"lt","nativeSrc":"789:2:51","nodeType":"YulIdentifier","src":"789:2:51"},"nativeSrc":"789:9:51","nodeType":"YulFunctionCall","src":"789:9:51"},"nativeSrc":"781:133:51","nodeType":"YulForLoop","post":{"nativeSrc":"799:19:51","nodeType":"YulBlock","src":"799:19:51","statements":[{"nativeSrc":"801:15:51","nodeType":"YulAssignment","src":"801:15:51","value":{"arguments":[{"name":"i","nativeSrc":"810:1:51","nodeType":"YulIdentifier","src":"810:1:51"},{"name":"_4","nativeSrc":"813:2:51","nodeType":"YulIdentifier","src":"813:2:51"}],"functionName":{"name":"add","nativeSrc":"806:3:51","nodeType":"YulIdentifier","src":"806:3:51"},"nativeSrc":"806:10:51","nodeType":"YulFunctionCall","src":"806:10:51"},"variableNames":[{"name":"i","nativeSrc":"801:1:51","nodeType":"YulIdentifier","src":"801:1:51"}]}]},"pre":{"nativeSrc":"785:3:51","nodeType":"YulBlock","src":"785:3:51","statements":[]},"src":"781:133:51"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"938:6:51","nodeType":"YulIdentifier","src":"938:6:51"},{"name":"_1","nativeSrc":"946:2:51","nodeType":"YulIdentifier","src":"946:2:51"}],"functionName":{"name":"add","nativeSrc":"934:3:51","nodeType":"YulIdentifier","src":"934:3:51"},"nativeSrc":"934:15:51","nodeType":"YulFunctionCall","src":"934:15:51"},{"kind":"number","nativeSrc":"951:4:51","nodeType":"YulLiteral","src":"951:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"930:3:51","nodeType":"YulIdentifier","src":"930:3:51"},"nativeSrc":"930:26:51","nodeType":"YulFunctionCall","src":"930:26:51"},{"kind":"number","nativeSrc":"958:1:51","nodeType":"YulLiteral","src":"958:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"923:6:51","nodeType":"YulIdentifier","src":"923:6:51"},"nativeSrc":"923:37:51","nodeType":"YulFunctionCall","src":"923:37:51"},"nativeSrc":"923:37:51","nodeType":"YulExpressionStatement","src":"923:37:51"},{"nativeSrc":"969:15:51","nodeType":"YulAssignment","src":"969:15:51","value":{"name":"memPtr","nativeSrc":"978:6:51","nodeType":"YulIdentifier","src":"978:6:51"},"variableNames":[{"name":"array","nativeSrc":"969:5:51","nodeType":"YulIdentifier","src":"969:5:51"}]}]},"name":"abi_decode_string_fromMemory","nativeSrc":"146:844:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"184:6:51","nodeType":"YulTypedName","src":"184:6:51","type":""},{"name":"end","nativeSrc":"192:3:51","nodeType":"YulTypedName","src":"192:3:51","type":""}],"returnVariables":[{"name":"array","nativeSrc":"200:5:51","nodeType":"YulTypedName","src":"200:5:51","type":""}],"src":"146:844:51"},{"body":{"nativeSrc":"1060:86:51","nodeType":"YulBlock","src":"1060:86:51","statements":[{"body":{"nativeSrc":"1124:16:51","nodeType":"YulBlock","src":"1124:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1133:1:51","nodeType":"YulLiteral","src":"1133:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1136:1:51","nodeType":"YulLiteral","src":"1136:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1126:6:51","nodeType":"YulIdentifier","src":"1126:6:51"},"nativeSrc":"1126:12:51","nodeType":"YulFunctionCall","src":"1126:12:51"},"nativeSrc":"1126:12:51","nodeType":"YulExpressionStatement","src":"1126:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1083:5:51","nodeType":"YulIdentifier","src":"1083:5:51"},{"arguments":[{"name":"value","nativeSrc":"1094:5:51","nodeType":"YulIdentifier","src":"1094:5:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1109:3:51","nodeType":"YulLiteral","src":"1109:3:51","type":"","value":"160"},{"kind":"number","nativeSrc":"1114:1:51","nodeType":"YulLiteral","src":"1114:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1105:3:51","nodeType":"YulIdentifier","src":"1105:3:51"},"nativeSrc":"1105:11:51","nodeType":"YulFunctionCall","src":"1105:11:51"},{"kind":"number","nativeSrc":"1118:1:51","nodeType":"YulLiteral","src":"1118:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1101:3:51","nodeType":"YulIdentifier","src":"1101:3:51"},"nativeSrc":"1101:19:51","nodeType":"YulFunctionCall","src":"1101:19:51"}],"functionName":{"name":"and","nativeSrc":"1090:3:51","nodeType":"YulIdentifier","src":"1090:3:51"},"nativeSrc":"1090:31:51","nodeType":"YulFunctionCall","src":"1090:31:51"}],"functionName":{"name":"eq","nativeSrc":"1080:2:51","nodeType":"YulIdentifier","src":"1080:2:51"},"nativeSrc":"1080:42:51","nodeType":"YulFunctionCall","src":"1080:42:51"}],"functionName":{"name":"iszero","nativeSrc":"1073:6:51","nodeType":"YulIdentifier","src":"1073:6:51"},"nativeSrc":"1073:50:51","nodeType":"YulFunctionCall","src":"1073:50:51"},"nativeSrc":"1070:70:51","nodeType":"YulIf","src":"1070:70:51"}]},"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"995:151:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1049:5:51","nodeType":"YulTypedName","src":"1049:5:51","type":""}],"src":"995:151:51"},{"body":{"nativeSrc":"1451:989:51","nodeType":"YulBlock","src":"1451:989:51","statements":[{"body":{"nativeSrc":"1498:16:51","nodeType":"YulBlock","src":"1498:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1507:1:51","nodeType":"YulLiteral","src":"1507:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1510:1:51","nodeType":"YulLiteral","src":"1510:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1500:6:51","nodeType":"YulIdentifier","src":"1500:6:51"},"nativeSrc":"1500:12:51","nodeType":"YulFunctionCall","src":"1500:12:51"},"nativeSrc":"1500:12:51","nodeType":"YulExpressionStatement","src":"1500:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1472:7:51","nodeType":"YulIdentifier","src":"1472:7:51"},{"name":"headStart","nativeSrc":"1481:9:51","nodeType":"YulIdentifier","src":"1481:9:51"}],"functionName":{"name":"sub","nativeSrc":"1468:3:51","nodeType":"YulIdentifier","src":"1468:3:51"},"nativeSrc":"1468:23:51","nodeType":"YulFunctionCall","src":"1468:23:51"},{"kind":"number","nativeSrc":"1493:3:51","nodeType":"YulLiteral","src":"1493:3:51","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"1464:3:51","nodeType":"YulIdentifier","src":"1464:3:51"},"nativeSrc":"1464:33:51","nodeType":"YulFunctionCall","src":"1464:33:51"},"nativeSrc":"1461:53:51","nodeType":"YulIf","src":"1461:53:51"},{"nativeSrc":"1523:30:51","nodeType":"YulVariableDeclaration","src":"1523:30:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1543:9:51","nodeType":"YulIdentifier","src":"1543:9:51"}],"functionName":{"name":"mload","nativeSrc":"1537:5:51","nodeType":"YulIdentifier","src":"1537:5:51"},"nativeSrc":"1537:16:51","nodeType":"YulFunctionCall","src":"1537:16:51"},"variables":[{"name":"offset","nativeSrc":"1527:6:51","nodeType":"YulTypedName","src":"1527:6:51","type":""}]},{"nativeSrc":"1562:28:51","nodeType":"YulVariableDeclaration","src":"1562:28:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1580:2:51","nodeType":"YulLiteral","src":"1580:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"1584:1:51","nodeType":"YulLiteral","src":"1584:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1576:3:51","nodeType":"YulIdentifier","src":"1576:3:51"},"nativeSrc":"1576:10:51","nodeType":"YulFunctionCall","src":"1576:10:51"},{"kind":"number","nativeSrc":"1588:1:51","nodeType":"YulLiteral","src":"1588:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1572:3:51","nodeType":"YulIdentifier","src":"1572:3:51"},"nativeSrc":"1572:18:51","nodeType":"YulFunctionCall","src":"1572:18:51"},"variables":[{"name":"_1","nativeSrc":"1566:2:51","nodeType":"YulTypedName","src":"1566:2:51","type":""}]},{"body":{"nativeSrc":"1617:16:51","nodeType":"YulBlock","src":"1617:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1626:1:51","nodeType":"YulLiteral","src":"1626:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1629:1:51","nodeType":"YulLiteral","src":"1629:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1619:6:51","nodeType":"YulIdentifier","src":"1619:6:51"},"nativeSrc":"1619:12:51","nodeType":"YulFunctionCall","src":"1619:12:51"},"nativeSrc":"1619:12:51","nodeType":"YulExpressionStatement","src":"1619:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1605:6:51","nodeType":"YulIdentifier","src":"1605:6:51"},{"name":"_1","nativeSrc":"1613:2:51","nodeType":"YulIdentifier","src":"1613:2:51"}],"functionName":{"name":"gt","nativeSrc":"1602:2:51","nodeType":"YulIdentifier","src":"1602:2:51"},"nativeSrc":"1602:14:51","nodeType":"YulFunctionCall","src":"1602:14:51"},"nativeSrc":"1599:34:51","nodeType":"YulIf","src":"1599:34:51"},{"nativeSrc":"1642:71:51","nodeType":"YulAssignment","src":"1642:71:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1685:9:51","nodeType":"YulIdentifier","src":"1685:9:51"},{"name":"offset","nativeSrc":"1696:6:51","nodeType":"YulIdentifier","src":"1696:6:51"}],"functionName":{"name":"add","nativeSrc":"1681:3:51","nodeType":"YulIdentifier","src":"1681:3:51"},"nativeSrc":"1681:22:51","nodeType":"YulFunctionCall","src":"1681:22:51"},{"name":"dataEnd","nativeSrc":"1705:7:51","nodeType":"YulIdentifier","src":"1705:7:51"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1652:28:51","nodeType":"YulIdentifier","src":"1652:28:51"},"nativeSrc":"1652:61:51","nodeType":"YulFunctionCall","src":"1652:61:51"},"variableNames":[{"name":"value0","nativeSrc":"1642:6:51","nodeType":"YulIdentifier","src":"1642:6:51"}]},{"nativeSrc":"1722:41:51","nodeType":"YulVariableDeclaration","src":"1722:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1748:9:51","nodeType":"YulIdentifier","src":"1748:9:51"},{"kind":"number","nativeSrc":"1759:2:51","nodeType":"YulLiteral","src":"1759:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1744:3:51","nodeType":"YulIdentifier","src":"1744:3:51"},"nativeSrc":"1744:18:51","nodeType":"YulFunctionCall","src":"1744:18:51"}],"functionName":{"name":"mload","nativeSrc":"1738:5:51","nodeType":"YulIdentifier","src":"1738:5:51"},"nativeSrc":"1738:25:51","nodeType":"YulFunctionCall","src":"1738:25:51"},"variables":[{"name":"offset_1","nativeSrc":"1726:8:51","nodeType":"YulTypedName","src":"1726:8:51","type":""}]},{"body":{"nativeSrc":"1792:16:51","nodeType":"YulBlock","src":"1792:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1801:1:51","nodeType":"YulLiteral","src":"1801:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1804:1:51","nodeType":"YulLiteral","src":"1804:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1794:6:51","nodeType":"YulIdentifier","src":"1794:6:51"},"nativeSrc":"1794:12:51","nodeType":"YulFunctionCall","src":"1794:12:51"},"nativeSrc":"1794:12:51","nodeType":"YulExpressionStatement","src":"1794:12:51"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1778:8:51","nodeType":"YulIdentifier","src":"1778:8:51"},{"name":"_1","nativeSrc":"1788:2:51","nodeType":"YulIdentifier","src":"1788:2:51"}],"functionName":{"name":"gt","nativeSrc":"1775:2:51","nodeType":"YulIdentifier","src":"1775:2:51"},"nativeSrc":"1775:16:51","nodeType":"YulFunctionCall","src":"1775:16:51"},"nativeSrc":"1772:36:51","nodeType":"YulIf","src":"1772:36:51"},{"nativeSrc":"1817:73:51","nodeType":"YulAssignment","src":"1817:73:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1860:9:51","nodeType":"YulIdentifier","src":"1860:9:51"},{"name":"offset_1","nativeSrc":"1871:8:51","nodeType":"YulIdentifier","src":"1871:8:51"}],"functionName":{"name":"add","nativeSrc":"1856:3:51","nodeType":"YulIdentifier","src":"1856:3:51"},"nativeSrc":"1856:24:51","nodeType":"YulFunctionCall","src":"1856:24:51"},{"name":"dataEnd","nativeSrc":"1882:7:51","nodeType":"YulIdentifier","src":"1882:7:51"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1827:28:51","nodeType":"YulIdentifier","src":"1827:28:51"},"nativeSrc":"1827:63:51","nodeType":"YulFunctionCall","src":"1827:63:51"},"variableNames":[{"name":"value1","nativeSrc":"1817:6:51","nodeType":"YulIdentifier","src":"1817:6:51"}]},{"nativeSrc":"1899:38:51","nodeType":"YulVariableDeclaration","src":"1899:38:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1922:9:51","nodeType":"YulIdentifier","src":"1922:9:51"},{"kind":"number","nativeSrc":"1933:2:51","nodeType":"YulLiteral","src":"1933:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1918:3:51","nodeType":"YulIdentifier","src":"1918:3:51"},"nativeSrc":"1918:18:51","nodeType":"YulFunctionCall","src":"1918:18:51"}],"functionName":{"name":"mload","nativeSrc":"1912:5:51","nodeType":"YulIdentifier","src":"1912:5:51"},"nativeSrc":"1912:25:51","nodeType":"YulFunctionCall","src":"1912:25:51"},"variables":[{"name":"value","nativeSrc":"1903:5:51","nodeType":"YulTypedName","src":"1903:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1991:5:51","nodeType":"YulIdentifier","src":"1991:5:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"1946:44:51","nodeType":"YulIdentifier","src":"1946:44:51"},"nativeSrc":"1946:51:51","nodeType":"YulFunctionCall","src":"1946:51:51"},"nativeSrc":"1946:51:51","nodeType":"YulExpressionStatement","src":"1946:51:51"},{"nativeSrc":"2006:15:51","nodeType":"YulAssignment","src":"2006:15:51","value":{"name":"value","nativeSrc":"2016:5:51","nodeType":"YulIdentifier","src":"2016:5:51"},"variableNames":[{"name":"value2","nativeSrc":"2006:6:51","nodeType":"YulIdentifier","src":"2006:6:51"}]},{"nativeSrc":"2030:40:51","nodeType":"YulVariableDeclaration","src":"2030:40:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2055:9:51","nodeType":"YulIdentifier","src":"2055:9:51"},{"kind":"number","nativeSrc":"2066:2:51","nodeType":"YulLiteral","src":"2066:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2051:3:51","nodeType":"YulIdentifier","src":"2051:3:51"},"nativeSrc":"2051:18:51","nodeType":"YulFunctionCall","src":"2051:18:51"}],"functionName":{"name":"mload","nativeSrc":"2045:5:51","nodeType":"YulIdentifier","src":"2045:5:51"},"nativeSrc":"2045:25:51","nodeType":"YulFunctionCall","src":"2045:25:51"},"variables":[{"name":"value_1","nativeSrc":"2034:7:51","nodeType":"YulTypedName","src":"2034:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2124:7:51","nodeType":"YulIdentifier","src":"2124:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2079:44:51","nodeType":"YulIdentifier","src":"2079:44:51"},"nativeSrc":"2079:53:51","nodeType":"YulFunctionCall","src":"2079:53:51"},"nativeSrc":"2079:53:51","nodeType":"YulExpressionStatement","src":"2079:53:51"},{"nativeSrc":"2141:17:51","nodeType":"YulAssignment","src":"2141:17:51","value":{"name":"value_1","nativeSrc":"2151:7:51","nodeType":"YulIdentifier","src":"2151:7:51"},"variableNames":[{"name":"value3","nativeSrc":"2141:6:51","nodeType":"YulIdentifier","src":"2141:6:51"}]},{"nativeSrc":"2167:41:51","nodeType":"YulVariableDeclaration","src":"2167:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2192:9:51","nodeType":"YulIdentifier","src":"2192:9:51"},{"kind":"number","nativeSrc":"2203:3:51","nodeType":"YulLiteral","src":"2203:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2188:3:51","nodeType":"YulIdentifier","src":"2188:3:51"},"nativeSrc":"2188:19:51","nodeType":"YulFunctionCall","src":"2188:19:51"}],"functionName":{"name":"mload","nativeSrc":"2182:5:51","nodeType":"YulIdentifier","src":"2182:5:51"},"nativeSrc":"2182:26:51","nodeType":"YulFunctionCall","src":"2182:26:51"},"variables":[{"name":"value_2","nativeSrc":"2171:7:51","nodeType":"YulTypedName","src":"2171:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"2262:7:51","nodeType":"YulIdentifier","src":"2262:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2217:44:51","nodeType":"YulIdentifier","src":"2217:44:51"},"nativeSrc":"2217:53:51","nodeType":"YulFunctionCall","src":"2217:53:51"},"nativeSrc":"2217:53:51","nodeType":"YulExpressionStatement","src":"2217:53:51"},{"nativeSrc":"2279:17:51","nodeType":"YulAssignment","src":"2279:17:51","value":{"name":"value_2","nativeSrc":"2289:7:51","nodeType":"YulIdentifier","src":"2289:7:51"},"variableNames":[{"name":"value4","nativeSrc":"2279:6:51","nodeType":"YulIdentifier","src":"2279:6:51"}]},{"nativeSrc":"2305:41:51","nodeType":"YulVariableDeclaration","src":"2305:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2330:9:51","nodeType":"YulIdentifier","src":"2330:9:51"},{"kind":"number","nativeSrc":"2341:3:51","nodeType":"YulLiteral","src":"2341:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"2326:3:51","nodeType":"YulIdentifier","src":"2326:3:51"},"nativeSrc":"2326:19:51","nodeType":"YulFunctionCall","src":"2326:19:51"}],"functionName":{"name":"mload","nativeSrc":"2320:5:51","nodeType":"YulIdentifier","src":"2320:5:51"},"nativeSrc":"2320:26:51","nodeType":"YulFunctionCall","src":"2320:26:51"},"variables":[{"name":"value_3","nativeSrc":"2309:7:51","nodeType":"YulTypedName","src":"2309:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"2400:7:51","nodeType":"YulIdentifier","src":"2400:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2355:44:51","nodeType":"YulIdentifier","src":"2355:44:51"},"nativeSrc":"2355:53:51","nodeType":"YulFunctionCall","src":"2355:53:51"},"nativeSrc":"2355:53:51","nodeType":"YulExpressionStatement","src":"2355:53:51"},{"nativeSrc":"2417:17:51","nodeType":"YulAssignment","src":"2417:17:51","value":{"name":"value_3","nativeSrc":"2427:7:51","nodeType":"YulIdentifier","src":"2427:7:51"},"variableNames":[{"name":"value5","nativeSrc":"2417:6:51","nodeType":"YulIdentifier","src":"2417:6:51"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory","nativeSrc":"1151:1289:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1377:9:51","nodeType":"YulTypedName","src":"1377:9:51","type":""},{"name":"dataEnd","nativeSrc":"1388:7:51","nodeType":"YulTypedName","src":"1388:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1400:6:51","nodeType":"YulTypedName","src":"1400:6:51","type":""},{"name":"value1","nativeSrc":"1408:6:51","nodeType":"YulTypedName","src":"1408:6:51","type":""},{"name":"value2","nativeSrc":"1416:6:51","nodeType":"YulTypedName","src":"1416:6:51","type":""},{"name":"value3","nativeSrc":"1424:6:51","nodeType":"YulTypedName","src":"1424:6:51","type":""},{"name":"value4","nativeSrc":"1432:6:51","nodeType":"YulTypedName","src":"1432:6:51","type":""},{"name":"value5","nativeSrc":"1440:6:51","nodeType":"YulTypedName","src":"1440:6:51","type":""}],"src":"1151:1289:51"},{"body":{"nativeSrc":"2494:176:51","nodeType":"YulBlock","src":"2494:176:51","statements":[{"nativeSrc":"2504:17:51","nodeType":"YulAssignment","src":"2504:17:51","value":{"arguments":[{"name":"x","nativeSrc":"2516:1:51","nodeType":"YulIdentifier","src":"2516:1:51"},{"name":"y","nativeSrc":"2519:1:51","nodeType":"YulIdentifier","src":"2519:1:51"}],"functionName":{"name":"sub","nativeSrc":"2512:3:51","nodeType":"YulIdentifier","src":"2512:3:51"},"nativeSrc":"2512:9:51","nodeType":"YulFunctionCall","src":"2512:9:51"},"variableNames":[{"name":"diff","nativeSrc":"2504:4:51","nodeType":"YulIdentifier","src":"2504:4:51"}]},{"body":{"nativeSrc":"2553:111:51","nodeType":"YulBlock","src":"2553:111:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2574:1:51","nodeType":"YulLiteral","src":"2574:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2581:3:51","nodeType":"YulLiteral","src":"2581:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"2586:10:51","nodeType":"YulLiteral","src":"2586:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2577:3:51","nodeType":"YulIdentifier","src":"2577:3:51"},"nativeSrc":"2577:20:51","nodeType":"YulFunctionCall","src":"2577:20:51"}],"functionName":{"name":"mstore","nativeSrc":"2567:6:51","nodeType":"YulIdentifier","src":"2567:6:51"},"nativeSrc":"2567:31:51","nodeType":"YulFunctionCall","src":"2567:31:51"},"nativeSrc":"2567:31:51","nodeType":"YulExpressionStatement","src":"2567:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2618:1:51","nodeType":"YulLiteral","src":"2618:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"2621:4:51","nodeType":"YulLiteral","src":"2621:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2611:6:51","nodeType":"YulIdentifier","src":"2611:6:51"},"nativeSrc":"2611:15:51","nodeType":"YulFunctionCall","src":"2611:15:51"},"nativeSrc":"2611:15:51","nodeType":"YulExpressionStatement","src":"2611:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2646:1:51","nodeType":"YulLiteral","src":"2646:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2649:4:51","nodeType":"YulLiteral","src":"2649:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2639:6:51","nodeType":"YulIdentifier","src":"2639:6:51"},"nativeSrc":"2639:15:51","nodeType":"YulFunctionCall","src":"2639:15:51"},"nativeSrc":"2639:15:51","nodeType":"YulExpressionStatement","src":"2639:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"2536:4:51","nodeType":"YulIdentifier","src":"2536:4:51"},{"name":"x","nativeSrc":"2542:1:51","nodeType":"YulIdentifier","src":"2542:1:51"}],"functionName":{"name":"gt","nativeSrc":"2533:2:51","nodeType":"YulIdentifier","src":"2533:2:51"},"nativeSrc":"2533:11:51","nodeType":"YulFunctionCall","src":"2533:11:51"},"nativeSrc":"2530:134:51","nodeType":"YulIf","src":"2530:134:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"2445:225:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2476:1:51","nodeType":"YulTypedName","src":"2476:1:51","type":""},{"name":"y","nativeSrc":"2479:1:51","nodeType":"YulTypedName","src":"2479:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"2485:4:51","nodeType":"YulTypedName","src":"2485:4:51","type":""}],"src":"2445:225:51"},{"body":{"nativeSrc":"2730:325:51","nodeType":"YulBlock","src":"2730:325:51","statements":[{"nativeSrc":"2740:22:51","nodeType":"YulAssignment","src":"2740:22:51","value":{"arguments":[{"kind":"number","nativeSrc":"2754:1:51","nodeType":"YulLiteral","src":"2754:1:51","type":"","value":"1"},{"name":"data","nativeSrc":"2757:4:51","nodeType":"YulIdentifier","src":"2757:4:51"}],"functionName":{"name":"shr","nativeSrc":"2750:3:51","nodeType":"YulIdentifier","src":"2750:3:51"},"nativeSrc":"2750:12:51","nodeType":"YulFunctionCall","src":"2750:12:51"},"variableNames":[{"name":"length","nativeSrc":"2740:6:51","nodeType":"YulIdentifier","src":"2740:6:51"}]},{"nativeSrc":"2771:38:51","nodeType":"YulVariableDeclaration","src":"2771:38:51","value":{"arguments":[{"name":"data","nativeSrc":"2801:4:51","nodeType":"YulIdentifier","src":"2801:4:51"},{"kind":"number","nativeSrc":"2807:1:51","nodeType":"YulLiteral","src":"2807:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2797:3:51","nodeType":"YulIdentifier","src":"2797:3:51"},"nativeSrc":"2797:12:51","nodeType":"YulFunctionCall","src":"2797:12:51"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2775:18:51","nodeType":"YulTypedName","src":"2775:18:51","type":""}]},{"body":{"nativeSrc":"2848:31:51","nodeType":"YulBlock","src":"2848:31:51","statements":[{"nativeSrc":"2850:27:51","nodeType":"YulAssignment","src":"2850:27:51","value":{"arguments":[{"name":"length","nativeSrc":"2864:6:51","nodeType":"YulIdentifier","src":"2864:6:51"},{"kind":"number","nativeSrc":"2872:4:51","nodeType":"YulLiteral","src":"2872:4:51","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2860:3:51","nodeType":"YulIdentifier","src":"2860:3:51"},"nativeSrc":"2860:17:51","nodeType":"YulFunctionCall","src":"2860:17:51"},"variableNames":[{"name":"length","nativeSrc":"2850:6:51","nodeType":"YulIdentifier","src":"2850:6:51"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2828:18:51","nodeType":"YulIdentifier","src":"2828:18:51"}],"functionName":{"name":"iszero","nativeSrc":"2821:6:51","nodeType":"YulIdentifier","src":"2821:6:51"},"nativeSrc":"2821:26:51","nodeType":"YulFunctionCall","src":"2821:26:51"},"nativeSrc":"2818:61:51","nodeType":"YulIf","src":"2818:61:51"},{"body":{"nativeSrc":"2938:111:51","nodeType":"YulBlock","src":"2938:111:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2959:1:51","nodeType":"YulLiteral","src":"2959:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2966:3:51","nodeType":"YulLiteral","src":"2966:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"2971:10:51","nodeType":"YulLiteral","src":"2971:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2962:3:51","nodeType":"YulIdentifier","src":"2962:3:51"},"nativeSrc":"2962:20:51","nodeType":"YulFunctionCall","src":"2962:20:51"}],"functionName":{"name":"mstore","nativeSrc":"2952:6:51","nodeType":"YulIdentifier","src":"2952:6:51"},"nativeSrc":"2952:31:51","nodeType":"YulFunctionCall","src":"2952:31:51"},"nativeSrc":"2952:31:51","nodeType":"YulExpressionStatement","src":"2952:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3003:1:51","nodeType":"YulLiteral","src":"3003:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"3006:4:51","nodeType":"YulLiteral","src":"3006:4:51","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2996:6:51","nodeType":"YulIdentifier","src":"2996:6:51"},"nativeSrc":"2996:15:51","nodeType":"YulFunctionCall","src":"2996:15:51"},"nativeSrc":"2996:15:51","nodeType":"YulExpressionStatement","src":"2996:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3031:1:51","nodeType":"YulLiteral","src":"3031:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3034:4:51","nodeType":"YulLiteral","src":"3034:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3024:6:51","nodeType":"YulIdentifier","src":"3024:6:51"},"nativeSrc":"3024:15:51","nodeType":"YulFunctionCall","src":"3024:15:51"},"nativeSrc":"3024:15:51","nodeType":"YulExpressionStatement","src":"3024:15:51"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2894:18:51","nodeType":"YulIdentifier","src":"2894:18:51"},{"arguments":[{"name":"length","nativeSrc":"2917:6:51","nodeType":"YulIdentifier","src":"2917:6:51"},{"kind":"number","nativeSrc":"2925:2:51","nodeType":"YulLiteral","src":"2925:2:51","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2914:2:51","nodeType":"YulIdentifier","src":"2914:2:51"},"nativeSrc":"2914:14:51","nodeType":"YulFunctionCall","src":"2914:14:51"}],"functionName":{"name":"eq","nativeSrc":"2891:2:51","nodeType":"YulIdentifier","src":"2891:2:51"},"nativeSrc":"2891:38:51","nodeType":"YulFunctionCall","src":"2891:38:51"},"nativeSrc":"2888:161:51","nodeType":"YulIf","src":"2888:161:51"}]},"name":"extract_byte_array_length","nativeSrc":"2675:380:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2710:4:51","nodeType":"YulTypedName","src":"2710:4:51","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2719:6:51","nodeType":"YulTypedName","src":"2719:6:51","type":""}],"src":"2675:380:51"},{"body":{"nativeSrc":"3116:65:51","nodeType":"YulBlock","src":"3116:65:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3133:1:51","nodeType":"YulLiteral","src":"3133:1:51","type":"","value":"0"},{"name":"ptr","nativeSrc":"3136:3:51","nodeType":"YulIdentifier","src":"3136:3:51"}],"functionName":{"name":"mstore","nativeSrc":"3126:6:51","nodeType":"YulIdentifier","src":"3126:6:51"},"nativeSrc":"3126:14:51","nodeType":"YulFunctionCall","src":"3126:14:51"},"nativeSrc":"3126:14:51","nodeType":"YulExpressionStatement","src":"3126:14:51"},{"nativeSrc":"3149:26:51","nodeType":"YulAssignment","src":"3149:26:51","value":{"arguments":[{"kind":"number","nativeSrc":"3167:1:51","nodeType":"YulLiteral","src":"3167:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3170:4:51","nodeType":"YulLiteral","src":"3170:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3157:9:51","nodeType":"YulIdentifier","src":"3157:9:51"},"nativeSrc":"3157:18:51","nodeType":"YulFunctionCall","src":"3157:18:51"},"variableNames":[{"name":"data","nativeSrc":"3149:4:51","nodeType":"YulIdentifier","src":"3149:4:51"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"3060:121:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"3099:3:51","nodeType":"YulTypedName","src":"3099:3:51","type":""}],"returnVariables":[{"name":"data","nativeSrc":"3107:4:51","nodeType":"YulTypedName","src":"3107:4:51","type":""}],"src":"3060:121:51"},{"body":{"nativeSrc":"3267:462:51","nodeType":"YulBlock","src":"3267:462:51","statements":[{"body":{"nativeSrc":"3300:423:51","nodeType":"YulBlock","src":"3300:423:51","statements":[{"nativeSrc":"3314:11:51","nodeType":"YulVariableDeclaration","src":"3314:11:51","value":{"kind":"number","nativeSrc":"3324:1:51","nodeType":"YulLiteral","src":"3324:1:51","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"3318:2:51","nodeType":"YulTypedName","src":"3318:2:51","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3345:1:51","nodeType":"YulLiteral","src":"3345:1:51","type":"","value":"0"},{"name":"array","nativeSrc":"3348:5:51","nodeType":"YulIdentifier","src":"3348:5:51"}],"functionName":{"name":"mstore","nativeSrc":"3338:6:51","nodeType":"YulIdentifier","src":"3338:6:51"},"nativeSrc":"3338:16:51","nodeType":"YulFunctionCall","src":"3338:16:51"},"nativeSrc":"3338:16:51","nodeType":"YulExpressionStatement","src":"3338:16:51"},{"nativeSrc":"3367:30:51","nodeType":"YulVariableDeclaration","src":"3367:30:51","value":{"arguments":[{"kind":"number","nativeSrc":"3389:1:51","nodeType":"YulLiteral","src":"3389:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3392:4:51","nodeType":"YulLiteral","src":"3392:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3379:9:51","nodeType":"YulIdentifier","src":"3379:9:51"},"nativeSrc":"3379:18:51","nodeType":"YulFunctionCall","src":"3379:18:51"},"variables":[{"name":"data","nativeSrc":"3371:4:51","nodeType":"YulTypedName","src":"3371:4:51","type":""}]},{"nativeSrc":"3410:57:51","nodeType":"YulVariableDeclaration","src":"3410:57:51","value":{"arguments":[{"name":"data","nativeSrc":"3433:4:51","nodeType":"YulIdentifier","src":"3433:4:51"},{"arguments":[{"kind":"number","nativeSrc":"3443:1:51","nodeType":"YulLiteral","src":"3443:1:51","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"3450:10:51","nodeType":"YulIdentifier","src":"3450:10:51"},{"kind":"number","nativeSrc":"3462:2:51","nodeType":"YulLiteral","src":"3462:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3446:3:51","nodeType":"YulIdentifier","src":"3446:3:51"},"nativeSrc":"3446:19:51","nodeType":"YulFunctionCall","src":"3446:19:51"}],"functionName":{"name":"shr","nativeSrc":"3439:3:51","nodeType":"YulIdentifier","src":"3439:3:51"},"nativeSrc":"3439:27:51","nodeType":"YulFunctionCall","src":"3439:27:51"}],"functionName":{"name":"add","nativeSrc":"3429:3:51","nodeType":"YulIdentifier","src":"3429:3:51"},"nativeSrc":"3429:38:51","nodeType":"YulFunctionCall","src":"3429:38:51"},"variables":[{"name":"deleteStart","nativeSrc":"3414:11:51","nodeType":"YulTypedName","src":"3414:11:51","type":""}]},{"body":{"nativeSrc":"3504:23:51","nodeType":"YulBlock","src":"3504:23:51","statements":[{"nativeSrc":"3506:19:51","nodeType":"YulAssignment","src":"3506:19:51","value":{"name":"data","nativeSrc":"3521:4:51","nodeType":"YulIdentifier","src":"3521:4:51"},"variableNames":[{"name":"deleteStart","nativeSrc":"3506:11:51","nodeType":"YulIdentifier","src":"3506:11:51"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"3486:10:51","nodeType":"YulIdentifier","src":"3486:10:51"},{"kind":"number","nativeSrc":"3498:4:51","nodeType":"YulLiteral","src":"3498:4:51","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"3483:2:51","nodeType":"YulIdentifier","src":"3483:2:51"},"nativeSrc":"3483:20:51","nodeType":"YulFunctionCall","src":"3483:20:51"},"nativeSrc":"3480:47:51","nodeType":"YulIf","src":"3480:47:51"},{"nativeSrc":"3540:41:51","nodeType":"YulVariableDeclaration","src":"3540:41:51","value":{"arguments":[{"name":"data","nativeSrc":"3554:4:51","nodeType":"YulIdentifier","src":"3554:4:51"},{"arguments":[{"kind":"number","nativeSrc":"3564:1:51","nodeType":"YulLiteral","src":"3564:1:51","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"3571:3:51","nodeType":"YulIdentifier","src":"3571:3:51"},{"kind":"number","nativeSrc":"3576:2:51","nodeType":"YulLiteral","src":"3576:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3567:3:51","nodeType":"YulIdentifier","src":"3567:3:51"},"nativeSrc":"3567:12:51","nodeType":"YulFunctionCall","src":"3567:12:51"}],"functionName":{"name":"shr","nativeSrc":"3560:3:51","nodeType":"YulIdentifier","src":"3560:3:51"},"nativeSrc":"3560:20:51","nodeType":"YulFunctionCall","src":"3560:20:51"}],"functionName":{"name":"add","nativeSrc":"3550:3:51","nodeType":"YulIdentifier","src":"3550:3:51"},"nativeSrc":"3550:31:51","nodeType":"YulFunctionCall","src":"3550:31:51"},"variables":[{"name":"_2","nativeSrc":"3544:2:51","nodeType":"YulTypedName","src":"3544:2:51","type":""}]},{"nativeSrc":"3594:24:51","nodeType":"YulVariableDeclaration","src":"3594:24:51","value":{"name":"deleteStart","nativeSrc":"3607:11:51","nodeType":"YulIdentifier","src":"3607:11:51"},"variables":[{"name":"start","nativeSrc":"3598:5:51","nodeType":"YulTypedName","src":"3598:5:51","type":""}]},{"body":{"nativeSrc":"3692:21:51","nodeType":"YulBlock","src":"3692:21:51","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"3701:5:51","nodeType":"YulIdentifier","src":"3701:5:51"},{"name":"_1","nativeSrc":"3708:2:51","nodeType":"YulIdentifier","src":"3708:2:51"}],"functionName":{"name":"sstore","nativeSrc":"3694:6:51","nodeType":"YulIdentifier","src":"3694:6:51"},"nativeSrc":"3694:17:51","nodeType":"YulFunctionCall","src":"3694:17:51"},"nativeSrc":"3694:17:51","nodeType":"YulExpressionStatement","src":"3694:17:51"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"3642:5:51","nodeType":"YulIdentifier","src":"3642:5:51"},{"name":"_2","nativeSrc":"3649:2:51","nodeType":"YulIdentifier","src":"3649:2:51"}],"functionName":{"name":"lt","nativeSrc":"3639:2:51","nodeType":"YulIdentifier","src":"3639:2:51"},"nativeSrc":"3639:13:51","nodeType":"YulFunctionCall","src":"3639:13:51"},"nativeSrc":"3631:82:51","nodeType":"YulForLoop","post":{"nativeSrc":"3653:26:51","nodeType":"YulBlock","src":"3653:26:51","statements":[{"nativeSrc":"3655:22:51","nodeType":"YulAssignment","src":"3655:22:51","value":{"arguments":[{"name":"start","nativeSrc":"3668:5:51","nodeType":"YulIdentifier","src":"3668:5:51"},{"kind":"number","nativeSrc":"3675:1:51","nodeType":"YulLiteral","src":"3675:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3664:3:51","nodeType":"YulIdentifier","src":"3664:3:51"},"nativeSrc":"3664:13:51","nodeType":"YulFunctionCall","src":"3664:13:51"},"variableNames":[{"name":"start","nativeSrc":"3655:5:51","nodeType":"YulIdentifier","src":"3655:5:51"}]}]},"pre":{"nativeSrc":"3635:3:51","nodeType":"YulBlock","src":"3635:3:51","statements":[]},"src":"3631:82:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"3283:3:51","nodeType":"YulIdentifier","src":"3283:3:51"},{"kind":"number","nativeSrc":"3288:2:51","nodeType":"YulLiteral","src":"3288:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"3280:2:51","nodeType":"YulIdentifier","src":"3280:2:51"},"nativeSrc":"3280:11:51","nodeType":"YulFunctionCall","src":"3280:11:51"},"nativeSrc":"3277:446:51","nodeType":"YulIf","src":"3277:446:51"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"3186:543:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"3239:5:51","nodeType":"YulTypedName","src":"3239:5:51","type":""},{"name":"len","nativeSrc":"3246:3:51","nodeType":"YulTypedName","src":"3246:3:51","type":""},{"name":"startIndex","nativeSrc":"3251:10:51","nodeType":"YulTypedName","src":"3251:10:51","type":""}],"src":"3186:543:51"},{"body":{"nativeSrc":"3819:81:51","nodeType":"YulBlock","src":"3819:81:51","statements":[{"nativeSrc":"3829:65:51","nodeType":"YulAssignment","src":"3829:65:51","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"3844:4:51","nodeType":"YulIdentifier","src":"3844:4:51"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3862:1:51","nodeType":"YulLiteral","src":"3862:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"3865:3:51","nodeType":"YulIdentifier","src":"3865:3:51"}],"functionName":{"name":"shl","nativeSrc":"3858:3:51","nodeType":"YulIdentifier","src":"3858:3:51"},"nativeSrc":"3858:11:51","nodeType":"YulFunctionCall","src":"3858:11:51"},{"arguments":[{"kind":"number","nativeSrc":"3875:1:51","nodeType":"YulLiteral","src":"3875:1:51","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3871:3:51","nodeType":"YulIdentifier","src":"3871:3:51"},"nativeSrc":"3871:6:51","nodeType":"YulFunctionCall","src":"3871:6:51"}],"functionName":{"name":"shr","nativeSrc":"3854:3:51","nodeType":"YulIdentifier","src":"3854:3:51"},"nativeSrc":"3854:24:51","nodeType":"YulFunctionCall","src":"3854:24:51"}],"functionName":{"name":"not","nativeSrc":"3850:3:51","nodeType":"YulIdentifier","src":"3850:3:51"},"nativeSrc":"3850:29:51","nodeType":"YulFunctionCall","src":"3850:29:51"}],"functionName":{"name":"and","nativeSrc":"3840:3:51","nodeType":"YulIdentifier","src":"3840:3:51"},"nativeSrc":"3840:40:51","nodeType":"YulFunctionCall","src":"3840:40:51"},{"arguments":[{"kind":"number","nativeSrc":"3886:1:51","nodeType":"YulLiteral","src":"3886:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"3889:3:51","nodeType":"YulIdentifier","src":"3889:3:51"}],"functionName":{"name":"shl","nativeSrc":"3882:3:51","nodeType":"YulIdentifier","src":"3882:3:51"},"nativeSrc":"3882:11:51","nodeType":"YulFunctionCall","src":"3882:11:51"}],"functionName":{"name":"or","nativeSrc":"3837:2:51","nodeType":"YulIdentifier","src":"3837:2:51"},"nativeSrc":"3837:57:51","nodeType":"YulFunctionCall","src":"3837:57:51"},"variableNames":[{"name":"used","nativeSrc":"3829:4:51","nodeType":"YulIdentifier","src":"3829:4:51"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3734:166:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3796:4:51","nodeType":"YulTypedName","src":"3796:4:51","type":""},{"name":"len","nativeSrc":"3802:3:51","nodeType":"YulTypedName","src":"3802:3:51","type":""}],"returnVariables":[{"name":"used","nativeSrc":"3810:4:51","nodeType":"YulTypedName","src":"3810:4:51","type":""}],"src":"3734:166:51"},{"body":{"nativeSrc":"4001:1249:51","nodeType":"YulBlock","src":"4001:1249:51","statements":[{"nativeSrc":"4011:24:51","nodeType":"YulVariableDeclaration","src":"4011:24:51","value":{"arguments":[{"name":"src","nativeSrc":"4031:3:51","nodeType":"YulIdentifier","src":"4031:3:51"}],"functionName":{"name":"mload","nativeSrc":"4025:5:51","nodeType":"YulIdentifier","src":"4025:5:51"},"nativeSrc":"4025:10:51","nodeType":"YulFunctionCall","src":"4025:10:51"},"variables":[{"name":"newLen","nativeSrc":"4015:6:51","nodeType":"YulTypedName","src":"4015:6:51","type":""}]},{"body":{"nativeSrc":"4078:22:51","nodeType":"YulBlock","src":"4078:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4080:16:51","nodeType":"YulIdentifier","src":"4080:16:51"},"nativeSrc":"4080:18:51","nodeType":"YulFunctionCall","src":"4080:18:51"},"nativeSrc":"4080:18:51","nodeType":"YulExpressionStatement","src":"4080:18:51"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"4050:6:51","nodeType":"YulIdentifier","src":"4050:6:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4066:2:51","nodeType":"YulLiteral","src":"4066:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"4070:1:51","nodeType":"YulLiteral","src":"4070:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4062:3:51","nodeType":"YulIdentifier","src":"4062:3:51"},"nativeSrc":"4062:10:51","nodeType":"YulFunctionCall","src":"4062:10:51"},{"kind":"number","nativeSrc":"4074:1:51","nodeType":"YulLiteral","src":"4074:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4058:3:51","nodeType":"YulIdentifier","src":"4058:3:51"},"nativeSrc":"4058:18:51","nodeType":"YulFunctionCall","src":"4058:18:51"}],"functionName":{"name":"gt","nativeSrc":"4047:2:51","nodeType":"YulIdentifier","src":"4047:2:51"},"nativeSrc":"4047:30:51","nodeType":"YulFunctionCall","src":"4047:30:51"},"nativeSrc":"4044:56:51","nodeType":"YulIf","src":"4044:56:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4153:4:51","nodeType":"YulIdentifier","src":"4153:4:51"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"4191:4:51","nodeType":"YulIdentifier","src":"4191:4:51"}],"functionName":{"name":"sload","nativeSrc":"4185:5:51","nodeType":"YulIdentifier","src":"4185:5:51"},"nativeSrc":"4185:11:51","nodeType":"YulFunctionCall","src":"4185:11:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"4159:25:51","nodeType":"YulIdentifier","src":"4159:25:51"},"nativeSrc":"4159:38:51","nodeType":"YulFunctionCall","src":"4159:38:51"},{"name":"newLen","nativeSrc":"4199:6:51","nodeType":"YulIdentifier","src":"4199:6:51"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"4109:43:51","nodeType":"YulIdentifier","src":"4109:43:51"},"nativeSrc":"4109:97:51","nodeType":"YulFunctionCall","src":"4109:97:51"},"nativeSrc":"4109:97:51","nodeType":"YulExpressionStatement","src":"4109:97:51"},{"nativeSrc":"4215:18:51","nodeType":"YulVariableDeclaration","src":"4215:18:51","value":{"kind":"number","nativeSrc":"4232:1:51","nodeType":"YulLiteral","src":"4232:1:51","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"4219:9:51","nodeType":"YulTypedName","src":"4219:9:51","type":""}]},{"nativeSrc":"4242:23:51","nodeType":"YulVariableDeclaration","src":"4242:23:51","value":{"kind":"number","nativeSrc":"4261:4:51","nodeType":"YulLiteral","src":"4261:4:51","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"4246:11:51","nodeType":"YulTypedName","src":"4246:11:51","type":""}]},{"nativeSrc":"4274:17:51","nodeType":"YulAssignment","src":"4274:17:51","value":{"kind":"number","nativeSrc":"4287:4:51","nodeType":"YulLiteral","src":"4287:4:51","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"4274:9:51","nodeType":"YulIdentifier","src":"4274:9:51"}]},{"cases":[{"body":{"nativeSrc":"4337:656:51","nodeType":"YulBlock","src":"4337:656:51","statements":[{"nativeSrc":"4351:35:51","nodeType":"YulVariableDeclaration","src":"4351:35:51","value":{"arguments":[{"name":"newLen","nativeSrc":"4370:6:51","nodeType":"YulIdentifier","src":"4370:6:51"},{"arguments":[{"kind":"number","nativeSrc":"4382:2:51","nodeType":"YulLiteral","src":"4382:2:51","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"4378:3:51","nodeType":"YulIdentifier","src":"4378:3:51"},"nativeSrc":"4378:7:51","nodeType":"YulFunctionCall","src":"4378:7:51"}],"functionName":{"name":"and","nativeSrc":"4366:3:51","nodeType":"YulIdentifier","src":"4366:3:51"},"nativeSrc":"4366:20:51","nodeType":"YulFunctionCall","src":"4366:20:51"},"variables":[{"name":"loopEnd","nativeSrc":"4355:7:51","nodeType":"YulTypedName","src":"4355:7:51","type":""}]},{"nativeSrc":"4399:49:51","nodeType":"YulVariableDeclaration","src":"4399:49:51","value":{"arguments":[{"name":"slot","nativeSrc":"4443:4:51","nodeType":"YulIdentifier","src":"4443:4:51"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"4413:29:51","nodeType":"YulIdentifier","src":"4413:29:51"},"nativeSrc":"4413:35:51","nodeType":"YulFunctionCall","src":"4413:35:51"},"variables":[{"name":"dstPtr","nativeSrc":"4403:6:51","nodeType":"YulTypedName","src":"4403:6:51","type":""}]},{"nativeSrc":"4461:10:51","nodeType":"YulVariableDeclaration","src":"4461:10:51","value":{"kind":"number","nativeSrc":"4470:1:51","nodeType":"YulLiteral","src":"4470:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4465:1:51","nodeType":"YulTypedName","src":"4465:1:51","type":""}]},{"body":{"nativeSrc":"4548:172:51","nodeType":"YulBlock","src":"4548:172:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4573:6:51","nodeType":"YulIdentifier","src":"4573:6:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4591:3:51","nodeType":"YulIdentifier","src":"4591:3:51"},{"name":"srcOffset","nativeSrc":"4596:9:51","nodeType":"YulIdentifier","src":"4596:9:51"}],"functionName":{"name":"add","nativeSrc":"4587:3:51","nodeType":"YulIdentifier","src":"4587:3:51"},"nativeSrc":"4587:19:51","nodeType":"YulFunctionCall","src":"4587:19:51"}],"functionName":{"name":"mload","nativeSrc":"4581:5:51","nodeType":"YulIdentifier","src":"4581:5:51"},"nativeSrc":"4581:26:51","nodeType":"YulFunctionCall","src":"4581:26:51"}],"functionName":{"name":"sstore","nativeSrc":"4566:6:51","nodeType":"YulIdentifier","src":"4566:6:51"},"nativeSrc":"4566:42:51","nodeType":"YulFunctionCall","src":"4566:42:51"},"nativeSrc":"4566:42:51","nodeType":"YulExpressionStatement","src":"4566:42:51"},{"nativeSrc":"4625:24:51","nodeType":"YulAssignment","src":"4625:24:51","value":{"arguments":[{"name":"dstPtr","nativeSrc":"4639:6:51","nodeType":"YulIdentifier","src":"4639:6:51"},{"kind":"number","nativeSrc":"4647:1:51","nodeType":"YulLiteral","src":"4647:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4635:3:51","nodeType":"YulIdentifier","src":"4635:3:51"},"nativeSrc":"4635:14:51","nodeType":"YulFunctionCall","src":"4635:14:51"},"variableNames":[{"name":"dstPtr","nativeSrc":"4625:6:51","nodeType":"YulIdentifier","src":"4625:6:51"}]},{"nativeSrc":"4666:40:51","nodeType":"YulAssignment","src":"4666:40:51","value":{"arguments":[{"name":"srcOffset","nativeSrc":"4683:9:51","nodeType":"YulIdentifier","src":"4683:9:51"},{"name":"srcOffset_1","nativeSrc":"4694:11:51","nodeType":"YulIdentifier","src":"4694:11:51"}],"functionName":{"name":"add","nativeSrc":"4679:3:51","nodeType":"YulIdentifier","src":"4679:3:51"},"nativeSrc":"4679:27:51","nodeType":"YulFunctionCall","src":"4679:27:51"},"variableNames":[{"name":"srcOffset","nativeSrc":"4666:9:51","nodeType":"YulIdentifier","src":"4666:9:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4495:1:51","nodeType":"YulIdentifier","src":"4495:1:51"},{"name":"loopEnd","nativeSrc":"4498:7:51","nodeType":"YulIdentifier","src":"4498:7:51"}],"functionName":{"name":"lt","nativeSrc":"4492:2:51","nodeType":"YulIdentifier","src":"4492:2:51"},"nativeSrc":"4492:14:51","nodeType":"YulFunctionCall","src":"4492:14:51"},"nativeSrc":"4484:236:51","nodeType":"YulForLoop","post":{"nativeSrc":"4507:28:51","nodeType":"YulBlock","src":"4507:28:51","statements":[{"nativeSrc":"4509:24:51","nodeType":"YulAssignment","src":"4509:24:51","value":{"arguments":[{"name":"i","nativeSrc":"4518:1:51","nodeType":"YulIdentifier","src":"4518:1:51"},{"name":"srcOffset_1","nativeSrc":"4521:11:51","nodeType":"YulIdentifier","src":"4521:11:51"}],"functionName":{"name":"add","nativeSrc":"4514:3:51","nodeType":"YulIdentifier","src":"4514:3:51"},"nativeSrc":"4514:19:51","nodeType":"YulFunctionCall","src":"4514:19:51"},"variableNames":[{"name":"i","nativeSrc":"4509:1:51","nodeType":"YulIdentifier","src":"4509:1:51"}]}]},"pre":{"nativeSrc":"4488:3:51","nodeType":"YulBlock","src":"4488:3:51","statements":[]},"src":"4484:236:51"},{"body":{"nativeSrc":"4768:166:51","nodeType":"YulBlock","src":"4768:166:51","statements":[{"nativeSrc":"4786:43:51","nodeType":"YulVariableDeclaration","src":"4786:43:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4813:3:51","nodeType":"YulIdentifier","src":"4813:3:51"},{"name":"srcOffset","nativeSrc":"4818:9:51","nodeType":"YulIdentifier","src":"4818:9:51"}],"functionName":{"name":"add","nativeSrc":"4809:3:51","nodeType":"YulIdentifier","src":"4809:3:51"},"nativeSrc":"4809:19:51","nodeType":"YulFunctionCall","src":"4809:19:51"}],"functionName":{"name":"mload","nativeSrc":"4803:5:51","nodeType":"YulIdentifier","src":"4803:5:51"},"nativeSrc":"4803:26:51","nodeType":"YulFunctionCall","src":"4803:26:51"},"variables":[{"name":"lastValue","nativeSrc":"4790:9:51","nodeType":"YulTypedName","src":"4790:9:51","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4853:6:51","nodeType":"YulIdentifier","src":"4853:6:51"},{"arguments":[{"name":"lastValue","nativeSrc":"4865:9:51","nodeType":"YulIdentifier","src":"4865:9:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4892:1:51","nodeType":"YulLiteral","src":"4892:1:51","type":"","value":"3"},{"name":"newLen","nativeSrc":"4895:6:51","nodeType":"YulIdentifier","src":"4895:6:51"}],"functionName":{"name":"shl","nativeSrc":"4888:3:51","nodeType":"YulIdentifier","src":"4888:3:51"},"nativeSrc":"4888:14:51","nodeType":"YulFunctionCall","src":"4888:14:51"},{"kind":"number","nativeSrc":"4904:3:51","nodeType":"YulLiteral","src":"4904:3:51","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"4884:3:51","nodeType":"YulIdentifier","src":"4884:3:51"},"nativeSrc":"4884:24:51","nodeType":"YulFunctionCall","src":"4884:24:51"},{"arguments":[{"kind":"number","nativeSrc":"4914:1:51","nodeType":"YulLiteral","src":"4914:1:51","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4910:3:51","nodeType":"YulIdentifier","src":"4910:3:51"},"nativeSrc":"4910:6:51","nodeType":"YulFunctionCall","src":"4910:6:51"}],"functionName":{"name":"shr","nativeSrc":"4880:3:51","nodeType":"YulIdentifier","src":"4880:3:51"},"nativeSrc":"4880:37:51","nodeType":"YulFunctionCall","src":"4880:37:51"}],"functionName":{"name":"not","nativeSrc":"4876:3:51","nodeType":"YulIdentifier","src":"4876:3:51"},"nativeSrc":"4876:42:51","nodeType":"YulFunctionCall","src":"4876:42:51"}],"functionName":{"name":"and","nativeSrc":"4861:3:51","nodeType":"YulIdentifier","src":"4861:3:51"},"nativeSrc":"4861:58:51","nodeType":"YulFunctionCall","src":"4861:58:51"}],"functionName":{"name":"sstore","nativeSrc":"4846:6:51","nodeType":"YulIdentifier","src":"4846:6:51"},"nativeSrc":"4846:74:51","nodeType":"YulFunctionCall","src":"4846:74:51"},"nativeSrc":"4846:74:51","nodeType":"YulExpressionStatement","src":"4846:74:51"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"4739:7:51","nodeType":"YulIdentifier","src":"4739:7:51"},{"name":"newLen","nativeSrc":"4748:6:51","nodeType":"YulIdentifier","src":"4748:6:51"}],"functionName":{"name":"lt","nativeSrc":"4736:2:51","nodeType":"YulIdentifier","src":"4736:2:51"},"nativeSrc":"4736:19:51","nodeType":"YulFunctionCall","src":"4736:19:51"},"nativeSrc":"4733:201:51","nodeType":"YulIf","src":"4733:201:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4954:4:51","nodeType":"YulIdentifier","src":"4954:4:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4968:1:51","nodeType":"YulLiteral","src":"4968:1:51","type":"","value":"1"},{"name":"newLen","nativeSrc":"4971:6:51","nodeType":"YulIdentifier","src":"4971:6:51"}],"functionName":{"name":"shl","nativeSrc":"4964:3:51","nodeType":"YulIdentifier","src":"4964:3:51"},"nativeSrc":"4964:14:51","nodeType":"YulFunctionCall","src":"4964:14:51"},{"kind":"number","nativeSrc":"4980:1:51","nodeType":"YulLiteral","src":"4980:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4960:3:51","nodeType":"YulIdentifier","src":"4960:3:51"},"nativeSrc":"4960:22:51","nodeType":"YulFunctionCall","src":"4960:22:51"}],"functionName":{"name":"sstore","nativeSrc":"4947:6:51","nodeType":"YulIdentifier","src":"4947:6:51"},"nativeSrc":"4947:36:51","nodeType":"YulFunctionCall","src":"4947:36:51"},"nativeSrc":"4947:36:51","nodeType":"YulExpressionStatement","src":"4947:36:51"}]},"nativeSrc":"4330:663:51","nodeType":"YulCase","src":"4330:663:51","value":{"kind":"number","nativeSrc":"4335:1:51","nodeType":"YulLiteral","src":"4335:1:51","type":"","value":"1"}},{"body":{"nativeSrc":"5010:234:51","nodeType":"YulBlock","src":"5010:234:51","statements":[{"nativeSrc":"5024:14:51","nodeType":"YulVariableDeclaration","src":"5024:14:51","value":{"kind":"number","nativeSrc":"5037:1:51","nodeType":"YulLiteral","src":"5037:1:51","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5028:5:51","nodeType":"YulTypedName","src":"5028:5:51","type":""}]},{"body":{"nativeSrc":"5073:67:51","nodeType":"YulBlock","src":"5073:67:51","statements":[{"nativeSrc":"5091:35:51","nodeType":"YulAssignment","src":"5091:35:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5110:3:51","nodeType":"YulIdentifier","src":"5110:3:51"},{"name":"srcOffset","nativeSrc":"5115:9:51","nodeType":"YulIdentifier","src":"5115:9:51"}],"functionName":{"name":"add","nativeSrc":"5106:3:51","nodeType":"YulIdentifier","src":"5106:3:51"},"nativeSrc":"5106:19:51","nodeType":"YulFunctionCall","src":"5106:19:51"}],"functionName":{"name":"mload","nativeSrc":"5100:5:51","nodeType":"YulIdentifier","src":"5100:5:51"},"nativeSrc":"5100:26:51","nodeType":"YulFunctionCall","src":"5100:26:51"},"variableNames":[{"name":"value","nativeSrc":"5091:5:51","nodeType":"YulIdentifier","src":"5091:5:51"}]}]},"condition":{"name":"newLen","nativeSrc":"5054:6:51","nodeType":"YulIdentifier","src":"5054:6:51"},"nativeSrc":"5051:89:51","nodeType":"YulIf","src":"5051:89:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5160:4:51","nodeType":"YulIdentifier","src":"5160:4:51"},{"arguments":[{"name":"value","nativeSrc":"5219:5:51","nodeType":"YulIdentifier","src":"5219:5:51"},{"name":"newLen","nativeSrc":"5226:6:51","nodeType":"YulIdentifier","src":"5226:6:51"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5166:52:51","nodeType":"YulIdentifier","src":"5166:52:51"},"nativeSrc":"5166:67:51","nodeType":"YulFunctionCall","src":"5166:67:51"}],"functionName":{"name":"sstore","nativeSrc":"5153:6:51","nodeType":"YulIdentifier","src":"5153:6:51"},"nativeSrc":"5153:81:51","nodeType":"YulFunctionCall","src":"5153:81:51"},"nativeSrc":"5153:81:51","nodeType":"YulExpressionStatement","src":"5153:81:51"}]},"nativeSrc":"5002:242:51","nodeType":"YulCase","src":"5002:242:51","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"4310:6:51","nodeType":"YulIdentifier","src":"4310:6:51"},{"kind":"number","nativeSrc":"4318:2:51","nodeType":"YulLiteral","src":"4318:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4307:2:51","nodeType":"YulIdentifier","src":"4307:2:51"},"nativeSrc":"4307:14:51","nodeType":"YulFunctionCall","src":"4307:14:51"},"nativeSrc":"4300:944:51","nodeType":"YulSwitch","src":"4300:944:51"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"3905:1345:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3986:4:51","nodeType":"YulTypedName","src":"3986:4:51","type":""},{"name":"src","nativeSrc":"3992:3:51","nodeType":"YulTypedName","src":"3992:3:51","type":""}],"src":"3905:1345:51"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function validator_revert_contract_IForwarderRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IForwarderRegistry(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IForwarderRegistry(value_1)\n        value3 := value_1\n        let value_2 := mload(add(headStart, 128))\n        validator_revert_contract_IForwarderRegistry(value_2)\n        value4 := value_2\n        let value_3 := mload(add(headStart, 160))\n        validator_revert_contract_IForwarderRegistry(value_3)\n        value5 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b50604051620033d2380380620033d2833981016040819052620000349162000395565b8585858585858380338888876200005a83838362000051620000d2565b92919062000108565b620000646200014f565b50505062000083816200007c6200017160201b60201c565b90620001a1565b506001600160a01b0316608052506200009b62000214565b6001600160a01b0390811660a052600080546001600160a01b0319169290911691909117905550620005d498505050505050505050565b6000806200010260017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a562000455565b92915050565b8362000115848262000508565b506001840162000126838262000508565b5060029390930180546001600160a01b0319166001600160a01b03909416939093179092555050565b6200016f635b5e139f60e01b60016200016762000227565b919062000257565b565b6000806200010260017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000455565b6001600160a01b03811615620001f85781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620002106307f5828d60e41b60016200016762000227565b5050565b6200016f6380ac58cd60e01b6001620001675b6000806200010260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000455565b600160e01b6001600160e01b031983160162000286576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002dc57600080fd5b81516001600160401b0380821115620002f957620002f9620002b4565b604051601f8301601f19908116603f01168101908282118183101715620003245762000324620002b4565b81604052838152602092508660208588010111156200034257600080fd5b600091505b8382101562000366578582018301518183018401529082019062000347565b6000602085830101528094505050505092915050565b6001600160a01b03811681146200039257600080fd5b50565b60008060008060008060c08789031215620003af57600080fd5b86516001600160401b0380821115620003c757600080fd5b620003d58a838b01620002ca565b97506020890151915080821115620003ec57600080fd5b50620003fb89828a01620002ca565b95505060408701516200040e816200037c565b606088015190945062000421816200037c565b608088015190935062000434816200037c565b60a088015190925062000447816200037c565b809150509295509295509295565b818103818111156200010257634e487b7160e01b600052601160045260246000fd5b600181811c908216806200048c57607f821691505b602082108103620004ad57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000503576000816000526020600020601f850160051c81016020861015620004de5750805b601f850160051c820191505b81811015620004ff57828155600101620004ea565b5050505b505050565b81516001600160401b03811115620005245762000524620002b4565b6200053c8162000535845462000477565b84620004b3565b602080601f8311600181146200057457600084156200055b5750858301515b600019600386901b1c1916600185901b178555620004ff565b600085815260208120601f198616915b82811015620005a55788860151825594840194600190910190840162000584565b5085821015620005c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612db56200061d60003960006111270152600081816102730152818161032f01528181611efd01528181611f85015281816120ad01526120eb0152612db56000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a22cb465116100a2578063d547741f11610071578063d547741f14610451578063e985e9c514610464578063f2fde38b14610477578063f5b541a61461048a57600080fd5b8063a22cb465146103f1578063b88d4fde14610404578063c87b56dd14610417578063d53913931461042a57600080fd5b806391d14854116100de57806391d14854146103bb57806395d89b41146103ce57806395f94bc4146103d6578063a0c76f62146103e957600080fd5b806370a082311461037f5780638bb9c5bf146103a05780638da5cb5b146103b357600080fd5b806331e66e1e116101715780634bae2be81161014b5780634bae2be8146102e657806354c7be061461030c578063572b6c051461031f5780636352211e1461036c57600080fd5b806331e66e1e146102aa57806342842e0e146102c057806342966c68146102d357600080fd5b8063095ea7b3116101ad578063095ea7b31461024957806323b872dd1461025e5780632b4c9f16146102715780632f2ff15d1461029757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004612365565b6104b1565b60405190151581526020015b60405180910390f35b6102046104cb565b6040516101f391906123f0565b61022461021f366004612403565b6104da565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61025c61025736600461243e565b6104ee565b005b61025c61026c36600461246a565b61050f565b7f0000000000000000000000000000000000000000000000000000000000000000610224565b61025c6102a53660046124ab565b610543565b6102b261057c565b6040516101f39291906124db565b61025c6102ce36600461246a565b61058f565b61025c6102e1366004612403565b6105bd565b6102f96102f4366004612403565b6107bb565b6040516101f39796959493929190612528565b61025c61031a36600461258f565b610942565b6101e761032d3660046125ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61022461037a366004612403565b6109ab565b61039261038d3660046125ef565b6109b9565b6040519081526020016101f3565b61025c6103ae366004612403565b6109cd565b6102246109eb565b6101e76103c93660046124ab565b610a12565b610204610a5d565b61025c6103e43660046125ef565b610a67565b610224610ac1565b61025c6103ff36600461261a565b610aeb565b61025c610412366004612648565b610b08565b610204610425366004612403565b610b42565b6103927f6d696e746572000000000000000000000000000000000000000000000000000081565b61025c61045f3660046124ab565b610b65565b6101e76104723660046126e7565b610b93565b61025c6104853660046125ef565b610be1565b6103927f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104c5826104bf610bfc565b90610c2a565b92915050565b60606104d5610d04565b905090565b60006104c5826104e8610d16565b90610d44565b61050b6104f9610dfd565b8383610503610d16565b929190610e07565b5050565b6000610519610dfd565b90506105258183611082565b61053d81858585610534610d16565b939291906111c3565b50505050565b600061054d610dfd565b90506105618161055b6114a1565b906114cf565b61057783838361056f61153a565b929190611568565b505050565b36600061058761163e565b915091509091565b6000610599610dfd565b90506105a58183611082565b61053d818585856105b4610d16565b93929190611649565b600081815260016020818152604080842090516105df93919091019101612768565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906127fc565b156107895760006106c7836106c1610d16565b9061168f565b90507fdead0000000000000000000000000000000000000000000000000000000000006106f2610d16565b6000858152602091909152604090205561070a610d16565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c010000000000000000000000008404821694740100000000000000000000000000000000000000009094049091169261083190612715565b80601f016020809104026020016040519081016040528092919081815260200182805461085d90612715565b80156108aa5780601f1061087f576101008083540402835291602001916108aa565b820191906000526020600020905b81548152906001019060200180831161088d57829003601f168201915b5050505050908060020180546108bf90612715565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90612715565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b5050505050905087565b6109767f6d696e74657200000000000000000000000000000000000000000000000000003361096f61153a565b91906116f8565b61098a8383610983610d16565b919061177e565b600082815260016020526040902081906109a48282612a44565b5050505050565b60006104c5826106c1610d16565b60006104c5826109c7610d16565b90611898565b6109e86109d8610dfd565b826109e161153a565b9190611914565b50565b60006104d56109f86114a1565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a568383610a2161153a565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104d56119b8565b610a7a610a72610dfd565b61055b6114a1565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104d5610ace6119ca565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b61050b610af6610dfd565b8383610b00610d16565b9291906119f8565b6000610b12610dfd565b9050610b1e8185611082565b610b3a818787878787610b2f610d16565b959493929190611b10565b505050505050565b6060610b50826106c1610d16565b506104c53083610b5e6119ca565b9190611b86565b6000610b6f610dfd565b9050610b7d8161055b6114a1565b610577838383610b8b61153a565b929190611c46565b6000610a568383610ba2610d16565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6109e8610bec610dfd565b82610bf56114a1565b9190611d10565b6000806104c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e612bea565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c7a575060006104c5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610ccb575060016104c5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104d5610d116119ca565b611e24565b6000806104c560017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1612bea565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610da8576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610df3575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166104c5565b60009150506104c5565b60006104d5611eba565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff8116610e66576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d9f565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610ed1576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d9f565b610edc868287612001565b610f39576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528216602482015260448101849052606401610d9f565b73ffffffffffffffffffffffffffffffffffffffff8416610f9e5774010000000000000000000000000000000000000000821615610f9957600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b61101f565b740100000000000000000000000000000000000000008217808314610fcf5760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b600081815260016020818152604080842090516110a493919091019101612768565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff85811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119291906127fc565b610577576105777f6f70657261746f720000000000000000000000000000000000000000000000008461096f61153a565b73ffffffffffffffffffffffffffffffffffffffff8216611210576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff811661126f576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d9f565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff16146112f3576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610d9f565b6112fe868587612001565b6113ad57740100000000000000000000000000000000000000008116158061134f5750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b156113ad576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606401610d9f565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff8085169182905585161461143e5773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806104c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd612bea565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461050b576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d9f565b6000806104c560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23612bea565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661053d5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b366000610587612076565b61165685858585856111c3565b73ffffffffffffffffffffffffffffffffffffffff82163b156109a4576109a484848484604051806020016040528060008152506121e0565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116ee576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101849052602401610d9f565b805b949350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610577576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610d9f565b73ffffffffffffffffffffffffffffffffffffffff82166117cb576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff161561182a576040517f753eceac00000000000000000000000000000000000000000000000000000000815260048101829052602401610d9f565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff82166118e7576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b61191f8382846116f8565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104d56119c56119ca565b6122f5565b6000806104c560017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5612bea565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a75576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d9f565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b611b1d87878787876111c3565b73ffffffffffffffffffffffffffffffffffffffff84163b15611b7d57611b7d8686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121e092505050565b50505050505050565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611c00573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116f09190810190612c24565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561053d5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611630565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611d7d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d9f565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461053d5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611e3590612715565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6190612715565b8015611eae5780601f10611e8357610100808354040283529160200191611eae565b820191906000526020600020905b815481529060010190602001808311611e9157829003601f168201915b50505050509050919050565b600033321480611eca5750601836105b15611ed457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611ff057506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff091906127fc565b15611ffa57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116f057505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b366000333214806120875750601836105b156120955750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806121ca575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca91906127fc565b156121d757610587612306565b50600091369150565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061223a908990899088908890600401612cef565b6020604051808303816000875af1158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190612d38565b7fffffffff0000000000000000000000000000000000000000000000000000000016146109a4576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610d9f565b6060816001018054611e3590612715565b3660006105877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481612d55565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146109e857600080fd5b60006020828403121561237757600080fd5b8135610a5681612337565b60005b8381101561239d578181015183820152602001612385565b50506000910152565b600081518084526123be816020860160208601612382565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a5660208301846123a6565b60006020828403121561241557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b6000806040838503121561245157600080fd5b823561245c8161241c565b946020939093013593505050565b60008060006060848603121561247f57600080fd5b833561248a8161241c565b9250602084013561249a8161241c565b929592945050506040919091013590565b600080604083850312156124be57600080fd5b8235915060208301356124d08161241c565b809150509250929050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a0820181905260009061256f908301856123a6565b82810360c084015261258181856123a6565b9a9950505050505050505050565b6000806000606084860312156125a457600080fd5b83356125af8161241c565b925060208401359150604084013567ffffffffffffffff8111156125d257600080fd5b840160e081870312156125e457600080fd5b809150509250925092565b60006020828403121561260157600080fd5b8135610a568161241c565b80151581146109e857600080fd5b6000806040838503121561262d57600080fd5b82356126388161241c565b915060208301356124d08161260c565b60008060008060006080868803121561266057600080fd5b853561266b8161241c565b9450602086013561267b8161241c565b935060408601359250606086013567ffffffffffffffff8082111561269f57600080fd5b818801915088601f8301126126b357600080fd5b8135818111156126c257600080fd5b8960208285010111156126d457600080fd5b9699959850939650602001949392505050565b600080604083850312156126fa57600080fd5b82356127058161241c565b915060208301356124d08161241c565b600181811c9082168061272957607f821691505b602082108103612762577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080835461277681612715565b6001828116801561278e57600181146127c1576127f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506127f0565b8760005260208060002060005b858110156127e75781548a8201529084019082016127ce565b50505082870194505b50929695505050505050565b60006020828403121561280e57600080fd5b8151610a568161260c565b6000813561ffff811681146104c557600080fd5b6000813567ffffffffffffffff811681146104c557600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261287c57600080fd5b83018035915067ffffffffffffffff82111561289757600080fd5b6020019150368190038213156128ac57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610577576000816000526020600020601f850160051c8101602086101561290b5750805b601f850160051c820191505b81811015610b3a57828155600101612917565b67ffffffffffffffff831115612942576129426128b3565b612956836129508354612715565b836128e2565b6000601f8411600181146129a857600085156129725750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556109a4565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156129f757868501358255602094850194600190920191016129d7565b5086821015612a32577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff612a5083612819565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff0000612a8b60208601612819565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff00000000612ad16040870161282d565b60201b16837fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008416178217178455505050612b56612b116060840161282d565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b612bb2612b656080840161282d565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b612bbf60a0830183612847565b612bcd81836001860161292a565b5050612bdc60c0830183612847565b61053d81836002860161292a565b818103818111156104c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215612c3657600080fd5b815167ffffffffffffffff80821115612c4e57600080fd5b818401915084601f830112612c6257600080fd5b815181811115612c7457612c746128b3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612cba57612cba6128b3565b81604052828152876020848701011115612cd357600080fd5b612ce4836020830160208801612382565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612d2e60808301846123a6565b9695505050505050565b600060208284031215612d4a57600080fd5b8151610a5681612337565b60008085851115612d6557600080fd5b83861115612d7257600080fd5b505082019391909203915056fea264697066735822122033600fc1c90caf1682b060b88128a3a7e5c5374f417cc1a3de6442640837ff1964736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x33D2 CODESIZE SUB DUP1 PUSH3 0x33D2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x395 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 DUP6 DUP6 DUP4 DUP1 CALLER DUP9 DUP9 DUP8 PUSH3 0x5A DUP4 DUP4 DUP4 PUSH3 0x51 PUSH3 0xD2 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH3 0x108 JUMP JUMPDEST PUSH3 0x64 PUSH3 0x14F JUMP JUMPDEST POP POP POP PUSH3 0x83 DUP2 PUSH3 0x7C PUSH3 0x171 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x1A1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE POP PUSH3 0x9B PUSH3 0x214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x5D4 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x102 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH3 0x455 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 PUSH3 0x115 DUP5 DUP3 PUSH3 0x508 JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH3 0x126 DUP4 DUP3 PUSH3 0x508 JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH3 0x16F PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x167 PUSH3 0x227 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x257 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x102 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x455 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x1F8 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x210 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x167 PUSH3 0x227 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x16F PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x167 JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x102 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x455 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x286 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2F9 JUMPI PUSH3 0x2F9 PUSH3 0x2B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x324 JUMPI PUSH3 0x324 PUSH3 0x2B4 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x366 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x347 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3D5 DUP11 DUP4 DUP12 ADD PUSH3 0x2CA JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3FB DUP10 DUP3 DUP11 ADD PUSH3 0x2CA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD MLOAD PUSH3 0x40E DUP2 PUSH3 0x37C JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x421 DUP2 PUSH3 0x37C JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x434 DUP2 PUSH3 0x37C JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x447 DUP2 PUSH3 0x37C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x102 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x48C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x4AD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x503 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x4DE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4FF JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x4EA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x524 JUMPI PUSH3 0x524 PUSH3 0x2B4 JUMP JUMPDEST PUSH3 0x53C DUP2 PUSH3 0x535 DUP5 SLOAD PUSH3 0x477 JUMP JUMPDEST DUP5 PUSH3 0x4B3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x574 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x55B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x4FF JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x5A5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x584 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x5C4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x2DB5 PUSH3 0x61D PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x1127 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x273 ADD MSTORE DUP2 DUP2 PUSH2 0x32F ADD MSTORE DUP2 DUP2 PUSH2 0x1EFD ADD MSTORE DUP2 DUP2 PUSH2 0x1F85 ADD MSTORE DUP2 DUP2 PUSH2 0x20AD ADD MSTORE PUSH2 0x20EB ADD MSTORE PUSH2 0x2DB5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x4BAE2BE8 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2365 JUMP JUMPDEST PUSH2 0x4B1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x243E JUMP JUMPDEST PUSH2 0x4EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST PUSH32 0x0 PUSH2 0x224 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH2 0x2B2 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP3 SWAP2 SWAP1 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x5BD JUMP JUMPDEST PUSH2 0x2F9 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2528 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x31A CALLDATASIZE PUSH1 0x4 PUSH2 0x258F JUMP JUMPDEST PUSH2 0x942 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x37A CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x9AB JUMP JUMPDEST PUSH2 0x392 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0x9B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x224 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xA5D JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0xA67 JUMP JUMPDEST PUSH2 0x224 PUSH2 0xAC1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x261A JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST PUSH2 0x25C PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x2648 JUMP JUMPDEST PUSH2 0xB08 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xB42 JUMP JUMPDEST PUSH2 0x392 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x45F CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E7 JUMP JUMPDEST PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0xBE1 JUMP JUMPDEST PUSH2 0x392 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x4BF PUSH2 0xBFC JUMP JUMPDEST SWAP1 PUSH2 0xC2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0xD04 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x4E8 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0xD44 JUMP JUMPDEST PUSH2 0x50B PUSH2 0x4F9 PUSH2 0xDFD JUMP JUMPDEST DUP4 DUP4 PUSH2 0x503 PUSH2 0xD16 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x525 DUP2 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP6 DUP6 DUP6 PUSH2 0x534 PUSH2 0xD16 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x561 DUP2 PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x577 DUP4 DUP4 DUP4 PUSH2 0x56F PUSH2 0x153A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1568 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH2 0x163E JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x599 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x5A5 DUP2 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP6 DUP6 DUP6 PUSH2 0x5B4 PUSH2 0xD16 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x5DF SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2768 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x68A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AE SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 PUSH2 0x6C7 DUP4 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0x168F JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0x6F2 PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x70A PUSH2 0xD16 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0x831 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x85D SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8AA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x87F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8AA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x88D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x8BF SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EB SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x938 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x90D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x938 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x976 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x96F PUSH2 0x153A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0x98A DUP4 DUP4 PUSH2 0x983 PUSH2 0xD16 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x177E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x9A4 DUP3 DUP3 PUSH2 0x2A44 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x9C7 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0x1898 JUMP JUMPDEST PUSH2 0x9E8 PUSH2 0x9D8 PUSH2 0xDFD JUMP JUMPDEST DUP3 PUSH2 0x9E1 PUSH2 0x153A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1914 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0x9F8 PUSH2 0x14A1 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP4 DUP4 PUSH2 0xA21 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0xA7A PUSH2 0xA72 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0xACE PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xAF6 PUSH2 0xDFD JUMP JUMPDEST DUP4 DUP4 PUSH2 0xB00 PUSH2 0xD16 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB12 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0xB1E DUP2 DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xB3A DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB2F PUSH2 0xD16 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB50 DUP3 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST POP PUSH2 0x4C5 ADDRESS DUP4 PUSH2 0xB5E PUSH2 0x19CA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0xB7D DUP2 PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST PUSH2 0x577 DUP4 DUP4 DUP4 PUSH2 0xB8B PUSH2 0x153A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP4 DUP4 PUSH2 0xBA2 PUSH2 0xD16 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9E8 PUSH2 0xBEC PUSH2 0xDFD JUMP JUMPDEST DUP3 PUSH2 0xBF5 PUSH2 0x14A1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC7A JUMPI POP PUSH1 0x0 PUSH2 0x4C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCCB JUMPI POP PUSH1 0x1 PUSH2 0x4C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0xD11 PUSH2 0x19CA JUMP JUMPDEST PUSH2 0x1E24 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0xDF3 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C5 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xED1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH2 0xEDC DUP7 DUP3 DUP8 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0xF39 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xF9E JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xF99 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0x101F JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xFCF JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x10A4 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2768 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x116E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1192 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST PUSH2 0x577 JUMPI PUSH2 0x577 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP5 PUSH2 0x96F PUSH2 0x153A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1210 JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x126F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH2 0x12FE DUP7 DUP6 DUP8 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0x13AD JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0x134F JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x13AD JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0x143E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2BEA JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x50B JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x53D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0x1656 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x11C3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x9A4 JUMPI PUSH2 0x9A4 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16EE JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x577 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x17CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x182A JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x18E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x191F DUP4 DUP3 DUP5 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0x19C5 PUSH2 0x19CA JUMP JUMPDEST PUSH2 0x22F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x2BEA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A75 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B1D DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x11C3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B7D JUMPI PUSH2 0x1B7D DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x21E0 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C24 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1630 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1D7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x53D JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1E35 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E61 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1EAE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E83 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1EAE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E91 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1ECA JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1ED4 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1FF0 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FCC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FF0 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x1FFA JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x16F0 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x2087 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x2095 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x21CA JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21CA SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x21D7 JUMPI PUSH2 0x587 PUSH2 0x2306 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x223A SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CEF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2259 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x227D SWAP2 SWAP1 PUSH2 0x2D38 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x9A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1E35 SWAP1 PUSH2 0x2715 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x2D55 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA56 DUP2 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x239D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2385 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x23BE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2382 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA56 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x245C DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x248A DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x249A DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x241C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x256F SWAP1 DUP4 ADD DUP6 PUSH2 0x23A6 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x2581 DUP2 DUP6 PUSH2 0x23A6 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25AF DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x25E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA56 DUP2 PUSH2 0x241C JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x262D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2638 DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x266B DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x267B DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x269F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x26B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x26C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x26D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2705 DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2729 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2762 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x2776 DUP2 PUSH2 0x2715 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x278E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x27C1 JUMPI PUSH2 0x27F0 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x27F0 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x27E7 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x27CE JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x280E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA56 DUP2 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x287C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x28AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x290B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB3A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2917 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2942 JUMPI PUSH2 0x2942 PUSH2 0x28B3 JUMP JUMPDEST PUSH2 0x2956 DUP4 PUSH2 0x2950 DUP4 SLOAD PUSH2 0x2715 JUMP JUMPDEST DUP4 PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29A8 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x2972 JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29F7 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x29D7 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x2A32 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x2A50 DUP4 PUSH2 0x2819 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2A8B PUSH1 0x20 DUP7 ADD PUSH2 0x2819 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x2AD1 PUSH1 0x40 DUP8 ADD PUSH2 0x282D JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x2B56 PUSH2 0x2B11 PUSH1 0x60 DUP5 ADD PUSH2 0x282D JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2BB2 PUSH2 0x2B65 PUSH1 0x80 DUP5 ADD PUSH2 0x282D JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2BBF PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x2BCD DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x292A JUMP JUMPDEST POP POP PUSH2 0x2BDC PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x292A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2C4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2C74 JUMPI PUSH2 0x2C74 PUSH2 0x28B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2CBA JUMPI PUSH2 0x2CBA PUSH2 0x28B3 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2CD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CE4 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2382 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2D2E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x23A6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA56 DUP2 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2D72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER PUSH1 0xF 0xC1 0xC9 0xC 0xAF AND DUP3 0xB0 PUSH1 0xB8 DUP2 0x28 LOG3 0xA7 0xE5 0xC5 CALLDATACOPY 0x4F COINBASE PUSH29 0xC1A3DE6442640837FF1964736F6C634300081600330000000000000000 ","sourceMap":"556:571:45:-:0;;;632:393;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;929:9;940:11;953:17;972:16;990:18;1010:11;953:17;;3150:10:47;929:9:45;940:11;972:16;1139:77:25;929:9:45;940:11;972:16;1139:29:25;:27;:29::i;:::-;:45;:77;;:45;:77::i;:::-;1226:34;:32;:34::i;:::-;1034:233;;;1008:63:2;1058:12;1008:33;:31;;;:33;;:::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:19;;;-1:-1:-1;3273:20:47::3;:18;:20::i;:::-;-1:-1:-1::0;;;;;3303:26:47;;::::3;;::::0;3339:19:::3;:40:::0;;-1:-1:-1;;;;;;3339:40:47::3;::::0;;;::::3;::::0;;;::::3;::::0;;-1:-1:-1;556:571:45;;-1:-1:-1;;;;;;;;;556:571:45;3441:174:41;3482:16;;456:70;525:1;464:57;456:70;:::i;:::-;448:79;3441:174;-1:-1:-1;;3441:174:41:o;1021:322::-;1219:1;:23;1233:9;1219:1;:23;:::i;:::-;-1:-1:-1;1252:13:41;;;:27;1268:11;1252:13;:27;:::i;:::-;-1:-1:-1;1289:23:41;;;;;:47;;-1:-1:-1;;;;;;1289:47:41;-1:-1:-1;;;;;1289:47:41;;;;;;;;;;-1:-1:-1;;1021:322:41:o;3013:153:38:-;3062:97;-1:-1:-1;;;3154:4:38;3062:34;:32;:34::i;:::-;:56;:97;:56;:97::i;:::-;3013:153::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:89::-;1567:341;;:::o;2530:131:38:-;2565:89;-1:-1:-1;;;2649:4:38;2565:34;1705:174:17;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:127:51:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:844;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:51;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:51;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;732:3;725:4;720:2;712:6;708:15;704:26;701:35;698:55;;;749:1;746;739:12;698:55;771:1;762:10;;781:133;795:2;792:1;789:9;781:133;;;883:14;;;879:23;;873:30;852:14;;;848:23;;841:63;806:10;;;;781:133;;;958:1;951:4;946:2;938:6;934:15;930:26;923:37;978:6;969:15;;;;;;146:844;;;;:::o;995:151::-;-1:-1:-1;;;;;1090:31:51;;1080:42;;1070:70;;1136:1;1133;1126:12;1070:70;995:151;:::o;1151:1289::-;1400:6;1408;1416;1424;1432;1440;1493:3;1481:9;1472:7;1468:23;1464:33;1461:53;;;1510:1;1507;1500:12;1461:53;1537:16;;-1:-1:-1;;;;;1602:14:51;;;1599:34;;;1629:1;1626;1619:12;1599:34;1652:61;1705:7;1696:6;1685:9;1681:22;1652:61;:::i;:::-;1642:71;;1759:2;1748:9;1744:18;1738:25;1722:41;;1788:2;1778:8;1775:16;1772:36;;;1804:1;1801;1794:12;1772:36;;1827:63;1882:7;1871:8;1860:9;1856:24;1827:63;:::i;:::-;1817:73;;;1933:2;1922:9;1918:18;1912:25;1946:51;1991:5;1946:51;:::i;:::-;2066:2;2051:18;;2045:25;2016:5;;-1:-1:-1;2079:53:51;2045:25;2079:53;:::i;:::-;2203:3;2188:19;;2182:26;2151:7;;-1:-1:-1;2217:53:51;2182:26;2217:53;:::i;:::-;2341:3;2326:19;;2320:26;2289:7;;-1:-1:-1;2355:53:51;2320:26;2355:53;:::i;:::-;2427:7;2417:17;;;1151:1289;;;;;;;;:::o;2445:225::-;2512:9;;;2533:11;;;2530:134;;;2586:10;2581:3;2577:20;2574:1;2567:31;2621:4;2618:1;2611:15;2649:4;2646:1;2639:15;2675:380;2754:1;2750:12;;;;2797;;;2818:61;;2872:4;2864:6;2860:17;2850:27;;2818:61;2925:2;2917:6;2914:14;2894:18;2891:38;2888:161;;2971:10;2966:3;2962:20;2959:1;2952:31;3006:4;3003:1;2996:15;3034:4;3031:1;3024:15;2888:161;;2675:380;;;:::o;3186:543::-;3288:2;3283:3;3280:11;3277:446;;;3324:1;3348:5;3345:1;3338:16;3392:4;3389:1;3379:18;3462:2;3450:10;3446:19;3443:1;3439:27;3433:4;3429:38;3498:4;3486:10;3483:20;3480:47;;;-1:-1:-1;3521:4:51;3480:47;3576:2;3571:3;3567:12;3564:1;3560:20;3554:4;3550:31;3540:41;;3631:82;3649:2;3642:5;3639:13;3631:82;;;3694:17;;;3675:1;3664:13;3631:82;;;3635:3;;;3277:446;3186:543;;;:::o;3905:1345::-;4025:10;;-1:-1:-1;;;;;4047:30:51;;4044:56;;;4080:18;;:::i;:::-;4109:97;4199:6;4159:38;4191:4;4185:11;4159:38;:::i;:::-;4153:4;4109:97;:::i;:::-;4261:4;;4318:2;4307:14;;4335:1;4330:663;;;;5037:1;5054:6;5051:89;;;-1:-1:-1;5106:19:51;;;5100:26;5051:89;-1:-1:-1;;3862:1:51;3858:11;;;3854:24;3850:29;3840:40;3886:1;3882:11;;;3837:57;5153:81;;4300:944;;4330:663;3133:1;3126:14;;;3170:4;3157:18;;-1:-1:-1;;4366:20:51;;;4484:236;4498:7;4495:1;4492:14;4484:236;;;4587:19;;;4581:26;4566:42;;4679:27;;;;4647:1;4635:14;;;;4514:19;;4484:236;;;4488:3;4748:6;4739:7;4736:19;4733:201;;;4809:19;;;4803:26;-1:-1:-1;;4892:1:51;4888:14;;;4904:3;4884:24;4880:37;4876:42;4861:58;4846:74;;4733:201;-1:-1:-1;;;;;4980:1:51;4964:14;;;4960:22;4947:36;;-1:-1:-1;3905:1345:51:o;:::-;556:571:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINTER_ROLE_4492":{"entryPoint":null,"id":4492,"parameterSlots":0,"returnSlots":0},"@OPERATOR_ROLE_4495":{"entryPoint":null,"id":4495,"parameterSlots":0,"returnSlots":0},"@__msgData_4236":{"entryPoint":1404,"id":4236,"parameterSlots":0,"returnSlots":2},"@_callOnERC721Received_3386":{"entryPoint":8672,"id":3386,"parameterSlots":5,"returnSlots":0},"@_isOperatable_3412":{"entryPoint":8193,"id":3412,"parameterSlots":3,"returnSlots":1},"@_isSenderOperatable_4819":{"entryPoint":4226,"id":4819,"parameterSlots":2,"returnSlots":0},"@_msgData_1168":{"entryPoint":8310,"id":1168,"parameterSlots":0,"returnSlots":2},"@_msgData_4946":{"entryPoint":5694,"id":4946,"parameterSlots":0,"returnSlots":2},"@_msgSender_1120":{"entryPoint":7866,"id":1120,"parameterSlots":0,"returnSlots":1},"@_msgSender_4932":{"entryPoint":3581,"id":4932,"parameterSlots":0,"returnSlots":1},"@_tokenExists_3443":{"entryPoint":null,"id":3443,"parameterSlots":1,"returnSlots":1},"@_tokenHasApproval_3469":{"entryPoint":null,"id":3469,"parameterSlots":1,"returnSlots":1},"@_tokenOwner_3428":{"entryPoint":null,"id":3428,"parameterSlots":1,"returnSlots":1},"@approve_2032":{"entryPoint":3591,"id":2032,"parameterSlots":4,"returnSlots":0},"@approve_4694":{"entryPoint":1262,"id":4694,"parameterSlots":2,"returnSlots":0},"@balanceOf_3226":{"entryPoint":6296,"id":3226,"parameterSlots":2,"returnSlots":1},"@balanceOf_4730":{"entryPoint":2489,"id":4730,"parameterSlots":1,"returnSlots":1},"@burn_4674":{"entryPoint":1469,"id":4674,"parameterSlots":1,"returnSlots":0},"@enforceHasRole_557":{"entryPoint":5880,"id":557,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_819":{"entryPoint":5327,"id":819,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1032":{"entryPoint":null,"id":1032,"parameterSlots":0,"returnSlots":1},"@getApproved_3302":{"entryPoint":3396,"id":3302,"parameterSlots":2,"returnSlots":1},"@getApproved_4762":{"entryPoint":1242,"id":4762,"parameterSlots":1,"returnSlots":1},"@grantRole_110":{"entryPoint":1347,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_410":{"entryPoint":5480,"id":410,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":2578,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_3323":{"entryPoint":null,"id":3323,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_4781":{"entryPoint":2963,"id":4781,"parameterSlots":2,"returnSlots":1},"@isContract_3741":{"entryPoint":null,"id":3741,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_1048":{"entryPoint":null,"id":1048,"parameterSlots":1,"returnSlots":1},"@layout_3354":{"entryPoint":3350,"id":3354,"parameterSlots":0,"returnSlots":1},"@layout_3722":{"entryPoint":6602,"id":3722,"parameterSlots":0,"returnSlots":1},"@layout_593":{"entryPoint":5434,"id":593,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":5281,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":3068,"id":999,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3521":{"entryPoint":2753,"id":3521,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3689":{"entryPoint":null,"id":3689,"parameterSlots":1,"returnSlots":1},"@mint_2480":{"entryPoint":6014,"id":2480,"parameterSlots":3,"returnSlots":0},"@mint_4606":{"entryPoint":2370,"id":4606,"parameterSlots":3,"returnSlots":0},"@msgData_1223":{"entryPoint":8966,"id":1223,"parameterSlots":0,"returnSlots":2},"@msgSender_1206":{"entryPoint":null,"id":1206,"parameterSlots":0,"returnSlots":1},"@name_1362":{"entryPoint":1227,"id":1362,"parameterSlots":0,"returnSlots":1},"@name_3494":{"entryPoint":3332,"id":3494,"parameterSlots":0,"returnSlots":1},"@name_3662":{"entryPoint":7716,"id":3662,"parameterSlots":1,"returnSlots":1},"@ownerOf_3258":{"entryPoint":5775,"id":3258,"parameterSlots":2,"returnSlots":1},"@ownerOf_4746":{"entryPoint":2475,"id":4746,"parameterSlots":1,"returnSlots":1},"@owner_209":{"entryPoint":2539,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_772":{"entryPoint":null,"id":772,"parameterSlots":1,"returnSlots":1},"@renounceRole_159":{"entryPoint":2509,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":6420,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":2917,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_447":{"entryPoint":7238,"id":447,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_2225":{"entryPoint":5705,"id":2225,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_2265":{"entryPoint":6928,"id":2265,"parameterSlots":7,"returnSlots":0},"@safeTransferFrom_4883":{"entryPoint":1423,"id":4883,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_4918":{"entryPoint":2824,"id":4918,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_2070":{"entryPoint":6648,"id":2070,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_4714":{"entryPoint":2795,"id":4714,"parameterSlots":2,"returnSlots":0},"@setRevocationRegistry_4569":{"entryPoint":2663,"id":4569,"parameterSlots":1,"returnSlots":0},"@supportsInterface_881":{"entryPoint":1201,"id":881,"parameterSlots":1,"returnSlots":1},"@supportsInterface_987":{"entryPoint":3114,"id":987,"parameterSlots":2,"returnSlots":1},"@symbol_1376":{"entryPoint":2653,"id":1376,"parameterSlots":0,"returnSlots":1},"@symbol_3507":{"entryPoint":6584,"id":3507,"parameterSlots":0,"returnSlots":1},"@symbol_3675":{"entryPoint":8949,"id":3675,"parameterSlots":1,"returnSlots":1},"@tokenMetadataURI_3710":{"entryPoint":7046,"id":3710,"parameterSlots":3,"returnSlots":1},"@tokenURI_1404":{"entryPoint":2882,"id":1404,"parameterSlots":1,"returnSlots":1},"@transferFrom_2187":{"entryPoint":4547,"id":2187,"parameterSlots":5,"returnSlots":0},"@transferFrom_4851":{"entryPoint":1295,"id":4851,"parameterSlots":3,"returnSlots":0},"@transferOwnership_226":{"entryPoint":3041,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_759":{"entryPoint":7440,"id":759,"parameterSlots":3,"returnSlots":0},"@vcData_4500":{"entryPoint":1979,"id":4500,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":9711,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":9959,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9322,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9800,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":9754,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9278,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr":{"entryPoint":9615,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9387,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9061,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11576,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":11300,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9219,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":9126,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11503,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9435,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9512,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_string_calldata":{"entryPoint":10311,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":11605,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":11242,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":10466,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_string_calldata_to_string":{"entryPoint":10538,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9090,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":10005,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":10419,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_uint16":{"entryPoint":10265,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint64":{"entryPoint":10285,"id":null,"parameterSlots":1,"returnSlots":1},"update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage":{"entryPoint":10820,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_t_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_revert_address":{"entryPoint":9244,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":9740,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":9015,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:19789:51","nodeType":"YulBlock","src":"0:19789:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"58:133:51","nodeType":"YulBlock","src":"58:133:51","statements":[{"body":{"nativeSrc":"169:16:51","nodeType":"YulBlock","src":"169:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:51","nodeType":"YulLiteral","src":"178:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:51","nodeType":"YulLiteral","src":"181:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:51","nodeType":"YulIdentifier","src":"171:6:51"},"nativeSrc":"171:12:51","nodeType":"YulFunctionCall","src":"171:12:51"},"nativeSrc":"171:12:51","nodeType":"YulExpressionStatement","src":"171:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"81:5:51","nodeType":"YulIdentifier","src":"81:5:51"},{"arguments":[{"name":"value","nativeSrc":"92:5:51","nodeType":"YulIdentifier","src":"92:5:51"},{"kind":"number","nativeSrc":"99:66:51","nodeType":"YulLiteral","src":"99:66:51","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"88:3:51","nodeType":"YulIdentifier","src":"88:3:51"},"nativeSrc":"88:78:51","nodeType":"YulFunctionCall","src":"88:78:51"}],"functionName":{"name":"eq","nativeSrc":"78:2:51","nodeType":"YulIdentifier","src":"78:2:51"},"nativeSrc":"78:89:51","nodeType":"YulFunctionCall","src":"78:89:51"}],"functionName":{"name":"iszero","nativeSrc":"71:6:51","nodeType":"YulIdentifier","src":"71:6:51"},"nativeSrc":"71:97:51","nodeType":"YulFunctionCall","src":"71:97:51"},"nativeSrc":"68:117:51","nodeType":"YulIf","src":"68:117:51"}]},"name":"validator_revert_bytes4","nativeSrc":"14:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"47:5:51","nodeType":"YulTypedName","src":"47:5:51","type":""}],"src":"14:177:51"},{"body":{"nativeSrc":"265:176:51","nodeType":"YulBlock","src":"265:176:51","statements":[{"body":{"nativeSrc":"311:16:51","nodeType":"YulBlock","src":"311:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:51","nodeType":"YulLiteral","src":"320:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:51","nodeType":"YulLiteral","src":"323:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:51","nodeType":"YulIdentifier","src":"313:6:51"},"nativeSrc":"313:12:51","nodeType":"YulFunctionCall","src":"313:12:51"},"nativeSrc":"313:12:51","nodeType":"YulExpressionStatement","src":"313:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"286:7:51","nodeType":"YulIdentifier","src":"286:7:51"},{"name":"headStart","nativeSrc":"295:9:51","nodeType":"YulIdentifier","src":"295:9:51"}],"functionName":{"name":"sub","nativeSrc":"282:3:51","nodeType":"YulIdentifier","src":"282:3:51"},"nativeSrc":"282:23:51","nodeType":"YulFunctionCall","src":"282:23:51"},{"kind":"number","nativeSrc":"307:2:51","nodeType":"YulLiteral","src":"307:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"278:3:51","nodeType":"YulIdentifier","src":"278:3:51"},"nativeSrc":"278:32:51","nodeType":"YulFunctionCall","src":"278:32:51"},"nativeSrc":"275:52:51","nodeType":"YulIf","src":"275:52:51"},{"nativeSrc":"336:36:51","nodeType":"YulVariableDeclaration","src":"336:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"362:9:51","nodeType":"YulIdentifier","src":"362:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"349:12:51","nodeType":"YulIdentifier","src":"349:12:51"},"nativeSrc":"349:23:51","nodeType":"YulFunctionCall","src":"349:23:51"},"variables":[{"name":"value","nativeSrc":"340:5:51","nodeType":"YulTypedName","src":"340:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"405:5:51","nodeType":"YulIdentifier","src":"405:5:51"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"381:23:51","nodeType":"YulIdentifier","src":"381:23:51"},"nativeSrc":"381:30:51","nodeType":"YulFunctionCall","src":"381:30:51"},"nativeSrc":"381:30:51","nodeType":"YulExpressionStatement","src":"381:30:51"},{"nativeSrc":"420:15:51","nodeType":"YulAssignment","src":"420:15:51","value":{"name":"value","nativeSrc":"430:5:51","nodeType":"YulIdentifier","src":"430:5:51"},"variableNames":[{"name":"value0","nativeSrc":"420:6:51","nodeType":"YulIdentifier","src":"420:6:51"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"196:245:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"231:9:51","nodeType":"YulTypedName","src":"231:9:51","type":""},{"name":"dataEnd","nativeSrc":"242:7:51","nodeType":"YulTypedName","src":"242:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"254:6:51","nodeType":"YulTypedName","src":"254:6:51","type":""}],"src":"196:245:51"},{"body":{"nativeSrc":"541:92:51","nodeType":"YulBlock","src":"541:92:51","statements":[{"nativeSrc":"551:26:51","nodeType":"YulAssignment","src":"551:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"563:9:51","nodeType":"YulIdentifier","src":"563:9:51"},{"kind":"number","nativeSrc":"574:2:51","nodeType":"YulLiteral","src":"574:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"559:3:51","nodeType":"YulIdentifier","src":"559:3:51"},"nativeSrc":"559:18:51","nodeType":"YulFunctionCall","src":"559:18:51"},"variableNames":[{"name":"tail","nativeSrc":"551:4:51","nodeType":"YulIdentifier","src":"551:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"593:9:51","nodeType":"YulIdentifier","src":"593:9:51"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"618:6:51","nodeType":"YulIdentifier","src":"618:6:51"}],"functionName":{"name":"iszero","nativeSrc":"611:6:51","nodeType":"YulIdentifier","src":"611:6:51"},"nativeSrc":"611:14:51","nodeType":"YulFunctionCall","src":"611:14:51"}],"functionName":{"name":"iszero","nativeSrc":"604:6:51","nodeType":"YulIdentifier","src":"604:6:51"},"nativeSrc":"604:22:51","nodeType":"YulFunctionCall","src":"604:22:51"}],"functionName":{"name":"mstore","nativeSrc":"586:6:51","nodeType":"YulIdentifier","src":"586:6:51"},"nativeSrc":"586:41:51","nodeType":"YulFunctionCall","src":"586:41:51"},"nativeSrc":"586:41:51","nodeType":"YulExpressionStatement","src":"586:41:51"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"446:187:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"510:9:51","nodeType":"YulTypedName","src":"510:9:51","type":""},{"name":"value0","nativeSrc":"521:6:51","nodeType":"YulTypedName","src":"521:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"532:4:51","nodeType":"YulTypedName","src":"532:4:51","type":""}],"src":"446:187:51"},{"body":{"nativeSrc":"704:184:51","nodeType":"YulBlock","src":"704:184:51","statements":[{"nativeSrc":"714:10:51","nodeType":"YulVariableDeclaration","src":"714:10:51","value":{"kind":"number","nativeSrc":"723:1:51","nodeType":"YulLiteral","src":"723:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"718:1:51","nodeType":"YulTypedName","src":"718:1:51","type":""}]},{"body":{"nativeSrc":"783:63:51","nodeType":"YulBlock","src":"783:63:51","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"808:3:51","nodeType":"YulIdentifier","src":"808:3:51"},{"name":"i","nativeSrc":"813:1:51","nodeType":"YulIdentifier","src":"813:1:51"}],"functionName":{"name":"add","nativeSrc":"804:3:51","nodeType":"YulIdentifier","src":"804:3:51"},"nativeSrc":"804:11:51","nodeType":"YulFunctionCall","src":"804:11:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"827:3:51","nodeType":"YulIdentifier","src":"827:3:51"},{"name":"i","nativeSrc":"832:1:51","nodeType":"YulIdentifier","src":"832:1:51"}],"functionName":{"name":"add","nativeSrc":"823:3:51","nodeType":"YulIdentifier","src":"823:3:51"},"nativeSrc":"823:11:51","nodeType":"YulFunctionCall","src":"823:11:51"}],"functionName":{"name":"mload","nativeSrc":"817:5:51","nodeType":"YulIdentifier","src":"817:5:51"},"nativeSrc":"817:18:51","nodeType":"YulFunctionCall","src":"817:18:51"}],"functionName":{"name":"mstore","nativeSrc":"797:6:51","nodeType":"YulIdentifier","src":"797:6:51"},"nativeSrc":"797:39:51","nodeType":"YulFunctionCall","src":"797:39:51"},"nativeSrc":"797:39:51","nodeType":"YulExpressionStatement","src":"797:39:51"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"744:1:51","nodeType":"YulIdentifier","src":"744:1:51"},{"name":"length","nativeSrc":"747:6:51","nodeType":"YulIdentifier","src":"747:6:51"}],"functionName":{"name":"lt","nativeSrc":"741:2:51","nodeType":"YulIdentifier","src":"741:2:51"},"nativeSrc":"741:13:51","nodeType":"YulFunctionCall","src":"741:13:51"},"nativeSrc":"733:113:51","nodeType":"YulForLoop","post":{"nativeSrc":"755:19:51","nodeType":"YulBlock","src":"755:19:51","statements":[{"nativeSrc":"757:15:51","nodeType":"YulAssignment","src":"757:15:51","value":{"arguments":[{"name":"i","nativeSrc":"766:1:51","nodeType":"YulIdentifier","src":"766:1:51"},{"kind":"number","nativeSrc":"769:2:51","nodeType":"YulLiteral","src":"769:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"762:3:51","nodeType":"YulIdentifier","src":"762:3:51"},"nativeSrc":"762:10:51","nodeType":"YulFunctionCall","src":"762:10:51"},"variableNames":[{"name":"i","nativeSrc":"757:1:51","nodeType":"YulIdentifier","src":"757:1:51"}]}]},"pre":{"nativeSrc":"737:3:51","nodeType":"YulBlock","src":"737:3:51","statements":[]},"src":"733:113:51"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"866:3:51","nodeType":"YulIdentifier","src":"866:3:51"},{"name":"length","nativeSrc":"871:6:51","nodeType":"YulIdentifier","src":"871:6:51"}],"functionName":{"name":"add","nativeSrc":"862:3:51","nodeType":"YulIdentifier","src":"862:3:51"},"nativeSrc":"862:16:51","nodeType":"YulFunctionCall","src":"862:16:51"},{"kind":"number","nativeSrc":"880:1:51","nodeType":"YulLiteral","src":"880:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"855:6:51","nodeType":"YulIdentifier","src":"855:6:51"},"nativeSrc":"855:27:51","nodeType":"YulFunctionCall","src":"855:27:51"},"nativeSrc":"855:27:51","nodeType":"YulExpressionStatement","src":"855:27:51"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"638:250:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"682:3:51","nodeType":"YulTypedName","src":"682:3:51","type":""},{"name":"dst","nativeSrc":"687:3:51","nodeType":"YulTypedName","src":"687:3:51","type":""},{"name":"length","nativeSrc":"692:6:51","nodeType":"YulTypedName","src":"692:6:51","type":""}],"src":"638:250:51"},{"body":{"nativeSrc":"943:280:51","nodeType":"YulBlock","src":"943:280:51","statements":[{"nativeSrc":"953:26:51","nodeType":"YulVariableDeclaration","src":"953:26:51","value":{"arguments":[{"name":"value","nativeSrc":"973:5:51","nodeType":"YulIdentifier","src":"973:5:51"}],"functionName":{"name":"mload","nativeSrc":"967:5:51","nodeType":"YulIdentifier","src":"967:5:51"},"nativeSrc":"967:12:51","nodeType":"YulFunctionCall","src":"967:12:51"},"variables":[{"name":"length","nativeSrc":"957:6:51","nodeType":"YulTypedName","src":"957:6:51","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"995:3:51","nodeType":"YulIdentifier","src":"995:3:51"},{"name":"length","nativeSrc":"1000:6:51","nodeType":"YulIdentifier","src":"1000:6:51"}],"functionName":{"name":"mstore","nativeSrc":"988:6:51","nodeType":"YulIdentifier","src":"988:6:51"},"nativeSrc":"988:19:51","nodeType":"YulFunctionCall","src":"988:19:51"},"nativeSrc":"988:19:51","nodeType":"YulExpressionStatement","src":"988:19:51"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1055:5:51","nodeType":"YulIdentifier","src":"1055:5:51"},{"kind":"number","nativeSrc":"1062:4:51","nodeType":"YulLiteral","src":"1062:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1051:3:51","nodeType":"YulIdentifier","src":"1051:3:51"},"nativeSrc":"1051:16:51","nodeType":"YulFunctionCall","src":"1051:16:51"},{"arguments":[{"name":"pos","nativeSrc":"1073:3:51","nodeType":"YulIdentifier","src":"1073:3:51"},{"kind":"number","nativeSrc":"1078:4:51","nodeType":"YulLiteral","src":"1078:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1069:3:51","nodeType":"YulIdentifier","src":"1069:3:51"},"nativeSrc":"1069:14:51","nodeType":"YulFunctionCall","src":"1069:14:51"},{"name":"length","nativeSrc":"1085:6:51","nodeType":"YulIdentifier","src":"1085:6:51"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1016:34:51","nodeType":"YulIdentifier","src":"1016:34:51"},"nativeSrc":"1016:76:51","nodeType":"YulFunctionCall","src":"1016:76:51"},"nativeSrc":"1016:76:51","nodeType":"YulExpressionStatement","src":"1016:76:51"},{"nativeSrc":"1101:116:51","nodeType":"YulAssignment","src":"1101:116:51","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1116:3:51","nodeType":"YulIdentifier","src":"1116:3:51"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1129:6:51","nodeType":"YulIdentifier","src":"1129:6:51"},{"kind":"number","nativeSrc":"1137:2:51","nodeType":"YulLiteral","src":"1137:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1125:3:51","nodeType":"YulIdentifier","src":"1125:3:51"},"nativeSrc":"1125:15:51","nodeType":"YulFunctionCall","src":"1125:15:51"},{"kind":"number","nativeSrc":"1142:66:51","nodeType":"YulLiteral","src":"1142:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1121:3:51","nodeType":"YulIdentifier","src":"1121:3:51"},"nativeSrc":"1121:88:51","nodeType":"YulFunctionCall","src":"1121:88:51"}],"functionName":{"name":"add","nativeSrc":"1112:3:51","nodeType":"YulIdentifier","src":"1112:3:51"},"nativeSrc":"1112:98:51","nodeType":"YulFunctionCall","src":"1112:98:51"},{"kind":"number","nativeSrc":"1212:4:51","nodeType":"YulLiteral","src":"1212:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1108:3:51","nodeType":"YulIdentifier","src":"1108:3:51"},"nativeSrc":"1108:109:51","nodeType":"YulFunctionCall","src":"1108:109:51"},"variableNames":[{"name":"end","nativeSrc":"1101:3:51","nodeType":"YulIdentifier","src":"1101:3:51"}]}]},"name":"abi_encode_string","nativeSrc":"893:330:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"920:5:51","nodeType":"YulTypedName","src":"920:5:51","type":""},{"name":"pos","nativeSrc":"927:3:51","nodeType":"YulTypedName","src":"927:3:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"935:3:51","nodeType":"YulTypedName","src":"935:3:51","type":""}],"src":"893:330:51"},{"body":{"nativeSrc":"1349:99:51","nodeType":"YulBlock","src":"1349:99:51","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1366:9:51","nodeType":"YulIdentifier","src":"1366:9:51"},{"kind":"number","nativeSrc":"1377:2:51","nodeType":"YulLiteral","src":"1377:2:51","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:51","nodeType":"YulIdentifier","src":"1359:6:51"},"nativeSrc":"1359:21:51","nodeType":"YulFunctionCall","src":"1359:21:51"},"nativeSrc":"1359:21:51","nodeType":"YulExpressionStatement","src":"1359:21:51"},{"nativeSrc":"1389:53:51","nodeType":"YulAssignment","src":"1389:53:51","value":{"arguments":[{"name":"value0","nativeSrc":"1415:6:51","nodeType":"YulIdentifier","src":"1415:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"1427:9:51","nodeType":"YulIdentifier","src":"1427:9:51"},{"kind":"number","nativeSrc":"1438:2:51","nodeType":"YulLiteral","src":"1438:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1423:3:51","nodeType":"YulIdentifier","src":"1423:3:51"},"nativeSrc":"1423:18:51","nodeType":"YulFunctionCall","src":"1423:18:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"1397:17:51","nodeType":"YulIdentifier","src":"1397:17:51"},"nativeSrc":"1397:45:51","nodeType":"YulFunctionCall","src":"1397:45:51"},"variableNames":[{"name":"tail","nativeSrc":"1389:4:51","nodeType":"YulIdentifier","src":"1389:4:51"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1228:220:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1318:9:51","nodeType":"YulTypedName","src":"1318:9:51","type":""},{"name":"value0","nativeSrc":"1329:6:51","nodeType":"YulTypedName","src":"1329:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1340:4:51","nodeType":"YulTypedName","src":"1340:4:51","type":""}],"src":"1228:220:51"},{"body":{"nativeSrc":"1523:110:51","nodeType":"YulBlock","src":"1523:110:51","statements":[{"body":{"nativeSrc":"1569:16:51","nodeType":"YulBlock","src":"1569:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1578:1:51","nodeType":"YulLiteral","src":"1578:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1581:1:51","nodeType":"YulLiteral","src":"1581:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1571:6:51","nodeType":"YulIdentifier","src":"1571:6:51"},"nativeSrc":"1571:12:51","nodeType":"YulFunctionCall","src":"1571:12:51"},"nativeSrc":"1571:12:51","nodeType":"YulExpressionStatement","src":"1571:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1544:7:51","nodeType":"YulIdentifier","src":"1544:7:51"},{"name":"headStart","nativeSrc":"1553:9:51","nodeType":"YulIdentifier","src":"1553:9:51"}],"functionName":{"name":"sub","nativeSrc":"1540:3:51","nodeType":"YulIdentifier","src":"1540:3:51"},"nativeSrc":"1540:23:51","nodeType":"YulFunctionCall","src":"1540:23:51"},{"kind":"number","nativeSrc":"1565:2:51","nodeType":"YulLiteral","src":"1565:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1536:3:51","nodeType":"YulIdentifier","src":"1536:3:51"},"nativeSrc":"1536:32:51","nodeType":"YulFunctionCall","src":"1536:32:51"},"nativeSrc":"1533:52:51","nodeType":"YulIf","src":"1533:52:51"},{"nativeSrc":"1594:33:51","nodeType":"YulAssignment","src":"1594:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1617:9:51","nodeType":"YulIdentifier","src":"1617:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"1604:12:51","nodeType":"YulIdentifier","src":"1604:12:51"},"nativeSrc":"1604:23:51","nodeType":"YulFunctionCall","src":"1604:23:51"},"variableNames":[{"name":"value0","nativeSrc":"1594:6:51","nodeType":"YulIdentifier","src":"1594:6:51"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1453:180:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1489:9:51","nodeType":"YulTypedName","src":"1489:9:51","type":""},{"name":"dataEnd","nativeSrc":"1500:7:51","nodeType":"YulTypedName","src":"1500:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1512:6:51","nodeType":"YulTypedName","src":"1512:6:51","type":""}],"src":"1453:180:51"},{"body":{"nativeSrc":"1739:125:51","nodeType":"YulBlock","src":"1739:125:51","statements":[{"nativeSrc":"1749:26:51","nodeType":"YulAssignment","src":"1749:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1761:9:51","nodeType":"YulIdentifier","src":"1761:9:51"},{"kind":"number","nativeSrc":"1772:2:51","nodeType":"YulLiteral","src":"1772:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1757:3:51","nodeType":"YulIdentifier","src":"1757:3:51"},"nativeSrc":"1757:18:51","nodeType":"YulFunctionCall","src":"1757:18:51"},"variableNames":[{"name":"tail","nativeSrc":"1749:4:51","nodeType":"YulIdentifier","src":"1749:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1791:9:51","nodeType":"YulIdentifier","src":"1791:9:51"},{"arguments":[{"name":"value0","nativeSrc":"1806:6:51","nodeType":"YulIdentifier","src":"1806:6:51"},{"kind":"number","nativeSrc":"1814:42:51","nodeType":"YulLiteral","src":"1814:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1802:3:51","nodeType":"YulIdentifier","src":"1802:3:51"},"nativeSrc":"1802:55:51","nodeType":"YulFunctionCall","src":"1802:55:51"}],"functionName":{"name":"mstore","nativeSrc":"1784:6:51","nodeType":"YulIdentifier","src":"1784:6:51"},"nativeSrc":"1784:74:51","nodeType":"YulFunctionCall","src":"1784:74:51"},"nativeSrc":"1784:74:51","nodeType":"YulExpressionStatement","src":"1784:74:51"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1638:226:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1708:9:51","nodeType":"YulTypedName","src":"1708:9:51","type":""},{"name":"value0","nativeSrc":"1719:6:51","nodeType":"YulTypedName","src":"1719:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1730:4:51","nodeType":"YulTypedName","src":"1730:4:51","type":""}],"src":"1638:226:51"},{"body":{"nativeSrc":"1914:109:51","nodeType":"YulBlock","src":"1914:109:51","statements":[{"body":{"nativeSrc":"2001:16:51","nodeType":"YulBlock","src":"2001:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2010:1:51","nodeType":"YulLiteral","src":"2010:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2013:1:51","nodeType":"YulLiteral","src":"2013:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2003:6:51","nodeType":"YulIdentifier","src":"2003:6:51"},"nativeSrc":"2003:12:51","nodeType":"YulFunctionCall","src":"2003:12:51"},"nativeSrc":"2003:12:51","nodeType":"YulExpressionStatement","src":"2003:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1937:5:51","nodeType":"YulIdentifier","src":"1937:5:51"},{"arguments":[{"name":"value","nativeSrc":"1948:5:51","nodeType":"YulIdentifier","src":"1948:5:51"},{"kind":"number","nativeSrc":"1955:42:51","nodeType":"YulLiteral","src":"1955:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1944:3:51","nodeType":"YulIdentifier","src":"1944:3:51"},"nativeSrc":"1944:54:51","nodeType":"YulFunctionCall","src":"1944:54:51"}],"functionName":{"name":"eq","nativeSrc":"1934:2:51","nodeType":"YulIdentifier","src":"1934:2:51"},"nativeSrc":"1934:65:51","nodeType":"YulFunctionCall","src":"1934:65:51"}],"functionName":{"name":"iszero","nativeSrc":"1927:6:51","nodeType":"YulIdentifier","src":"1927:6:51"},"nativeSrc":"1927:73:51","nodeType":"YulFunctionCall","src":"1927:73:51"},"nativeSrc":"1924:93:51","nodeType":"YulIf","src":"1924:93:51"}]},"name":"validator_revert_address","nativeSrc":"1869:154:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1903:5:51","nodeType":"YulTypedName","src":"1903:5:51","type":""}],"src":"1869:154:51"},{"body":{"nativeSrc":"2115:228:51","nodeType":"YulBlock","src":"2115:228:51","statements":[{"body":{"nativeSrc":"2161:16:51","nodeType":"YulBlock","src":"2161:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2170:1:51","nodeType":"YulLiteral","src":"2170:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2173:1:51","nodeType":"YulLiteral","src":"2173:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2163:6:51","nodeType":"YulIdentifier","src":"2163:6:51"},"nativeSrc":"2163:12:51","nodeType":"YulFunctionCall","src":"2163:12:51"},"nativeSrc":"2163:12:51","nodeType":"YulExpressionStatement","src":"2163:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2136:7:51","nodeType":"YulIdentifier","src":"2136:7:51"},{"name":"headStart","nativeSrc":"2145:9:51","nodeType":"YulIdentifier","src":"2145:9:51"}],"functionName":{"name":"sub","nativeSrc":"2132:3:51","nodeType":"YulIdentifier","src":"2132:3:51"},"nativeSrc":"2132:23:51","nodeType":"YulFunctionCall","src":"2132:23:51"},{"kind":"number","nativeSrc":"2157:2:51","nodeType":"YulLiteral","src":"2157:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2128:3:51","nodeType":"YulIdentifier","src":"2128:3:51"},"nativeSrc":"2128:32:51","nodeType":"YulFunctionCall","src":"2128:32:51"},"nativeSrc":"2125:52:51","nodeType":"YulIf","src":"2125:52:51"},{"nativeSrc":"2186:36:51","nodeType":"YulVariableDeclaration","src":"2186:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2212:9:51","nodeType":"YulIdentifier","src":"2212:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2199:12:51","nodeType":"YulIdentifier","src":"2199:12:51"},"nativeSrc":"2199:23:51","nodeType":"YulFunctionCall","src":"2199:23:51"},"variables":[{"name":"value","nativeSrc":"2190:5:51","nodeType":"YulTypedName","src":"2190:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2256:5:51","nodeType":"YulIdentifier","src":"2256:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2231:24:51","nodeType":"YulIdentifier","src":"2231:24:51"},"nativeSrc":"2231:31:51","nodeType":"YulFunctionCall","src":"2231:31:51"},"nativeSrc":"2231:31:51","nodeType":"YulExpressionStatement","src":"2231:31:51"},{"nativeSrc":"2271:15:51","nodeType":"YulAssignment","src":"2271:15:51","value":{"name":"value","nativeSrc":"2281:5:51","nodeType":"YulIdentifier","src":"2281:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2271:6:51","nodeType":"YulIdentifier","src":"2271:6:51"}]},{"nativeSrc":"2295:42:51","nodeType":"YulAssignment","src":"2295:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2322:9:51","nodeType":"YulIdentifier","src":"2322:9:51"},{"kind":"number","nativeSrc":"2333:2:51","nodeType":"YulLiteral","src":"2333:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2318:3:51","nodeType":"YulIdentifier","src":"2318:3:51"},"nativeSrc":"2318:18:51","nodeType":"YulFunctionCall","src":"2318:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2305:12:51","nodeType":"YulIdentifier","src":"2305:12:51"},"nativeSrc":"2305:32:51","nodeType":"YulFunctionCall","src":"2305:32:51"},"variableNames":[{"name":"value1","nativeSrc":"2295:6:51","nodeType":"YulIdentifier","src":"2295:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2028:315:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2073:9:51","nodeType":"YulTypedName","src":"2073:9:51","type":""},{"name":"dataEnd","nativeSrc":"2084:7:51","nodeType":"YulTypedName","src":"2084:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2096:6:51","nodeType":"YulTypedName","src":"2096:6:51","type":""},{"name":"value1","nativeSrc":"2104:6:51","nodeType":"YulTypedName","src":"2104:6:51","type":""}],"src":"2028:315:51"},{"body":{"nativeSrc":"2452:352:51","nodeType":"YulBlock","src":"2452:352:51","statements":[{"body":{"nativeSrc":"2498:16:51","nodeType":"YulBlock","src":"2498:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2507:1:51","nodeType":"YulLiteral","src":"2507:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2510:1:51","nodeType":"YulLiteral","src":"2510:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2500:6:51","nodeType":"YulIdentifier","src":"2500:6:51"},"nativeSrc":"2500:12:51","nodeType":"YulFunctionCall","src":"2500:12:51"},"nativeSrc":"2500:12:51","nodeType":"YulExpressionStatement","src":"2500:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2473:7:51","nodeType":"YulIdentifier","src":"2473:7:51"},{"name":"headStart","nativeSrc":"2482:9:51","nodeType":"YulIdentifier","src":"2482:9:51"}],"functionName":{"name":"sub","nativeSrc":"2469:3:51","nodeType":"YulIdentifier","src":"2469:3:51"},"nativeSrc":"2469:23:51","nodeType":"YulFunctionCall","src":"2469:23:51"},{"kind":"number","nativeSrc":"2494:2:51","nodeType":"YulLiteral","src":"2494:2:51","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2465:3:51","nodeType":"YulIdentifier","src":"2465:3:51"},"nativeSrc":"2465:32:51","nodeType":"YulFunctionCall","src":"2465:32:51"},"nativeSrc":"2462:52:51","nodeType":"YulIf","src":"2462:52:51"},{"nativeSrc":"2523:36:51","nodeType":"YulVariableDeclaration","src":"2523:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2549:9:51","nodeType":"YulIdentifier","src":"2549:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2536:12:51","nodeType":"YulIdentifier","src":"2536:12:51"},"nativeSrc":"2536:23:51","nodeType":"YulFunctionCall","src":"2536:23:51"},"variables":[{"name":"value","nativeSrc":"2527:5:51","nodeType":"YulTypedName","src":"2527:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2593:5:51","nodeType":"YulIdentifier","src":"2593:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2568:24:51","nodeType":"YulIdentifier","src":"2568:24:51"},"nativeSrc":"2568:31:51","nodeType":"YulFunctionCall","src":"2568:31:51"},"nativeSrc":"2568:31:51","nodeType":"YulExpressionStatement","src":"2568:31:51"},{"nativeSrc":"2608:15:51","nodeType":"YulAssignment","src":"2608:15:51","value":{"name":"value","nativeSrc":"2618:5:51","nodeType":"YulIdentifier","src":"2618:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2608:6:51","nodeType":"YulIdentifier","src":"2608:6:51"}]},{"nativeSrc":"2632:47:51","nodeType":"YulVariableDeclaration","src":"2632:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2664:9:51","nodeType":"YulIdentifier","src":"2664:9:51"},{"kind":"number","nativeSrc":"2675:2:51","nodeType":"YulLiteral","src":"2675:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2660:3:51","nodeType":"YulIdentifier","src":"2660:3:51"},"nativeSrc":"2660:18:51","nodeType":"YulFunctionCall","src":"2660:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2647:12:51","nodeType":"YulIdentifier","src":"2647:12:51"},"nativeSrc":"2647:32:51","nodeType":"YulFunctionCall","src":"2647:32:51"},"variables":[{"name":"value_1","nativeSrc":"2636:7:51","nodeType":"YulTypedName","src":"2636:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2713:7:51","nodeType":"YulIdentifier","src":"2713:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2688:24:51","nodeType":"YulIdentifier","src":"2688:24:51"},"nativeSrc":"2688:33:51","nodeType":"YulFunctionCall","src":"2688:33:51"},"nativeSrc":"2688:33:51","nodeType":"YulExpressionStatement","src":"2688:33:51"},{"nativeSrc":"2730:17:51","nodeType":"YulAssignment","src":"2730:17:51","value":{"name":"value_1","nativeSrc":"2740:7:51","nodeType":"YulIdentifier","src":"2740:7:51"},"variableNames":[{"name":"value1","nativeSrc":"2730:6:51","nodeType":"YulIdentifier","src":"2730:6:51"}]},{"nativeSrc":"2756:42:51","nodeType":"YulAssignment","src":"2756:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2783:9:51","nodeType":"YulIdentifier","src":"2783:9:51"},{"kind":"number","nativeSrc":"2794:2:51","nodeType":"YulLiteral","src":"2794:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2779:3:51","nodeType":"YulIdentifier","src":"2779:3:51"},"nativeSrc":"2779:18:51","nodeType":"YulFunctionCall","src":"2779:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2766:12:51","nodeType":"YulIdentifier","src":"2766:12:51"},"nativeSrc":"2766:32:51","nodeType":"YulFunctionCall","src":"2766:32:51"},"variableNames":[{"name":"value2","nativeSrc":"2756:6:51","nodeType":"YulIdentifier","src":"2756:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"2348:456:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2402:9:51","nodeType":"YulTypedName","src":"2402:9:51","type":""},{"name":"dataEnd","nativeSrc":"2413:7:51","nodeType":"YulTypedName","src":"2413:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2425:6:51","nodeType":"YulTypedName","src":"2425:6:51","type":""},{"name":"value1","nativeSrc":"2433:6:51","nodeType":"YulTypedName","src":"2433:6:51","type":""},{"name":"value2","nativeSrc":"2441:6:51","nodeType":"YulTypedName","src":"2441:6:51","type":""}],"src":"2348:456:51"},{"body":{"nativeSrc":"2937:125:51","nodeType":"YulBlock","src":"2937:125:51","statements":[{"nativeSrc":"2947:26:51","nodeType":"YulAssignment","src":"2947:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2959:9:51","nodeType":"YulIdentifier","src":"2959:9:51"},{"kind":"number","nativeSrc":"2970:2:51","nodeType":"YulLiteral","src":"2970:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2955:3:51","nodeType":"YulIdentifier","src":"2955:3:51"},"nativeSrc":"2955:18:51","nodeType":"YulFunctionCall","src":"2955:18:51"},"variableNames":[{"name":"tail","nativeSrc":"2947:4:51","nodeType":"YulIdentifier","src":"2947:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2989:9:51","nodeType":"YulIdentifier","src":"2989:9:51"},{"arguments":[{"name":"value0","nativeSrc":"3004:6:51","nodeType":"YulIdentifier","src":"3004:6:51"},{"kind":"number","nativeSrc":"3012:42:51","nodeType":"YulLiteral","src":"3012:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3000:3:51","nodeType":"YulIdentifier","src":"3000:3:51"},"nativeSrc":"3000:55:51","nodeType":"YulFunctionCall","src":"3000:55:51"}],"functionName":{"name":"mstore","nativeSrc":"2982:6:51","nodeType":"YulIdentifier","src":"2982:6:51"},"nativeSrc":"2982:74:51","nodeType":"YulFunctionCall","src":"2982:74:51"},"nativeSrc":"2982:74:51","nodeType":"YulExpressionStatement","src":"2982:74:51"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed","nativeSrc":"2809:253:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2906:9:51","nodeType":"YulTypedName","src":"2906:9:51","type":""},{"name":"value0","nativeSrc":"2917:6:51","nodeType":"YulTypedName","src":"2917:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2928:4:51","nodeType":"YulTypedName","src":"2928:4:51","type":""}],"src":"2809:253:51"},{"body":{"nativeSrc":"3154:228:51","nodeType":"YulBlock","src":"3154:228:51","statements":[{"body":{"nativeSrc":"3200:16:51","nodeType":"YulBlock","src":"3200:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3209:1:51","nodeType":"YulLiteral","src":"3209:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3212:1:51","nodeType":"YulLiteral","src":"3212:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3202:6:51","nodeType":"YulIdentifier","src":"3202:6:51"},"nativeSrc":"3202:12:51","nodeType":"YulFunctionCall","src":"3202:12:51"},"nativeSrc":"3202:12:51","nodeType":"YulExpressionStatement","src":"3202:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3175:7:51","nodeType":"YulIdentifier","src":"3175:7:51"},{"name":"headStart","nativeSrc":"3184:9:51","nodeType":"YulIdentifier","src":"3184:9:51"}],"functionName":{"name":"sub","nativeSrc":"3171:3:51","nodeType":"YulIdentifier","src":"3171:3:51"},"nativeSrc":"3171:23:51","nodeType":"YulFunctionCall","src":"3171:23:51"},{"kind":"number","nativeSrc":"3196:2:51","nodeType":"YulLiteral","src":"3196:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3167:3:51","nodeType":"YulIdentifier","src":"3167:3:51"},"nativeSrc":"3167:32:51","nodeType":"YulFunctionCall","src":"3167:32:51"},"nativeSrc":"3164:52:51","nodeType":"YulIf","src":"3164:52:51"},{"nativeSrc":"3225:33:51","nodeType":"YulAssignment","src":"3225:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"3248:9:51","nodeType":"YulIdentifier","src":"3248:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"3235:12:51","nodeType":"YulIdentifier","src":"3235:12:51"},"nativeSrc":"3235:23:51","nodeType":"YulFunctionCall","src":"3235:23:51"},"variableNames":[{"name":"value0","nativeSrc":"3225:6:51","nodeType":"YulIdentifier","src":"3225:6:51"}]},{"nativeSrc":"3267:45:51","nodeType":"YulVariableDeclaration","src":"3267:45:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3297:9:51","nodeType":"YulIdentifier","src":"3297:9:51"},{"kind":"number","nativeSrc":"3308:2:51","nodeType":"YulLiteral","src":"3308:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3293:3:51","nodeType":"YulIdentifier","src":"3293:3:51"},"nativeSrc":"3293:18:51","nodeType":"YulFunctionCall","src":"3293:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"3280:12:51","nodeType":"YulIdentifier","src":"3280:12:51"},"nativeSrc":"3280:32:51","nodeType":"YulFunctionCall","src":"3280:32:51"},"variables":[{"name":"value","nativeSrc":"3271:5:51","nodeType":"YulTypedName","src":"3271:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3346:5:51","nodeType":"YulIdentifier","src":"3346:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3321:24:51","nodeType":"YulIdentifier","src":"3321:24:51"},"nativeSrc":"3321:31:51","nodeType":"YulFunctionCall","src":"3321:31:51"},"nativeSrc":"3321:31:51","nodeType":"YulExpressionStatement","src":"3321:31:51"},{"nativeSrc":"3361:15:51","nodeType":"YulAssignment","src":"3361:15:51","value":{"name":"value","nativeSrc":"3371:5:51","nodeType":"YulIdentifier","src":"3371:5:51"},"variableNames":[{"name":"value1","nativeSrc":"3361:6:51","nodeType":"YulIdentifier","src":"3361:6:51"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"3067:315:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3112:9:51","nodeType":"YulTypedName","src":"3112:9:51","type":""},{"name":"dataEnd","nativeSrc":"3123:7:51","nodeType":"YulTypedName","src":"3123:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3135:6:51","nodeType":"YulTypedName","src":"3135:6:51","type":""},{"name":"value1","nativeSrc":"3143:6:51","nodeType":"YulTypedName","src":"3143:6:51","type":""}],"src":"3067:315:51"},{"body":{"nativeSrc":"3516:318:51","nodeType":"YulBlock","src":"3516:318:51","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3533:9:51","nodeType":"YulIdentifier","src":"3533:9:51"},{"kind":"number","nativeSrc":"3544:2:51","nodeType":"YulLiteral","src":"3544:2:51","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"3526:6:51","nodeType":"YulIdentifier","src":"3526:6:51"},"nativeSrc":"3526:21:51","nodeType":"YulFunctionCall","src":"3526:21:51"},"nativeSrc":"3526:21:51","nodeType":"YulExpressionStatement","src":"3526:21:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3567:9:51","nodeType":"YulIdentifier","src":"3567:9:51"},{"kind":"number","nativeSrc":"3578:2:51","nodeType":"YulLiteral","src":"3578:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3563:3:51","nodeType":"YulIdentifier","src":"3563:3:51"},"nativeSrc":"3563:18:51","nodeType":"YulFunctionCall","src":"3563:18:51"},{"name":"value1","nativeSrc":"3583:6:51","nodeType":"YulIdentifier","src":"3583:6:51"}],"functionName":{"name":"mstore","nativeSrc":"3556:6:51","nodeType":"YulIdentifier","src":"3556:6:51"},"nativeSrc":"3556:34:51","nodeType":"YulFunctionCall","src":"3556:34:51"},"nativeSrc":"3556:34:51","nodeType":"YulExpressionStatement","src":"3556:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3616:9:51","nodeType":"YulIdentifier","src":"3616:9:51"},{"kind":"number","nativeSrc":"3627:2:51","nodeType":"YulLiteral","src":"3627:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3612:3:51","nodeType":"YulIdentifier","src":"3612:3:51"},"nativeSrc":"3612:18:51","nodeType":"YulFunctionCall","src":"3612:18:51"},{"name":"value0","nativeSrc":"3632:6:51","nodeType":"YulIdentifier","src":"3632:6:51"},{"name":"value1","nativeSrc":"3640:6:51","nodeType":"YulIdentifier","src":"3640:6:51"}],"functionName":{"name":"calldatacopy","nativeSrc":"3599:12:51","nodeType":"YulIdentifier","src":"3599:12:51"},"nativeSrc":"3599:48:51","nodeType":"YulFunctionCall","src":"3599:48:51"},"nativeSrc":"3599:48:51","nodeType":"YulExpressionStatement","src":"3599:48:51"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3671:9:51","nodeType":"YulIdentifier","src":"3671:9:51"},{"name":"value1","nativeSrc":"3682:6:51","nodeType":"YulIdentifier","src":"3682:6:51"}],"functionName":{"name":"add","nativeSrc":"3667:3:51","nodeType":"YulIdentifier","src":"3667:3:51"},"nativeSrc":"3667:22:51","nodeType":"YulFunctionCall","src":"3667:22:51"},{"kind":"number","nativeSrc":"3691:2:51","nodeType":"YulLiteral","src":"3691:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3663:3:51","nodeType":"YulIdentifier","src":"3663:3:51"},"nativeSrc":"3663:31:51","nodeType":"YulFunctionCall","src":"3663:31:51"},{"kind":"number","nativeSrc":"3696:1:51","nodeType":"YulLiteral","src":"3696:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3656:6:51","nodeType":"YulIdentifier","src":"3656:6:51"},"nativeSrc":"3656:42:51","nodeType":"YulFunctionCall","src":"3656:42:51"},"nativeSrc":"3656:42:51","nodeType":"YulExpressionStatement","src":"3656:42:51"},{"nativeSrc":"3707:121:51","nodeType":"YulAssignment","src":"3707:121:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3723:9:51","nodeType":"YulIdentifier","src":"3723:9:51"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"3742:6:51","nodeType":"YulIdentifier","src":"3742:6:51"},{"kind":"number","nativeSrc":"3750:2:51","nodeType":"YulLiteral","src":"3750:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3738:3:51","nodeType":"YulIdentifier","src":"3738:3:51"},"nativeSrc":"3738:15:51","nodeType":"YulFunctionCall","src":"3738:15:51"},{"kind":"number","nativeSrc":"3755:66:51","nodeType":"YulLiteral","src":"3755:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"3734:3:51","nodeType":"YulIdentifier","src":"3734:3:51"},"nativeSrc":"3734:88:51","nodeType":"YulFunctionCall","src":"3734:88:51"}],"functionName":{"name":"add","nativeSrc":"3719:3:51","nodeType":"YulIdentifier","src":"3719:3:51"},"nativeSrc":"3719:104:51","nodeType":"YulFunctionCall","src":"3719:104:51"},{"kind":"number","nativeSrc":"3825:2:51","nodeType":"YulLiteral","src":"3825:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3715:3:51","nodeType":"YulIdentifier","src":"3715:3:51"},"nativeSrc":"3715:113:51","nodeType":"YulFunctionCall","src":"3715:113:51"},"variableNames":[{"name":"tail","nativeSrc":"3707:4:51","nodeType":"YulIdentifier","src":"3707:4:51"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"3387:447:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3477:9:51","nodeType":"YulTypedName","src":"3477:9:51","type":""},{"name":"value1","nativeSrc":"3488:6:51","nodeType":"YulTypedName","src":"3488:6:51","type":""},{"name":"value0","nativeSrc":"3496:6:51","nodeType":"YulTypedName","src":"3496:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3507:4:51","nodeType":"YulTypedName","src":"3507:4:51","type":""}],"src":"3387:447:51"},{"body":{"nativeSrc":"4138:541:51","nodeType":"YulBlock","src":"4138:541:51","statements":[{"nativeSrc":"4148:16:51","nodeType":"YulVariableDeclaration","src":"4148:16:51","value":{"kind":"number","nativeSrc":"4158:6:51","nodeType":"YulLiteral","src":"4158:6:51","type":"","value":"0xffff"},"variables":[{"name":"_1","nativeSrc":"4152:2:51","nodeType":"YulTypedName","src":"4152:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4180:9:51","nodeType":"YulIdentifier","src":"4180:9:51"},{"arguments":[{"name":"value0","nativeSrc":"4195:6:51","nodeType":"YulIdentifier","src":"4195:6:51"},{"name":"_1","nativeSrc":"4203:2:51","nodeType":"YulIdentifier","src":"4203:2:51"}],"functionName":{"name":"and","nativeSrc":"4191:3:51","nodeType":"YulIdentifier","src":"4191:3:51"},"nativeSrc":"4191:15:51","nodeType":"YulFunctionCall","src":"4191:15:51"}],"functionName":{"name":"mstore","nativeSrc":"4173:6:51","nodeType":"YulIdentifier","src":"4173:6:51"},"nativeSrc":"4173:34:51","nodeType":"YulFunctionCall","src":"4173:34:51"},"nativeSrc":"4173:34:51","nodeType":"YulExpressionStatement","src":"4173:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4227:9:51","nodeType":"YulIdentifier","src":"4227:9:51"},{"kind":"number","nativeSrc":"4238:2:51","nodeType":"YulLiteral","src":"4238:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4223:3:51","nodeType":"YulIdentifier","src":"4223:3:51"},"nativeSrc":"4223:18:51","nodeType":"YulFunctionCall","src":"4223:18:51"},{"arguments":[{"name":"value1","nativeSrc":"4247:6:51","nodeType":"YulIdentifier","src":"4247:6:51"},{"name":"_1","nativeSrc":"4255:2:51","nodeType":"YulIdentifier","src":"4255:2:51"}],"functionName":{"name":"and","nativeSrc":"4243:3:51","nodeType":"YulIdentifier","src":"4243:3:51"},"nativeSrc":"4243:15:51","nodeType":"YulFunctionCall","src":"4243:15:51"}],"functionName":{"name":"mstore","nativeSrc":"4216:6:51","nodeType":"YulIdentifier","src":"4216:6:51"},"nativeSrc":"4216:43:51","nodeType":"YulFunctionCall","src":"4216:43:51"},"nativeSrc":"4216:43:51","nodeType":"YulExpressionStatement","src":"4216:43:51"},{"nativeSrc":"4268:28:51","nodeType":"YulVariableDeclaration","src":"4268:28:51","value":{"kind":"number","nativeSrc":"4278:18:51","nodeType":"YulLiteral","src":"4278:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"4272:2:51","nodeType":"YulTypedName","src":"4272:2:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4316:9:51","nodeType":"YulIdentifier","src":"4316:9:51"},{"kind":"number","nativeSrc":"4327:2:51","nodeType":"YulLiteral","src":"4327:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4312:3:51","nodeType":"YulIdentifier","src":"4312:3:51"},"nativeSrc":"4312:18:51","nodeType":"YulFunctionCall","src":"4312:18:51"},{"arguments":[{"name":"value2","nativeSrc":"4336:6:51","nodeType":"YulIdentifier","src":"4336:6:51"},{"name":"_2","nativeSrc":"4344:2:51","nodeType":"YulIdentifier","src":"4344:2:51"}],"functionName":{"name":"and","nativeSrc":"4332:3:51","nodeType":"YulIdentifier","src":"4332:3:51"},"nativeSrc":"4332:15:51","nodeType":"YulFunctionCall","src":"4332:15:51"}],"functionName":{"name":"mstore","nativeSrc":"4305:6:51","nodeType":"YulIdentifier","src":"4305:6:51"},"nativeSrc":"4305:43:51","nodeType":"YulFunctionCall","src":"4305:43:51"},"nativeSrc":"4305:43:51","nodeType":"YulExpressionStatement","src":"4305:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4368:9:51","nodeType":"YulIdentifier","src":"4368:9:51"},{"kind":"number","nativeSrc":"4379:2:51","nodeType":"YulLiteral","src":"4379:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4364:3:51","nodeType":"YulIdentifier","src":"4364:3:51"},"nativeSrc":"4364:18:51","nodeType":"YulFunctionCall","src":"4364:18:51"},{"arguments":[{"name":"value3","nativeSrc":"4388:6:51","nodeType":"YulIdentifier","src":"4388:6:51"},{"name":"_2","nativeSrc":"4396:2:51","nodeType":"YulIdentifier","src":"4396:2:51"}],"functionName":{"name":"and","nativeSrc":"4384:3:51","nodeType":"YulIdentifier","src":"4384:3:51"},"nativeSrc":"4384:15:51","nodeType":"YulFunctionCall","src":"4384:15:51"}],"functionName":{"name":"mstore","nativeSrc":"4357:6:51","nodeType":"YulIdentifier","src":"4357:6:51"},"nativeSrc":"4357:43:51","nodeType":"YulFunctionCall","src":"4357:43:51"},"nativeSrc":"4357:43:51","nodeType":"YulExpressionStatement","src":"4357:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4420:9:51","nodeType":"YulIdentifier","src":"4420:9:51"},{"kind":"number","nativeSrc":"4431:3:51","nodeType":"YulLiteral","src":"4431:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4416:3:51","nodeType":"YulIdentifier","src":"4416:3:51"},"nativeSrc":"4416:19:51","nodeType":"YulFunctionCall","src":"4416:19:51"},{"arguments":[{"name":"value4","nativeSrc":"4441:6:51","nodeType":"YulIdentifier","src":"4441:6:51"},{"name":"_2","nativeSrc":"4449:2:51","nodeType":"YulIdentifier","src":"4449:2:51"}],"functionName":{"name":"and","nativeSrc":"4437:3:51","nodeType":"YulIdentifier","src":"4437:3:51"},"nativeSrc":"4437:15:51","nodeType":"YulFunctionCall","src":"4437:15:51"}],"functionName":{"name":"mstore","nativeSrc":"4409:6:51","nodeType":"YulIdentifier","src":"4409:6:51"},"nativeSrc":"4409:44:51","nodeType":"YulFunctionCall","src":"4409:44:51"},"nativeSrc":"4409:44:51","nodeType":"YulExpressionStatement","src":"4409:44:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4473:9:51","nodeType":"YulIdentifier","src":"4473:9:51"},{"kind":"number","nativeSrc":"4484:3:51","nodeType":"YulLiteral","src":"4484:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4469:3:51","nodeType":"YulIdentifier","src":"4469:3:51"},"nativeSrc":"4469:19:51","nodeType":"YulFunctionCall","src":"4469:19:51"},{"kind":"number","nativeSrc":"4490:3:51","nodeType":"YulLiteral","src":"4490:3:51","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"4462:6:51","nodeType":"YulIdentifier","src":"4462:6:51"},"nativeSrc":"4462:32:51","nodeType":"YulFunctionCall","src":"4462:32:51"},"nativeSrc":"4462:32:51","nodeType":"YulExpressionStatement","src":"4462:32:51"},{"nativeSrc":"4503:60:51","nodeType":"YulVariableDeclaration","src":"4503:60:51","value":{"arguments":[{"name":"value5","nativeSrc":"4535:6:51","nodeType":"YulIdentifier","src":"4535:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"4547:9:51","nodeType":"YulIdentifier","src":"4547:9:51"},{"kind":"number","nativeSrc":"4558:3:51","nodeType":"YulLiteral","src":"4558:3:51","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"4543:3:51","nodeType":"YulIdentifier","src":"4543:3:51"},"nativeSrc":"4543:19:51","nodeType":"YulFunctionCall","src":"4543:19:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"4517:17:51","nodeType":"YulIdentifier","src":"4517:17:51"},"nativeSrc":"4517:46:51","nodeType":"YulFunctionCall","src":"4517:46:51"},"variables":[{"name":"tail_1","nativeSrc":"4507:6:51","nodeType":"YulTypedName","src":"4507:6:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4583:9:51","nodeType":"YulIdentifier","src":"4583:9:51"},{"kind":"number","nativeSrc":"4594:3:51","nodeType":"YulLiteral","src":"4594:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4579:3:51","nodeType":"YulIdentifier","src":"4579:3:51"},"nativeSrc":"4579:19:51","nodeType":"YulFunctionCall","src":"4579:19:51"},{"arguments":[{"name":"tail_1","nativeSrc":"4604:6:51","nodeType":"YulIdentifier","src":"4604:6:51"},{"name":"headStart","nativeSrc":"4612:9:51","nodeType":"YulIdentifier","src":"4612:9:51"}],"functionName":{"name":"sub","nativeSrc":"4600:3:51","nodeType":"YulIdentifier","src":"4600:3:51"},"nativeSrc":"4600:22:51","nodeType":"YulFunctionCall","src":"4600:22:51"}],"functionName":{"name":"mstore","nativeSrc":"4572:6:51","nodeType":"YulIdentifier","src":"4572:6:51"},"nativeSrc":"4572:51:51","nodeType":"YulFunctionCall","src":"4572:51:51"},"nativeSrc":"4572:51:51","nodeType":"YulExpressionStatement","src":"4572:51:51"},{"nativeSrc":"4632:41:51","nodeType":"YulAssignment","src":"4632:41:51","value":{"arguments":[{"name":"value6","nativeSrc":"4658:6:51","nodeType":"YulIdentifier","src":"4658:6:51"},{"name":"tail_1","nativeSrc":"4666:6:51","nodeType":"YulIdentifier","src":"4666:6:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"4640:17:51","nodeType":"YulIdentifier","src":"4640:17:51"},"nativeSrc":"4640:33:51","nodeType":"YulFunctionCall","src":"4640:33:51"},"variableNames":[{"name":"tail","nativeSrc":"4632:4:51","nodeType":"YulIdentifier","src":"4632:4:51"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3839:840:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4059:9:51","nodeType":"YulTypedName","src":"4059:9:51","type":""},{"name":"value6","nativeSrc":"4070:6:51","nodeType":"YulTypedName","src":"4070:6:51","type":""},{"name":"value5","nativeSrc":"4078:6:51","nodeType":"YulTypedName","src":"4078:6:51","type":""},{"name":"value4","nativeSrc":"4086:6:51","nodeType":"YulTypedName","src":"4086:6:51","type":""},{"name":"value3","nativeSrc":"4094:6:51","nodeType":"YulTypedName","src":"4094:6:51","type":""},{"name":"value2","nativeSrc":"4102:6:51","nodeType":"YulTypedName","src":"4102:6:51","type":""},{"name":"value1","nativeSrc":"4110:6:51","nodeType":"YulTypedName","src":"4110:6:51","type":""},{"name":"value0","nativeSrc":"4118:6:51","nodeType":"YulTypedName","src":"4118:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4129:4:51","nodeType":"YulTypedName","src":"4129:4:51","type":""}],"src":"3839:840:51"},{"body":{"nativeSrc":"4816:459:51","nodeType":"YulBlock","src":"4816:459:51","statements":[{"body":{"nativeSrc":"4862:16:51","nodeType":"YulBlock","src":"4862:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4871:1:51","nodeType":"YulLiteral","src":"4871:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"4874:1:51","nodeType":"YulLiteral","src":"4874:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4864:6:51","nodeType":"YulIdentifier","src":"4864:6:51"},"nativeSrc":"4864:12:51","nodeType":"YulFunctionCall","src":"4864:12:51"},"nativeSrc":"4864:12:51","nodeType":"YulExpressionStatement","src":"4864:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4837:7:51","nodeType":"YulIdentifier","src":"4837:7:51"},{"name":"headStart","nativeSrc":"4846:9:51","nodeType":"YulIdentifier","src":"4846:9:51"}],"functionName":{"name":"sub","nativeSrc":"4833:3:51","nodeType":"YulIdentifier","src":"4833:3:51"},"nativeSrc":"4833:23:51","nodeType":"YulFunctionCall","src":"4833:23:51"},{"kind":"number","nativeSrc":"4858:2:51","nodeType":"YulLiteral","src":"4858:2:51","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4829:3:51","nodeType":"YulIdentifier","src":"4829:3:51"},"nativeSrc":"4829:32:51","nodeType":"YulFunctionCall","src":"4829:32:51"},"nativeSrc":"4826:52:51","nodeType":"YulIf","src":"4826:52:51"},{"nativeSrc":"4887:36:51","nodeType":"YulVariableDeclaration","src":"4887:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"4913:9:51","nodeType":"YulIdentifier","src":"4913:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"4900:12:51","nodeType":"YulIdentifier","src":"4900:12:51"},"nativeSrc":"4900:23:51","nodeType":"YulFunctionCall","src":"4900:23:51"},"variables":[{"name":"value","nativeSrc":"4891:5:51","nodeType":"YulTypedName","src":"4891:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4957:5:51","nodeType":"YulIdentifier","src":"4957:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4932:24:51","nodeType":"YulIdentifier","src":"4932:24:51"},"nativeSrc":"4932:31:51","nodeType":"YulFunctionCall","src":"4932:31:51"},"nativeSrc":"4932:31:51","nodeType":"YulExpressionStatement","src":"4932:31:51"},{"nativeSrc":"4972:15:51","nodeType":"YulAssignment","src":"4972:15:51","value":{"name":"value","nativeSrc":"4982:5:51","nodeType":"YulIdentifier","src":"4982:5:51"},"variableNames":[{"name":"value0","nativeSrc":"4972:6:51","nodeType":"YulIdentifier","src":"4972:6:51"}]},{"nativeSrc":"4996:42:51","nodeType":"YulAssignment","src":"4996:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5023:9:51","nodeType":"YulIdentifier","src":"5023:9:51"},{"kind":"number","nativeSrc":"5034:2:51","nodeType":"YulLiteral","src":"5034:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5019:3:51","nodeType":"YulIdentifier","src":"5019:3:51"},"nativeSrc":"5019:18:51","nodeType":"YulFunctionCall","src":"5019:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"5006:12:51","nodeType":"YulIdentifier","src":"5006:12:51"},"nativeSrc":"5006:32:51","nodeType":"YulFunctionCall","src":"5006:32:51"},"variableNames":[{"name":"value1","nativeSrc":"4996:6:51","nodeType":"YulIdentifier","src":"4996:6:51"}]},{"nativeSrc":"5047:46:51","nodeType":"YulVariableDeclaration","src":"5047:46:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5078:9:51","nodeType":"YulIdentifier","src":"5078:9:51"},{"kind":"number","nativeSrc":"5089:2:51","nodeType":"YulLiteral","src":"5089:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5074:3:51","nodeType":"YulIdentifier","src":"5074:3:51"},"nativeSrc":"5074:18:51","nodeType":"YulFunctionCall","src":"5074:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"5061:12:51","nodeType":"YulIdentifier","src":"5061:12:51"},"nativeSrc":"5061:32:51","nodeType":"YulFunctionCall","src":"5061:32:51"},"variables":[{"name":"offset","nativeSrc":"5051:6:51","nodeType":"YulTypedName","src":"5051:6:51","type":""}]},{"body":{"nativeSrc":"5136:16:51","nodeType":"YulBlock","src":"5136:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5145:1:51","nodeType":"YulLiteral","src":"5145:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5148:1:51","nodeType":"YulLiteral","src":"5148:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5138:6:51","nodeType":"YulIdentifier","src":"5138:6:51"},"nativeSrc":"5138:12:51","nodeType":"YulFunctionCall","src":"5138:12:51"},"nativeSrc":"5138:12:51","nodeType":"YulExpressionStatement","src":"5138:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5108:6:51","nodeType":"YulIdentifier","src":"5108:6:51"},{"kind":"number","nativeSrc":"5116:18:51","nodeType":"YulLiteral","src":"5116:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5105:2:51","nodeType":"YulIdentifier","src":"5105:2:51"},"nativeSrc":"5105:30:51","nodeType":"YulFunctionCall","src":"5105:30:51"},"nativeSrc":"5102:50:51","nodeType":"YulIf","src":"5102:50:51"},{"nativeSrc":"5161:32:51","nodeType":"YulVariableDeclaration","src":"5161:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5175:9:51","nodeType":"YulIdentifier","src":"5175:9:51"},{"name":"offset","nativeSrc":"5186:6:51","nodeType":"YulIdentifier","src":"5186:6:51"}],"functionName":{"name":"add","nativeSrc":"5171:3:51","nodeType":"YulIdentifier","src":"5171:3:51"},"nativeSrc":"5171:22:51","nodeType":"YulFunctionCall","src":"5171:22:51"},"variables":[{"name":"_1","nativeSrc":"5165:2:51","nodeType":"YulTypedName","src":"5165:2:51","type":""}]},{"body":{"nativeSrc":"5232:16:51","nodeType":"YulBlock","src":"5232:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5241:1:51","nodeType":"YulLiteral","src":"5241:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5244:1:51","nodeType":"YulLiteral","src":"5244:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5234:6:51","nodeType":"YulIdentifier","src":"5234:6:51"},"nativeSrc":"5234:12:51","nodeType":"YulFunctionCall","src":"5234:12:51"},"nativeSrc":"5234:12:51","nodeType":"YulExpressionStatement","src":"5234:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5213:7:51","nodeType":"YulIdentifier","src":"5213:7:51"},{"name":"_1","nativeSrc":"5222:2:51","nodeType":"YulIdentifier","src":"5222:2:51"}],"functionName":{"name":"sub","nativeSrc":"5209:3:51","nodeType":"YulIdentifier","src":"5209:3:51"},"nativeSrc":"5209:16:51","nodeType":"YulFunctionCall","src":"5209:16:51"},{"kind":"number","nativeSrc":"5227:3:51","nodeType":"YulLiteral","src":"5227:3:51","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"5205:3:51","nodeType":"YulIdentifier","src":"5205:3:51"},"nativeSrc":"5205:26:51","nodeType":"YulFunctionCall","src":"5205:26:51"},"nativeSrc":"5202:46:51","nodeType":"YulIf","src":"5202:46:51"},{"nativeSrc":"5257:12:51","nodeType":"YulAssignment","src":"5257:12:51","value":{"name":"_1","nativeSrc":"5267:2:51","nodeType":"YulIdentifier","src":"5267:2:51"},"variableNames":[{"name":"value2","nativeSrc":"5257:6:51","nodeType":"YulIdentifier","src":"5257:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr","nativeSrc":"4684:591:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4766:9:51","nodeType":"YulTypedName","src":"4766:9:51","type":""},{"name":"dataEnd","nativeSrc":"4777:7:51","nodeType":"YulTypedName","src":"4777:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4789:6:51","nodeType":"YulTypedName","src":"4789:6:51","type":""},{"name":"value1","nativeSrc":"4797:6:51","nodeType":"YulTypedName","src":"4797:6:51","type":""},{"name":"value2","nativeSrc":"4805:6:51","nodeType":"YulTypedName","src":"4805:6:51","type":""}],"src":"4684:591:51"},{"body":{"nativeSrc":"5350:177:51","nodeType":"YulBlock","src":"5350:177:51","statements":[{"body":{"nativeSrc":"5396:16:51","nodeType":"YulBlock","src":"5396:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5405:1:51","nodeType":"YulLiteral","src":"5405:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5408:1:51","nodeType":"YulLiteral","src":"5408:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5398:6:51","nodeType":"YulIdentifier","src":"5398:6:51"},"nativeSrc":"5398:12:51","nodeType":"YulFunctionCall","src":"5398:12:51"},"nativeSrc":"5398:12:51","nodeType":"YulExpressionStatement","src":"5398:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5371:7:51","nodeType":"YulIdentifier","src":"5371:7:51"},{"name":"headStart","nativeSrc":"5380:9:51","nodeType":"YulIdentifier","src":"5380:9:51"}],"functionName":{"name":"sub","nativeSrc":"5367:3:51","nodeType":"YulIdentifier","src":"5367:3:51"},"nativeSrc":"5367:23:51","nodeType":"YulFunctionCall","src":"5367:23:51"},{"kind":"number","nativeSrc":"5392:2:51","nodeType":"YulLiteral","src":"5392:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5363:3:51","nodeType":"YulIdentifier","src":"5363:3:51"},"nativeSrc":"5363:32:51","nodeType":"YulFunctionCall","src":"5363:32:51"},"nativeSrc":"5360:52:51","nodeType":"YulIf","src":"5360:52:51"},{"nativeSrc":"5421:36:51","nodeType":"YulVariableDeclaration","src":"5421:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5447:9:51","nodeType":"YulIdentifier","src":"5447:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"5434:12:51","nodeType":"YulIdentifier","src":"5434:12:51"},"nativeSrc":"5434:23:51","nodeType":"YulFunctionCall","src":"5434:23:51"},"variables":[{"name":"value","nativeSrc":"5425:5:51","nodeType":"YulTypedName","src":"5425:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5491:5:51","nodeType":"YulIdentifier","src":"5491:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5466:24:51","nodeType":"YulIdentifier","src":"5466:24:51"},"nativeSrc":"5466:31:51","nodeType":"YulFunctionCall","src":"5466:31:51"},"nativeSrc":"5466:31:51","nodeType":"YulExpressionStatement","src":"5466:31:51"},{"nativeSrc":"5506:15:51","nodeType":"YulAssignment","src":"5506:15:51","value":{"name":"value","nativeSrc":"5516:5:51","nodeType":"YulIdentifier","src":"5516:5:51"},"variableNames":[{"name":"value0","nativeSrc":"5506:6:51","nodeType":"YulIdentifier","src":"5506:6:51"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5280:247:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5316:9:51","nodeType":"YulTypedName","src":"5316:9:51","type":""},{"name":"dataEnd","nativeSrc":"5327:7:51","nodeType":"YulTypedName","src":"5327:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5339:6:51","nodeType":"YulTypedName","src":"5339:6:51","type":""}],"src":"5280:247:51"},{"body":{"nativeSrc":"5633:76:51","nodeType":"YulBlock","src":"5633:76:51","statements":[{"nativeSrc":"5643:26:51","nodeType":"YulAssignment","src":"5643:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5655:9:51","nodeType":"YulIdentifier","src":"5655:9:51"},{"kind":"number","nativeSrc":"5666:2:51","nodeType":"YulLiteral","src":"5666:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5651:3:51","nodeType":"YulIdentifier","src":"5651:3:51"},"nativeSrc":"5651:18:51","nodeType":"YulFunctionCall","src":"5651:18:51"},"variableNames":[{"name":"tail","nativeSrc":"5643:4:51","nodeType":"YulIdentifier","src":"5643:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5685:9:51","nodeType":"YulIdentifier","src":"5685:9:51"},{"name":"value0","nativeSrc":"5696:6:51","nodeType":"YulIdentifier","src":"5696:6:51"}],"functionName":{"name":"mstore","nativeSrc":"5678:6:51","nodeType":"YulIdentifier","src":"5678:6:51"},"nativeSrc":"5678:25:51","nodeType":"YulFunctionCall","src":"5678:25:51"},"nativeSrc":"5678:25:51","nodeType":"YulExpressionStatement","src":"5678:25:51"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5532:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5602:9:51","nodeType":"YulTypedName","src":"5602:9:51","type":""},{"name":"value0","nativeSrc":"5613:6:51","nodeType":"YulTypedName","src":"5613:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5624:4:51","nodeType":"YulTypedName","src":"5624:4:51","type":""}],"src":"5532:177:51"},{"body":{"nativeSrc":"5784:110:51","nodeType":"YulBlock","src":"5784:110:51","statements":[{"body":{"nativeSrc":"5830:16:51","nodeType":"YulBlock","src":"5830:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5839:1:51","nodeType":"YulLiteral","src":"5839:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5842:1:51","nodeType":"YulLiteral","src":"5842:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5832:6:51","nodeType":"YulIdentifier","src":"5832:6:51"},"nativeSrc":"5832:12:51","nodeType":"YulFunctionCall","src":"5832:12:51"},"nativeSrc":"5832:12:51","nodeType":"YulExpressionStatement","src":"5832:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5805:7:51","nodeType":"YulIdentifier","src":"5805:7:51"},{"name":"headStart","nativeSrc":"5814:9:51","nodeType":"YulIdentifier","src":"5814:9:51"}],"functionName":{"name":"sub","nativeSrc":"5801:3:51","nodeType":"YulIdentifier","src":"5801:3:51"},"nativeSrc":"5801:23:51","nodeType":"YulFunctionCall","src":"5801:23:51"},{"kind":"number","nativeSrc":"5826:2:51","nodeType":"YulLiteral","src":"5826:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5797:3:51","nodeType":"YulIdentifier","src":"5797:3:51"},"nativeSrc":"5797:32:51","nodeType":"YulFunctionCall","src":"5797:32:51"},"nativeSrc":"5794:52:51","nodeType":"YulIf","src":"5794:52:51"},{"nativeSrc":"5855:33:51","nodeType":"YulAssignment","src":"5855:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5878:9:51","nodeType":"YulIdentifier","src":"5878:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"5865:12:51","nodeType":"YulIdentifier","src":"5865:12:51"},"nativeSrc":"5865:23:51","nodeType":"YulFunctionCall","src":"5865:23:51"},"variableNames":[{"name":"value0","nativeSrc":"5855:6:51","nodeType":"YulIdentifier","src":"5855:6:51"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"5714:180:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5750:9:51","nodeType":"YulTypedName","src":"5750:9:51","type":""},{"name":"dataEnd","nativeSrc":"5761:7:51","nodeType":"YulTypedName","src":"5761:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5773:6:51","nodeType":"YulTypedName","src":"5773:6:51","type":""}],"src":"5714:180:51"},{"body":{"nativeSrc":"5997:177:51","nodeType":"YulBlock","src":"5997:177:51","statements":[{"body":{"nativeSrc":"6043:16:51","nodeType":"YulBlock","src":"6043:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6052:1:51","nodeType":"YulLiteral","src":"6052:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6055:1:51","nodeType":"YulLiteral","src":"6055:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6045:6:51","nodeType":"YulIdentifier","src":"6045:6:51"},"nativeSrc":"6045:12:51","nodeType":"YulFunctionCall","src":"6045:12:51"},"nativeSrc":"6045:12:51","nodeType":"YulExpressionStatement","src":"6045:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6018:7:51","nodeType":"YulIdentifier","src":"6018:7:51"},{"name":"headStart","nativeSrc":"6027:9:51","nodeType":"YulIdentifier","src":"6027:9:51"}],"functionName":{"name":"sub","nativeSrc":"6014:3:51","nodeType":"YulIdentifier","src":"6014:3:51"},"nativeSrc":"6014:23:51","nodeType":"YulFunctionCall","src":"6014:23:51"},{"kind":"number","nativeSrc":"6039:2:51","nodeType":"YulLiteral","src":"6039:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6010:3:51","nodeType":"YulIdentifier","src":"6010:3:51"},"nativeSrc":"6010:32:51","nodeType":"YulFunctionCall","src":"6010:32:51"},"nativeSrc":"6007:52:51","nodeType":"YulIf","src":"6007:52:51"},{"nativeSrc":"6068:36:51","nodeType":"YulVariableDeclaration","src":"6068:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6094:9:51","nodeType":"YulIdentifier","src":"6094:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"6081:12:51","nodeType":"YulIdentifier","src":"6081:12:51"},"nativeSrc":"6081:23:51","nodeType":"YulFunctionCall","src":"6081:23:51"},"variables":[{"name":"value","nativeSrc":"6072:5:51","nodeType":"YulTypedName","src":"6072:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6138:5:51","nodeType":"YulIdentifier","src":"6138:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6113:24:51","nodeType":"YulIdentifier","src":"6113:24:51"},"nativeSrc":"6113:31:51","nodeType":"YulFunctionCall","src":"6113:31:51"},"nativeSrc":"6113:31:51","nodeType":"YulExpressionStatement","src":"6113:31:51"},{"nativeSrc":"6153:15:51","nodeType":"YulAssignment","src":"6153:15:51","value":{"name":"value","nativeSrc":"6163:5:51","nodeType":"YulIdentifier","src":"6163:5:51"},"variableNames":[{"name":"value0","nativeSrc":"6153:6:51","nodeType":"YulIdentifier","src":"6153:6:51"}]}]},"name":"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000","nativeSrc":"5899:275:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5963:9:51","nodeType":"YulTypedName","src":"5963:9:51","type":""},{"name":"dataEnd","nativeSrc":"5974:7:51","nodeType":"YulTypedName","src":"5974:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5986:6:51","nodeType":"YulTypedName","src":"5986:6:51","type":""}],"src":"5899:275:51"},{"body":{"nativeSrc":"6311:125:51","nodeType":"YulBlock","src":"6311:125:51","statements":[{"nativeSrc":"6321:26:51","nodeType":"YulAssignment","src":"6321:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6333:9:51","nodeType":"YulIdentifier","src":"6333:9:51"},{"kind":"number","nativeSrc":"6344:2:51","nodeType":"YulLiteral","src":"6344:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6329:3:51","nodeType":"YulIdentifier","src":"6329:3:51"},"nativeSrc":"6329:18:51","nodeType":"YulFunctionCall","src":"6329:18:51"},"variableNames":[{"name":"tail","nativeSrc":"6321:4:51","nodeType":"YulIdentifier","src":"6321:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6363:9:51","nodeType":"YulIdentifier","src":"6363:9:51"},{"arguments":[{"name":"value0","nativeSrc":"6378:6:51","nodeType":"YulIdentifier","src":"6378:6:51"},{"kind":"number","nativeSrc":"6386:42:51","nodeType":"YulLiteral","src":"6386:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6374:3:51","nodeType":"YulIdentifier","src":"6374:3:51"},"nativeSrc":"6374:55:51","nodeType":"YulFunctionCall","src":"6374:55:51"}],"functionName":{"name":"mstore","nativeSrc":"6356:6:51","nodeType":"YulIdentifier","src":"6356:6:51"},"nativeSrc":"6356:74:51","nodeType":"YulFunctionCall","src":"6356:74:51"},"nativeSrc":"6356:74:51","nodeType":"YulExpressionStatement","src":"6356:74:51"}]},"name":"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed","nativeSrc":"6179:257:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6280:9:51","nodeType":"YulTypedName","src":"6280:9:51","type":""},{"name":"value0","nativeSrc":"6291:6:51","nodeType":"YulTypedName","src":"6291:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6302:4:51","nodeType":"YulTypedName","src":"6302:4:51","type":""}],"src":"6179:257:51"},{"body":{"nativeSrc":"6483:76:51","nodeType":"YulBlock","src":"6483:76:51","statements":[{"body":{"nativeSrc":"6537:16:51","nodeType":"YulBlock","src":"6537:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6546:1:51","nodeType":"YulLiteral","src":"6546:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6549:1:51","nodeType":"YulLiteral","src":"6549:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6539:6:51","nodeType":"YulIdentifier","src":"6539:6:51"},"nativeSrc":"6539:12:51","nodeType":"YulFunctionCall","src":"6539:12:51"},"nativeSrc":"6539:12:51","nodeType":"YulExpressionStatement","src":"6539:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6506:5:51","nodeType":"YulIdentifier","src":"6506:5:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6527:5:51","nodeType":"YulIdentifier","src":"6527:5:51"}],"functionName":{"name":"iszero","nativeSrc":"6520:6:51","nodeType":"YulIdentifier","src":"6520:6:51"},"nativeSrc":"6520:13:51","nodeType":"YulFunctionCall","src":"6520:13:51"}],"functionName":{"name":"iszero","nativeSrc":"6513:6:51","nodeType":"YulIdentifier","src":"6513:6:51"},"nativeSrc":"6513:21:51","nodeType":"YulFunctionCall","src":"6513:21:51"}],"functionName":{"name":"eq","nativeSrc":"6503:2:51","nodeType":"YulIdentifier","src":"6503:2:51"},"nativeSrc":"6503:32:51","nodeType":"YulFunctionCall","src":"6503:32:51"}],"functionName":{"name":"iszero","nativeSrc":"6496:6:51","nodeType":"YulIdentifier","src":"6496:6:51"},"nativeSrc":"6496:40:51","nodeType":"YulFunctionCall","src":"6496:40:51"},"nativeSrc":"6493:60:51","nodeType":"YulIf","src":"6493:60:51"}]},"name":"validator_revert_bool","nativeSrc":"6441:118:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6472:5:51","nodeType":"YulTypedName","src":"6472:5:51","type":""}],"src":"6441:118:51"},{"body":{"nativeSrc":"6648:298:51","nodeType":"YulBlock","src":"6648:298:51","statements":[{"body":{"nativeSrc":"6694:16:51","nodeType":"YulBlock","src":"6694:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6703:1:51","nodeType":"YulLiteral","src":"6703:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6706:1:51","nodeType":"YulLiteral","src":"6706:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6696:6:51","nodeType":"YulIdentifier","src":"6696:6:51"},"nativeSrc":"6696:12:51","nodeType":"YulFunctionCall","src":"6696:12:51"},"nativeSrc":"6696:12:51","nodeType":"YulExpressionStatement","src":"6696:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6669:7:51","nodeType":"YulIdentifier","src":"6669:7:51"},{"name":"headStart","nativeSrc":"6678:9:51","nodeType":"YulIdentifier","src":"6678:9:51"}],"functionName":{"name":"sub","nativeSrc":"6665:3:51","nodeType":"YulIdentifier","src":"6665:3:51"},"nativeSrc":"6665:23:51","nodeType":"YulFunctionCall","src":"6665:23:51"},{"kind":"number","nativeSrc":"6690:2:51","nodeType":"YulLiteral","src":"6690:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6661:3:51","nodeType":"YulIdentifier","src":"6661:3:51"},"nativeSrc":"6661:32:51","nodeType":"YulFunctionCall","src":"6661:32:51"},"nativeSrc":"6658:52:51","nodeType":"YulIf","src":"6658:52:51"},{"nativeSrc":"6719:36:51","nodeType":"YulVariableDeclaration","src":"6719:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6745:9:51","nodeType":"YulIdentifier","src":"6745:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"6732:12:51","nodeType":"YulIdentifier","src":"6732:12:51"},"nativeSrc":"6732:23:51","nodeType":"YulFunctionCall","src":"6732:23:51"},"variables":[{"name":"value","nativeSrc":"6723:5:51","nodeType":"YulTypedName","src":"6723:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6789:5:51","nodeType":"YulIdentifier","src":"6789:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6764:24:51","nodeType":"YulIdentifier","src":"6764:24:51"},"nativeSrc":"6764:31:51","nodeType":"YulFunctionCall","src":"6764:31:51"},"nativeSrc":"6764:31:51","nodeType":"YulExpressionStatement","src":"6764:31:51"},{"nativeSrc":"6804:15:51","nodeType":"YulAssignment","src":"6804:15:51","value":{"name":"value","nativeSrc":"6814:5:51","nodeType":"YulIdentifier","src":"6814:5:51"},"variableNames":[{"name":"value0","nativeSrc":"6804:6:51","nodeType":"YulIdentifier","src":"6804:6:51"}]},{"nativeSrc":"6828:47:51","nodeType":"YulVariableDeclaration","src":"6828:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6860:9:51","nodeType":"YulIdentifier","src":"6860:9:51"},{"kind":"number","nativeSrc":"6871:2:51","nodeType":"YulLiteral","src":"6871:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6856:3:51","nodeType":"YulIdentifier","src":"6856:3:51"},"nativeSrc":"6856:18:51","nodeType":"YulFunctionCall","src":"6856:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"6843:12:51","nodeType":"YulIdentifier","src":"6843:12:51"},"nativeSrc":"6843:32:51","nodeType":"YulFunctionCall","src":"6843:32:51"},"variables":[{"name":"value_1","nativeSrc":"6832:7:51","nodeType":"YulTypedName","src":"6832:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"6906:7:51","nodeType":"YulIdentifier","src":"6906:7:51"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"6884:21:51","nodeType":"YulIdentifier","src":"6884:21:51"},"nativeSrc":"6884:30:51","nodeType":"YulFunctionCall","src":"6884:30:51"},"nativeSrc":"6884:30:51","nodeType":"YulExpressionStatement","src":"6884:30:51"},{"nativeSrc":"6923:17:51","nodeType":"YulAssignment","src":"6923:17:51","value":{"name":"value_1","nativeSrc":"6933:7:51","nodeType":"YulIdentifier","src":"6933:7:51"},"variableNames":[{"name":"value1","nativeSrc":"6923:6:51","nodeType":"YulIdentifier","src":"6923:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"6564:382:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6606:9:51","nodeType":"YulTypedName","src":"6606:9:51","type":""},{"name":"dataEnd","nativeSrc":"6617:7:51","nodeType":"YulTypedName","src":"6617:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6629:6:51","nodeType":"YulTypedName","src":"6629:6:51","type":""},{"name":"value1","nativeSrc":"6637:6:51","nodeType":"YulTypedName","src":"6637:6:51","type":""}],"src":"6564:382:51"},{"body":{"nativeSrc":"7091:796:51","nodeType":"YulBlock","src":"7091:796:51","statements":[{"body":{"nativeSrc":"7138:16:51","nodeType":"YulBlock","src":"7138:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7147:1:51","nodeType":"YulLiteral","src":"7147:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7150:1:51","nodeType":"YulLiteral","src":"7150:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7140:6:51","nodeType":"YulIdentifier","src":"7140:6:51"},"nativeSrc":"7140:12:51","nodeType":"YulFunctionCall","src":"7140:12:51"},"nativeSrc":"7140:12:51","nodeType":"YulExpressionStatement","src":"7140:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7112:7:51","nodeType":"YulIdentifier","src":"7112:7:51"},{"name":"headStart","nativeSrc":"7121:9:51","nodeType":"YulIdentifier","src":"7121:9:51"}],"functionName":{"name":"sub","nativeSrc":"7108:3:51","nodeType":"YulIdentifier","src":"7108:3:51"},"nativeSrc":"7108:23:51","nodeType":"YulFunctionCall","src":"7108:23:51"},{"kind":"number","nativeSrc":"7133:3:51","nodeType":"YulLiteral","src":"7133:3:51","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"7104:3:51","nodeType":"YulIdentifier","src":"7104:3:51"},"nativeSrc":"7104:33:51","nodeType":"YulFunctionCall","src":"7104:33:51"},"nativeSrc":"7101:53:51","nodeType":"YulIf","src":"7101:53:51"},{"nativeSrc":"7163:36:51","nodeType":"YulVariableDeclaration","src":"7163:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7189:9:51","nodeType":"YulIdentifier","src":"7189:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"7176:12:51","nodeType":"YulIdentifier","src":"7176:12:51"},"nativeSrc":"7176:23:51","nodeType":"YulFunctionCall","src":"7176:23:51"},"variables":[{"name":"value","nativeSrc":"7167:5:51","nodeType":"YulTypedName","src":"7167:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7233:5:51","nodeType":"YulIdentifier","src":"7233:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7208:24:51","nodeType":"YulIdentifier","src":"7208:24:51"},"nativeSrc":"7208:31:51","nodeType":"YulFunctionCall","src":"7208:31:51"},"nativeSrc":"7208:31:51","nodeType":"YulExpressionStatement","src":"7208:31:51"},{"nativeSrc":"7248:15:51","nodeType":"YulAssignment","src":"7248:15:51","value":{"name":"value","nativeSrc":"7258:5:51","nodeType":"YulIdentifier","src":"7258:5:51"},"variableNames":[{"name":"value0","nativeSrc":"7248:6:51","nodeType":"YulIdentifier","src":"7248:6:51"}]},{"nativeSrc":"7272:47:51","nodeType":"YulVariableDeclaration","src":"7272:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7304:9:51","nodeType":"YulIdentifier","src":"7304:9:51"},{"kind":"number","nativeSrc":"7315:2:51","nodeType":"YulLiteral","src":"7315:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7300:3:51","nodeType":"YulIdentifier","src":"7300:3:51"},"nativeSrc":"7300:18:51","nodeType":"YulFunctionCall","src":"7300:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"7287:12:51","nodeType":"YulIdentifier","src":"7287:12:51"},"nativeSrc":"7287:32:51","nodeType":"YulFunctionCall","src":"7287:32:51"},"variables":[{"name":"value_1","nativeSrc":"7276:7:51","nodeType":"YulTypedName","src":"7276:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"7353:7:51","nodeType":"YulIdentifier","src":"7353:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7328:24:51","nodeType":"YulIdentifier","src":"7328:24:51"},"nativeSrc":"7328:33:51","nodeType":"YulFunctionCall","src":"7328:33:51"},"nativeSrc":"7328:33:51","nodeType":"YulExpressionStatement","src":"7328:33:51"},{"nativeSrc":"7370:17:51","nodeType":"YulAssignment","src":"7370:17:51","value":{"name":"value_1","nativeSrc":"7380:7:51","nodeType":"YulIdentifier","src":"7380:7:51"},"variableNames":[{"name":"value1","nativeSrc":"7370:6:51","nodeType":"YulIdentifier","src":"7370:6:51"}]},{"nativeSrc":"7396:42:51","nodeType":"YulAssignment","src":"7396:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7423:9:51","nodeType":"YulIdentifier","src":"7423:9:51"},{"kind":"number","nativeSrc":"7434:2:51","nodeType":"YulLiteral","src":"7434:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7419:3:51","nodeType":"YulIdentifier","src":"7419:3:51"},"nativeSrc":"7419:18:51","nodeType":"YulFunctionCall","src":"7419:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"7406:12:51","nodeType":"YulIdentifier","src":"7406:12:51"},"nativeSrc":"7406:32:51","nodeType":"YulFunctionCall","src":"7406:32:51"},"variableNames":[{"name":"value2","nativeSrc":"7396:6:51","nodeType":"YulIdentifier","src":"7396:6:51"}]},{"nativeSrc":"7447:46:51","nodeType":"YulVariableDeclaration","src":"7447:46:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7478:9:51","nodeType":"YulIdentifier","src":"7478:9:51"},{"kind":"number","nativeSrc":"7489:2:51","nodeType":"YulLiteral","src":"7489:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7474:3:51","nodeType":"YulIdentifier","src":"7474:3:51"},"nativeSrc":"7474:18:51","nodeType":"YulFunctionCall","src":"7474:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"7461:12:51","nodeType":"YulIdentifier","src":"7461:12:51"},"nativeSrc":"7461:32:51","nodeType":"YulFunctionCall","src":"7461:32:51"},"variables":[{"name":"offset","nativeSrc":"7451:6:51","nodeType":"YulTypedName","src":"7451:6:51","type":""}]},{"nativeSrc":"7502:28:51","nodeType":"YulVariableDeclaration","src":"7502:28:51","value":{"kind":"number","nativeSrc":"7512:18:51","nodeType":"YulLiteral","src":"7512:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7506:2:51","nodeType":"YulTypedName","src":"7506:2:51","type":""}]},{"body":{"nativeSrc":"7557:16:51","nodeType":"YulBlock","src":"7557:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7566:1:51","nodeType":"YulLiteral","src":"7566:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7569:1:51","nodeType":"YulLiteral","src":"7569:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7559:6:51","nodeType":"YulIdentifier","src":"7559:6:51"},"nativeSrc":"7559:12:51","nodeType":"YulFunctionCall","src":"7559:12:51"},"nativeSrc":"7559:12:51","nodeType":"YulExpressionStatement","src":"7559:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7545:6:51","nodeType":"YulIdentifier","src":"7545:6:51"},{"name":"_1","nativeSrc":"7553:2:51","nodeType":"YulIdentifier","src":"7553:2:51"}],"functionName":{"name":"gt","nativeSrc":"7542:2:51","nodeType":"YulIdentifier","src":"7542:2:51"},"nativeSrc":"7542:14:51","nodeType":"YulFunctionCall","src":"7542:14:51"},"nativeSrc":"7539:34:51","nodeType":"YulIf","src":"7539:34:51"},{"nativeSrc":"7582:32:51","nodeType":"YulVariableDeclaration","src":"7582:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7596:9:51","nodeType":"YulIdentifier","src":"7596:9:51"},{"name":"offset","nativeSrc":"7607:6:51","nodeType":"YulIdentifier","src":"7607:6:51"}],"functionName":{"name":"add","nativeSrc":"7592:3:51","nodeType":"YulIdentifier","src":"7592:3:51"},"nativeSrc":"7592:22:51","nodeType":"YulFunctionCall","src":"7592:22:51"},"variables":[{"name":"_2","nativeSrc":"7586:2:51","nodeType":"YulTypedName","src":"7586:2:51","type":""}]},{"body":{"nativeSrc":"7662:16:51","nodeType":"YulBlock","src":"7662:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7671:1:51","nodeType":"YulLiteral","src":"7671:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7674:1:51","nodeType":"YulLiteral","src":"7674:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7664:6:51","nodeType":"YulIdentifier","src":"7664:6:51"},"nativeSrc":"7664:12:51","nodeType":"YulFunctionCall","src":"7664:12:51"},"nativeSrc":"7664:12:51","nodeType":"YulExpressionStatement","src":"7664:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7641:2:51","nodeType":"YulIdentifier","src":"7641:2:51"},{"kind":"number","nativeSrc":"7645:4:51","nodeType":"YulLiteral","src":"7645:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7637:3:51","nodeType":"YulIdentifier","src":"7637:3:51"},"nativeSrc":"7637:13:51","nodeType":"YulFunctionCall","src":"7637:13:51"},{"name":"dataEnd","nativeSrc":"7652:7:51","nodeType":"YulIdentifier","src":"7652:7:51"}],"functionName":{"name":"slt","nativeSrc":"7633:3:51","nodeType":"YulIdentifier","src":"7633:3:51"},"nativeSrc":"7633:27:51","nodeType":"YulFunctionCall","src":"7633:27:51"}],"functionName":{"name":"iszero","nativeSrc":"7626:6:51","nodeType":"YulIdentifier","src":"7626:6:51"},"nativeSrc":"7626:35:51","nodeType":"YulFunctionCall","src":"7626:35:51"},"nativeSrc":"7623:55:51","nodeType":"YulIf","src":"7623:55:51"},{"nativeSrc":"7687:30:51","nodeType":"YulVariableDeclaration","src":"7687:30:51","value":{"arguments":[{"name":"_2","nativeSrc":"7714:2:51","nodeType":"YulIdentifier","src":"7714:2:51"}],"functionName":{"name":"calldataload","nativeSrc":"7701:12:51","nodeType":"YulIdentifier","src":"7701:12:51"},"nativeSrc":"7701:16:51","nodeType":"YulFunctionCall","src":"7701:16:51"},"variables":[{"name":"length","nativeSrc":"7691:6:51","nodeType":"YulTypedName","src":"7691:6:51","type":""}]},{"body":{"nativeSrc":"7744:16:51","nodeType":"YulBlock","src":"7744:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7753:1:51","nodeType":"YulLiteral","src":"7753:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7756:1:51","nodeType":"YulLiteral","src":"7756:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7746:6:51","nodeType":"YulIdentifier","src":"7746:6:51"},"nativeSrc":"7746:12:51","nodeType":"YulFunctionCall","src":"7746:12:51"},"nativeSrc":"7746:12:51","nodeType":"YulExpressionStatement","src":"7746:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7732:6:51","nodeType":"YulIdentifier","src":"7732:6:51"},{"name":"_1","nativeSrc":"7740:2:51","nodeType":"YulIdentifier","src":"7740:2:51"}],"functionName":{"name":"gt","nativeSrc":"7729:2:51","nodeType":"YulIdentifier","src":"7729:2:51"},"nativeSrc":"7729:14:51","nodeType":"YulFunctionCall","src":"7729:14:51"},"nativeSrc":"7726:34:51","nodeType":"YulIf","src":"7726:34:51"},{"body":{"nativeSrc":"7810:16:51","nodeType":"YulBlock","src":"7810:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7819:1:51","nodeType":"YulLiteral","src":"7819:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7822:1:51","nodeType":"YulLiteral","src":"7822:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7812:6:51","nodeType":"YulIdentifier","src":"7812:6:51"},"nativeSrc":"7812:12:51","nodeType":"YulFunctionCall","src":"7812:12:51"},"nativeSrc":"7812:12:51","nodeType":"YulExpressionStatement","src":"7812:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7783:2:51","nodeType":"YulIdentifier","src":"7783:2:51"},{"name":"length","nativeSrc":"7787:6:51","nodeType":"YulIdentifier","src":"7787:6:51"}],"functionName":{"name":"add","nativeSrc":"7779:3:51","nodeType":"YulIdentifier","src":"7779:3:51"},"nativeSrc":"7779:15:51","nodeType":"YulFunctionCall","src":"7779:15:51"},{"kind":"number","nativeSrc":"7796:2:51","nodeType":"YulLiteral","src":"7796:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7775:3:51","nodeType":"YulIdentifier","src":"7775:3:51"},"nativeSrc":"7775:24:51","nodeType":"YulFunctionCall","src":"7775:24:51"},{"name":"dataEnd","nativeSrc":"7801:7:51","nodeType":"YulIdentifier","src":"7801:7:51"}],"functionName":{"name":"gt","nativeSrc":"7772:2:51","nodeType":"YulIdentifier","src":"7772:2:51"},"nativeSrc":"7772:37:51","nodeType":"YulFunctionCall","src":"7772:37:51"},"nativeSrc":"7769:57:51","nodeType":"YulIf","src":"7769:57:51"},{"nativeSrc":"7835:21:51","nodeType":"YulAssignment","src":"7835:21:51","value":{"arguments":[{"name":"_2","nativeSrc":"7849:2:51","nodeType":"YulIdentifier","src":"7849:2:51"},{"kind":"number","nativeSrc":"7853:2:51","nodeType":"YulLiteral","src":"7853:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7845:3:51","nodeType":"YulIdentifier","src":"7845:3:51"},"nativeSrc":"7845:11:51","nodeType":"YulFunctionCall","src":"7845:11:51"},"variableNames":[{"name":"value3","nativeSrc":"7835:6:51","nodeType":"YulIdentifier","src":"7835:6:51"}]},{"nativeSrc":"7865:16:51","nodeType":"YulAssignment","src":"7865:16:51","value":{"name":"length","nativeSrc":"7875:6:51","nodeType":"YulIdentifier","src":"7875:6:51"},"variableNames":[{"name":"value4","nativeSrc":"7865:6:51","nodeType":"YulIdentifier","src":"7865:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"6951:936:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7025:9:51","nodeType":"YulTypedName","src":"7025:9:51","type":""},{"name":"dataEnd","nativeSrc":"7036:7:51","nodeType":"YulTypedName","src":"7036:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7048:6:51","nodeType":"YulTypedName","src":"7048:6:51","type":""},{"name":"value1","nativeSrc":"7056:6:51","nodeType":"YulTypedName","src":"7056:6:51","type":""},{"name":"value2","nativeSrc":"7064:6:51","nodeType":"YulTypedName","src":"7064:6:51","type":""},{"name":"value3","nativeSrc":"7072:6:51","nodeType":"YulTypedName","src":"7072:6:51","type":""},{"name":"value4","nativeSrc":"7080:6:51","nodeType":"YulTypedName","src":"7080:6:51","type":""}],"src":"6951:936:51"},{"body":{"nativeSrc":"7993:76:51","nodeType":"YulBlock","src":"7993:76:51","statements":[{"nativeSrc":"8003:26:51","nodeType":"YulAssignment","src":"8003:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"8015:9:51","nodeType":"YulIdentifier","src":"8015:9:51"},{"kind":"number","nativeSrc":"8026:2:51","nodeType":"YulLiteral","src":"8026:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8011:3:51","nodeType":"YulIdentifier","src":"8011:3:51"},"nativeSrc":"8011:18:51","nodeType":"YulFunctionCall","src":"8011:18:51"},"variableNames":[{"name":"tail","nativeSrc":"8003:4:51","nodeType":"YulIdentifier","src":"8003:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8045:9:51","nodeType":"YulIdentifier","src":"8045:9:51"},{"name":"value0","nativeSrc":"8056:6:51","nodeType":"YulIdentifier","src":"8056:6:51"}],"functionName":{"name":"mstore","nativeSrc":"8038:6:51","nodeType":"YulIdentifier","src":"8038:6:51"},"nativeSrc":"8038:25:51","nodeType":"YulFunctionCall","src":"8038:25:51"},"nativeSrc":"8038:25:51","nodeType":"YulExpressionStatement","src":"8038:25:51"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7892:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7962:9:51","nodeType":"YulTypedName","src":"7962:9:51","type":""},{"name":"value0","nativeSrc":"7973:6:51","nodeType":"YulTypedName","src":"7973:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7984:4:51","nodeType":"YulTypedName","src":"7984:4:51","type":""}],"src":"7892:177:51"},{"body":{"nativeSrc":"8161:301:51","nodeType":"YulBlock","src":"8161:301:51","statements":[{"body":{"nativeSrc":"8207:16:51","nodeType":"YulBlock","src":"8207:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8216:1:51","nodeType":"YulLiteral","src":"8216:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8219:1:51","nodeType":"YulLiteral","src":"8219:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8209:6:51","nodeType":"YulIdentifier","src":"8209:6:51"},"nativeSrc":"8209:12:51","nodeType":"YulFunctionCall","src":"8209:12:51"},"nativeSrc":"8209:12:51","nodeType":"YulExpressionStatement","src":"8209:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8182:7:51","nodeType":"YulIdentifier","src":"8182:7:51"},{"name":"headStart","nativeSrc":"8191:9:51","nodeType":"YulIdentifier","src":"8191:9:51"}],"functionName":{"name":"sub","nativeSrc":"8178:3:51","nodeType":"YulIdentifier","src":"8178:3:51"},"nativeSrc":"8178:23:51","nodeType":"YulFunctionCall","src":"8178:23:51"},{"kind":"number","nativeSrc":"8203:2:51","nodeType":"YulLiteral","src":"8203:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8174:3:51","nodeType":"YulIdentifier","src":"8174:3:51"},"nativeSrc":"8174:32:51","nodeType":"YulFunctionCall","src":"8174:32:51"},"nativeSrc":"8171:52:51","nodeType":"YulIf","src":"8171:52:51"},{"nativeSrc":"8232:36:51","nodeType":"YulVariableDeclaration","src":"8232:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"8258:9:51","nodeType":"YulIdentifier","src":"8258:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"8245:12:51","nodeType":"YulIdentifier","src":"8245:12:51"},"nativeSrc":"8245:23:51","nodeType":"YulFunctionCall","src":"8245:23:51"},"variables":[{"name":"value","nativeSrc":"8236:5:51","nodeType":"YulTypedName","src":"8236:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8302:5:51","nodeType":"YulIdentifier","src":"8302:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8277:24:51","nodeType":"YulIdentifier","src":"8277:24:51"},"nativeSrc":"8277:31:51","nodeType":"YulFunctionCall","src":"8277:31:51"},"nativeSrc":"8277:31:51","nodeType":"YulExpressionStatement","src":"8277:31:51"},{"nativeSrc":"8317:15:51","nodeType":"YulAssignment","src":"8317:15:51","value":{"name":"value","nativeSrc":"8327:5:51","nodeType":"YulIdentifier","src":"8327:5:51"},"variableNames":[{"name":"value0","nativeSrc":"8317:6:51","nodeType":"YulIdentifier","src":"8317:6:51"}]},{"nativeSrc":"8341:47:51","nodeType":"YulVariableDeclaration","src":"8341:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8373:9:51","nodeType":"YulIdentifier","src":"8373:9:51"},{"kind":"number","nativeSrc":"8384:2:51","nodeType":"YulLiteral","src":"8384:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8369:3:51","nodeType":"YulIdentifier","src":"8369:3:51"},"nativeSrc":"8369:18:51","nodeType":"YulFunctionCall","src":"8369:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"8356:12:51","nodeType":"YulIdentifier","src":"8356:12:51"},"nativeSrc":"8356:32:51","nodeType":"YulFunctionCall","src":"8356:32:51"},"variables":[{"name":"value_1","nativeSrc":"8345:7:51","nodeType":"YulTypedName","src":"8345:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"8422:7:51","nodeType":"YulIdentifier","src":"8422:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8397:24:51","nodeType":"YulIdentifier","src":"8397:24:51"},"nativeSrc":"8397:33:51","nodeType":"YulFunctionCall","src":"8397:33:51"},"nativeSrc":"8397:33:51","nodeType":"YulExpressionStatement","src":"8397:33:51"},{"nativeSrc":"8439:17:51","nodeType":"YulAssignment","src":"8439:17:51","value":{"name":"value_1","nativeSrc":"8449:7:51","nodeType":"YulIdentifier","src":"8449:7:51"},"variableNames":[{"name":"value1","nativeSrc":"8439:6:51","nodeType":"YulIdentifier","src":"8439:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"8074:388:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8119:9:51","nodeType":"YulTypedName","src":"8119:9:51","type":""},{"name":"dataEnd","nativeSrc":"8130:7:51","nodeType":"YulTypedName","src":"8130:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8142:6:51","nodeType":"YulTypedName","src":"8142:6:51","type":""},{"name":"value1","nativeSrc":"8150:6:51","nodeType":"YulTypedName","src":"8150:6:51","type":""}],"src":"8074:388:51"},{"body":{"nativeSrc":"8522:382:51","nodeType":"YulBlock","src":"8522:382:51","statements":[{"nativeSrc":"8532:22:51","nodeType":"YulAssignment","src":"8532:22:51","value":{"arguments":[{"kind":"number","nativeSrc":"8546:1:51","nodeType":"YulLiteral","src":"8546:1:51","type":"","value":"1"},{"name":"data","nativeSrc":"8549:4:51","nodeType":"YulIdentifier","src":"8549:4:51"}],"functionName":{"name":"shr","nativeSrc":"8542:3:51","nodeType":"YulIdentifier","src":"8542:3:51"},"nativeSrc":"8542:12:51","nodeType":"YulFunctionCall","src":"8542:12:51"},"variableNames":[{"name":"length","nativeSrc":"8532:6:51","nodeType":"YulIdentifier","src":"8532:6:51"}]},{"nativeSrc":"8563:38:51","nodeType":"YulVariableDeclaration","src":"8563:38:51","value":{"arguments":[{"name":"data","nativeSrc":"8593:4:51","nodeType":"YulIdentifier","src":"8593:4:51"},{"kind":"number","nativeSrc":"8599:1:51","nodeType":"YulLiteral","src":"8599:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"8589:3:51","nodeType":"YulIdentifier","src":"8589:3:51"},"nativeSrc":"8589:12:51","nodeType":"YulFunctionCall","src":"8589:12:51"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"8567:18:51","nodeType":"YulTypedName","src":"8567:18:51","type":""}]},{"body":{"nativeSrc":"8640:31:51","nodeType":"YulBlock","src":"8640:31:51","statements":[{"nativeSrc":"8642:27:51","nodeType":"YulAssignment","src":"8642:27:51","value":{"arguments":[{"name":"length","nativeSrc":"8656:6:51","nodeType":"YulIdentifier","src":"8656:6:51"},{"kind":"number","nativeSrc":"8664:4:51","nodeType":"YulLiteral","src":"8664:4:51","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"8652:3:51","nodeType":"YulIdentifier","src":"8652:3:51"},"nativeSrc":"8652:17:51","nodeType":"YulFunctionCall","src":"8652:17:51"},"variableNames":[{"name":"length","nativeSrc":"8642:6:51","nodeType":"YulIdentifier","src":"8642:6:51"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"8620:18:51","nodeType":"YulIdentifier","src":"8620:18:51"}],"functionName":{"name":"iszero","nativeSrc":"8613:6:51","nodeType":"YulIdentifier","src":"8613:6:51"},"nativeSrc":"8613:26:51","nodeType":"YulFunctionCall","src":"8613:26:51"},"nativeSrc":"8610:61:51","nodeType":"YulIf","src":"8610:61:51"},{"body":{"nativeSrc":"8730:168:51","nodeType":"YulBlock","src":"8730:168:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8751:1:51","nodeType":"YulLiteral","src":"8751:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8754:77:51","nodeType":"YulLiteral","src":"8754:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8744:6:51","nodeType":"YulIdentifier","src":"8744:6:51"},"nativeSrc":"8744:88:51","nodeType":"YulFunctionCall","src":"8744:88:51"},"nativeSrc":"8744:88:51","nodeType":"YulExpressionStatement","src":"8744:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8852:1:51","nodeType":"YulLiteral","src":"8852:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"8855:4:51","nodeType":"YulLiteral","src":"8855:4:51","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"8845:6:51","nodeType":"YulIdentifier","src":"8845:6:51"},"nativeSrc":"8845:15:51","nodeType":"YulFunctionCall","src":"8845:15:51"},"nativeSrc":"8845:15:51","nodeType":"YulExpressionStatement","src":"8845:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8880:1:51","nodeType":"YulLiteral","src":"8880:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8883:4:51","nodeType":"YulLiteral","src":"8883:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8873:6:51","nodeType":"YulIdentifier","src":"8873:6:51"},"nativeSrc":"8873:15:51","nodeType":"YulFunctionCall","src":"8873:15:51"},"nativeSrc":"8873:15:51","nodeType":"YulExpressionStatement","src":"8873:15:51"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"8686:18:51","nodeType":"YulIdentifier","src":"8686:18:51"},{"arguments":[{"name":"length","nativeSrc":"8709:6:51","nodeType":"YulIdentifier","src":"8709:6:51"},{"kind":"number","nativeSrc":"8717:2:51","nodeType":"YulLiteral","src":"8717:2:51","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"8706:2:51","nodeType":"YulIdentifier","src":"8706:2:51"},"nativeSrc":"8706:14:51","nodeType":"YulFunctionCall","src":"8706:14:51"}],"functionName":{"name":"eq","nativeSrc":"8683:2:51","nodeType":"YulIdentifier","src":"8683:2:51"},"nativeSrc":"8683:38:51","nodeType":"YulFunctionCall","src":"8683:38:51"},"nativeSrc":"8680:218:51","nodeType":"YulIf","src":"8680:218:51"}]},"name":"extract_byte_array_length","nativeSrc":"8467:437:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"8502:4:51","nodeType":"YulTypedName","src":"8502:4:51","type":""}],"returnVariables":[{"name":"length","nativeSrc":"8511:6:51","nodeType":"YulTypedName","src":"8511:6:51","type":""}],"src":"8467:437:51"},{"body":{"nativeSrc":"8965:65:51","nodeType":"YulBlock","src":"8965:65:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8982:1:51","nodeType":"YulLiteral","src":"8982:1:51","type":"","value":"0"},{"name":"ptr","nativeSrc":"8985:3:51","nodeType":"YulIdentifier","src":"8985:3:51"}],"functionName":{"name":"mstore","nativeSrc":"8975:6:51","nodeType":"YulIdentifier","src":"8975:6:51"},"nativeSrc":"8975:14:51","nodeType":"YulFunctionCall","src":"8975:14:51"},"nativeSrc":"8975:14:51","nodeType":"YulExpressionStatement","src":"8975:14:51"},{"nativeSrc":"8998:26:51","nodeType":"YulAssignment","src":"8998:26:51","value":{"arguments":[{"kind":"number","nativeSrc":"9016:1:51","nodeType":"YulLiteral","src":"9016:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"9019:4:51","nodeType":"YulLiteral","src":"9019:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"9006:9:51","nodeType":"YulIdentifier","src":"9006:9:51"},"nativeSrc":"9006:18:51","nodeType":"YulFunctionCall","src":"9006:18:51"},"variableNames":[{"name":"data","nativeSrc":"8998:4:51","nodeType":"YulIdentifier","src":"8998:4:51"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"8909:121:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"8948:3:51","nodeType":"YulTypedName","src":"8948:3:51","type":""}],"returnVariables":[{"name":"data","nativeSrc":"8956:4:51","nodeType":"YulTypedName","src":"8956:4:51","type":""}],"src":"8909:121:51"},{"body":{"nativeSrc":"9171:765:51","nodeType":"YulBlock","src":"9171:765:51","statements":[{"nativeSrc":"9181:12:51","nodeType":"YulVariableDeclaration","src":"9181:12:51","value":{"kind":"number","nativeSrc":"9192:1:51","nodeType":"YulLiteral","src":"9192:1:51","type":"","value":"0"},"variables":[{"name":"ret","nativeSrc":"9185:3:51","nodeType":"YulTypedName","src":"9185:3:51","type":""}]},{"nativeSrc":"9202:30:51","nodeType":"YulVariableDeclaration","src":"9202:30:51","value":{"arguments":[{"name":"value0","nativeSrc":"9225:6:51","nodeType":"YulIdentifier","src":"9225:6:51"}],"functionName":{"name":"sload","nativeSrc":"9219:5:51","nodeType":"YulIdentifier","src":"9219:5:51"},"nativeSrc":"9219:13:51","nodeType":"YulFunctionCall","src":"9219:13:51"},"variables":[{"name":"slotValue","nativeSrc":"9206:9:51","nodeType":"YulTypedName","src":"9206:9:51","type":""}]},{"nativeSrc":"9241:50:51","nodeType":"YulVariableDeclaration","src":"9241:50:51","value":{"arguments":[{"name":"slotValue","nativeSrc":"9281:9:51","nodeType":"YulIdentifier","src":"9281:9:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"9255:25:51","nodeType":"YulIdentifier","src":"9255:25:51"},"nativeSrc":"9255:36:51","nodeType":"YulFunctionCall","src":"9255:36:51"},"variables":[{"name":"length","nativeSrc":"9245:6:51","nodeType":"YulTypedName","src":"9245:6:51","type":""}]},{"nativeSrc":"9300:11:51","nodeType":"YulVariableDeclaration","src":"9300:11:51","value":{"kind":"number","nativeSrc":"9310:1:51","nodeType":"YulLiteral","src":"9310:1:51","type":"","value":"1"},"variables":[{"name":"_1","nativeSrc":"9304:2:51","nodeType":"YulTypedName","src":"9304:2:51","type":""}]},{"cases":[{"body":{"nativeSrc":"9360:184:51","nodeType":"YulBlock","src":"9360:184:51","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9381:3:51","nodeType":"YulIdentifier","src":"9381:3:51"},{"arguments":[{"name":"slotValue","nativeSrc":"9390:9:51","nodeType":"YulIdentifier","src":"9390:9:51"},{"kind":"number","nativeSrc":"9401:66:51","nodeType":"YulLiteral","src":"9401:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nativeSrc":"9386:3:51","nodeType":"YulIdentifier","src":"9386:3:51"},"nativeSrc":"9386:82:51","nodeType":"YulFunctionCall","src":"9386:82:51"}],"functionName":{"name":"mstore","nativeSrc":"9374:6:51","nodeType":"YulIdentifier","src":"9374:6:51"},"nativeSrc":"9374:95:51","nodeType":"YulFunctionCall","src":"9374:95:51"},"nativeSrc":"9374:95:51","nodeType":"YulExpressionStatement","src":"9374:95:51"},{"nativeSrc":"9482:52:51","nodeType":"YulAssignment","src":"9482:52:51","value":{"arguments":[{"name":"pos","nativeSrc":"9493:3:51","nodeType":"YulIdentifier","src":"9493:3:51"},{"arguments":[{"name":"length","nativeSrc":"9502:6:51","nodeType":"YulIdentifier","src":"9502:6:51"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"9524:6:51","nodeType":"YulIdentifier","src":"9524:6:51"}],"functionName":{"name":"iszero","nativeSrc":"9517:6:51","nodeType":"YulIdentifier","src":"9517:6:51"},"nativeSrc":"9517:14:51","nodeType":"YulFunctionCall","src":"9517:14:51"}],"functionName":{"name":"iszero","nativeSrc":"9510:6:51","nodeType":"YulIdentifier","src":"9510:6:51"},"nativeSrc":"9510:22:51","nodeType":"YulFunctionCall","src":"9510:22:51"}],"functionName":{"name":"mul","nativeSrc":"9498:3:51","nodeType":"YulIdentifier","src":"9498:3:51"},"nativeSrc":"9498:35:51","nodeType":"YulFunctionCall","src":"9498:35:51"}],"functionName":{"name":"add","nativeSrc":"9489:3:51","nodeType":"YulIdentifier","src":"9489:3:51"},"nativeSrc":"9489:45:51","nodeType":"YulFunctionCall","src":"9489:45:51"},"variableNames":[{"name":"ret","nativeSrc":"9482:3:51","nodeType":"YulIdentifier","src":"9482:3:51"}]}]},"nativeSrc":"9353:191:51","nodeType":"YulCase","src":"9353:191:51","value":{"kind":"number","nativeSrc":"9358:1:51","nodeType":"YulLiteral","src":"9358:1:51","type":"","value":"0"}},{"body":{"nativeSrc":"9560:351:51","nodeType":"YulBlock","src":"9560:351:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9581:1:51","nodeType":"YulLiteral","src":"9581:1:51","type":"","value":"0"},{"name":"value0","nativeSrc":"9584:6:51","nodeType":"YulIdentifier","src":"9584:6:51"}],"functionName":{"name":"mstore","nativeSrc":"9574:6:51","nodeType":"YulIdentifier","src":"9574:6:51"},"nativeSrc":"9574:17:51","nodeType":"YulFunctionCall","src":"9574:17:51"},"nativeSrc":"9574:17:51","nodeType":"YulExpressionStatement","src":"9574:17:51"},{"nativeSrc":"9604:14:51","nodeType":"YulVariableDeclaration","src":"9604:14:51","value":{"kind":"number","nativeSrc":"9614:4:51","nodeType":"YulLiteral","src":"9614:4:51","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"9608:2:51","nodeType":"YulTypedName","src":"9608:2:51","type":""}]},{"nativeSrc":"9631:33:51","nodeType":"YulVariableDeclaration","src":"9631:33:51","value":{"arguments":[{"kind":"number","nativeSrc":"9656:1:51","nodeType":"YulLiteral","src":"9656:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"9659:4:51","nodeType":"YulLiteral","src":"9659:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"9646:9:51","nodeType":"YulIdentifier","src":"9646:9:51"},"nativeSrc":"9646:18:51","nodeType":"YulFunctionCall","src":"9646:18:51"},"variables":[{"name":"dataPos","nativeSrc":"9635:7:51","nodeType":"YulTypedName","src":"9635:7:51","type":""}]},{"nativeSrc":"9677:10:51","nodeType":"YulVariableDeclaration","src":"9677:10:51","value":{"kind":"number","nativeSrc":"9686:1:51","nodeType":"YulLiteral","src":"9686:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9681:1:51","nodeType":"YulTypedName","src":"9681:1:51","type":""}]},{"body":{"nativeSrc":"9754:111:51","nodeType":"YulBlock","src":"9754:111:51","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9783:3:51","nodeType":"YulIdentifier","src":"9783:3:51"},{"name":"i","nativeSrc":"9788:1:51","nodeType":"YulIdentifier","src":"9788:1:51"}],"functionName":{"name":"add","nativeSrc":"9779:3:51","nodeType":"YulIdentifier","src":"9779:3:51"},"nativeSrc":"9779:11:51","nodeType":"YulFunctionCall","src":"9779:11:51"},{"arguments":[{"name":"dataPos","nativeSrc":"9798:7:51","nodeType":"YulIdentifier","src":"9798:7:51"}],"functionName":{"name":"sload","nativeSrc":"9792:5:51","nodeType":"YulIdentifier","src":"9792:5:51"},"nativeSrc":"9792:14:51","nodeType":"YulFunctionCall","src":"9792:14:51"}],"functionName":{"name":"mstore","nativeSrc":"9772:6:51","nodeType":"YulIdentifier","src":"9772:6:51"},"nativeSrc":"9772:35:51","nodeType":"YulFunctionCall","src":"9772:35:51"},"nativeSrc":"9772:35:51","nodeType":"YulExpressionStatement","src":"9772:35:51"},{"nativeSrc":"9824:27:51","nodeType":"YulAssignment","src":"9824:27:51","value":{"arguments":[{"name":"dataPos","nativeSrc":"9839:7:51","nodeType":"YulIdentifier","src":"9839:7:51"},{"name":"_1","nativeSrc":"9848:2:51","nodeType":"YulIdentifier","src":"9848:2:51"}],"functionName":{"name":"add","nativeSrc":"9835:3:51","nodeType":"YulIdentifier","src":"9835:3:51"},"nativeSrc":"9835:16:51","nodeType":"YulFunctionCall","src":"9835:16:51"},"variableNames":[{"name":"dataPos","nativeSrc":"9824:7:51","nodeType":"YulIdentifier","src":"9824:7:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9711:1:51","nodeType":"YulIdentifier","src":"9711:1:51"},{"name":"length","nativeSrc":"9714:6:51","nodeType":"YulIdentifier","src":"9714:6:51"}],"functionName":{"name":"lt","nativeSrc":"9708:2:51","nodeType":"YulIdentifier","src":"9708:2:51"},"nativeSrc":"9708:13:51","nodeType":"YulFunctionCall","src":"9708:13:51"},"nativeSrc":"9700:165:51","nodeType":"YulForLoop","post":{"nativeSrc":"9722:19:51","nodeType":"YulBlock","src":"9722:19:51","statements":[{"nativeSrc":"9724:15:51","nodeType":"YulAssignment","src":"9724:15:51","value":{"arguments":[{"name":"i","nativeSrc":"9733:1:51","nodeType":"YulIdentifier","src":"9733:1:51"},{"name":"_2","nativeSrc":"9736:2:51","nodeType":"YulIdentifier","src":"9736:2:51"}],"functionName":{"name":"add","nativeSrc":"9729:3:51","nodeType":"YulIdentifier","src":"9729:3:51"},"nativeSrc":"9729:10:51","nodeType":"YulFunctionCall","src":"9729:10:51"},"variableNames":[{"name":"i","nativeSrc":"9724:1:51","nodeType":"YulIdentifier","src":"9724:1:51"}]}]},"pre":{"nativeSrc":"9704:3:51","nodeType":"YulBlock","src":"9704:3:51","statements":[]},"src":"9700:165:51"},{"nativeSrc":"9878:23:51","nodeType":"YulAssignment","src":"9878:23:51","value":{"arguments":[{"name":"pos","nativeSrc":"9889:3:51","nodeType":"YulIdentifier","src":"9889:3:51"},{"name":"length","nativeSrc":"9894:6:51","nodeType":"YulIdentifier","src":"9894:6:51"}],"functionName":{"name":"add","nativeSrc":"9885:3:51","nodeType":"YulIdentifier","src":"9885:3:51"},"nativeSrc":"9885:16:51","nodeType":"YulFunctionCall","src":"9885:16:51"},"variableNames":[{"name":"ret","nativeSrc":"9878:3:51","nodeType":"YulIdentifier","src":"9878:3:51"}]}]},"nativeSrc":"9553:358:51","nodeType":"YulCase","src":"9553:358:51","value":{"kind":"number","nativeSrc":"9558:1:51","nodeType":"YulLiteral","src":"9558:1:51","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nativeSrc":"9331:9:51","nodeType":"YulIdentifier","src":"9331:9:51"},{"kind":"number","nativeSrc":"9342:1:51","nodeType":"YulLiteral","src":"9342:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"9327:3:51","nodeType":"YulIdentifier","src":"9327:3:51"},"nativeSrc":"9327:17:51","nodeType":"YulFunctionCall","src":"9327:17:51"},"nativeSrc":"9320:591:51","nodeType":"YulSwitch","src":"9320:591:51"},{"nativeSrc":"9920:10:51","nodeType":"YulAssignment","src":"9920:10:51","value":{"name":"ret","nativeSrc":"9927:3:51","nodeType":"YulIdentifier","src":"9927:3:51"},"variableNames":[{"name":"end","nativeSrc":"9920:3:51","nodeType":"YulIdentifier","src":"9920:3:51"}]}]},"name":"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"9035:901:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9147:3:51","nodeType":"YulTypedName","src":"9147:3:51","type":""},{"name":"value0","nativeSrc":"9152:6:51","nodeType":"YulTypedName","src":"9152:6:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9163:3:51","nodeType":"YulTypedName","src":"9163:3:51","type":""}],"src":"9035:901:51"},{"body":{"nativeSrc":"10070:119:51","nodeType":"YulBlock","src":"10070:119:51","statements":[{"nativeSrc":"10080:26:51","nodeType":"YulAssignment","src":"10080:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"10092:9:51","nodeType":"YulIdentifier","src":"10092:9:51"},{"kind":"number","nativeSrc":"10103:2:51","nodeType":"YulLiteral","src":"10103:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10088:3:51","nodeType":"YulIdentifier","src":"10088:3:51"},"nativeSrc":"10088:18:51","nodeType":"YulFunctionCall","src":"10088:18:51"},"variableNames":[{"name":"tail","nativeSrc":"10080:4:51","nodeType":"YulIdentifier","src":"10080:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10122:9:51","nodeType":"YulIdentifier","src":"10122:9:51"},{"name":"value0","nativeSrc":"10133:6:51","nodeType":"YulIdentifier","src":"10133:6:51"}],"functionName":{"name":"mstore","nativeSrc":"10115:6:51","nodeType":"YulIdentifier","src":"10115:6:51"},"nativeSrc":"10115:25:51","nodeType":"YulFunctionCall","src":"10115:25:51"},"nativeSrc":"10115:25:51","nodeType":"YulExpressionStatement","src":"10115:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10160:9:51","nodeType":"YulIdentifier","src":"10160:9:51"},{"kind":"number","nativeSrc":"10171:2:51","nodeType":"YulLiteral","src":"10171:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10156:3:51","nodeType":"YulIdentifier","src":"10156:3:51"},"nativeSrc":"10156:18:51","nodeType":"YulFunctionCall","src":"10156:18:51"},{"name":"value1","nativeSrc":"10176:6:51","nodeType":"YulIdentifier","src":"10176:6:51"}],"functionName":{"name":"mstore","nativeSrc":"10149:6:51","nodeType":"YulIdentifier","src":"10149:6:51"},"nativeSrc":"10149:34:51","nodeType":"YulFunctionCall","src":"10149:34:51"},"nativeSrc":"10149:34:51","nodeType":"YulExpressionStatement","src":"10149:34:51"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"9941:248:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10031:9:51","nodeType":"YulTypedName","src":"10031:9:51","type":""},{"name":"value1","nativeSrc":"10042:6:51","nodeType":"YulTypedName","src":"10042:6:51","type":""},{"name":"value0","nativeSrc":"10050:6:51","nodeType":"YulTypedName","src":"10050:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10061:4:51","nodeType":"YulTypedName","src":"10061:4:51","type":""}],"src":"9941:248:51"},{"body":{"nativeSrc":"10272:167:51","nodeType":"YulBlock","src":"10272:167:51","statements":[{"body":{"nativeSrc":"10318:16:51","nodeType":"YulBlock","src":"10318:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10327:1:51","nodeType":"YulLiteral","src":"10327:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"10330:1:51","nodeType":"YulLiteral","src":"10330:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10320:6:51","nodeType":"YulIdentifier","src":"10320:6:51"},"nativeSrc":"10320:12:51","nodeType":"YulFunctionCall","src":"10320:12:51"},"nativeSrc":"10320:12:51","nodeType":"YulExpressionStatement","src":"10320:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10293:7:51","nodeType":"YulIdentifier","src":"10293:7:51"},{"name":"headStart","nativeSrc":"10302:9:51","nodeType":"YulIdentifier","src":"10302:9:51"}],"functionName":{"name":"sub","nativeSrc":"10289:3:51","nodeType":"YulIdentifier","src":"10289:3:51"},"nativeSrc":"10289:23:51","nodeType":"YulFunctionCall","src":"10289:23:51"},{"kind":"number","nativeSrc":"10314:2:51","nodeType":"YulLiteral","src":"10314:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10285:3:51","nodeType":"YulIdentifier","src":"10285:3:51"},"nativeSrc":"10285:32:51","nodeType":"YulFunctionCall","src":"10285:32:51"},"nativeSrc":"10282:52:51","nodeType":"YulIf","src":"10282:52:51"},{"nativeSrc":"10343:29:51","nodeType":"YulVariableDeclaration","src":"10343:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"10362:9:51","nodeType":"YulIdentifier","src":"10362:9:51"}],"functionName":{"name":"mload","nativeSrc":"10356:5:51","nodeType":"YulIdentifier","src":"10356:5:51"},"nativeSrc":"10356:16:51","nodeType":"YulFunctionCall","src":"10356:16:51"},"variables":[{"name":"value","nativeSrc":"10347:5:51","nodeType":"YulTypedName","src":"10347:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10403:5:51","nodeType":"YulIdentifier","src":"10403:5:51"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"10381:21:51","nodeType":"YulIdentifier","src":"10381:21:51"},"nativeSrc":"10381:28:51","nodeType":"YulFunctionCall","src":"10381:28:51"},"nativeSrc":"10381:28:51","nodeType":"YulExpressionStatement","src":"10381:28:51"},{"nativeSrc":"10418:15:51","nodeType":"YulAssignment","src":"10418:15:51","value":{"name":"value","nativeSrc":"10428:5:51","nodeType":"YulIdentifier","src":"10428:5:51"},"variableNames":[{"name":"value0","nativeSrc":"10418:6:51","nodeType":"YulIdentifier","src":"10418:6:51"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"10194:245:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10238:9:51","nodeType":"YulTypedName","src":"10238:9:51","type":""},{"name":"dataEnd","nativeSrc":"10249:7:51","nodeType":"YulTypedName","src":"10249:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10261:6:51","nodeType":"YulTypedName","src":"10261:6:51","type":""}],"src":"10194:245:51"},{"body":{"nativeSrc":"10504:141:51","nodeType":"YulBlock","src":"10504:141:51","statements":[{"nativeSrc":"10514:30:51","nodeType":"YulVariableDeclaration","src":"10514:30:51","value":{"arguments":[{"name":"ptr","nativeSrc":"10540:3:51","nodeType":"YulIdentifier","src":"10540:3:51"}],"functionName":{"name":"calldataload","nativeSrc":"10527:12:51","nodeType":"YulIdentifier","src":"10527:12:51"},"nativeSrc":"10527:17:51","nodeType":"YulFunctionCall","src":"10527:17:51"},"variables":[{"name":"value","nativeSrc":"10518:5:51","nodeType":"YulTypedName","src":"10518:5:51","type":""}]},{"body":{"nativeSrc":"10594:16:51","nodeType":"YulBlock","src":"10594:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10603:1:51","nodeType":"YulLiteral","src":"10603:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"10606:1:51","nodeType":"YulLiteral","src":"10606:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10596:6:51","nodeType":"YulIdentifier","src":"10596:6:51"},"nativeSrc":"10596:12:51","nodeType":"YulFunctionCall","src":"10596:12:51"},"nativeSrc":"10596:12:51","nodeType":"YulExpressionStatement","src":"10596:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10566:5:51","nodeType":"YulIdentifier","src":"10566:5:51"},{"arguments":[{"name":"value","nativeSrc":"10577:5:51","nodeType":"YulIdentifier","src":"10577:5:51"},{"kind":"number","nativeSrc":"10584:6:51","nodeType":"YulLiteral","src":"10584:6:51","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"10573:3:51","nodeType":"YulIdentifier","src":"10573:3:51"},"nativeSrc":"10573:18:51","nodeType":"YulFunctionCall","src":"10573:18:51"}],"functionName":{"name":"eq","nativeSrc":"10563:2:51","nodeType":"YulIdentifier","src":"10563:2:51"},"nativeSrc":"10563:29:51","nodeType":"YulFunctionCall","src":"10563:29:51"}],"functionName":{"name":"iszero","nativeSrc":"10556:6:51","nodeType":"YulIdentifier","src":"10556:6:51"},"nativeSrc":"10556:37:51","nodeType":"YulFunctionCall","src":"10556:37:51"},"nativeSrc":"10553:57:51","nodeType":"YulIf","src":"10553:57:51"},{"nativeSrc":"10619:20:51","nodeType":"YulAssignment","src":"10619:20:51","value":{"name":"value","nativeSrc":"10634:5:51","nodeType":"YulIdentifier","src":"10634:5:51"},"variableNames":[{"name":"returnValue","nativeSrc":"10619:11:51","nodeType":"YulIdentifier","src":"10619:11:51"}]}]},"name":"read_from_calldatat_uint16","nativeSrc":"10444:201:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"10480:3:51","nodeType":"YulTypedName","src":"10480:3:51","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"10488:11:51","nodeType":"YulTypedName","src":"10488:11:51","type":""}],"src":"10444:201:51"},{"body":{"nativeSrc":"10710:153:51","nodeType":"YulBlock","src":"10710:153:51","statements":[{"nativeSrc":"10720:30:51","nodeType":"YulVariableDeclaration","src":"10720:30:51","value":{"arguments":[{"name":"ptr","nativeSrc":"10746:3:51","nodeType":"YulIdentifier","src":"10746:3:51"}],"functionName":{"name":"calldataload","nativeSrc":"10733:12:51","nodeType":"YulIdentifier","src":"10733:12:51"},"nativeSrc":"10733:17:51","nodeType":"YulFunctionCall","src":"10733:17:51"},"variables":[{"name":"value","nativeSrc":"10724:5:51","nodeType":"YulTypedName","src":"10724:5:51","type":""}]},{"body":{"nativeSrc":"10812:16:51","nodeType":"YulBlock","src":"10812:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10821:1:51","nodeType":"YulLiteral","src":"10821:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"10824:1:51","nodeType":"YulLiteral","src":"10824:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10814:6:51","nodeType":"YulIdentifier","src":"10814:6:51"},"nativeSrc":"10814:12:51","nodeType":"YulFunctionCall","src":"10814:12:51"},"nativeSrc":"10814:12:51","nodeType":"YulExpressionStatement","src":"10814:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10772:5:51","nodeType":"YulIdentifier","src":"10772:5:51"},{"arguments":[{"name":"value","nativeSrc":"10783:5:51","nodeType":"YulIdentifier","src":"10783:5:51"},{"kind":"number","nativeSrc":"10790:18:51","nodeType":"YulLiteral","src":"10790:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10779:3:51","nodeType":"YulIdentifier","src":"10779:3:51"},"nativeSrc":"10779:30:51","nodeType":"YulFunctionCall","src":"10779:30:51"}],"functionName":{"name":"eq","nativeSrc":"10769:2:51","nodeType":"YulIdentifier","src":"10769:2:51"},"nativeSrc":"10769:41:51","nodeType":"YulFunctionCall","src":"10769:41:51"}],"functionName":{"name":"iszero","nativeSrc":"10762:6:51","nodeType":"YulIdentifier","src":"10762:6:51"},"nativeSrc":"10762:49:51","nodeType":"YulFunctionCall","src":"10762:49:51"},"nativeSrc":"10759:69:51","nodeType":"YulIf","src":"10759:69:51"},{"nativeSrc":"10837:20:51","nodeType":"YulAssignment","src":"10837:20:51","value":{"name":"value","nativeSrc":"10852:5:51","nodeType":"YulIdentifier","src":"10852:5:51"},"variableNames":[{"name":"returnValue","nativeSrc":"10837:11:51","nodeType":"YulIdentifier","src":"10837:11:51"}]}]},"name":"read_from_calldatat_uint64","nativeSrc":"10650:213:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"10686:3:51","nodeType":"YulTypedName","src":"10686:3:51","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"10694:11:51","nodeType":"YulTypedName","src":"10694:11:51","type":""}],"src":"10650:213:51"},{"body":{"nativeSrc":"10940:204:51","nodeType":"YulBlock","src":"10940:204:51","statements":[{"nativeSrc":"10950:21:51","nodeType":"YulVariableDeclaration","src":"10950:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"10966:4:51","nodeType":"YulIdentifier","src":"10966:4:51"}],"functionName":{"name":"sload","nativeSrc":"10960:5:51","nodeType":"YulIdentifier","src":"10960:5:51"},"nativeSrc":"10960:11:51","nodeType":"YulFunctionCall","src":"10960:11:51"},"variables":[{"name":"_1","nativeSrc":"10954:2:51","nodeType":"YulTypedName","src":"10954:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"10987:4:51","nodeType":"YulIdentifier","src":"10987:4:51"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"11000:2:51","nodeType":"YulIdentifier","src":"11000:2:51"},{"kind":"number","nativeSrc":"11004:66:51","nodeType":"YulLiteral","src":"11004:66:51","type":"","value":"0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10996:3:51","nodeType":"YulIdentifier","src":"10996:3:51"},"nativeSrc":"10996:75:51","nodeType":"YulFunctionCall","src":"10996:75:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11081:2:51","nodeType":"YulLiteral","src":"11081:2:51","type":"","value":"96"},{"name":"value","nativeSrc":"11085:5:51","nodeType":"YulIdentifier","src":"11085:5:51"}],"functionName":{"name":"shl","nativeSrc":"11077:3:51","nodeType":"YulIdentifier","src":"11077:3:51"},"nativeSrc":"11077:14:51","nodeType":"YulFunctionCall","src":"11077:14:51"},{"kind":"number","nativeSrc":"11093:42:51","nodeType":"YulLiteral","src":"11093:42:51","type":"","value":"0xffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"11073:3:51","nodeType":"YulIdentifier","src":"11073:3:51"},"nativeSrc":"11073:63:51","nodeType":"YulFunctionCall","src":"11073:63:51"}],"functionName":{"name":"or","nativeSrc":"10993:2:51","nodeType":"YulIdentifier","src":"10993:2:51"},"nativeSrc":"10993:144:51","nodeType":"YulFunctionCall","src":"10993:144:51"}],"functionName":{"name":"sstore","nativeSrc":"10980:6:51","nodeType":"YulIdentifier","src":"10980:6:51"},"nativeSrc":"10980:158:51","nodeType":"YulFunctionCall","src":"10980:158:51"},"nativeSrc":"10980:158:51","nodeType":"YulExpressionStatement","src":"10980:158:51"}]},"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"10868:276:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"10923:4:51","nodeType":"YulTypedName","src":"10923:4:51","type":""},{"name":"value","nativeSrc":"10929:5:51","nodeType":"YulTypedName","src":"10929:5:51","type":""}],"src":"10868:276:51"},{"body":{"nativeSrc":"11223:221:51","nodeType":"YulBlock","src":"11223:221:51","statements":[{"nativeSrc":"11233:21:51","nodeType":"YulVariableDeclaration","src":"11233:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"11249:4:51","nodeType":"YulIdentifier","src":"11249:4:51"}],"functionName":{"name":"sload","nativeSrc":"11243:5:51","nodeType":"YulIdentifier","src":"11243:5:51"},"nativeSrc":"11243:11:51","nodeType":"YulFunctionCall","src":"11243:11:51"},"variables":[{"name":"_1","nativeSrc":"11237:2:51","nodeType":"YulTypedName","src":"11237:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"11270:4:51","nodeType":"YulIdentifier","src":"11270:4:51"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"11283:2:51","nodeType":"YulIdentifier","src":"11283:2:51"},{"kind":"number","nativeSrc":"11287:66:51","nodeType":"YulLiteral","src":"11287:66:51","type":"","value":"0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11279:3:51","nodeType":"YulIdentifier","src":"11279:3:51"},"nativeSrc":"11279:75:51","nodeType":"YulFunctionCall","src":"11279:75:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11364:3:51","nodeType":"YulLiteral","src":"11364:3:51","type":"","value":"160"},{"name":"value","nativeSrc":"11369:5:51","nodeType":"YulIdentifier","src":"11369:5:51"}],"functionName":{"name":"shl","nativeSrc":"11360:3:51","nodeType":"YulIdentifier","src":"11360:3:51"},"nativeSrc":"11360:15:51","nodeType":"YulFunctionCall","src":"11360:15:51"},{"kind":"number","nativeSrc":"11377:58:51","nodeType":"YulLiteral","src":"11377:58:51","type":"","value":"0xffffffffffffffff0000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"11356:3:51","nodeType":"YulIdentifier","src":"11356:3:51"},"nativeSrc":"11356:80:51","nodeType":"YulFunctionCall","src":"11356:80:51"}],"functionName":{"name":"or","nativeSrc":"11276:2:51","nodeType":"YulIdentifier","src":"11276:2:51"},"nativeSrc":"11276:161:51","nodeType":"YulFunctionCall","src":"11276:161:51"}],"functionName":{"name":"sstore","nativeSrc":"11263:6:51","nodeType":"YulIdentifier","src":"11263:6:51"},"nativeSrc":"11263:175:51","nodeType":"YulFunctionCall","src":"11263:175:51"},"nativeSrc":"11263:175:51","nodeType":"YulExpressionStatement","src":"11263:175:51"}]},"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"11149:295:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"11206:4:51","nodeType":"YulTypedName","src":"11206:4:51","type":""},{"name":"value","nativeSrc":"11212:5:51","nodeType":"YulTypedName","src":"11212:5:51","type":""}],"src":"11149:295:51"},{"body":{"nativeSrc":"11538:486:51","nodeType":"YulBlock","src":"11538:486:51","statements":[{"nativeSrc":"11548:51:51","nodeType":"YulVariableDeclaration","src":"11548:51:51","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"11587:11:51","nodeType":"YulIdentifier","src":"11587:11:51"}],"functionName":{"name":"calldataload","nativeSrc":"11574:12:51","nodeType":"YulIdentifier","src":"11574:12:51"},"nativeSrc":"11574:25:51","nodeType":"YulFunctionCall","src":"11574:25:51"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"11552:18:51","nodeType":"YulTypedName","src":"11552:18:51","type":""}]},{"body":{"nativeSrc":"11747:16:51","nodeType":"YulBlock","src":"11747:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11756:1:51","nodeType":"YulLiteral","src":"11756:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11759:1:51","nodeType":"YulLiteral","src":"11759:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11749:6:51","nodeType":"YulIdentifier","src":"11749:6:51"},"nativeSrc":"11749:12:51","nodeType":"YulFunctionCall","src":"11749:12:51"},"nativeSrc":"11749:12:51","nodeType":"YulExpressionStatement","src":"11749:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"11622:18:51","nodeType":"YulIdentifier","src":"11622:18:51"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"11650:12:51","nodeType":"YulIdentifier","src":"11650:12:51"},"nativeSrc":"11650:14:51","nodeType":"YulFunctionCall","src":"11650:14:51"},{"name":"base_ref","nativeSrc":"11666:8:51","nodeType":"YulIdentifier","src":"11666:8:51"}],"functionName":{"name":"sub","nativeSrc":"11646:3:51","nodeType":"YulIdentifier","src":"11646:3:51"},"nativeSrc":"11646:29:51","nodeType":"YulFunctionCall","src":"11646:29:51"},{"kind":"number","nativeSrc":"11677:66:51","nodeType":"YulLiteral","src":"11677:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"11642:3:51","nodeType":"YulIdentifier","src":"11642:3:51"},"nativeSrc":"11642:102:51","nodeType":"YulFunctionCall","src":"11642:102:51"}],"functionName":{"name":"slt","nativeSrc":"11618:3:51","nodeType":"YulIdentifier","src":"11618:3:51"},"nativeSrc":"11618:127:51","nodeType":"YulFunctionCall","src":"11618:127:51"}],"functionName":{"name":"iszero","nativeSrc":"11611:6:51","nodeType":"YulIdentifier","src":"11611:6:51"},"nativeSrc":"11611:135:51","nodeType":"YulFunctionCall","src":"11611:135:51"},"nativeSrc":"11608:155:51","nodeType":"YulIf","src":"11608:155:51"},{"nativeSrc":"11772:47:51","nodeType":"YulVariableDeclaration","src":"11772:47:51","value":{"arguments":[{"name":"base_ref","nativeSrc":"11790:8:51","nodeType":"YulIdentifier","src":"11790:8:51"},{"name":"rel_offset_of_tail","nativeSrc":"11800:18:51","nodeType":"YulIdentifier","src":"11800:18:51"}],"functionName":{"name":"add","nativeSrc":"11786:3:51","nodeType":"YulIdentifier","src":"11786:3:51"},"nativeSrc":"11786:33:51","nodeType":"YulFunctionCall","src":"11786:33:51"},"variables":[{"name":"addr_1","nativeSrc":"11776:6:51","nodeType":"YulTypedName","src":"11776:6:51","type":""}]},{"nativeSrc":"11828:30:51","nodeType":"YulAssignment","src":"11828:30:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"11851:6:51","nodeType":"YulIdentifier","src":"11851:6:51"}],"functionName":{"name":"calldataload","nativeSrc":"11838:12:51","nodeType":"YulIdentifier","src":"11838:12:51"},"nativeSrc":"11838:20:51","nodeType":"YulFunctionCall","src":"11838:20:51"},"variableNames":[{"name":"length","nativeSrc":"11828:6:51","nodeType":"YulIdentifier","src":"11828:6:51"}]},{"body":{"nativeSrc":"11901:16:51","nodeType":"YulBlock","src":"11901:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11910:1:51","nodeType":"YulLiteral","src":"11910:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11913:1:51","nodeType":"YulLiteral","src":"11913:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11903:6:51","nodeType":"YulIdentifier","src":"11903:6:51"},"nativeSrc":"11903:12:51","nodeType":"YulFunctionCall","src":"11903:12:51"},"nativeSrc":"11903:12:51","nodeType":"YulExpressionStatement","src":"11903:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"11873:6:51","nodeType":"YulIdentifier","src":"11873:6:51"},{"kind":"number","nativeSrc":"11881:18:51","nodeType":"YulLiteral","src":"11881:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11870:2:51","nodeType":"YulIdentifier","src":"11870:2:51"},"nativeSrc":"11870:30:51","nodeType":"YulFunctionCall","src":"11870:30:51"},"nativeSrc":"11867:50:51","nodeType":"YulIf","src":"11867:50:51"},{"nativeSrc":"11926:25:51","nodeType":"YulAssignment","src":"11926:25:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"11938:6:51","nodeType":"YulIdentifier","src":"11938:6:51"},{"kind":"number","nativeSrc":"11946:4:51","nodeType":"YulLiteral","src":"11946:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11934:3:51","nodeType":"YulIdentifier","src":"11934:3:51"},"nativeSrc":"11934:17:51","nodeType":"YulFunctionCall","src":"11934:17:51"},"variableNames":[{"name":"addr","nativeSrc":"11926:4:51","nodeType":"YulIdentifier","src":"11926:4:51"}]},{"body":{"nativeSrc":"12002:16:51","nodeType":"YulBlock","src":"12002:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12011:1:51","nodeType":"YulLiteral","src":"12011:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"12014:1:51","nodeType":"YulLiteral","src":"12014:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12004:6:51","nodeType":"YulIdentifier","src":"12004:6:51"},"nativeSrc":"12004:12:51","nodeType":"YulFunctionCall","src":"12004:12:51"},"nativeSrc":"12004:12:51","nodeType":"YulExpressionStatement","src":"12004:12:51"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"11967:4:51","nodeType":"YulIdentifier","src":"11967:4:51"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"11977:12:51","nodeType":"YulIdentifier","src":"11977:12:51"},"nativeSrc":"11977:14:51","nodeType":"YulFunctionCall","src":"11977:14:51"},{"name":"length","nativeSrc":"11993:6:51","nodeType":"YulIdentifier","src":"11993:6:51"}],"functionName":{"name":"sub","nativeSrc":"11973:3:51","nodeType":"YulIdentifier","src":"11973:3:51"},"nativeSrc":"11973:27:51","nodeType":"YulFunctionCall","src":"11973:27:51"}],"functionName":{"name":"sgt","nativeSrc":"11963:3:51","nodeType":"YulIdentifier","src":"11963:3:51"},"nativeSrc":"11963:38:51","nodeType":"YulFunctionCall","src":"11963:38:51"},"nativeSrc":"11960:58:51","nodeType":"YulIf","src":"11960:58:51"}]},"name":"access_calldata_tail_string_calldata","nativeSrc":"11449:575:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"11495:8:51","nodeType":"YulTypedName","src":"11495:8:51","type":""},{"name":"ptr_to_tail","nativeSrc":"11505:11:51","nodeType":"YulTypedName","src":"11505:11:51","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"11521:4:51","nodeType":"YulTypedName","src":"11521:4:51","type":""},{"name":"length","nativeSrc":"11527:6:51","nodeType":"YulTypedName","src":"11527:6:51","type":""}],"src":"11449:575:51"},{"body":{"nativeSrc":"12061:152:51","nodeType":"YulBlock","src":"12061:152:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12078:1:51","nodeType":"YulLiteral","src":"12078:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"12081:77:51","nodeType":"YulLiteral","src":"12081:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12071:6:51","nodeType":"YulIdentifier","src":"12071:6:51"},"nativeSrc":"12071:88:51","nodeType":"YulFunctionCall","src":"12071:88:51"},"nativeSrc":"12071:88:51","nodeType":"YulExpressionStatement","src":"12071:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12175:1:51","nodeType":"YulLiteral","src":"12175:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"12178:4:51","nodeType":"YulLiteral","src":"12178:4:51","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"12168:6:51","nodeType":"YulIdentifier","src":"12168:6:51"},"nativeSrc":"12168:15:51","nodeType":"YulFunctionCall","src":"12168:15:51"},"nativeSrc":"12168:15:51","nodeType":"YulExpressionStatement","src":"12168:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12199:1:51","nodeType":"YulLiteral","src":"12199:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"12202:4:51","nodeType":"YulLiteral","src":"12202:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12192:6:51","nodeType":"YulIdentifier","src":"12192:6:51"},"nativeSrc":"12192:15:51","nodeType":"YulFunctionCall","src":"12192:15:51"},"nativeSrc":"12192:15:51","nodeType":"YulExpressionStatement","src":"12192:15:51"}]},"name":"panic_error_0x41","nativeSrc":"12029:184:51","nodeType":"YulFunctionDefinition","src":"12029:184:51"},{"body":{"nativeSrc":"12299:462:51","nodeType":"YulBlock","src":"12299:462:51","statements":[{"body":{"nativeSrc":"12332:423:51","nodeType":"YulBlock","src":"12332:423:51","statements":[{"nativeSrc":"12346:11:51","nodeType":"YulVariableDeclaration","src":"12346:11:51","value":{"kind":"number","nativeSrc":"12356:1:51","nodeType":"YulLiteral","src":"12356:1:51","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"12350:2:51","nodeType":"YulTypedName","src":"12350:2:51","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12377:1:51","nodeType":"YulLiteral","src":"12377:1:51","type":"","value":"0"},{"name":"array","nativeSrc":"12380:5:51","nodeType":"YulIdentifier","src":"12380:5:51"}],"functionName":{"name":"mstore","nativeSrc":"12370:6:51","nodeType":"YulIdentifier","src":"12370:6:51"},"nativeSrc":"12370:16:51","nodeType":"YulFunctionCall","src":"12370:16:51"},"nativeSrc":"12370:16:51","nodeType":"YulExpressionStatement","src":"12370:16:51"},{"nativeSrc":"12399:30:51","nodeType":"YulVariableDeclaration","src":"12399:30:51","value":{"arguments":[{"kind":"number","nativeSrc":"12421:1:51","nodeType":"YulLiteral","src":"12421:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"12424:4:51","nodeType":"YulLiteral","src":"12424:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"12411:9:51","nodeType":"YulIdentifier","src":"12411:9:51"},"nativeSrc":"12411:18:51","nodeType":"YulFunctionCall","src":"12411:18:51"},"variables":[{"name":"data","nativeSrc":"12403:4:51","nodeType":"YulTypedName","src":"12403:4:51","type":""}]},{"nativeSrc":"12442:57:51","nodeType":"YulVariableDeclaration","src":"12442:57:51","value":{"arguments":[{"name":"data","nativeSrc":"12465:4:51","nodeType":"YulIdentifier","src":"12465:4:51"},{"arguments":[{"kind":"number","nativeSrc":"12475:1:51","nodeType":"YulLiteral","src":"12475:1:51","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"12482:10:51","nodeType":"YulIdentifier","src":"12482:10:51"},{"kind":"number","nativeSrc":"12494:2:51","nodeType":"YulLiteral","src":"12494:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"12478:3:51","nodeType":"YulIdentifier","src":"12478:3:51"},"nativeSrc":"12478:19:51","nodeType":"YulFunctionCall","src":"12478:19:51"}],"functionName":{"name":"shr","nativeSrc":"12471:3:51","nodeType":"YulIdentifier","src":"12471:3:51"},"nativeSrc":"12471:27:51","nodeType":"YulFunctionCall","src":"12471:27:51"}],"functionName":{"name":"add","nativeSrc":"12461:3:51","nodeType":"YulIdentifier","src":"12461:3:51"},"nativeSrc":"12461:38:51","nodeType":"YulFunctionCall","src":"12461:38:51"},"variables":[{"name":"deleteStart","nativeSrc":"12446:11:51","nodeType":"YulTypedName","src":"12446:11:51","type":""}]},{"body":{"nativeSrc":"12536:23:51","nodeType":"YulBlock","src":"12536:23:51","statements":[{"nativeSrc":"12538:19:51","nodeType":"YulAssignment","src":"12538:19:51","value":{"name":"data","nativeSrc":"12553:4:51","nodeType":"YulIdentifier","src":"12553:4:51"},"variableNames":[{"name":"deleteStart","nativeSrc":"12538:11:51","nodeType":"YulIdentifier","src":"12538:11:51"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"12518:10:51","nodeType":"YulIdentifier","src":"12518:10:51"},{"kind":"number","nativeSrc":"12530:4:51","nodeType":"YulLiteral","src":"12530:4:51","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"12515:2:51","nodeType":"YulIdentifier","src":"12515:2:51"},"nativeSrc":"12515:20:51","nodeType":"YulFunctionCall","src":"12515:20:51"},"nativeSrc":"12512:47:51","nodeType":"YulIf","src":"12512:47:51"},{"nativeSrc":"12572:41:51","nodeType":"YulVariableDeclaration","src":"12572:41:51","value":{"arguments":[{"name":"data","nativeSrc":"12586:4:51","nodeType":"YulIdentifier","src":"12586:4:51"},{"arguments":[{"kind":"number","nativeSrc":"12596:1:51","nodeType":"YulLiteral","src":"12596:1:51","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"12603:3:51","nodeType":"YulIdentifier","src":"12603:3:51"},{"kind":"number","nativeSrc":"12608:2:51","nodeType":"YulLiteral","src":"12608:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"12599:3:51","nodeType":"YulIdentifier","src":"12599:3:51"},"nativeSrc":"12599:12:51","nodeType":"YulFunctionCall","src":"12599:12:51"}],"functionName":{"name":"shr","nativeSrc":"12592:3:51","nodeType":"YulIdentifier","src":"12592:3:51"},"nativeSrc":"12592:20:51","nodeType":"YulFunctionCall","src":"12592:20:51"}],"functionName":{"name":"add","nativeSrc":"12582:3:51","nodeType":"YulIdentifier","src":"12582:3:51"},"nativeSrc":"12582:31:51","nodeType":"YulFunctionCall","src":"12582:31:51"},"variables":[{"name":"_2","nativeSrc":"12576:2:51","nodeType":"YulTypedName","src":"12576:2:51","type":""}]},{"nativeSrc":"12626:24:51","nodeType":"YulVariableDeclaration","src":"12626:24:51","value":{"name":"deleteStart","nativeSrc":"12639:11:51","nodeType":"YulIdentifier","src":"12639:11:51"},"variables":[{"name":"start","nativeSrc":"12630:5:51","nodeType":"YulTypedName","src":"12630:5:51","type":""}]},{"body":{"nativeSrc":"12724:21:51","nodeType":"YulBlock","src":"12724:21:51","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"12733:5:51","nodeType":"YulIdentifier","src":"12733:5:51"},{"name":"_1","nativeSrc":"12740:2:51","nodeType":"YulIdentifier","src":"12740:2:51"}],"functionName":{"name":"sstore","nativeSrc":"12726:6:51","nodeType":"YulIdentifier","src":"12726:6:51"},"nativeSrc":"12726:17:51","nodeType":"YulFunctionCall","src":"12726:17:51"},"nativeSrc":"12726:17:51","nodeType":"YulExpressionStatement","src":"12726:17:51"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"12674:5:51","nodeType":"YulIdentifier","src":"12674:5:51"},{"name":"_2","nativeSrc":"12681:2:51","nodeType":"YulIdentifier","src":"12681:2:51"}],"functionName":{"name":"lt","nativeSrc":"12671:2:51","nodeType":"YulIdentifier","src":"12671:2:51"},"nativeSrc":"12671:13:51","nodeType":"YulFunctionCall","src":"12671:13:51"},"nativeSrc":"12663:82:51","nodeType":"YulForLoop","post":{"nativeSrc":"12685:26:51","nodeType":"YulBlock","src":"12685:26:51","statements":[{"nativeSrc":"12687:22:51","nodeType":"YulAssignment","src":"12687:22:51","value":{"arguments":[{"name":"start","nativeSrc":"12700:5:51","nodeType":"YulIdentifier","src":"12700:5:51"},{"kind":"number","nativeSrc":"12707:1:51","nodeType":"YulLiteral","src":"12707:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12696:3:51","nodeType":"YulIdentifier","src":"12696:3:51"},"nativeSrc":"12696:13:51","nodeType":"YulFunctionCall","src":"12696:13:51"},"variableNames":[{"name":"start","nativeSrc":"12687:5:51","nodeType":"YulIdentifier","src":"12687:5:51"}]}]},"pre":{"nativeSrc":"12667:3:51","nodeType":"YulBlock","src":"12667:3:51","statements":[]},"src":"12663:82:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"12315:3:51","nodeType":"YulIdentifier","src":"12315:3:51"},{"kind":"number","nativeSrc":"12320:2:51","nodeType":"YulLiteral","src":"12320:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"12312:2:51","nodeType":"YulIdentifier","src":"12312:2:51"},"nativeSrc":"12312:11:51","nodeType":"YulFunctionCall","src":"12312:11:51"},"nativeSrc":"12309:446:51","nodeType":"YulIf","src":"12309:446:51"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"12218:543:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"12271:5:51","nodeType":"YulTypedName","src":"12271:5:51","type":""},{"name":"len","nativeSrc":"12278:3:51","nodeType":"YulTypedName","src":"12278:3:51","type":""},{"name":"startIndex","nativeSrc":"12283:10:51","nodeType":"YulTypedName","src":"12283:10:51","type":""}],"src":"12218:543:51"},{"body":{"nativeSrc":"12851:141:51","nodeType":"YulBlock","src":"12851:141:51","statements":[{"nativeSrc":"12861:125:51","nodeType":"YulAssignment","src":"12861:125:51","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"12876:4:51","nodeType":"YulIdentifier","src":"12876:4:51"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"12894:1:51","nodeType":"YulLiteral","src":"12894:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"12897:3:51","nodeType":"YulIdentifier","src":"12897:3:51"}],"functionName":{"name":"shl","nativeSrc":"12890:3:51","nodeType":"YulIdentifier","src":"12890:3:51"},"nativeSrc":"12890:11:51","nodeType":"YulFunctionCall","src":"12890:11:51"},{"kind":"number","nativeSrc":"12903:66:51","nodeType":"YulLiteral","src":"12903:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"12886:3:51","nodeType":"YulIdentifier","src":"12886:3:51"},"nativeSrc":"12886:84:51","nodeType":"YulFunctionCall","src":"12886:84:51"}],"functionName":{"name":"not","nativeSrc":"12882:3:51","nodeType":"YulIdentifier","src":"12882:3:51"},"nativeSrc":"12882:89:51","nodeType":"YulFunctionCall","src":"12882:89:51"}],"functionName":{"name":"and","nativeSrc":"12872:3:51","nodeType":"YulIdentifier","src":"12872:3:51"},"nativeSrc":"12872:100:51","nodeType":"YulFunctionCall","src":"12872:100:51"},{"arguments":[{"kind":"number","nativeSrc":"12978:1:51","nodeType":"YulLiteral","src":"12978:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"12981:3:51","nodeType":"YulIdentifier","src":"12981:3:51"}],"functionName":{"name":"shl","nativeSrc":"12974:3:51","nodeType":"YulIdentifier","src":"12974:3:51"},"nativeSrc":"12974:11:51","nodeType":"YulFunctionCall","src":"12974:11:51"}],"functionName":{"name":"or","nativeSrc":"12869:2:51","nodeType":"YulIdentifier","src":"12869:2:51"},"nativeSrc":"12869:117:51","nodeType":"YulFunctionCall","src":"12869:117:51"},"variableNames":[{"name":"used","nativeSrc":"12861:4:51","nodeType":"YulIdentifier","src":"12861:4:51"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"12766:226:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"12828:4:51","nodeType":"YulTypedName","src":"12828:4:51","type":""},{"name":"len","nativeSrc":"12834:3:51","nodeType":"YulTypedName","src":"12834:3:51","type":""}],"returnVariables":[{"name":"used","nativeSrc":"12842:4:51","nodeType":"YulTypedName","src":"12842:4:51","type":""}],"src":"12766:226:51"},{"body":{"nativeSrc":"13084:1222:51","nodeType":"YulBlock","src":"13084:1222:51","statements":[{"body":{"nativeSrc":"13125:22:51","nodeType":"YulBlock","src":"13125:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"13127:16:51","nodeType":"YulIdentifier","src":"13127:16:51"},"nativeSrc":"13127:18:51","nodeType":"YulFunctionCall","src":"13127:18:51"},"nativeSrc":"13127:18:51","nodeType":"YulExpressionStatement","src":"13127:18:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"13100:3:51","nodeType":"YulIdentifier","src":"13100:3:51"},{"kind":"number","nativeSrc":"13105:18:51","nodeType":"YulLiteral","src":"13105:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"13097:2:51","nodeType":"YulIdentifier","src":"13097:2:51"},"nativeSrc":"13097:27:51","nodeType":"YulFunctionCall","src":"13097:27:51"},"nativeSrc":"13094:53:51","nodeType":"YulIf","src":"13094:53:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"13200:4:51","nodeType":"YulIdentifier","src":"13200:4:51"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"13238:4:51","nodeType":"YulIdentifier","src":"13238:4:51"}],"functionName":{"name":"sload","nativeSrc":"13232:5:51","nodeType":"YulIdentifier","src":"13232:5:51"},"nativeSrc":"13232:11:51","nodeType":"YulFunctionCall","src":"13232:11:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"13206:25:51","nodeType":"YulIdentifier","src":"13206:25:51"},"nativeSrc":"13206:38:51","nodeType":"YulFunctionCall","src":"13206:38:51"},{"name":"len","nativeSrc":"13246:3:51","nodeType":"YulIdentifier","src":"13246:3:51"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"13156:43:51","nodeType":"YulIdentifier","src":"13156:43:51"},"nativeSrc":"13156:94:51","nodeType":"YulFunctionCall","src":"13156:94:51"},"nativeSrc":"13156:94:51","nodeType":"YulExpressionStatement","src":"13156:94:51"},{"nativeSrc":"13259:18:51","nodeType":"YulVariableDeclaration","src":"13259:18:51","value":{"kind":"number","nativeSrc":"13276:1:51","nodeType":"YulLiteral","src":"13276:1:51","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"13263:9:51","nodeType":"YulTypedName","src":"13263:9:51","type":""}]},{"cases":[{"body":{"nativeSrc":"13320:728:51","nodeType":"YulBlock","src":"13320:728:51","statements":[{"nativeSrc":"13334:91:51","nodeType":"YulVariableDeclaration","src":"13334:91:51","value":{"arguments":[{"name":"len","nativeSrc":"13353:3:51","nodeType":"YulIdentifier","src":"13353:3:51"},{"kind":"number","nativeSrc":"13358:66:51","nodeType":"YulLiteral","src":"13358:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"13349:3:51","nodeType":"YulIdentifier","src":"13349:3:51"},"nativeSrc":"13349:76:51","nodeType":"YulFunctionCall","src":"13349:76:51"},"variables":[{"name":"loopEnd","nativeSrc":"13338:7:51","nodeType":"YulTypedName","src":"13338:7:51","type":""}]},{"nativeSrc":"13438:49:51","nodeType":"YulVariableDeclaration","src":"13438:49:51","value":{"arguments":[{"name":"slot","nativeSrc":"13482:4:51","nodeType":"YulIdentifier","src":"13482:4:51"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"13452:29:51","nodeType":"YulIdentifier","src":"13452:29:51"},"nativeSrc":"13452:35:51","nodeType":"YulFunctionCall","src":"13452:35:51"},"variables":[{"name":"dstPtr","nativeSrc":"13442:6:51","nodeType":"YulTypedName","src":"13442:6:51","type":""}]},{"nativeSrc":"13500:18:51","nodeType":"YulVariableDeclaration","src":"13500:18:51","value":{"name":"srcOffset","nativeSrc":"13509:9:51","nodeType":"YulIdentifier","src":"13509:9:51"},"variables":[{"name":"i","nativeSrc":"13504:1:51","nodeType":"YulTypedName","src":"13504:1:51","type":""}]},{"body":{"nativeSrc":"13588:172:51","nodeType":"YulBlock","src":"13588:172:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"13613:6:51","nodeType":"YulIdentifier","src":"13613:6:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13638:3:51","nodeType":"YulIdentifier","src":"13638:3:51"},{"name":"srcOffset","nativeSrc":"13643:9:51","nodeType":"YulIdentifier","src":"13643:9:51"}],"functionName":{"name":"add","nativeSrc":"13634:3:51","nodeType":"YulIdentifier","src":"13634:3:51"},"nativeSrc":"13634:19:51","nodeType":"YulFunctionCall","src":"13634:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"13621:12:51","nodeType":"YulIdentifier","src":"13621:12:51"},"nativeSrc":"13621:33:51","nodeType":"YulFunctionCall","src":"13621:33:51"}],"functionName":{"name":"sstore","nativeSrc":"13606:6:51","nodeType":"YulIdentifier","src":"13606:6:51"},"nativeSrc":"13606:49:51","nodeType":"YulFunctionCall","src":"13606:49:51"},"nativeSrc":"13606:49:51","nodeType":"YulExpressionStatement","src":"13606:49:51"},{"nativeSrc":"13672:24:51","nodeType":"YulAssignment","src":"13672:24:51","value":{"arguments":[{"name":"dstPtr","nativeSrc":"13686:6:51","nodeType":"YulIdentifier","src":"13686:6:51"},{"kind":"number","nativeSrc":"13694:1:51","nodeType":"YulLiteral","src":"13694:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13682:3:51","nodeType":"YulIdentifier","src":"13682:3:51"},"nativeSrc":"13682:14:51","nodeType":"YulFunctionCall","src":"13682:14:51"},"variableNames":[{"name":"dstPtr","nativeSrc":"13672:6:51","nodeType":"YulIdentifier","src":"13672:6:51"}]},{"nativeSrc":"13713:33:51","nodeType":"YulAssignment","src":"13713:33:51","value":{"arguments":[{"name":"srcOffset","nativeSrc":"13730:9:51","nodeType":"YulIdentifier","src":"13730:9:51"},{"kind":"number","nativeSrc":"13741:4:51","nodeType":"YulLiteral","src":"13741:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13726:3:51","nodeType":"YulIdentifier","src":"13726:3:51"},"nativeSrc":"13726:20:51","nodeType":"YulFunctionCall","src":"13726:20:51"},"variableNames":[{"name":"srcOffset","nativeSrc":"13713:9:51","nodeType":"YulIdentifier","src":"13713:9:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"13542:1:51","nodeType":"YulIdentifier","src":"13542:1:51"},{"name":"loopEnd","nativeSrc":"13545:7:51","nodeType":"YulIdentifier","src":"13545:7:51"}],"functionName":{"name":"lt","nativeSrc":"13539:2:51","nodeType":"YulIdentifier","src":"13539:2:51"},"nativeSrc":"13539:14:51","nodeType":"YulFunctionCall","src":"13539:14:51"},"nativeSrc":"13531:229:51","nodeType":"YulForLoop","post":{"nativeSrc":"13554:21:51","nodeType":"YulBlock","src":"13554:21:51","statements":[{"nativeSrc":"13556:17:51","nodeType":"YulAssignment","src":"13556:17:51","value":{"arguments":[{"name":"i","nativeSrc":"13565:1:51","nodeType":"YulIdentifier","src":"13565:1:51"},{"kind":"number","nativeSrc":"13568:4:51","nodeType":"YulLiteral","src":"13568:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13561:3:51","nodeType":"YulIdentifier","src":"13561:3:51"},"nativeSrc":"13561:12:51","nodeType":"YulFunctionCall","src":"13561:12:51"},"variableNames":[{"name":"i","nativeSrc":"13556:1:51","nodeType":"YulIdentifier","src":"13556:1:51"}]}]},"pre":{"nativeSrc":"13535:3:51","nodeType":"YulBlock","src":"13535:3:51","statements":[]},"src":"13531:229:51"},{"body":{"nativeSrc":"13805:187:51","nodeType":"YulBlock","src":"13805:187:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"13830:6:51","nodeType":"YulIdentifier","src":"13830:6:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13859:3:51","nodeType":"YulIdentifier","src":"13859:3:51"},{"name":"srcOffset","nativeSrc":"13864:9:51","nodeType":"YulIdentifier","src":"13864:9:51"}],"functionName":{"name":"add","nativeSrc":"13855:3:51","nodeType":"YulIdentifier","src":"13855:3:51"},"nativeSrc":"13855:19:51","nodeType":"YulFunctionCall","src":"13855:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"13842:12:51","nodeType":"YulIdentifier","src":"13842:12:51"},"nativeSrc":"13842:33:51","nodeType":"YulFunctionCall","src":"13842:33:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"13893:1:51","nodeType":"YulLiteral","src":"13893:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"13896:3:51","nodeType":"YulIdentifier","src":"13896:3:51"}],"functionName":{"name":"shl","nativeSrc":"13889:3:51","nodeType":"YulIdentifier","src":"13889:3:51"},"nativeSrc":"13889:11:51","nodeType":"YulFunctionCall","src":"13889:11:51"},{"kind":"number","nativeSrc":"13902:3:51","nodeType":"YulLiteral","src":"13902:3:51","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"13885:3:51","nodeType":"YulIdentifier","src":"13885:3:51"},"nativeSrc":"13885:21:51","nodeType":"YulFunctionCall","src":"13885:21:51"},{"kind":"number","nativeSrc":"13908:66:51","nodeType":"YulLiteral","src":"13908:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"13881:3:51","nodeType":"YulIdentifier","src":"13881:3:51"},"nativeSrc":"13881:94:51","nodeType":"YulFunctionCall","src":"13881:94:51"}],"functionName":{"name":"not","nativeSrc":"13877:3:51","nodeType":"YulIdentifier","src":"13877:3:51"},"nativeSrc":"13877:99:51","nodeType":"YulFunctionCall","src":"13877:99:51"}],"functionName":{"name":"and","nativeSrc":"13838:3:51","nodeType":"YulIdentifier","src":"13838:3:51"},"nativeSrc":"13838:139:51","nodeType":"YulFunctionCall","src":"13838:139:51"}],"functionName":{"name":"sstore","nativeSrc":"13823:6:51","nodeType":"YulIdentifier","src":"13823:6:51"},"nativeSrc":"13823:155:51","nodeType":"YulFunctionCall","src":"13823:155:51"},"nativeSrc":"13823:155:51","nodeType":"YulExpressionStatement","src":"13823:155:51"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"13779:7:51","nodeType":"YulIdentifier","src":"13779:7:51"},{"name":"len","nativeSrc":"13788:3:51","nodeType":"YulIdentifier","src":"13788:3:51"}],"functionName":{"name":"lt","nativeSrc":"13776:2:51","nodeType":"YulIdentifier","src":"13776:2:51"},"nativeSrc":"13776:16:51","nodeType":"YulFunctionCall","src":"13776:16:51"},"nativeSrc":"13773:219:51","nodeType":"YulIf","src":"13773:219:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14012:4:51","nodeType":"YulIdentifier","src":"14012:4:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14026:1:51","nodeType":"YulLiteral","src":"14026:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"14029:3:51","nodeType":"YulIdentifier","src":"14029:3:51"}],"functionName":{"name":"shl","nativeSrc":"14022:3:51","nodeType":"YulIdentifier","src":"14022:3:51"},"nativeSrc":"14022:11:51","nodeType":"YulFunctionCall","src":"14022:11:51"},{"kind":"number","nativeSrc":"14035:1:51","nodeType":"YulLiteral","src":"14035:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14018:3:51","nodeType":"YulIdentifier","src":"14018:3:51"},"nativeSrc":"14018:19:51","nodeType":"YulFunctionCall","src":"14018:19:51"}],"functionName":{"name":"sstore","nativeSrc":"14005:6:51","nodeType":"YulIdentifier","src":"14005:6:51"},"nativeSrc":"14005:33:51","nodeType":"YulFunctionCall","src":"14005:33:51"},"nativeSrc":"14005:33:51","nodeType":"YulExpressionStatement","src":"14005:33:51"}]},"nativeSrc":"13313:735:51","nodeType":"YulCase","src":"13313:735:51","value":{"kind":"number","nativeSrc":"13318:1:51","nodeType":"YulLiteral","src":"13318:1:51","type":"","value":"1"}},{"body":{"nativeSrc":"14065:235:51","nodeType":"YulBlock","src":"14065:235:51","statements":[{"nativeSrc":"14079:14:51","nodeType":"YulVariableDeclaration","src":"14079:14:51","value":{"kind":"number","nativeSrc":"14092:1:51","nodeType":"YulLiteral","src":"14092:1:51","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"14083:5:51","nodeType":"YulTypedName","src":"14083:5:51","type":""}]},{"body":{"nativeSrc":"14125:74:51","nodeType":"YulBlock","src":"14125:74:51","statements":[{"nativeSrc":"14143:42:51","nodeType":"YulAssignment","src":"14143:42:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"14169:3:51","nodeType":"YulIdentifier","src":"14169:3:51"},{"name":"srcOffset","nativeSrc":"14174:9:51","nodeType":"YulIdentifier","src":"14174:9:51"}],"functionName":{"name":"add","nativeSrc":"14165:3:51","nodeType":"YulIdentifier","src":"14165:3:51"},"nativeSrc":"14165:19:51","nodeType":"YulFunctionCall","src":"14165:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"14152:12:51","nodeType":"YulIdentifier","src":"14152:12:51"},"nativeSrc":"14152:33:51","nodeType":"YulFunctionCall","src":"14152:33:51"},"variableNames":[{"name":"value","nativeSrc":"14143:5:51","nodeType":"YulIdentifier","src":"14143:5:51"}]}]},"condition":{"name":"len","nativeSrc":"14109:3:51","nodeType":"YulIdentifier","src":"14109:3:51"},"nativeSrc":"14106:93:51","nodeType":"YulIf","src":"14106:93:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14219:4:51","nodeType":"YulIdentifier","src":"14219:4:51"},{"arguments":[{"name":"value","nativeSrc":"14278:5:51","nodeType":"YulIdentifier","src":"14278:5:51"},{"name":"len","nativeSrc":"14285:3:51","nodeType":"YulIdentifier","src":"14285:3:51"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"14225:52:51","nodeType":"YulIdentifier","src":"14225:52:51"},"nativeSrc":"14225:64:51","nodeType":"YulFunctionCall","src":"14225:64:51"}],"functionName":{"name":"sstore","nativeSrc":"14212:6:51","nodeType":"YulIdentifier","src":"14212:6:51"},"nativeSrc":"14212:78:51","nodeType":"YulFunctionCall","src":"14212:78:51"},"nativeSrc":"14212:78:51","nodeType":"YulExpressionStatement","src":"14212:78:51"}]},"nativeSrc":"14057:243:51","nodeType":"YulCase","src":"14057:243:51","value":"default"}],"expression":{"arguments":[{"name":"len","nativeSrc":"13296:3:51","nodeType":"YulIdentifier","src":"13296:3:51"},{"kind":"number","nativeSrc":"13301:2:51","nodeType":"YulLiteral","src":"13301:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"13293:2:51","nodeType":"YulIdentifier","src":"13293:2:51"},"nativeSrc":"13293:11:51","nodeType":"YulFunctionCall","src":"13293:11:51"},"nativeSrc":"13286:1014:51","nodeType":"YulSwitch","src":"13286:1014:51"}]},"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"12997:1309:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"13064:4:51","nodeType":"YulTypedName","src":"13064:4:51","type":""},{"name":"src","nativeSrc":"13070:3:51","nodeType":"YulTypedName","src":"13070:3:51","type":""},{"name":"len","nativeSrc":"13075:3:51","nodeType":"YulTypedName","src":"13075:3:51","type":""}],"src":"12997:1309:51"},{"body":{"nativeSrc":"14440:1250:51","nodeType":"YulBlock","src":"14440:1250:51","statements":[{"nativeSrc":"14450:56:51","nodeType":"YulVariableDeclaration","src":"14450:56:51","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14491:5:51","nodeType":"YulIdentifier","src":"14491:5:51"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"14464:26:51","nodeType":"YulIdentifier","src":"14464:26:51"},"nativeSrc":"14464:33:51","nodeType":"YulFunctionCall","src":"14464:33:51"},{"kind":"number","nativeSrc":"14499:6:51","nodeType":"YulLiteral","src":"14499:6:51","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"14460:3:51","nodeType":"YulIdentifier","src":"14460:3:51"},"nativeSrc":"14460:46:51","nodeType":"YulFunctionCall","src":"14460:46:51"},"variables":[{"name":"_1","nativeSrc":"14454:2:51","nodeType":"YulTypedName","src":"14454:2:51","type":""}]},{"nativeSrc":"14515:21:51","nodeType":"YulVariableDeclaration","src":"14515:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"14531:4:51","nodeType":"YulIdentifier","src":"14531:4:51"}],"functionName":{"name":"sload","nativeSrc":"14525:5:51","nodeType":"YulIdentifier","src":"14525:5:51"},"nativeSrc":"14525:11:51","nodeType":"YulFunctionCall","src":"14525:11:51"},"variables":[{"name":"_2","nativeSrc":"14519:2:51","nodeType":"YulTypedName","src":"14519:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14552:4:51","nodeType":"YulIdentifier","src":"14552:4:51"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14565:2:51","nodeType":"YulIdentifier","src":"14565:2:51"},{"kind":"number","nativeSrc":"14569:66:51","nodeType":"YulLiteral","src":"14569:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000"}],"functionName":{"name":"and","nativeSrc":"14561:3:51","nodeType":"YulIdentifier","src":"14561:3:51"},"nativeSrc":"14561:75:51","nodeType":"YulFunctionCall","src":"14561:75:51"},{"name":"_1","nativeSrc":"14638:2:51","nodeType":"YulIdentifier","src":"14638:2:51"}],"functionName":{"name":"or","nativeSrc":"14558:2:51","nodeType":"YulIdentifier","src":"14558:2:51"},"nativeSrc":"14558:83:51","nodeType":"YulFunctionCall","src":"14558:83:51"}],"functionName":{"name":"sstore","nativeSrc":"14545:6:51","nodeType":"YulIdentifier","src":"14545:6:51"},"nativeSrc":"14545:97:51","nodeType":"YulFunctionCall","src":"14545:97:51"},"nativeSrc":"14545:97:51","nodeType":"YulExpressionStatement","src":"14545:97:51"},{"nativeSrc":"14651:78:51","nodeType":"YulVariableDeclaration","src":"14651:78:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14669:2:51","nodeType":"YulLiteral","src":"14669:2:51","type":"","value":"16"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14704:5:51","nodeType":"YulIdentifier","src":"14704:5:51"},{"kind":"number","nativeSrc":"14711:2:51","nodeType":"YulLiteral","src":"14711:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14700:3:51","nodeType":"YulIdentifier","src":"14700:3:51"},"nativeSrc":"14700:14:51","nodeType":"YulFunctionCall","src":"14700:14:51"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"14673:26:51","nodeType":"YulIdentifier","src":"14673:26:51"},"nativeSrc":"14673:42:51","nodeType":"YulFunctionCall","src":"14673:42:51"}],"functionName":{"name":"shl","nativeSrc":"14665:3:51","nodeType":"YulIdentifier","src":"14665:3:51"},"nativeSrc":"14665:51:51","nodeType":"YulFunctionCall","src":"14665:51:51"},{"kind":"number","nativeSrc":"14718:10:51","nodeType":"YulLiteral","src":"14718:10:51","type":"","value":"0xffff0000"}],"functionName":{"name":"and","nativeSrc":"14661:3:51","nodeType":"YulIdentifier","src":"14661:3:51"},"nativeSrc":"14661:68:51","nodeType":"YulFunctionCall","src":"14661:68:51"},"variables":[{"name":"_3","nativeSrc":"14655:2:51","nodeType":"YulTypedName","src":"14655:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14745:4:51","nodeType":"YulIdentifier","src":"14745:4:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14761:2:51","nodeType":"YulIdentifier","src":"14761:2:51"},{"kind":"number","nativeSrc":"14765:66:51","nodeType":"YulLiteral","src":"14765:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"14757:3:51","nodeType":"YulIdentifier","src":"14757:3:51"},"nativeSrc":"14757:75:51","nodeType":"YulFunctionCall","src":"14757:75:51"},{"name":"_1","nativeSrc":"14834:2:51","nodeType":"YulIdentifier","src":"14834:2:51"}],"functionName":{"name":"or","nativeSrc":"14754:2:51","nodeType":"YulIdentifier","src":"14754:2:51"},"nativeSrc":"14754:83:51","nodeType":"YulFunctionCall","src":"14754:83:51"},{"name":"_3","nativeSrc":"14839:2:51","nodeType":"YulIdentifier","src":"14839:2:51"}],"functionName":{"name":"or","nativeSrc":"14751:2:51","nodeType":"YulIdentifier","src":"14751:2:51"},"nativeSrc":"14751:91:51","nodeType":"YulFunctionCall","src":"14751:91:51"}],"functionName":{"name":"sstore","nativeSrc":"14738:6:51","nodeType":"YulIdentifier","src":"14738:6:51"},"nativeSrc":"14738:105:51","nodeType":"YulFunctionCall","src":"14738:105:51"},"nativeSrc":"14738:105:51","nodeType":"YulExpressionStatement","src":"14738:105:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14859:4:51","nodeType":"YulIdentifier","src":"14859:4:51"},{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"14871:2:51","nodeType":"YulIdentifier","src":"14871:2:51"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14882:2:51","nodeType":"YulIdentifier","src":"14882:2:51"},{"kind":"number","nativeSrc":"14886:66:51","nodeType":"YulLiteral","src":"14886:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"14878:3:51","nodeType":"YulIdentifier","src":"14878:3:51"},"nativeSrc":"14878:75:51","nodeType":"YulFunctionCall","src":"14878:75:51"},{"name":"_1","nativeSrc":"14955:2:51","nodeType":"YulIdentifier","src":"14955:2:51"}],"functionName":{"name":"or","nativeSrc":"14875:2:51","nodeType":"YulIdentifier","src":"14875:2:51"},"nativeSrc":"14875:83:51","nodeType":"YulFunctionCall","src":"14875:83:51"}],"functionName":{"name":"or","nativeSrc":"14868:2:51","nodeType":"YulIdentifier","src":"14868:2:51"},"nativeSrc":"14868:91:51","nodeType":"YulFunctionCall","src":"14868:91:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14969:2:51","nodeType":"YulLiteral","src":"14969:2:51","type":"","value":"32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15004:5:51","nodeType":"YulIdentifier","src":"15004:5:51"},{"kind":"number","nativeSrc":"15011:2:51","nodeType":"YulLiteral","src":"15011:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15000:3:51","nodeType":"YulIdentifier","src":"15000:3:51"},"nativeSrc":"15000:14:51","nodeType":"YulFunctionCall","src":"15000:14:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"14973:26:51","nodeType":"YulIdentifier","src":"14973:26:51"},"nativeSrc":"14973:42:51","nodeType":"YulFunctionCall","src":"14973:42:51"}],"functionName":{"name":"shl","nativeSrc":"14965:3:51","nodeType":"YulIdentifier","src":"14965:3:51"},"nativeSrc":"14965:51:51","nodeType":"YulFunctionCall","src":"14965:51:51"},{"kind":"number","nativeSrc":"15018:26:51","nodeType":"YulLiteral","src":"15018:26:51","type":"","value":"0xffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"14961:3:51","nodeType":"YulIdentifier","src":"14961:3:51"},"nativeSrc":"14961:84:51","nodeType":"YulFunctionCall","src":"14961:84:51"}],"functionName":{"name":"or","nativeSrc":"14865:2:51","nodeType":"YulIdentifier","src":"14865:2:51"},"nativeSrc":"14865:181:51","nodeType":"YulFunctionCall","src":"14865:181:51"}],"functionName":{"name":"sstore","nativeSrc":"14852:6:51","nodeType":"YulIdentifier","src":"14852:6:51"},"nativeSrc":"14852:195:51","nodeType":"YulFunctionCall","src":"14852:195:51"},"nativeSrc":"14852:195:51","nodeType":"YulExpressionStatement","src":"14852:195:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15102:4:51","nodeType":"YulIdentifier","src":"15102:4:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15139:5:51","nodeType":"YulIdentifier","src":"15139:5:51"},{"kind":"number","nativeSrc":"15146:2:51","nodeType":"YulLiteral","src":"15146:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15135:3:51","nodeType":"YulIdentifier","src":"15135:3:51"},"nativeSrc":"15135:14:51","nodeType":"YulFunctionCall","src":"15135:14:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"15108:26:51","nodeType":"YulIdentifier","src":"15108:26:51"},"nativeSrc":"15108:42:51","nodeType":"YulFunctionCall","src":"15108:42:51"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"15056:45:51","nodeType":"YulIdentifier","src":"15056:45:51"},"nativeSrc":"15056:95:51","nodeType":"YulFunctionCall","src":"15056:95:51"},"nativeSrc":"15056:95:51","nodeType":"YulExpressionStatement","src":"15056:95:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15208:4:51","nodeType":"YulIdentifier","src":"15208:4:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15245:5:51","nodeType":"YulIdentifier","src":"15245:5:51"},{"kind":"number","nativeSrc":"15252:3:51","nodeType":"YulLiteral","src":"15252:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15241:3:51","nodeType":"YulIdentifier","src":"15241:3:51"},"nativeSrc":"15241:15:51","nodeType":"YulFunctionCall","src":"15241:15:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"15214:26:51","nodeType":"YulIdentifier","src":"15214:26:51"},"nativeSrc":"15214:43:51","nodeType":"YulFunctionCall","src":"15214:43:51"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"15160:47:51","nodeType":"YulIdentifier","src":"15160:47:51"},"nativeSrc":"15160:98:51","nodeType":"YulFunctionCall","src":"15160:98:51"},"nativeSrc":"15160:98:51","nodeType":"YulExpressionStatement","src":"15160:98:51"},{"nativeSrc":"15267:94:51","nodeType":"YulVariableDeclaration","src":"15267:94:51","value":{"arguments":[{"name":"value","nativeSrc":"15338:5:51","nodeType":"YulIdentifier","src":"15338:5:51"},{"arguments":[{"name":"value","nativeSrc":"15349:5:51","nodeType":"YulIdentifier","src":"15349:5:51"},{"kind":"number","nativeSrc":"15356:3:51","nodeType":"YulLiteral","src":"15356:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"15345:3:51","nodeType":"YulIdentifier","src":"15345:3:51"},"nativeSrc":"15345:15:51","nodeType":"YulFunctionCall","src":"15345:15:51"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"15301:36:51","nodeType":"YulIdentifier","src":"15301:36:51"},"nativeSrc":"15301:60:51","nodeType":"YulFunctionCall","src":"15301:60:51"},"variables":[{"name":"memberValue","nativeSrc":"15271:11:51","nodeType":"YulTypedName","src":"15271:11:51","type":""},{"name":"memberValue_1","nativeSrc":"15284:13:51","nodeType":"YulTypedName","src":"15284:13:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"15432:4:51","nodeType":"YulIdentifier","src":"15432:4:51"},{"kind":"number","nativeSrc":"15438:1:51","nodeType":"YulLiteral","src":"15438:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"15428:3:51","nodeType":"YulIdentifier","src":"15428:3:51"},"nativeSrc":"15428:12:51","nodeType":"YulFunctionCall","src":"15428:12:51"},{"name":"memberValue","nativeSrc":"15442:11:51","nodeType":"YulIdentifier","src":"15442:11:51"},{"name":"memberValue_1","nativeSrc":"15455:13:51","nodeType":"YulIdentifier","src":"15455:13:51"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"15370:57:51","nodeType":"YulIdentifier","src":"15370:57:51"},"nativeSrc":"15370:99:51","nodeType":"YulFunctionCall","src":"15370:99:51"},"nativeSrc":"15370:99:51","nodeType":"YulExpressionStatement","src":"15370:99:51"},{"nativeSrc":"15478:96:51","nodeType":"YulVariableDeclaration","src":"15478:96:51","value":{"arguments":[{"name":"value","nativeSrc":"15551:5:51","nodeType":"YulIdentifier","src":"15551:5:51"},{"arguments":[{"name":"value","nativeSrc":"15562:5:51","nodeType":"YulIdentifier","src":"15562:5:51"},{"kind":"number","nativeSrc":"15569:3:51","nodeType":"YulLiteral","src":"15569:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"15558:3:51","nodeType":"YulIdentifier","src":"15558:3:51"},"nativeSrc":"15558:15:51","nodeType":"YulFunctionCall","src":"15558:15:51"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"15514:36:51","nodeType":"YulIdentifier","src":"15514:36:51"},"nativeSrc":"15514:60:51","nodeType":"YulFunctionCall","src":"15514:60:51"},"variables":[{"name":"memberValue_2","nativeSrc":"15482:13:51","nodeType":"YulTypedName","src":"15482:13:51","type":""},{"name":"memberValue_3","nativeSrc":"15497:13:51","nodeType":"YulTypedName","src":"15497:13:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"15645:4:51","nodeType":"YulIdentifier","src":"15645:4:51"},{"kind":"number","nativeSrc":"15651:1:51","nodeType":"YulLiteral","src":"15651:1:51","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"15641:3:51","nodeType":"YulIdentifier","src":"15641:3:51"},"nativeSrc":"15641:12:51","nodeType":"YulFunctionCall","src":"15641:12:51"},{"name":"memberValue_2","nativeSrc":"15655:13:51","nodeType":"YulIdentifier","src":"15655:13:51"},{"name":"memberValue_3","nativeSrc":"15670:13:51","nodeType":"YulIdentifier","src":"15670:13:51"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"15583:57:51","nodeType":"YulIdentifier","src":"15583:57:51"},"nativeSrc":"15583:101:51","nodeType":"YulFunctionCall","src":"15583:101:51"},"nativeSrc":"15583:101:51","nodeType":"YulExpressionStatement","src":"15583:101:51"}]},"name":"update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage","nativeSrc":"14311:1379:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"14423:4:51","nodeType":"YulTypedName","src":"14423:4:51","type":""},{"name":"value","nativeSrc":"14429:5:51","nodeType":"YulTypedName","src":"14429:5:51","type":""}],"src":"14311:1379:51"},{"body":{"nativeSrc":"15744:233:51","nodeType":"YulBlock","src":"15744:233:51","statements":[{"nativeSrc":"15754:17:51","nodeType":"YulAssignment","src":"15754:17:51","value":{"arguments":[{"name":"x","nativeSrc":"15766:1:51","nodeType":"YulIdentifier","src":"15766:1:51"},{"name":"y","nativeSrc":"15769:1:51","nodeType":"YulIdentifier","src":"15769:1:51"}],"functionName":{"name":"sub","nativeSrc":"15762:3:51","nodeType":"YulIdentifier","src":"15762:3:51"},"nativeSrc":"15762:9:51","nodeType":"YulFunctionCall","src":"15762:9:51"},"variableNames":[{"name":"diff","nativeSrc":"15754:4:51","nodeType":"YulIdentifier","src":"15754:4:51"}]},{"body":{"nativeSrc":"15803:168:51","nodeType":"YulBlock","src":"15803:168:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15824:1:51","nodeType":"YulLiteral","src":"15824:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"15827:77:51","nodeType":"YulLiteral","src":"15827:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15817:6:51","nodeType":"YulIdentifier","src":"15817:6:51"},"nativeSrc":"15817:88:51","nodeType":"YulFunctionCall","src":"15817:88:51"},"nativeSrc":"15817:88:51","nodeType":"YulExpressionStatement","src":"15817:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15925:1:51","nodeType":"YulLiteral","src":"15925:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"15928:4:51","nodeType":"YulLiteral","src":"15928:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"15918:6:51","nodeType":"YulIdentifier","src":"15918:6:51"},"nativeSrc":"15918:15:51","nodeType":"YulFunctionCall","src":"15918:15:51"},"nativeSrc":"15918:15:51","nodeType":"YulExpressionStatement","src":"15918:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15953:1:51","nodeType":"YulLiteral","src":"15953:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"15956:4:51","nodeType":"YulLiteral","src":"15956:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15946:6:51","nodeType":"YulIdentifier","src":"15946:6:51"},"nativeSrc":"15946:15:51","nodeType":"YulFunctionCall","src":"15946:15:51"},"nativeSrc":"15946:15:51","nodeType":"YulExpressionStatement","src":"15946:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"15786:4:51","nodeType":"YulIdentifier","src":"15786:4:51"},{"name":"x","nativeSrc":"15792:1:51","nodeType":"YulIdentifier","src":"15792:1:51"}],"functionName":{"name":"gt","nativeSrc":"15783:2:51","nodeType":"YulIdentifier","src":"15783:2:51"},"nativeSrc":"15783:11:51","nodeType":"YulFunctionCall","src":"15783:11:51"},"nativeSrc":"15780:191:51","nodeType":"YulIf","src":"15780:191:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"15695:282:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"15726:1:51","nodeType":"YulTypedName","src":"15726:1:51","type":""},{"name":"y","nativeSrc":"15729:1:51","nodeType":"YulTypedName","src":"15729:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"15735:4:51","nodeType":"YulTypedName","src":"15735:4:51","type":""}],"src":"15695:282:51"},{"body":{"nativeSrc":"16139:241:51","nodeType":"YulBlock","src":"16139:241:51","statements":[{"nativeSrc":"16149:26:51","nodeType":"YulAssignment","src":"16149:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16161:9:51","nodeType":"YulIdentifier","src":"16161:9:51"},{"kind":"number","nativeSrc":"16172:2:51","nodeType":"YulLiteral","src":"16172:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16157:3:51","nodeType":"YulIdentifier","src":"16157:3:51"},"nativeSrc":"16157:18:51","nodeType":"YulFunctionCall","src":"16157:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16149:4:51","nodeType":"YulIdentifier","src":"16149:4:51"}]},{"nativeSrc":"16184:52:51","nodeType":"YulVariableDeclaration","src":"16184:52:51","value":{"kind":"number","nativeSrc":"16194:42:51","nodeType":"YulLiteral","src":"16194:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16188:2:51","nodeType":"YulTypedName","src":"16188:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16252:9:51","nodeType":"YulIdentifier","src":"16252:9:51"},{"arguments":[{"name":"value0","nativeSrc":"16267:6:51","nodeType":"YulIdentifier","src":"16267:6:51"},{"name":"_1","nativeSrc":"16275:2:51","nodeType":"YulIdentifier","src":"16275:2:51"}],"functionName":{"name":"and","nativeSrc":"16263:3:51","nodeType":"YulIdentifier","src":"16263:3:51"},"nativeSrc":"16263:15:51","nodeType":"YulFunctionCall","src":"16263:15:51"}],"functionName":{"name":"mstore","nativeSrc":"16245:6:51","nodeType":"YulIdentifier","src":"16245:6:51"},"nativeSrc":"16245:34:51","nodeType":"YulFunctionCall","src":"16245:34:51"},"nativeSrc":"16245:34:51","nodeType":"YulExpressionStatement","src":"16245:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16299:9:51","nodeType":"YulIdentifier","src":"16299:9:51"},{"kind":"number","nativeSrc":"16310:2:51","nodeType":"YulLiteral","src":"16310:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16295:3:51","nodeType":"YulIdentifier","src":"16295:3:51"},"nativeSrc":"16295:18:51","nodeType":"YulFunctionCall","src":"16295:18:51"},{"arguments":[{"name":"value1","nativeSrc":"16319:6:51","nodeType":"YulIdentifier","src":"16319:6:51"},{"name":"_1","nativeSrc":"16327:2:51","nodeType":"YulIdentifier","src":"16327:2:51"}],"functionName":{"name":"and","nativeSrc":"16315:3:51","nodeType":"YulIdentifier","src":"16315:3:51"},"nativeSrc":"16315:15:51","nodeType":"YulFunctionCall","src":"16315:15:51"}],"functionName":{"name":"mstore","nativeSrc":"16288:6:51","nodeType":"YulIdentifier","src":"16288:6:51"},"nativeSrc":"16288:43:51","nodeType":"YulFunctionCall","src":"16288:43:51"},"nativeSrc":"16288:43:51","nodeType":"YulExpressionStatement","src":"16288:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16351:9:51","nodeType":"YulIdentifier","src":"16351:9:51"},{"kind":"number","nativeSrc":"16362:2:51","nodeType":"YulLiteral","src":"16362:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16347:3:51","nodeType":"YulIdentifier","src":"16347:3:51"},"nativeSrc":"16347:18:51","nodeType":"YulFunctionCall","src":"16347:18:51"},{"name":"value2","nativeSrc":"16367:6:51","nodeType":"YulIdentifier","src":"16367:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16340:6:51","nodeType":"YulIdentifier","src":"16340:6:51"},"nativeSrc":"16340:34:51","nodeType":"YulFunctionCall","src":"16340:34:51"},"nativeSrc":"16340:34:51","nodeType":"YulExpressionStatement","src":"16340:34:51"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"15982:398:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16092:9:51","nodeType":"YulTypedName","src":"16092:9:51","type":""},{"name":"value2","nativeSrc":"16103:6:51","nodeType":"YulTypedName","src":"16103:6:51","type":""},{"name":"value1","nativeSrc":"16111:6:51","nodeType":"YulTypedName","src":"16111:6:51","type":""},{"name":"value0","nativeSrc":"16119:6:51","nodeType":"YulTypedName","src":"16119:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16130:4:51","nodeType":"YulTypedName","src":"16130:4:51","type":""}],"src":"15982:398:51"},{"body":{"nativeSrc":"16514:168:51","nodeType":"YulBlock","src":"16514:168:51","statements":[{"nativeSrc":"16524:26:51","nodeType":"YulAssignment","src":"16524:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16536:9:51","nodeType":"YulIdentifier","src":"16536:9:51"},{"kind":"number","nativeSrc":"16547:2:51","nodeType":"YulLiteral","src":"16547:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16532:3:51","nodeType":"YulIdentifier","src":"16532:3:51"},"nativeSrc":"16532:18:51","nodeType":"YulFunctionCall","src":"16532:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16524:4:51","nodeType":"YulIdentifier","src":"16524:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16566:9:51","nodeType":"YulIdentifier","src":"16566:9:51"},{"name":"value0","nativeSrc":"16577:6:51","nodeType":"YulIdentifier","src":"16577:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16559:6:51","nodeType":"YulIdentifier","src":"16559:6:51"},"nativeSrc":"16559:25:51","nodeType":"YulFunctionCall","src":"16559:25:51"},"nativeSrc":"16559:25:51","nodeType":"YulExpressionStatement","src":"16559:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16604:9:51","nodeType":"YulIdentifier","src":"16604:9:51"},{"kind":"number","nativeSrc":"16615:2:51","nodeType":"YulLiteral","src":"16615:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16600:3:51","nodeType":"YulIdentifier","src":"16600:3:51"},"nativeSrc":"16600:18:51","nodeType":"YulFunctionCall","src":"16600:18:51"},{"arguments":[{"name":"value1","nativeSrc":"16624:6:51","nodeType":"YulIdentifier","src":"16624:6:51"},{"kind":"number","nativeSrc":"16632:42:51","nodeType":"YulLiteral","src":"16632:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16620:3:51","nodeType":"YulIdentifier","src":"16620:3:51"},"nativeSrc":"16620:55:51","nodeType":"YulFunctionCall","src":"16620:55:51"}],"functionName":{"name":"mstore","nativeSrc":"16593:6:51","nodeType":"YulIdentifier","src":"16593:6:51"},"nativeSrc":"16593:83:51","nodeType":"YulFunctionCall","src":"16593:83:51"},"nativeSrc":"16593:83:51","nodeType":"YulExpressionStatement","src":"16593:83:51"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"16385:297:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16475:9:51","nodeType":"YulTypedName","src":"16475:9:51","type":""},{"name":"value1","nativeSrc":"16486:6:51","nodeType":"YulTypedName","src":"16486:6:51","type":""},{"name":"value0","nativeSrc":"16494:6:51","nodeType":"YulTypedName","src":"16494:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16505:4:51","nodeType":"YulTypedName","src":"16505:4:51","type":""}],"src":"16385:297:51"},{"body":{"nativeSrc":"16816:168:51","nodeType":"YulBlock","src":"16816:168:51","statements":[{"nativeSrc":"16826:26:51","nodeType":"YulAssignment","src":"16826:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16838:9:51","nodeType":"YulIdentifier","src":"16838:9:51"},{"kind":"number","nativeSrc":"16849:2:51","nodeType":"YulLiteral","src":"16849:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16834:3:51","nodeType":"YulIdentifier","src":"16834:3:51"},"nativeSrc":"16834:18:51","nodeType":"YulFunctionCall","src":"16834:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16826:4:51","nodeType":"YulIdentifier","src":"16826:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16868:9:51","nodeType":"YulIdentifier","src":"16868:9:51"},{"arguments":[{"name":"value0","nativeSrc":"16883:6:51","nodeType":"YulIdentifier","src":"16883:6:51"},{"kind":"number","nativeSrc":"16891:42:51","nodeType":"YulLiteral","src":"16891:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16879:3:51","nodeType":"YulIdentifier","src":"16879:3:51"},"nativeSrc":"16879:55:51","nodeType":"YulFunctionCall","src":"16879:55:51"}],"functionName":{"name":"mstore","nativeSrc":"16861:6:51","nodeType":"YulIdentifier","src":"16861:6:51"},"nativeSrc":"16861:74:51","nodeType":"YulFunctionCall","src":"16861:74:51"},"nativeSrc":"16861:74:51","nodeType":"YulExpressionStatement","src":"16861:74:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16955:9:51","nodeType":"YulIdentifier","src":"16955:9:51"},{"kind":"number","nativeSrc":"16966:2:51","nodeType":"YulLiteral","src":"16966:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16951:3:51","nodeType":"YulIdentifier","src":"16951:3:51"},"nativeSrc":"16951:18:51","nodeType":"YulFunctionCall","src":"16951:18:51"},{"name":"value1","nativeSrc":"16971:6:51","nodeType":"YulIdentifier","src":"16971:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16944:6:51","nodeType":"YulIdentifier","src":"16944:6:51"},"nativeSrc":"16944:34:51","nodeType":"YulFunctionCall","src":"16944:34:51"},"nativeSrc":"16944:34:51","nodeType":"YulExpressionStatement","src":"16944:34:51"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"16687:297:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16777:9:51","nodeType":"YulTypedName","src":"16777:9:51","type":""},{"name":"value1","nativeSrc":"16788:6:51","nodeType":"YulTypedName","src":"16788:6:51","type":""},{"name":"value0","nativeSrc":"16796:6:51","nodeType":"YulTypedName","src":"16796:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16807:4:51","nodeType":"YulTypedName","src":"16807:4:51","type":""}],"src":"16687:297:51"},{"body":{"nativeSrc":"17146:241:51","nodeType":"YulBlock","src":"17146:241:51","statements":[{"nativeSrc":"17156:26:51","nodeType":"YulAssignment","src":"17156:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"17168:9:51","nodeType":"YulIdentifier","src":"17168:9:51"},{"kind":"number","nativeSrc":"17179:2:51","nodeType":"YulLiteral","src":"17179:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17164:3:51","nodeType":"YulIdentifier","src":"17164:3:51"},"nativeSrc":"17164:18:51","nodeType":"YulFunctionCall","src":"17164:18:51"},"variableNames":[{"name":"tail","nativeSrc":"17156:4:51","nodeType":"YulIdentifier","src":"17156:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17198:9:51","nodeType":"YulIdentifier","src":"17198:9:51"},{"name":"value0","nativeSrc":"17209:6:51","nodeType":"YulIdentifier","src":"17209:6:51"}],"functionName":{"name":"mstore","nativeSrc":"17191:6:51","nodeType":"YulIdentifier","src":"17191:6:51"},"nativeSrc":"17191:25:51","nodeType":"YulFunctionCall","src":"17191:25:51"},"nativeSrc":"17191:25:51","nodeType":"YulExpressionStatement","src":"17191:25:51"},{"nativeSrc":"17225:52:51","nodeType":"YulVariableDeclaration","src":"17225:52:51","value":{"kind":"number","nativeSrc":"17235:42:51","nodeType":"YulLiteral","src":"17235:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17229:2:51","nodeType":"YulTypedName","src":"17229:2:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17297:9:51","nodeType":"YulIdentifier","src":"17297:9:51"},{"kind":"number","nativeSrc":"17308:2:51","nodeType":"YulLiteral","src":"17308:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17293:3:51","nodeType":"YulIdentifier","src":"17293:3:51"},"nativeSrc":"17293:18:51","nodeType":"YulFunctionCall","src":"17293:18:51"},{"arguments":[{"name":"value1","nativeSrc":"17317:6:51","nodeType":"YulIdentifier","src":"17317:6:51"},{"name":"_1","nativeSrc":"17325:2:51","nodeType":"YulIdentifier","src":"17325:2:51"}],"functionName":{"name":"and","nativeSrc":"17313:3:51","nodeType":"YulIdentifier","src":"17313:3:51"},"nativeSrc":"17313:15:51","nodeType":"YulFunctionCall","src":"17313:15:51"}],"functionName":{"name":"mstore","nativeSrc":"17286:6:51","nodeType":"YulIdentifier","src":"17286:6:51"},"nativeSrc":"17286:43:51","nodeType":"YulFunctionCall","src":"17286:43:51"},"nativeSrc":"17286:43:51","nodeType":"YulExpressionStatement","src":"17286:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17349:9:51","nodeType":"YulIdentifier","src":"17349:9:51"},{"kind":"number","nativeSrc":"17360:2:51","nodeType":"YulLiteral","src":"17360:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17345:3:51","nodeType":"YulIdentifier","src":"17345:3:51"},"nativeSrc":"17345:18:51","nodeType":"YulFunctionCall","src":"17345:18:51"},{"arguments":[{"name":"value2","nativeSrc":"17369:6:51","nodeType":"YulIdentifier","src":"17369:6:51"},{"name":"_1","nativeSrc":"17377:2:51","nodeType":"YulIdentifier","src":"17377:2:51"}],"functionName":{"name":"and","nativeSrc":"17365:3:51","nodeType":"YulIdentifier","src":"17365:3:51"},"nativeSrc":"17365:15:51","nodeType":"YulFunctionCall","src":"17365:15:51"}],"functionName":{"name":"mstore","nativeSrc":"17338:6:51","nodeType":"YulIdentifier","src":"17338:6:51"},"nativeSrc":"17338:43:51","nodeType":"YulFunctionCall","src":"17338:43:51"},"nativeSrc":"17338:43:51","nodeType":"YulExpressionStatement","src":"17338:43:51"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"16989:398:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17099:9:51","nodeType":"YulTypedName","src":"17099:9:51","type":""},{"name":"value2","nativeSrc":"17110:6:51","nodeType":"YulTypedName","src":"17110:6:51","type":""},{"name":"value1","nativeSrc":"17118:6:51","nodeType":"YulTypedName","src":"17118:6:51","type":""},{"name":"value0","nativeSrc":"17126:6:51","nodeType":"YulTypedName","src":"17126:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17137:4:51","nodeType":"YulTypedName","src":"17137:4:51","type":""}],"src":"16989:398:51"},{"body":{"nativeSrc":"17483:865:51","nodeType":"YulBlock","src":"17483:865:51","statements":[{"body":{"nativeSrc":"17529:16:51","nodeType":"YulBlock","src":"17529:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17538:1:51","nodeType":"YulLiteral","src":"17538:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17541:1:51","nodeType":"YulLiteral","src":"17541:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17531:6:51","nodeType":"YulIdentifier","src":"17531:6:51"},"nativeSrc":"17531:12:51","nodeType":"YulFunctionCall","src":"17531:12:51"},"nativeSrc":"17531:12:51","nodeType":"YulExpressionStatement","src":"17531:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17504:7:51","nodeType":"YulIdentifier","src":"17504:7:51"},{"name":"headStart","nativeSrc":"17513:9:51","nodeType":"YulIdentifier","src":"17513:9:51"}],"functionName":{"name":"sub","nativeSrc":"17500:3:51","nodeType":"YulIdentifier","src":"17500:3:51"},"nativeSrc":"17500:23:51","nodeType":"YulFunctionCall","src":"17500:23:51"},{"kind":"number","nativeSrc":"17525:2:51","nodeType":"YulLiteral","src":"17525:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17496:3:51","nodeType":"YulIdentifier","src":"17496:3:51"},"nativeSrc":"17496:32:51","nodeType":"YulFunctionCall","src":"17496:32:51"},"nativeSrc":"17493:52:51","nodeType":"YulIf","src":"17493:52:51"},{"nativeSrc":"17554:30:51","nodeType":"YulVariableDeclaration","src":"17554:30:51","value":{"arguments":[{"name":"headStart","nativeSrc":"17574:9:51","nodeType":"YulIdentifier","src":"17574:9:51"}],"functionName":{"name":"mload","nativeSrc":"17568:5:51","nodeType":"YulIdentifier","src":"17568:5:51"},"nativeSrc":"17568:16:51","nodeType":"YulFunctionCall","src":"17568:16:51"},"variables":[{"name":"offset","nativeSrc":"17558:6:51","nodeType":"YulTypedName","src":"17558:6:51","type":""}]},{"nativeSrc":"17593:28:51","nodeType":"YulVariableDeclaration","src":"17593:28:51","value":{"kind":"number","nativeSrc":"17603:18:51","nodeType":"YulLiteral","src":"17603:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17597:2:51","nodeType":"YulTypedName","src":"17597:2:51","type":""}]},{"body":{"nativeSrc":"17648:16:51","nodeType":"YulBlock","src":"17648:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17657:1:51","nodeType":"YulLiteral","src":"17657:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17660:1:51","nodeType":"YulLiteral","src":"17660:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17650:6:51","nodeType":"YulIdentifier","src":"17650:6:51"},"nativeSrc":"17650:12:51","nodeType":"YulFunctionCall","src":"17650:12:51"},"nativeSrc":"17650:12:51","nodeType":"YulExpressionStatement","src":"17650:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"17636:6:51","nodeType":"YulIdentifier","src":"17636:6:51"},{"name":"_1","nativeSrc":"17644:2:51","nodeType":"YulIdentifier","src":"17644:2:51"}],"functionName":{"name":"gt","nativeSrc":"17633:2:51","nodeType":"YulIdentifier","src":"17633:2:51"},"nativeSrc":"17633:14:51","nodeType":"YulFunctionCall","src":"17633:14:51"},"nativeSrc":"17630:34:51","nodeType":"YulIf","src":"17630:34:51"},{"nativeSrc":"17673:32:51","nodeType":"YulVariableDeclaration","src":"17673:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"17687:9:51","nodeType":"YulIdentifier","src":"17687:9:51"},{"name":"offset","nativeSrc":"17698:6:51","nodeType":"YulIdentifier","src":"17698:6:51"}],"functionName":{"name":"add","nativeSrc":"17683:3:51","nodeType":"YulIdentifier","src":"17683:3:51"},"nativeSrc":"17683:22:51","nodeType":"YulFunctionCall","src":"17683:22:51"},"variables":[{"name":"_2","nativeSrc":"17677:2:51","nodeType":"YulTypedName","src":"17677:2:51","type":""}]},{"body":{"nativeSrc":"17753:16:51","nodeType":"YulBlock","src":"17753:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17762:1:51","nodeType":"YulLiteral","src":"17762:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17765:1:51","nodeType":"YulLiteral","src":"17765:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17755:6:51","nodeType":"YulIdentifier","src":"17755:6:51"},"nativeSrc":"17755:12:51","nodeType":"YulFunctionCall","src":"17755:12:51"},"nativeSrc":"17755:12:51","nodeType":"YulExpressionStatement","src":"17755:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"17732:2:51","nodeType":"YulIdentifier","src":"17732:2:51"},{"kind":"number","nativeSrc":"17736:4:51","nodeType":"YulLiteral","src":"17736:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"17728:3:51","nodeType":"YulIdentifier","src":"17728:3:51"},"nativeSrc":"17728:13:51","nodeType":"YulFunctionCall","src":"17728:13:51"},{"name":"dataEnd","nativeSrc":"17743:7:51","nodeType":"YulIdentifier","src":"17743:7:51"}],"functionName":{"name":"slt","nativeSrc":"17724:3:51","nodeType":"YulIdentifier","src":"17724:3:51"},"nativeSrc":"17724:27:51","nodeType":"YulFunctionCall","src":"17724:27:51"}],"functionName":{"name":"iszero","nativeSrc":"17717:6:51","nodeType":"YulIdentifier","src":"17717:6:51"},"nativeSrc":"17717:35:51","nodeType":"YulFunctionCall","src":"17717:35:51"},"nativeSrc":"17714:55:51","nodeType":"YulIf","src":"17714:55:51"},{"nativeSrc":"17778:19:51","nodeType":"YulVariableDeclaration","src":"17778:19:51","value":{"arguments":[{"name":"_2","nativeSrc":"17794:2:51","nodeType":"YulIdentifier","src":"17794:2:51"}],"functionName":{"name":"mload","nativeSrc":"17788:5:51","nodeType":"YulIdentifier","src":"17788:5:51"},"nativeSrc":"17788:9:51","nodeType":"YulFunctionCall","src":"17788:9:51"},"variables":[{"name":"_3","nativeSrc":"17782:2:51","nodeType":"YulTypedName","src":"17782:2:51","type":""}]},{"body":{"nativeSrc":"17820:22:51","nodeType":"YulBlock","src":"17820:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"17822:16:51","nodeType":"YulIdentifier","src":"17822:16:51"},"nativeSrc":"17822:18:51","nodeType":"YulFunctionCall","src":"17822:18:51"},"nativeSrc":"17822:18:51","nodeType":"YulExpressionStatement","src":"17822:18:51"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"17812:2:51","nodeType":"YulIdentifier","src":"17812:2:51"},{"name":"_1","nativeSrc":"17816:2:51","nodeType":"YulIdentifier","src":"17816:2:51"}],"functionName":{"name":"gt","nativeSrc":"17809:2:51","nodeType":"YulIdentifier","src":"17809:2:51"},"nativeSrc":"17809:10:51","nodeType":"YulFunctionCall","src":"17809:10:51"},"nativeSrc":"17806:36:51","nodeType":"YulIf","src":"17806:36:51"},{"nativeSrc":"17851:76:51","nodeType":"YulVariableDeclaration","src":"17851:76:51","value":{"kind":"number","nativeSrc":"17861:66:51","nodeType":"YulLiteral","src":"17861:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"17855:2:51","nodeType":"YulTypedName","src":"17855:2:51","type":""}]},{"nativeSrc":"17936:23:51","nodeType":"YulVariableDeclaration","src":"17936:23:51","value":{"arguments":[{"kind":"number","nativeSrc":"17956:2:51","nodeType":"YulLiteral","src":"17956:2:51","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"17950:5:51","nodeType":"YulIdentifier","src":"17950:5:51"},"nativeSrc":"17950:9:51","nodeType":"YulFunctionCall","src":"17950:9:51"},"variables":[{"name":"memPtr","nativeSrc":"17940:6:51","nodeType":"YulTypedName","src":"17940:6:51","type":""}]},{"nativeSrc":"17968:71:51","nodeType":"YulVariableDeclaration","src":"17968:71:51","value":{"arguments":[{"name":"memPtr","nativeSrc":"17990:6:51","nodeType":"YulIdentifier","src":"17990:6:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"18014:2:51","nodeType":"YulIdentifier","src":"18014:2:51"},{"kind":"number","nativeSrc":"18018:4:51","nodeType":"YulLiteral","src":"18018:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"18010:3:51","nodeType":"YulIdentifier","src":"18010:3:51"},"nativeSrc":"18010:13:51","nodeType":"YulFunctionCall","src":"18010:13:51"},{"name":"_4","nativeSrc":"18025:2:51","nodeType":"YulIdentifier","src":"18025:2:51"}],"functionName":{"name":"and","nativeSrc":"18006:3:51","nodeType":"YulIdentifier","src":"18006:3:51"},"nativeSrc":"18006:22:51","nodeType":"YulFunctionCall","src":"18006:22:51"},{"kind":"number","nativeSrc":"18030:2:51","nodeType":"YulLiteral","src":"18030:2:51","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"18002:3:51","nodeType":"YulIdentifier","src":"18002:3:51"},"nativeSrc":"18002:31:51","nodeType":"YulFunctionCall","src":"18002:31:51"},{"name":"_4","nativeSrc":"18035:2:51","nodeType":"YulIdentifier","src":"18035:2:51"}],"functionName":{"name":"and","nativeSrc":"17998:3:51","nodeType":"YulIdentifier","src":"17998:3:51"},"nativeSrc":"17998:40:51","nodeType":"YulFunctionCall","src":"17998:40:51"}],"functionName":{"name":"add","nativeSrc":"17986:3:51","nodeType":"YulIdentifier","src":"17986:3:51"},"nativeSrc":"17986:53:51","nodeType":"YulFunctionCall","src":"17986:53:51"},"variables":[{"name":"newFreePtr","nativeSrc":"17972:10:51","nodeType":"YulTypedName","src":"17972:10:51","type":""}]},{"body":{"nativeSrc":"18098:22:51","nodeType":"YulBlock","src":"18098:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"18100:16:51","nodeType":"YulIdentifier","src":"18100:16:51"},"nativeSrc":"18100:18:51","nodeType":"YulFunctionCall","src":"18100:18:51"},"nativeSrc":"18100:18:51","nodeType":"YulExpressionStatement","src":"18100:18:51"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"18057:10:51","nodeType":"YulIdentifier","src":"18057:10:51"},{"name":"_1","nativeSrc":"18069:2:51","nodeType":"YulIdentifier","src":"18069:2:51"}],"functionName":{"name":"gt","nativeSrc":"18054:2:51","nodeType":"YulIdentifier","src":"18054:2:51"},"nativeSrc":"18054:18:51","nodeType":"YulFunctionCall","src":"18054:18:51"},{"arguments":[{"name":"newFreePtr","nativeSrc":"18077:10:51","nodeType":"YulIdentifier","src":"18077:10:51"},{"name":"memPtr","nativeSrc":"18089:6:51","nodeType":"YulIdentifier","src":"18089:6:51"}],"functionName":{"name":"lt","nativeSrc":"18074:2:51","nodeType":"YulIdentifier","src":"18074:2:51"},"nativeSrc":"18074:22:51","nodeType":"YulFunctionCall","src":"18074:22:51"}],"functionName":{"name":"or","nativeSrc":"18051:2:51","nodeType":"YulIdentifier","src":"18051:2:51"},"nativeSrc":"18051:46:51","nodeType":"YulFunctionCall","src":"18051:46:51"},"nativeSrc":"18048:72:51","nodeType":"YulIf","src":"18048:72:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18136:2:51","nodeType":"YulLiteral","src":"18136:2:51","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"18140:10:51","nodeType":"YulIdentifier","src":"18140:10:51"}],"functionName":{"name":"mstore","nativeSrc":"18129:6:51","nodeType":"YulIdentifier","src":"18129:6:51"},"nativeSrc":"18129:22:51","nodeType":"YulFunctionCall","src":"18129:22:51"},"nativeSrc":"18129:22:51","nodeType":"YulExpressionStatement","src":"18129:22:51"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"18167:6:51","nodeType":"YulIdentifier","src":"18167:6:51"},{"name":"_3","nativeSrc":"18175:2:51","nodeType":"YulIdentifier","src":"18175:2:51"}],"functionName":{"name":"mstore","nativeSrc":"18160:6:51","nodeType":"YulIdentifier","src":"18160:6:51"},"nativeSrc":"18160:18:51","nodeType":"YulFunctionCall","src":"18160:18:51"},"nativeSrc":"18160:18:51","nodeType":"YulExpressionStatement","src":"18160:18:51"},{"body":{"nativeSrc":"18224:16:51","nodeType":"YulBlock","src":"18224:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18233:1:51","nodeType":"YulLiteral","src":"18233:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"18236:1:51","nodeType":"YulLiteral","src":"18236:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18226:6:51","nodeType":"YulIdentifier","src":"18226:6:51"},"nativeSrc":"18226:12:51","nodeType":"YulFunctionCall","src":"18226:12:51"},"nativeSrc":"18226:12:51","nodeType":"YulExpressionStatement","src":"18226:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"18201:2:51","nodeType":"YulIdentifier","src":"18201:2:51"},{"name":"_3","nativeSrc":"18205:2:51","nodeType":"YulIdentifier","src":"18205:2:51"}],"functionName":{"name":"add","nativeSrc":"18197:3:51","nodeType":"YulIdentifier","src":"18197:3:51"},"nativeSrc":"18197:11:51","nodeType":"YulFunctionCall","src":"18197:11:51"},{"kind":"number","nativeSrc":"18210:2:51","nodeType":"YulLiteral","src":"18210:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18193:3:51","nodeType":"YulIdentifier","src":"18193:3:51"},"nativeSrc":"18193:20:51","nodeType":"YulFunctionCall","src":"18193:20:51"},{"name":"dataEnd","nativeSrc":"18215:7:51","nodeType":"YulIdentifier","src":"18215:7:51"}],"functionName":{"name":"gt","nativeSrc":"18190:2:51","nodeType":"YulIdentifier","src":"18190:2:51"},"nativeSrc":"18190:33:51","nodeType":"YulFunctionCall","src":"18190:33:51"},"nativeSrc":"18187:53:51","nodeType":"YulIf","src":"18187:53:51"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"18288:2:51","nodeType":"YulIdentifier","src":"18288:2:51"},{"kind":"number","nativeSrc":"18292:2:51","nodeType":"YulLiteral","src":"18292:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18284:3:51","nodeType":"YulIdentifier","src":"18284:3:51"},"nativeSrc":"18284:11:51","nodeType":"YulFunctionCall","src":"18284:11:51"},{"arguments":[{"name":"memPtr","nativeSrc":"18301:6:51","nodeType":"YulIdentifier","src":"18301:6:51"},{"kind":"number","nativeSrc":"18309:2:51","nodeType":"YulLiteral","src":"18309:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18297:3:51","nodeType":"YulIdentifier","src":"18297:3:51"},"nativeSrc":"18297:15:51","nodeType":"YulFunctionCall","src":"18297:15:51"},{"name":"_3","nativeSrc":"18314:2:51","nodeType":"YulIdentifier","src":"18314:2:51"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"18249:34:51","nodeType":"YulIdentifier","src":"18249:34:51"},"nativeSrc":"18249:68:51","nodeType":"YulFunctionCall","src":"18249:68:51"},"nativeSrc":"18249:68:51","nodeType":"YulExpressionStatement","src":"18249:68:51"},{"nativeSrc":"18326:16:51","nodeType":"YulAssignment","src":"18326:16:51","value":{"name":"memPtr","nativeSrc":"18336:6:51","nodeType":"YulIdentifier","src":"18336:6:51"},"variableNames":[{"name":"value0","nativeSrc":"18326:6:51","nodeType":"YulIdentifier","src":"18326:6:51"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nativeSrc":"17392:956:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17449:9:51","nodeType":"YulTypedName","src":"17449:9:51","type":""},{"name":"dataEnd","nativeSrc":"17460:7:51","nodeType":"YulTypedName","src":"17460:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17472:6:51","nodeType":"YulTypedName","src":"17472:6:51","type":""}],"src":"17392:956:51"},{"body":{"nativeSrc":"18482:198:51","nodeType":"YulBlock","src":"18482:198:51","statements":[{"nativeSrc":"18492:26:51","nodeType":"YulAssignment","src":"18492:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"18504:9:51","nodeType":"YulIdentifier","src":"18504:9:51"},{"kind":"number","nativeSrc":"18515:2:51","nodeType":"YulLiteral","src":"18515:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18500:3:51","nodeType":"YulIdentifier","src":"18500:3:51"},"nativeSrc":"18500:18:51","nodeType":"YulFunctionCall","src":"18500:18:51"},"variableNames":[{"name":"tail","nativeSrc":"18492:4:51","nodeType":"YulIdentifier","src":"18492:4:51"}]},{"nativeSrc":"18527:52:51","nodeType":"YulVariableDeclaration","src":"18527:52:51","value":{"kind":"number","nativeSrc":"18537:42:51","nodeType":"YulLiteral","src":"18537:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18531:2:51","nodeType":"YulTypedName","src":"18531:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18595:9:51","nodeType":"YulIdentifier","src":"18595:9:51"},{"arguments":[{"name":"value0","nativeSrc":"18610:6:51","nodeType":"YulIdentifier","src":"18610:6:51"},{"name":"_1","nativeSrc":"18618:2:51","nodeType":"YulIdentifier","src":"18618:2:51"}],"functionName":{"name":"and","nativeSrc":"18606:3:51","nodeType":"YulIdentifier","src":"18606:3:51"},"nativeSrc":"18606:15:51","nodeType":"YulFunctionCall","src":"18606:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18588:6:51","nodeType":"YulIdentifier","src":"18588:6:51"},"nativeSrc":"18588:34:51","nodeType":"YulFunctionCall","src":"18588:34:51"},"nativeSrc":"18588:34:51","nodeType":"YulExpressionStatement","src":"18588:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18642:9:51","nodeType":"YulIdentifier","src":"18642:9:51"},{"kind":"number","nativeSrc":"18653:2:51","nodeType":"YulLiteral","src":"18653:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18638:3:51","nodeType":"YulIdentifier","src":"18638:3:51"},"nativeSrc":"18638:18:51","nodeType":"YulFunctionCall","src":"18638:18:51"},{"arguments":[{"name":"value1","nativeSrc":"18662:6:51","nodeType":"YulIdentifier","src":"18662:6:51"},{"name":"_1","nativeSrc":"18670:2:51","nodeType":"YulIdentifier","src":"18670:2:51"}],"functionName":{"name":"and","nativeSrc":"18658:3:51","nodeType":"YulIdentifier","src":"18658:3:51"},"nativeSrc":"18658:15:51","nodeType":"YulFunctionCall","src":"18658:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18631:6:51","nodeType":"YulIdentifier","src":"18631:6:51"},"nativeSrc":"18631:43:51","nodeType":"YulFunctionCall","src":"18631:43:51"},"nativeSrc":"18631:43:51","nodeType":"YulExpressionStatement","src":"18631:43:51"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"18353:327:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18443:9:51","nodeType":"YulTypedName","src":"18443:9:51","type":""},{"name":"value1","nativeSrc":"18454:6:51","nodeType":"YulTypedName","src":"18454:6:51","type":""},{"name":"value0","nativeSrc":"18462:6:51","nodeType":"YulTypedName","src":"18462:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18473:4:51","nodeType":"YulTypedName","src":"18473:4:51","type":""}],"src":"18353:327:51"},{"body":{"nativeSrc":"18888:309:51","nodeType":"YulBlock","src":"18888:309:51","statements":[{"nativeSrc":"18898:52:51","nodeType":"YulVariableDeclaration","src":"18898:52:51","value":{"kind":"number","nativeSrc":"18908:42:51","nodeType":"YulLiteral","src":"18908:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18902:2:51","nodeType":"YulTypedName","src":"18902:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18966:9:51","nodeType":"YulIdentifier","src":"18966:9:51"},{"arguments":[{"name":"value0","nativeSrc":"18981:6:51","nodeType":"YulIdentifier","src":"18981:6:51"},{"name":"_1","nativeSrc":"18989:2:51","nodeType":"YulIdentifier","src":"18989:2:51"}],"functionName":{"name":"and","nativeSrc":"18977:3:51","nodeType":"YulIdentifier","src":"18977:3:51"},"nativeSrc":"18977:15:51","nodeType":"YulFunctionCall","src":"18977:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18959:6:51","nodeType":"YulIdentifier","src":"18959:6:51"},"nativeSrc":"18959:34:51","nodeType":"YulFunctionCall","src":"18959:34:51"},"nativeSrc":"18959:34:51","nodeType":"YulExpressionStatement","src":"18959:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19013:9:51","nodeType":"YulIdentifier","src":"19013:9:51"},{"kind":"number","nativeSrc":"19024:2:51","nodeType":"YulLiteral","src":"19024:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19009:3:51","nodeType":"YulIdentifier","src":"19009:3:51"},"nativeSrc":"19009:18:51","nodeType":"YulFunctionCall","src":"19009:18:51"},{"arguments":[{"name":"value1","nativeSrc":"19033:6:51","nodeType":"YulIdentifier","src":"19033:6:51"},{"name":"_1","nativeSrc":"19041:2:51","nodeType":"YulIdentifier","src":"19041:2:51"}],"functionName":{"name":"and","nativeSrc":"19029:3:51","nodeType":"YulIdentifier","src":"19029:3:51"},"nativeSrc":"19029:15:51","nodeType":"YulFunctionCall","src":"19029:15:51"}],"functionName":{"name":"mstore","nativeSrc":"19002:6:51","nodeType":"YulIdentifier","src":"19002:6:51"},"nativeSrc":"19002:43:51","nodeType":"YulFunctionCall","src":"19002:43:51"},"nativeSrc":"19002:43:51","nodeType":"YulExpressionStatement","src":"19002:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19065:9:51","nodeType":"YulIdentifier","src":"19065:9:51"},{"kind":"number","nativeSrc":"19076:2:51","nodeType":"YulLiteral","src":"19076:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19061:3:51","nodeType":"YulIdentifier","src":"19061:3:51"},"nativeSrc":"19061:18:51","nodeType":"YulFunctionCall","src":"19061:18:51"},{"name":"value2","nativeSrc":"19081:6:51","nodeType":"YulIdentifier","src":"19081:6:51"}],"functionName":{"name":"mstore","nativeSrc":"19054:6:51","nodeType":"YulIdentifier","src":"19054:6:51"},"nativeSrc":"19054:34:51","nodeType":"YulFunctionCall","src":"19054:34:51"},"nativeSrc":"19054:34:51","nodeType":"YulExpressionStatement","src":"19054:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19108:9:51","nodeType":"YulIdentifier","src":"19108:9:51"},{"kind":"number","nativeSrc":"19119:2:51","nodeType":"YulLiteral","src":"19119:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19104:3:51","nodeType":"YulIdentifier","src":"19104:3:51"},"nativeSrc":"19104:18:51","nodeType":"YulFunctionCall","src":"19104:18:51"},{"kind":"number","nativeSrc":"19124:3:51","nodeType":"YulLiteral","src":"19124:3:51","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"19097:6:51","nodeType":"YulIdentifier","src":"19097:6:51"},"nativeSrc":"19097:31:51","nodeType":"YulFunctionCall","src":"19097:31:51"},"nativeSrc":"19097:31:51","nodeType":"YulExpressionStatement","src":"19097:31:51"},{"nativeSrc":"19137:54:51","nodeType":"YulAssignment","src":"19137:54:51","value":{"arguments":[{"name":"value3","nativeSrc":"19163:6:51","nodeType":"YulIdentifier","src":"19163:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"19175:9:51","nodeType":"YulIdentifier","src":"19175:9:51"},{"kind":"number","nativeSrc":"19186:3:51","nodeType":"YulLiteral","src":"19186:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19171:3:51","nodeType":"YulIdentifier","src":"19171:3:51"},"nativeSrc":"19171:19:51","nodeType":"YulFunctionCall","src":"19171:19:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"19145:17:51","nodeType":"YulIdentifier","src":"19145:17:51"},"nativeSrc":"19145:46:51","nodeType":"YulFunctionCall","src":"19145:46:51"},"variableNames":[{"name":"tail","nativeSrc":"19137:4:51","nodeType":"YulIdentifier","src":"19137:4:51"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"18685:512:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18833:9:51","nodeType":"YulTypedName","src":"18833:9:51","type":""},{"name":"value3","nativeSrc":"18844:6:51","nodeType":"YulTypedName","src":"18844:6:51","type":""},{"name":"value2","nativeSrc":"18852:6:51","nodeType":"YulTypedName","src":"18852:6:51","type":""},{"name":"value1","nativeSrc":"18860:6:51","nodeType":"YulTypedName","src":"18860:6:51","type":""},{"name":"value0","nativeSrc":"18868:6:51","nodeType":"YulTypedName","src":"18868:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18879:4:51","nodeType":"YulTypedName","src":"18879:4:51","type":""}],"src":"18685:512:51"},{"body":{"nativeSrc":"19282:169:51","nodeType":"YulBlock","src":"19282:169:51","statements":[{"body":{"nativeSrc":"19328:16:51","nodeType":"YulBlock","src":"19328:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19337:1:51","nodeType":"YulLiteral","src":"19337:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"19340:1:51","nodeType":"YulLiteral","src":"19340:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"19330:6:51","nodeType":"YulIdentifier","src":"19330:6:51"},"nativeSrc":"19330:12:51","nodeType":"YulFunctionCall","src":"19330:12:51"},"nativeSrc":"19330:12:51","nodeType":"YulExpressionStatement","src":"19330:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"19303:7:51","nodeType":"YulIdentifier","src":"19303:7:51"},{"name":"headStart","nativeSrc":"19312:9:51","nodeType":"YulIdentifier","src":"19312:9:51"}],"functionName":{"name":"sub","nativeSrc":"19299:3:51","nodeType":"YulIdentifier","src":"19299:3:51"},"nativeSrc":"19299:23:51","nodeType":"YulFunctionCall","src":"19299:23:51"},{"kind":"number","nativeSrc":"19324:2:51","nodeType":"YulLiteral","src":"19324:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"19295:3:51","nodeType":"YulIdentifier","src":"19295:3:51"},"nativeSrc":"19295:32:51","nodeType":"YulFunctionCall","src":"19295:32:51"},"nativeSrc":"19292:52:51","nodeType":"YulIf","src":"19292:52:51"},{"nativeSrc":"19353:29:51","nodeType":"YulVariableDeclaration","src":"19353:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"19372:9:51","nodeType":"YulIdentifier","src":"19372:9:51"}],"functionName":{"name":"mload","nativeSrc":"19366:5:51","nodeType":"YulIdentifier","src":"19366:5:51"},"nativeSrc":"19366:16:51","nodeType":"YulFunctionCall","src":"19366:16:51"},"variables":[{"name":"value","nativeSrc":"19357:5:51","nodeType":"YulTypedName","src":"19357:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"19415:5:51","nodeType":"YulIdentifier","src":"19415:5:51"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"19391:23:51","nodeType":"YulIdentifier","src":"19391:23:51"},"nativeSrc":"19391:30:51","nodeType":"YulFunctionCall","src":"19391:30:51"},"nativeSrc":"19391:30:51","nodeType":"YulExpressionStatement","src":"19391:30:51"},{"nativeSrc":"19430:15:51","nodeType":"YulAssignment","src":"19430:15:51","value":{"name":"value","nativeSrc":"19440:5:51","nodeType":"YulIdentifier","src":"19440:5:51"},"variableNames":[{"name":"value0","nativeSrc":"19430:6:51","nodeType":"YulIdentifier","src":"19430:6:51"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"19202:249:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19248:9:51","nodeType":"YulTypedName","src":"19248:9:51","type":""},{"name":"dataEnd","nativeSrc":"19259:7:51","nodeType":"YulTypedName","src":"19259:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"19271:6:51","nodeType":"YulTypedName","src":"19271:6:51","type":""}],"src":"19202:249:51"},{"body":{"nativeSrc":"19586:201:51","nodeType":"YulBlock","src":"19586:201:51","statements":[{"body":{"nativeSrc":"19624:16:51","nodeType":"YulBlock","src":"19624:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19633:1:51","nodeType":"YulLiteral","src":"19633:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"19636:1:51","nodeType":"YulLiteral","src":"19636:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"19626:6:51","nodeType":"YulIdentifier","src":"19626:6:51"},"nativeSrc":"19626:12:51","nodeType":"YulFunctionCall","src":"19626:12:51"},"nativeSrc":"19626:12:51","nodeType":"YulExpressionStatement","src":"19626:12:51"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"19602:10:51","nodeType":"YulIdentifier","src":"19602:10:51"},{"name":"endIndex","nativeSrc":"19614:8:51","nodeType":"YulIdentifier","src":"19614:8:51"}],"functionName":{"name":"gt","nativeSrc":"19599:2:51","nodeType":"YulIdentifier","src":"19599:2:51"},"nativeSrc":"19599:24:51","nodeType":"YulFunctionCall","src":"19599:24:51"},"nativeSrc":"19596:44:51","nodeType":"YulIf","src":"19596:44:51"},{"body":{"nativeSrc":"19673:16:51","nodeType":"YulBlock","src":"19673:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19682:1:51","nodeType":"YulLiteral","src":"19682:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"19685:1:51","nodeType":"YulLiteral","src":"19685:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"19675:6:51","nodeType":"YulIdentifier","src":"19675:6:51"},"nativeSrc":"19675:12:51","nodeType":"YulFunctionCall","src":"19675:12:51"},"nativeSrc":"19675:12:51","nodeType":"YulExpressionStatement","src":"19675:12:51"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"19655:8:51","nodeType":"YulIdentifier","src":"19655:8:51"},{"name":"length","nativeSrc":"19665:6:51","nodeType":"YulIdentifier","src":"19665:6:51"}],"functionName":{"name":"gt","nativeSrc":"19652:2:51","nodeType":"YulIdentifier","src":"19652:2:51"},"nativeSrc":"19652:20:51","nodeType":"YulFunctionCall","src":"19652:20:51"},"nativeSrc":"19649:40:51","nodeType":"YulIf","src":"19649:40:51"},{"nativeSrc":"19698:36:51","nodeType":"YulAssignment","src":"19698:36:51","value":{"arguments":[{"name":"offset","nativeSrc":"19715:6:51","nodeType":"YulIdentifier","src":"19715:6:51"},{"name":"startIndex","nativeSrc":"19723:10:51","nodeType":"YulIdentifier","src":"19723:10:51"}],"functionName":{"name":"add","nativeSrc":"19711:3:51","nodeType":"YulIdentifier","src":"19711:3:51"},"nativeSrc":"19711:23:51","nodeType":"YulFunctionCall","src":"19711:23:51"},"variableNames":[{"name":"offsetOut","nativeSrc":"19698:9:51","nodeType":"YulIdentifier","src":"19698:9:51"}]},{"nativeSrc":"19743:38:51","nodeType":"YulAssignment","src":"19743:38:51","value":{"arguments":[{"name":"endIndex","nativeSrc":"19760:8:51","nodeType":"YulIdentifier","src":"19760:8:51"},{"name":"startIndex","nativeSrc":"19770:10:51","nodeType":"YulIdentifier","src":"19770:10:51"}],"functionName":{"name":"sub","nativeSrc":"19756:3:51","nodeType":"YulIdentifier","src":"19756:3:51"},"nativeSrc":"19756:25:51","nodeType":"YulFunctionCall","src":"19756:25:51"},"variableNames":[{"name":"lengthOut","nativeSrc":"19743:9:51","nodeType":"YulIdentifier","src":"19743:9:51"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"19456:331:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"19520:6:51","nodeType":"YulTypedName","src":"19520:6:51","type":""},{"name":"length","nativeSrc":"19528:6:51","nodeType":"YulTypedName","src":"19528:6:51","type":""},{"name":"startIndex","nativeSrc":"19536:10:51","nodeType":"YulTypedName","src":"19536:10:51","type":""},{"name":"endIndex","nativeSrc":"19548:8:51","nodeType":"YulTypedName","src":"19548:8:51","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"19561:9:51","nodeType":"YulTypedName","src":"19561:9:51","type":""},{"name":"lengthOut","nativeSrc":"19572:9:51","nodeType":"YulTypedName","src":"19572:9:51","type":""}],"src":"19456:331:51"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        let _2 := 0xffffffffffffffff\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), and(value4, _2))\n        mstore(add(headStart, 160), 224)\n        let tail_1 := abi_encode_string(value5, add(headStart, 224))\n        mstore(add(headStart, 192), sub(tail_1, headStart))\n        tail := abi_encode_string(value6, tail_1)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 224) { revert(0, 0) }\n        value2 := _1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IRevocationRegistry_$5000(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, 1)\n        case 0 {\n            mstore(pos, and(slotValue, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, 0x20)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := ret\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function read_from_calldatat_uint16(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function read_from_calldatat_uint64(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function update_storage_value_offsett_uint64_to_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff), and(shl(96, value), 0xffffffffffffffff000000000000000000000000)))\n    }\n    function update_storage_value_offsett_uint64_to_t_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff), and(shl(160, value), 0xffffffffffffffff0000000000000000000000000000000000000000)))\n    }\n    function access_calldata_tail_string_calldata(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage(slot, value)\n    {\n        let _1 := and(read_from_calldatat_uint16(value), 0xffff)\n        let _2 := sload(slot)\n        sstore(slot, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000), _1))\n        let _3 := and(shl(16, read_from_calldatat_uint16(add(value, 32))), 0xffff0000)\n        sstore(slot, or(or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000), _1), _3))\n        sstore(slot, or(or(_3, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000), _1)), and(shl(32, read_from_calldatat_uint64(add(value, 64))), 0xffffffffffffffff00000000)))\n        update_storage_value_offsett_uint64_to_uint64(slot, read_from_calldatat_uint64(add(value, 96)))\n        update_storage_value_offsett_uint64_to_t_uint64(slot, read_from_calldatat_uint64(add(value, 128)))\n        let memberValue, memberValue_1 := access_calldata_tail_string_calldata(value, add(value, 160))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 1), memberValue, memberValue_1)\n        let memberValue_2, memberValue_3 := access_calldata_tail_string_calldata(value, add(value, 192))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 2), memberValue_2, memberValue_3)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1059":[{"length":32,"start":627},{"length":32,"start":815},{"length":32,"start":7933},{"length":32,"start":8069},{"length":32,"start":8365},{"length":32,"start":8427}],"4481":[{"length":32,"start":4391}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a22cb465116100a2578063d547741f11610071578063d547741f14610451578063e985e9c514610464578063f2fde38b14610477578063f5b541a61461048a57600080fd5b8063a22cb465146103f1578063b88d4fde14610404578063c87b56dd14610417578063d53913931461042a57600080fd5b806391d14854116100de57806391d14854146103bb57806395d89b41146103ce57806395f94bc4146103d6578063a0c76f62146103e957600080fd5b806370a082311461037f5780638bb9c5bf146103a05780638da5cb5b146103b357600080fd5b806331e66e1e116101715780634bae2be81161014b5780634bae2be8146102e657806354c7be061461030c578063572b6c051461031f5780636352211e1461036c57600080fd5b806331e66e1e146102aa57806342842e0e146102c057806342966c68146102d357600080fd5b8063095ea7b3116101ad578063095ea7b31461024957806323b872dd1461025e5780632b4c9f16146102715780632f2ff15d1461029757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004612365565b6104b1565b60405190151581526020015b60405180910390f35b6102046104cb565b6040516101f391906123f0565b61022461021f366004612403565b6104da565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61025c61025736600461243e565b6104ee565b005b61025c61026c36600461246a565b61050f565b7f0000000000000000000000000000000000000000000000000000000000000000610224565b61025c6102a53660046124ab565b610543565b6102b261057c565b6040516101f39291906124db565b61025c6102ce36600461246a565b61058f565b61025c6102e1366004612403565b6105bd565b6102f96102f4366004612403565b6107bb565b6040516101f39796959493929190612528565b61025c61031a36600461258f565b610942565b6101e761032d3660046125ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61022461037a366004612403565b6109ab565b61039261038d3660046125ef565b6109b9565b6040519081526020016101f3565b61025c6103ae366004612403565b6109cd565b6102246109eb565b6101e76103c93660046124ab565b610a12565b610204610a5d565b61025c6103e43660046125ef565b610a67565b610224610ac1565b61025c6103ff36600461261a565b610aeb565b61025c610412366004612648565b610b08565b610204610425366004612403565b610b42565b6103927f6d696e746572000000000000000000000000000000000000000000000000000081565b61025c61045f3660046124ab565b610b65565b6101e76104723660046126e7565b610b93565b61025c6104853660046125ef565b610be1565b6103927f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104c5826104bf610bfc565b90610c2a565b92915050565b60606104d5610d04565b905090565b60006104c5826104e8610d16565b90610d44565b61050b6104f9610dfd565b8383610503610d16565b929190610e07565b5050565b6000610519610dfd565b90506105258183611082565b61053d81858585610534610d16565b939291906111c3565b50505050565b600061054d610dfd565b90506105618161055b6114a1565b906114cf565b61057783838361056f61153a565b929190611568565b505050565b36600061058761163e565b915091509091565b6000610599610dfd565b90506105a58183611082565b61053d818585856105b4610d16565b93929190611649565b600081815260016020818152604080842090516105df93919091019101612768565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906127fc565b156107895760006106c7836106c1610d16565b9061168f565b90507fdead0000000000000000000000000000000000000000000000000000000000006106f2610d16565b6000858152602091909152604090205561070a610d16565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c010000000000000000000000008404821694740100000000000000000000000000000000000000009094049091169261083190612715565b80601f016020809104026020016040519081016040528092919081815260200182805461085d90612715565b80156108aa5780601f1061087f576101008083540402835291602001916108aa565b820191906000526020600020905b81548152906001019060200180831161088d57829003601f168201915b5050505050908060020180546108bf90612715565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90612715565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b5050505050905087565b6109767f6d696e74657200000000000000000000000000000000000000000000000000003361096f61153a565b91906116f8565b61098a8383610983610d16565b919061177e565b600082815260016020526040902081906109a48282612a44565b5050505050565b60006104c5826106c1610d16565b60006104c5826109c7610d16565b90611898565b6109e86109d8610dfd565b826109e161153a565b9190611914565b50565b60006104d56109f86114a1565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a568383610a2161153a565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104d56119b8565b610a7a610a72610dfd565b61055b6114a1565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104d5610ace6119ca565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b61050b610af6610dfd565b8383610b00610d16565b9291906119f8565b6000610b12610dfd565b9050610b1e8185611082565b610b3a818787878787610b2f610d16565b959493929190611b10565b505050505050565b6060610b50826106c1610d16565b506104c53083610b5e6119ca565b9190611b86565b6000610b6f610dfd565b9050610b7d8161055b6114a1565b610577838383610b8b61153a565b929190611c46565b6000610a568383610ba2610d16565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6109e8610bec610dfd565b82610bf56114a1565b9190611d10565b6000806104c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e612bea565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c7a575060006104c5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610ccb575060016104c5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104d5610d116119ca565b611e24565b6000806104c560017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1612bea565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610da8576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610df3575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166104c5565b60009150506104c5565b60006104d5611eba565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff8116610e66576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d9f565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610ed1576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d9f565b610edc868287612001565b610f39576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528216602482015260448101849052606401610d9f565b73ffffffffffffffffffffffffffffffffffffffff8416610f9e5774010000000000000000000000000000000000000000821615610f9957600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b61101f565b740100000000000000000000000000000000000000008217808314610fcf5760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b600081815260016020818152604080842090516110a493919091019101612768565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff85811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119291906127fc565b610577576105777f6f70657261746f720000000000000000000000000000000000000000000000008461096f61153a565b73ffffffffffffffffffffffffffffffffffffffff8216611210576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff811661126f576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d9f565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff16146112f3576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610d9f565b6112fe868587612001565b6113ad57740100000000000000000000000000000000000000008116158061134f5750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b156113ad576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606401610d9f565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff8085169182905585161461143e5773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806104c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd612bea565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461050b576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d9f565b6000806104c560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23612bea565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661053d5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b366000610587612076565b61165685858585856111c3565b73ffffffffffffffffffffffffffffffffffffffff82163b156109a4576109a484848484604051806020016040528060008152506121e0565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116ee576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101849052602401610d9f565b805b949350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610577576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610d9f565b73ffffffffffffffffffffffffffffffffffffffff82166117cb576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff161561182a576040517f753eceac00000000000000000000000000000000000000000000000000000000815260048101829052602401610d9f565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff82166118e7576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b61191f8382846116f8565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104d56119c56119ca565b6122f5565b6000806104c560017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5612bea565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a75576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d9f565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b611b1d87878787876111c3565b73ffffffffffffffffffffffffffffffffffffffff84163b15611b7d57611b7d8686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121e092505050565b50505050505050565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611c00573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116f09190810190612c24565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561053d5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611630565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611d7d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d9f565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461053d5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611e3590612715565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6190612715565b8015611eae5780601f10611e8357610100808354040283529160200191611eae565b820191906000526020600020905b815481529060010190602001808311611e9157829003601f168201915b50505050509050919050565b600033321480611eca5750601836105b15611ed457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611ff057506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff091906127fc565b15611ffa57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116f057505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b366000333214806120875750601836105b156120955750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806121ca575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca91906127fc565b156121d757610587612306565b50600091369150565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061223a908990899088908890600401612cef565b6020604051808303816000875af1158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190612d38565b7fffffffff0000000000000000000000000000000000000000000000000000000016146109a4576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610d9f565b6060816001018054611e3590612715565b3660006105877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481612d55565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146109e857600080fd5b60006020828403121561237757600080fd5b8135610a5681612337565b60005b8381101561239d578181015183820152602001612385565b50506000910152565b600081518084526123be816020860160208601612382565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a5660208301846123a6565b60006020828403121561241557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146109e857600080fd5b6000806040838503121561245157600080fd5b823561245c8161241c565b946020939093013593505050565b60008060006060848603121561247f57600080fd5b833561248a8161241c565b9250602084013561249a8161241c565b929592945050506040919091013590565b600080604083850312156124be57600080fd5b8235915060208301356124d08161241c565b809150509250929050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a0820181905260009061256f908301856123a6565b82810360c084015261258181856123a6565b9a9950505050505050505050565b6000806000606084860312156125a457600080fd5b83356125af8161241c565b925060208401359150604084013567ffffffffffffffff8111156125d257600080fd5b840160e081870312156125e457600080fd5b809150509250925092565b60006020828403121561260157600080fd5b8135610a568161241c565b80151581146109e857600080fd5b6000806040838503121561262d57600080fd5b82356126388161241c565b915060208301356124d08161260c565b60008060008060006080868803121561266057600080fd5b853561266b8161241c565b9450602086013561267b8161241c565b935060408601359250606086013567ffffffffffffffff8082111561269f57600080fd5b818801915088601f8301126126b357600080fd5b8135818111156126c257600080fd5b8960208285010111156126d457600080fd5b9699959850939650602001949392505050565b600080604083850312156126fa57600080fd5b82356127058161241c565b915060208301356124d08161241c565b600181811c9082168061272957607f821691505b602082108103612762577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080835461277681612715565b6001828116801561278e57600181146127c1576127f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506127f0565b8760005260208060002060005b858110156127e75781548a8201529084019082016127ce565b50505082870194505b50929695505050505050565b60006020828403121561280e57600080fd5b8151610a568161260c565b6000813561ffff811681146104c557600080fd5b6000813567ffffffffffffffff811681146104c557600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261287c57600080fd5b83018035915067ffffffffffffffff82111561289757600080fd5b6020019150368190038213156128ac57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610577576000816000526020600020601f850160051c8101602086101561290b5750805b601f850160051c820191505b81811015610b3a57828155600101612917565b67ffffffffffffffff831115612942576129426128b3565b612956836129508354612715565b836128e2565b6000601f8411600181146129a857600085156129725750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556109a4565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156129f757868501358255602094850194600190920191016129d7565b5086821015612a32577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff612a5083612819565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff0000612a8b60208601612819565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff00000000612ad16040870161282d565b60201b16837fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008416178217178455505050612b56612b116060840161282d565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b612bb2612b656080840161282d565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b612bbf60a0830183612847565b612bcd81836001860161292a565b5050612bdc60c0830183612847565b61053d81836002860161292a565b818103818111156104c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215612c3657600080fd5b815167ffffffffffffffff80821115612c4e57600080fd5b818401915084601f830112612c6257600080fd5b815181811115612c7457612c746128b3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612cba57612cba6128b3565b81604052828152876020848701011115612cd357600080fd5b612ce4836020830160208801612382565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612d2e60808301846123a6565b9695505050505050565b600060208284031215612d4a57600080fd5b8151610a5681612337565b60008085851115612d6557600080fd5b83861115612d7257600080fd5b505082019391909203915056fea264697066735822122033600fc1c90caf1682b060b88128a3a7e5c5374f417cc1a3de6442640837ff1964736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x451 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x4BAE2BE8 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2365 JUMP JUMPDEST PUSH2 0x4B1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x243E JUMP JUMPDEST PUSH2 0x4EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST PUSH32 0x0 PUSH2 0x224 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH2 0x2B2 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP3 SWAP2 SWAP1 PUSH2 0x24DB JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x246A JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x5BD JUMP JUMPDEST PUSH2 0x2F9 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2528 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x31A CALLDATASIZE PUSH1 0x4 PUSH2 0x258F JUMP JUMPDEST PUSH2 0x942 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x37A CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x9AB JUMP JUMPDEST PUSH2 0x392 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0x9B9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x224 PUSH2 0x9EB JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xA5D JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0xA67 JUMP JUMPDEST PUSH2 0x224 PUSH2 0xAC1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x261A JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST PUSH2 0x25C PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x2648 JUMP JUMPDEST PUSH2 0xB08 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xB42 JUMP JUMPDEST PUSH2 0x392 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x45F CALLDATASIZE PUSH1 0x4 PUSH2 0x24AB JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E7 JUMP JUMPDEST PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x25EF JUMP JUMPDEST PUSH2 0xBE1 JUMP JUMPDEST PUSH2 0x392 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x4BF PUSH2 0xBFC JUMP JUMPDEST SWAP1 PUSH2 0xC2A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0xD04 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x4E8 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0xD44 JUMP JUMPDEST PUSH2 0x50B PUSH2 0x4F9 PUSH2 0xDFD JUMP JUMPDEST DUP4 DUP4 PUSH2 0x503 PUSH2 0xD16 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xE07 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x525 DUP2 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP6 DUP6 DUP6 PUSH2 0x534 PUSH2 0xD16 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x561 DUP2 PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST SWAP1 PUSH2 0x14CF JUMP JUMPDEST PUSH2 0x577 DUP4 DUP4 DUP4 PUSH2 0x56F PUSH2 0x153A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1568 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH2 0x163E JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x599 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0x5A5 DUP2 DUP4 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP6 DUP6 DUP6 PUSH2 0x5B4 PUSH2 0xD16 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x5DF SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2768 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x68A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AE SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 PUSH2 0x6C7 DUP4 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0x168F JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0x6F2 PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x70A PUSH2 0xD16 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0x831 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x85D SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8AA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x87F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8AA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x88D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x8BF SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EB SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x938 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x90D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x938 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x976 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x96F PUSH2 0x153A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0x98A DUP4 DUP4 PUSH2 0x983 PUSH2 0xD16 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x177E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x9A4 DUP3 DUP3 PUSH2 0x2A44 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 DUP3 PUSH2 0x9C7 PUSH2 0xD16 JUMP JUMPDEST SWAP1 PUSH2 0x1898 JUMP JUMPDEST PUSH2 0x9E8 PUSH2 0x9D8 PUSH2 0xDFD JUMP JUMPDEST DUP3 PUSH2 0x9E1 PUSH2 0x153A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1914 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0x9F8 PUSH2 0x14A1 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP4 DUP4 PUSH2 0xA21 PUSH2 0x153A JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0xA7A PUSH2 0xA72 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0xACE PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xAF6 PUSH2 0xDFD JUMP JUMPDEST DUP4 DUP4 PUSH2 0xB00 PUSH2 0xD16 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB12 PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0xB1E DUP2 DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xB3A DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB2F PUSH2 0xD16 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB50 DUP3 PUSH2 0x6C1 PUSH2 0xD16 JUMP JUMPDEST POP PUSH2 0x4C5 ADDRESS DUP4 PUSH2 0xB5E PUSH2 0x19CA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F PUSH2 0xDFD JUMP JUMPDEST SWAP1 POP PUSH2 0xB7D DUP2 PUSH2 0x55B PUSH2 0x14A1 JUMP JUMPDEST PUSH2 0x577 DUP4 DUP4 DUP4 PUSH2 0xB8B PUSH2 0x153A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA56 DUP4 DUP4 PUSH2 0xBA2 PUSH2 0xD16 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9E8 PUSH2 0xBEC PUSH2 0xDFD JUMP JUMPDEST DUP3 PUSH2 0xBF5 PUSH2 0x14A1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC7A JUMPI POP PUSH1 0x0 PUSH2 0x4C5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCCB JUMPI POP PUSH1 0x1 PUSH2 0x4C5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0xD11 PUSH2 0x19CA JUMP JUMPDEST PUSH2 0x1E24 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0xDF3 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C5 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D5 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xED1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH2 0xEDC DUP7 DUP3 DUP8 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0xF39 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xF9E JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xF99 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0x101F JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xFCF JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x10A4 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2768 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x116E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1192 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST PUSH2 0x577 JUMPI PUSH2 0x577 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP5 PUSH2 0x96F PUSH2 0x153A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1210 JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x126F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH2 0x12FE DUP7 DUP6 DUP8 PUSH2 0x2001 JUMP JUMPDEST PUSH2 0x13AD JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0x134F JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x13AD JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0x143E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2BEA JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x50B JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2BEA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x53D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0x1656 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x11C3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x9A4 JUMPI PUSH2 0x9A4 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x21E0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16EE JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x577 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x17CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x182A JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x18E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x191F DUP4 DUP3 DUP5 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D5 PUSH2 0x19C5 PUSH2 0x19CA JUMP JUMPDEST PUSH2 0x22F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4C5 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x2BEA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A75 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B1D DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x11C3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B7D JUMPI PUSH2 0x1B7D DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x21E0 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2C24 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1630 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1D7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9F JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x53D JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1E35 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E61 SWAP1 PUSH2 0x2715 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1EAE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E83 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1EAE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E91 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1ECA JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1ED4 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1FF0 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FCC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FF0 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x1FFA JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x16F0 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x2087 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x2095 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x21CA JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21CA SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST ISZERO PUSH2 0x21D7 JUMPI PUSH2 0x587 PUSH2 0x2306 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x223A SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2CEF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2259 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x227D SWAP2 SWAP1 PUSH2 0x2D38 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x9A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1E35 SWAP1 PUSH2 0x2715 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x587 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x2D55 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA56 DUP2 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x239D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2385 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x23BE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2382 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA56 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x245C DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x248A DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x249A DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x241C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x256F SWAP1 DUP4 ADD DUP6 PUSH2 0x23A6 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x2581 DUP2 DUP6 PUSH2 0x23A6 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x25A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x25AF DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x25E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA56 DUP2 PUSH2 0x241C JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x262D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2638 DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x266B DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x267B DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x269F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x26B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x26C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x26D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2705 DUP2 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x24D0 DUP2 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2729 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2762 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x2776 DUP2 PUSH2 0x2715 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x278E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x27C1 JUMPI PUSH2 0x27F0 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x27F0 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x27E7 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x27CE JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x280E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA56 DUP2 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x287C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x28AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x290B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB3A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2917 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2942 JUMPI PUSH2 0x2942 PUSH2 0x28B3 JUMP JUMPDEST PUSH2 0x2956 DUP4 PUSH2 0x2950 DUP4 SLOAD PUSH2 0x2715 JUMP JUMPDEST DUP4 PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29A8 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x2972 JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29F7 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x29D7 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x2A32 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x2A50 DUP4 PUSH2 0x2819 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2A8B PUSH1 0x20 DUP7 ADD PUSH2 0x2819 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x2AD1 PUSH1 0x40 DUP8 ADD PUSH2 0x282D JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x2B56 PUSH2 0x2B11 PUSH1 0x60 DUP5 ADD PUSH2 0x282D JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2BB2 PUSH2 0x2B65 PUSH1 0x80 DUP5 ADD PUSH2 0x282D JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2BBF PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x2BCD DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x292A JUMP JUMPDEST POP POP PUSH2 0x2BDC PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x53D DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x292A JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2C4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2C74 JUMPI PUSH2 0x2C74 PUSH2 0x28B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2CBA JUMPI PUSH2 0x2CBA PUSH2 0x28B3 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2CD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CE4 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2382 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2D2E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x23A6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA56 DUP2 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2D72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER PUSH1 0xF 0xC1 0xC9 0xC 0xAF AND DUP3 0xB0 PUSH1 0xB8 DUP2 0x28 LOG3 0xA7 0xE5 0xC5 CALLDATACOPY 0x4F COINBASE PUSH29 0xC1A3DE6442640837FF1964736F6C634300081600330000000000000000 ","sourceMap":"556:571:45:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;611:14:51;;604:22;586:41;;574:2;559:18;542:165:14;;;;;;;;942:163:26;;;:::i;:::-;;;;;;;:::i;5907:146:47:-;;;;;;:::i;:::-;;:::i;:::-;;;1814:42:51;1802:55;;;1784:74;;1772:2;1757:18;5907:146:47;1638:226:51;5205:129:47;;;;;;:::i;:::-;;:::i;:::-;;7265:238;;;;;;:::i;:::-;;:::i;728:115:18:-;817:19;728:115;;1116:257:3;;;;;;:::i;:::-;;:::i;1031:94:45:-;;;:::i;:::-;;;;;;;;:::i;7681:246:47:-;;;;;;:::i;:::-;;:::i;4518:653::-;;;;;;:::i;:::-;;:::i;2699:67::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;3932:278::-;;;;;;:::i;:::-;;:::i;878:149:18:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;5733:140:47;;;;;;:::i;:::-;;:::i;5562:137::-;;;;;;:::i;:::-;;:::i;:::-;;;5678:25:51;;;5666:2;5651:18;5562:137:47;5532:177:51;1994:124:3;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;2159:162:3:-;;;;;;:::i;:::-;;:::i;1147:169:26:-;;;:::i;3475:217:47:-;;;;;;:::i;:::-;;:::i;1214:177:39:-;;;:::i;5368:160:47:-;;;;;;:::i;:::-;;:::i;8105:273::-;;;;;;:::i;:::-;;:::i;1358:267:26:-;;;;;;:::i;:::-;;:::i;2591:46:47:-;;;;;1694:259:3;;;;;;:::i;:::-;;:::i;6087:183:47:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;2643:50:47:-;;;;;542:165:14;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;942:163:26:-;1032:23;1074:24;:22;:24::i;:::-;1067:31;;942:163;:::o;5907:146:47:-;5968:16;6003:43;6038:7;6003:22;:20;:22::i;:::-;:34;;:43::i;5205:129::-;5270:57;5301:12;:10;:12::i;:::-;5315:2;5319:7;5270:22;:20;:22::i;:::-;:30;:57;;:30;:57::i;:::-;5205:129;;:::o;7265:238::-;7349:14;7366:12;:10;:12::i;:::-;7349:29;;7388:36;7408:6;7416:7;7388:19;:36::i;:::-;7434:62;7470:6;7478:4;7484:2;7488:7;7434:22;:20;:22::i;:::-;:35;:62;;;:35;:62::i;:::-;7339:164;7265:238;;;:::o;1116:257:3:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;1031:94:45:-;1075:14;;1108:10;:8;:10::i;:::-;1101:17;;;;1031:94;;:::o;7681:246:47:-;7769:14;7786:12;:10;:12::i;:::-;7769:29;;7808:36;7828:6;7836:7;7808:19;:36::i;:::-;7854:66;7894:6;7902:4;7908:2;7912:7;7854:22;:20;:22::i;:::-;:39;:66;;;:39;:66::i;4518:653::-;4568:17;4615:15;;;:6;:15;;;;;;;;4598:43;;;;4615:25;;;;;4598:43;;:::i;:::-;;;;;;;;;;;;;;;4588:54;;4598:43;4588:54;;;;4656:19;;:49;;;;;;10115:25:51;;;10156:18;;;10149:34;;;4588:54:47;;-1:-1:-1;4656:19:47;;;:29;;10088:18:51;;4656:49:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4652:513;;;4721:13;4737:39;4768:7;4737:22;:20;:22::i;:::-;:30;;:39::i;:::-;4721:55;;2379:66:38;4790:22:47;:20;:22::i;:::-;:29;:38;;;;;;;;;;;:78;4996:22;:20;:22::i;:::-;:38;;;;;;;:31;;;;;:38;;;;;;4994:40;;;;;;5067:36;5095:7;;4996:38;;5067:36;;4996:38;;5067:36;4707:407;5205:129;;:::o;4652:513::-;5141:13;;;;;;;;;;;;;;2699:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3932:278::-;4047:69;4092:11;4105:10;4047:29;:27;:29::i;:::-;:44;:69;:44;:69::i;:::-;4127:40;4155:2;4159:7;4127:22;:20;:22::i;:::-;:27;:40;:27;:40::i;:::-;4177:15;;;;:6;:15;;;;;4195:8;;4177:26;4195:8;4177:15;:26;:::i;:::-;-1:-1:-1;;;;;3932:278:47:o;5733:140::-;5790:18;5827:39;5858:7;5827:22;:20;:22::i;5562:137::-;5619:15;5653:39;5686:5;5653:22;:20;:22::i;:::-;:32;;:39::i;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;2159:162:3;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2774:13:12;2806;;;;;;;;;;;:22;;;;;;;;;;;;;;;2685:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;1147:169:26:-;1239:25;1283:26;:24;:26::i;3475:217:47:-;3565:70;3622:12;:10;:12::i;:::-;3565:33;:31;:33::i;:70::-;3645:19;:40;;;;;;;;;;;;;;;3475:217::o;1214:177:39:-;1273:44;1336:48;:29;:27;:29::i;:::-;2991:23:41;;;;;;2861:160;5368::47;5447:74;5488:12;:10;:12::i;:::-;5502:8;5512;5447:22;:20;:22::i;:::-;:40;:74;;:40;:74::i;8105:273::-;8214:14;8231:12;:10;:12::i;:::-;8214:29;;8253:36;8273:6;8281:7;8253:19;:36::i;:::-;8299:72;8339:6;8347:4;8353:2;8357:7;8366:4;;8299:22;:20;:22::i;:::-;:39;:72;;;;;:39;:72::i;:::-;8204:174;8105:273;;;;;:::o;1358:267:26:-;1424:17;1453:39;1484:7;1453:22;:20;:22::i;:39::-;;1548:70;1603:4;1610:7;1548:29;:27;:29::i;:::-;:46;:70;:46;:70::i;1694:259:3:-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;6087:183:47:-;6169:19;6207:56;6247:5;6254:8;6207:22;:20;:22::i;:::-;:39;:56;28679:18:38;;;;28641:19;28679:18;;;:11;;;;;:18;;;;;;;;:28;;;;;;;;;;;;;28541:173;864:152:4;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;706:130:39:-;751:23;793:36;:29;:27;:29::i;:::-;:34;:36::i;29031:174:38:-;29072:16;;1836:61;1896:1;1844:48;1836:61;:::i;27759:360::-;27838:16;27882:17;;;;;;;;;;;30661:19;;;27909:64;;27942:31;;;;;;;;5678:25:51;;;5651:18;;27942:31:38;;;;;;;;27909:64;2185:8;30940:33;;:38;27983:130;;-1:-1:-1;;28034:20:38;;;;:11;;;:20;;;;;;;;28027:27;;27983:130;28100:1;28085:17;;;;;8433:167:47;8526:7;8552:41;:39;:41::i;4625:1052:38:-;4724:13;4740:17;;;;;;;;;;;30661:19;;;4767:64;;4800:31;;;;;;;;5678:25:51;;;5651:18;;4800:31:38;5532:177:51;4767:64:38;4876:5;4896:18;;;;;;;;4892:63;;4923:32;;;;;1814:42:51;1802:55;;4923:32:38;;;1784:74:51;1757:18;;4923:32:38;1638:226:51;4892:63:38;4970:38;4984:1;4987:12;5001:6;4970:13;:38::i;:::-;4965:111;;5017:59;;;;;16194:42:51;16263:15;;;5017:59:38;;;16245:34:51;16315:15;;16295:18;;;16288:43;16347:18;;;16340:34;;;16157:18;;5017:59:38;15982:398:51;4965:111:38;5090:16;;;5086:535;;2185:8;30940:33;;:38;5122:173;;5230:8;:17;;;;;;;;;;5250:30;;;5230:50;;5122:173;5086:535;;;2185:8;5356:33;;5407:29;;;5403:169;;5517:8;:17;;;;;;;;;;:40;;;5403:169;-1:-1:-1;5585:20:38;;;;:11;;;:20;;;;;:25;;;;;;;;;;5086:535;5662:7;5658:2;5635:35;;5644:12;5635:35;;;;;;;;;;;;4714:963;;4625:1052;;;;:::o;6650:441:47:-;6736:17;6783:15;;;:6;:15;;;;;;;;6766:43;;;;6783:25;;;;;6766:43;;:::i;:::-;;;;;;;;;;;;;;;6756:54;;6766:43;6756:54;;;;6952:39;;;;;;16559:25:51;;;6952:20:47;16620:55:51;;;16600:18;;;16593:83;6756:54:47;;-1:-1:-1;6952:12:47;:20;;;;16532:18:51;;6952:39:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6947:138;;7007:67;7052:13;7067:6;7007:29;:27;:29::i;7350:956:38:-;7472:16;;;7468:58;;7497:29;;;;;;;;;;;;;;7468:58;7537:13;7553:17;;;;;;;;;;;30661:19;;;7580:64;;7613:31;;;;;;;;5678:25:51;;;5651:18;;7613:31:38;5532:177:51;7580:64:38;7658:26;;;7670:5;7658:26;;;7654:73;;7693:34;;;;;16891:42:51;16879:55;;7693:34:38;;;16861:74:51;16951:18;;;16944:34;;;16834:18;;7693:34:38;16687:297:51;7654:73:38;7743:30;7757:1;7760:4;7766:6;7743:13;:30::i;:::-;7738:185;;2185:8;30940:33;;:38;;7793:59;;-1:-1:-1;7832:20:38;;;;:11;;;:20;;;;;;;7822:30;;;7832:20;;7822:30;;7793:59;7789:123;;;7861:51;;;;;16194:42:51;16263:15;;;7861:51:38;;;16245:34:51;16315:15;;16295:18;;;16288:43;16347:18;;;16340:34;;;16157:18;;7861:51:38;15982:398:51;7789:123:38;7933:8;:17;;;;;;;;;;7953:20;;;;7933:40;;;;7987:10;;;7983:274;;8120:16;;;;;;;;:10;;;;:16;;;;;;8118:18;;;;;;8218:14;;;;;;;;8216:16;;;;;;;7983:274;8291:7;8287:2;8272:27;;8281:4;8272:27;;;;;;;;;;;;7458:848;7350:956;;;;;:::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1814:42:51;1802:55;;4543:25:13;;;1784:74:51;1757:18;;4543:25:13;1638:226:51;4381:174:12;4422:16;;702:67;768:1;710:54;702:67;:::i;1151:251::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1256:140;;1301:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1326:4;1301:29;;;1349:36;;17191:25:51;;;17293:18;;;17286:43;17365:15;;;17345:18;;;17338:43;;;;1349:36:12;;17179:2:51;17164:18;1349:36:12;;;;;;;;1151:251;;;;:::o;8655:170:47:-;8746:14;;8779:39;:37;:39::i;9478:277:38:-;9600:41;:1;9615:6;9623:4;9629:2;9633:7;9600:14;:41::i;:::-;9655:13;;;1702:19:42;:23;9651:98:38;;9686:52;9708:6;9716:4;9722:2;9726:7;9686:52;;;;;;;;;;;;:21;:52::i;27104:254::-;27179:18;27225:17;;;;;;;;;;;30661:19;;;27252:64;;27285:31;;;;;;;;5678:25:51;;;5651:18;;27285:31:38;5532:177:51;27252:64:38;27345:5;27333:18;27326:25;27104:254;-1:-1:-1;;;;27104:254:38:o;3645:170:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;3742:66;;3780:28;;;;;;;;16559:25:51;;;16632:42;16620:55;;16600:18;;;16593:83;16532:18;;3780:28:12;16385:297:51;13998:460:38;14082:16;;;14078:54;;14107:25;;;;;;;;;;;;;;14078:54;14159:8;:17;;;;;;;;;;;30661:19;;;14142:72;;14186:28;;;;;;;;5678:25:51;;;5651:18;;14186:28:38;5532:177:51;14142:72:38;14225:8;:17;;;;;;;;;;;14245:20;;;14225:40;;;;14378:14;;;:10;;;;:14;;;;;;14376:16;;;;;;;;14418:33;14234:7;;14225:8;14418:33;;14225:8;;14418:33;13998:460;;;:::o;26583:203::-;26658:15;26689:19;;;26685:60;;26717:28;;;;;;;;;;;;;;26685:60;-1:-1:-1;26762:17:38;;;;;;:10;;;;;:17;;;;;;;26583:203::o;2288:213:12:-;2377:30;:1;2394:4;2400:6;2377:16;:30::i;:::-;2441:5;2417:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2461:33;;17191:25:51;;;17293:18;;;17286:43;;;17345:18;;17338:43;;;;2461:33:12;;17179:2:51;17164:18;2461:33:12;;;;;;;2288:213;;;:::o;939:136:39:-;986:25;1030:38;:29;:27;:29::i;:::-;:36;:38::i;3441:174:41:-;3482:16;;456:70;525:1;464:57;456:70;:::i;6187:290:38:-;6316:6;6304:18;;:8;:18;;;6300:63;;6331:32;;;;;1814:42:51;1802:55;;6331:32:38;;;1784:74:51;1757:18;;6331:32:38;1638:226:51;6300:63:38;6373:19;;;;;;;;:11;;;:19;;;;;;;;:29;;;;;;;;;;;;;:40;;;;;;;;;;;;;6428:42;;586:41:51;;;6428:42:38;;559:18:51;6428:42:38;;;;;;;6187:290;;;;:::o;11005:300::-;11148:41;:1;11163:6;11171:4;11177:2;11181:7;11148:14;:41::i;:::-;11203:13;;;1702:19:42;:23;11199:100:38;;11234:54;11256:6;11264:4;11270:2;11274:7;11283:4;;11234:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11234:21:38;;-1:-1:-1;;;11234:54:38:i;:::-;11005:300;;;;;;;:::o;3225:210:41:-;3364:23;;;;:64;;;;;:23;16879:55:51;;;3364:64:41;;;16861:74:51;16951:18;;;16944:34;;;3332:13:41;;3364:23;;:40;;16834:18:51;;3364:64:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1780:252:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1886:140;;;1955:5;1930:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1979:36;;17191:25:51;;;17293:18;;;17286:43;17365:15;;;17345:18;;;17338:43;;;;1979:36:12;;17179:2:51;17164:18;1979:36:12;16989:398:51;3060:369:13;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1814:42:51;1802:55;;3243:24:13;;;1784:74:51;1757:18;;3243:24:13;1638:226:51;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3148:281;3060:369;;;:::o;2358:115:41:-;2413:23;2455:1;:11;;2448:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2358:115;;;:::o;784:745:19:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:19;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:19;;784:745::o;1043:95::-;462:23:22;466:14;462:23;449:37;445:2;441:46;1372:19:19;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:19;;;;;:39;18606:15:51;;;1396:59:19;;;18588:34:51;1444:10:19;18638:18:51;;;18631:43;1396:19:19;:39;;;;18500:18:51;;1396:59:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:19:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;30245:185:38:-;30340:15;30384:7;30375:16;;:5;:16;;;30374:49;;;-1:-1:-1;;30396:18:38;;;;;;;;:11;;;;;:18;;;;;;;;:27;;;;;;;;;;;;;30245:185::o;1643:735:19:-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:19;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:19;;;;-1:-1:-1;1643:735:19:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:19;:19;:39;;466:14:22;462:23;;449:37;445:2;441:46;2207:80:19;;;;;;;;;;18537:42:51;18606:15;;;2207:80:19;;;18588:34:51;2276:10:19;18638:18:51;;;18631:43;18500:18;;2207:80:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:19;;;;-1:-1:-1;1643:735:19:o;29662:270:38:-;29793:65;;1948:41;29793:65;;;1948:41;29793:36;;;;1948:41;;29793:65;;29830:6;;29838:4;;29844:7;;29853:4;;29793:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:84;;;29789:136;;29886:39;;;;;16891:42:51;16879:55;;29886:39:38;;;16861:74:51;16951:18;;;16944:34;;;16834:18;;29886:39:38;16687:297:51;2587:121:41;2644:25;2688:1;:13;;2681:20;;;;;:::i;616:152:22:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;14:177:51:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:51;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:51:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:51;;1453:180;-1:-1:-1;1453:180:51:o;1869:154::-;1955:42;1948:5;1944:54;1937:5;1934:65;1924:93;;2013:1;2010;2003:12;2028:315;2096:6;2104;2157:2;2145:9;2136:7;2132:23;2128:32;2125:52;;;2173:1;2170;2163:12;2125:52;2212:9;2199:23;2231:31;2256:5;2231:31;:::i;:::-;2281:5;2333:2;2318:18;;;;2305:32;;-1:-1:-1;;;2028:315:51:o;2348:456::-;2425:6;2433;2441;2494:2;2482:9;2473:7;2469:23;2465:32;2462:52;;;2510:1;2507;2500:12;2462:52;2549:9;2536:23;2568:31;2593:5;2568:31;:::i;:::-;2618:5;-1:-1:-1;2675:2:51;2660:18;;2647:32;2688:33;2647:32;2688:33;:::i;:::-;2348:456;;2740:7;;-1:-1:-1;;;2794:2:51;2779:18;;;;2766:32;;2348:456::o;3067:315::-;3135:6;3143;3196:2;3184:9;3175:7;3171:23;3167:32;3164:52;;;3212:1;3209;3202:12;3164:52;3248:9;3235:23;3225:33;;3308:2;3297:9;3293:18;3280:32;3321:31;3346:5;3321:31;:::i;:::-;3371:5;3361:15;;;3067:315;;;;;:::o;3387:447::-;3544:2;3533:9;3526:21;3583:6;3578:2;3567:9;3563:18;3556:34;3640:6;3632;3627:2;3616:9;3612:18;3599:48;3696:1;3667:22;;;3691:2;3663:31;;;3656:42;;;;3750:2;3738:15;;;3755:66;3734:88;3719:104;3715:113;;3387:447;-1:-1:-1;3387:447:51:o;3839:840::-;4158:6;4191:15;;;4173:34;;4243:15;;4238:2;4223:18;;4216:43;4278:18;4332:15;;;4327:2;4312:18;;4305:43;4384:15;;;4379:2;4364:18;;4357:43;4437:15;;4431:3;4416:19;;4409:44;4490:3;4484;4469:19;;4462:32;;;4129:4;;4517:46;;4543:19;;4535:6;4517:46;:::i;:::-;4612:9;4604:6;4600:22;4594:3;4583:9;4579:19;4572:51;4640:33;4666:6;4658;4640:33;:::i;:::-;4632:41;3839:840;-1:-1:-1;;;;;;;;;;3839:840:51:o;4684:591::-;4789:6;4797;4805;4858:2;4846:9;4837:7;4833:23;4829:32;4826:52;;;4874:1;4871;4864:12;4826:52;4913:9;4900:23;4932:31;4957:5;4932:31;:::i;:::-;4982:5;-1:-1:-1;5034:2:51;5019:18;;5006:32;;-1:-1:-1;5089:2:51;5074:18;;5061:32;5116:18;5105:30;;5102:50;;;5148:1;5145;5138:12;5102:50;5171:22;;5227:3;5209:16;;;5205:26;5202:46;;;5244:1;5241;5234:12;5202:46;5267:2;5257:12;;;4684:591;;;;;:::o;5280:247::-;5339:6;5392:2;5380:9;5371:7;5367:23;5363:32;5360:52;;;5408:1;5405;5398:12;5360:52;5447:9;5434:23;5466:31;5491:5;5466:31;:::i;6441:118::-;6527:5;6520:13;6513:21;6506:5;6503:32;6493:60;;6549:1;6546;6539:12;6564:382;6629:6;6637;6690:2;6678:9;6669:7;6665:23;6661:32;6658:52;;;6706:1;6703;6696:12;6658:52;6745:9;6732:23;6764:31;6789:5;6764:31;:::i;:::-;6814:5;-1:-1:-1;6871:2:51;6856:18;;6843:32;6884:30;6843:32;6884:30;:::i;6951:936::-;7048:6;7056;7064;7072;7080;7133:3;7121:9;7112:7;7108:23;7104:33;7101:53;;;7150:1;7147;7140:12;7101:53;7189:9;7176:23;7208:31;7233:5;7208:31;:::i;:::-;7258:5;-1:-1:-1;7315:2:51;7300:18;;7287:32;7328:33;7287:32;7328:33;:::i;:::-;7380:7;-1:-1:-1;7434:2:51;7419:18;;7406:32;;-1:-1:-1;7489:2:51;7474:18;;7461:32;7512:18;7542:14;;;7539:34;;;7569:1;7566;7559:12;7539:34;7607:6;7596:9;7592:22;7582:32;;7652:7;7645:4;7641:2;7637:13;7633:27;7623:55;;7674:1;7671;7664:12;7623:55;7714:2;7701:16;7740:2;7732:6;7729:14;7726:34;;;7756:1;7753;7746:12;7726:34;7801:7;7796:2;7787:6;7783:2;7779:15;7775:24;7772:37;7769:57;;;7822:1;7819;7812:12;7769:57;6951:936;;;;-1:-1:-1;6951:936:51;;-1:-1:-1;7853:2:51;7845:11;;7875:6;6951:936;-1:-1:-1;;;6951:936:51:o;8074:388::-;8142:6;8150;8203:2;8191:9;8182:7;8178:23;8174:32;8171:52;;;8219:1;8216;8209:12;8171:52;8258:9;8245:23;8277:31;8302:5;8277:31;:::i;:::-;8327:5;-1:-1:-1;8384:2:51;8369:18;;8356:32;8397:33;8356:32;8397:33;:::i;8467:437::-;8546:1;8542:12;;;;8589;;;8610:61;;8664:4;8656:6;8652:17;8642:27;;8610:61;8717:2;8709:6;8706:14;8686:18;8683:38;8680:218;;8754:77;8751:1;8744:88;8855:4;8852:1;8845:15;8883:4;8880:1;8873:15;8680:218;;8467:437;;;:::o;9035:901::-;9163:3;9192:1;9225:6;9219:13;9255:36;9281:9;9255:36;:::i;:::-;9310:1;9327:17;;;9353:191;;;;9558:1;9553:358;;;;9320:591;;9353:191;9401:66;9390:9;9386:82;9381:3;9374:95;9524:6;9517:14;9510:22;9502:6;9498:35;9493:3;9489:45;9482:52;;9353:191;;9553:358;9584:6;9581:1;9574:17;9614:4;9659;9656:1;9646:18;9686:1;9700:165;9714:6;9711:1;9708:13;9700:165;;;9792:14;;9779:11;;;9772:35;9835:16;;;;9729:10;;9700:165;;;9704:3;;;9894:6;9889:3;9885:16;9878:23;;9320:591;-1:-1:-1;9927:3:51;;9035:901;-1:-1:-1;;;;;;9035:901:51:o;10194:245::-;10261:6;10314:2;10302:9;10293:7;10289:23;10285:32;10282:52;;;10330:1;10327;10320:12;10282:52;10362:9;10356:16;10381:28;10403:5;10381:28;:::i;10444:201::-;10488:11;10540:3;10527:17;10584:6;10577:5;10573:18;10566:5;10563:29;10553:57;;10606:1;10603;10596:12;10650:213;10694:11;10746:3;10733:17;10790:18;10783:5;10779:30;10772:5;10769:41;10759:69;;10824:1;10821;10814:12;11449:575;11521:4;11527:6;11587:11;11574:25;11677:66;11666:8;11650:14;11646:29;11642:102;11622:18;11618:127;11608:155;;11759:1;11756;11749:12;11608:155;11786:33;;11838:20;;;-1:-1:-1;11881:18:51;11870:30;;11867:50;;;11913:1;11910;11903:12;11867:50;11946:4;11934:17;;-1:-1:-1;11977:14:51;11973:27;;;11963:38;;11960:58;;;12014:1;12011;12004:12;11960:58;11449:575;;;;;:::o;12029:184::-;12081:77;12078:1;12071:88;12178:4;12175:1;12168:15;12202:4;12199:1;12192:15;12218:543;12320:2;12315:3;12312:11;12309:446;;;12356:1;12380:5;12377:1;12370:16;12424:4;12421:1;12411:18;12494:2;12482:10;12478:19;12475:1;12471:27;12465:4;12461:38;12530:4;12518:10;12515:20;12512:47;;;-1:-1:-1;12553:4:51;12512:47;12608:2;12603:3;12599:12;12596:1;12592:20;12586:4;12582:31;12572:41;;12663:82;12681:2;12674:5;12671:13;12663:82;;;12726:17;;;12707:1;12696:13;12663:82;;12997:1309;13105:18;13100:3;13097:27;13094:53;;;13127:18;;:::i;:::-;13156:94;13246:3;13206:38;13238:4;13232:11;13206:38;:::i;:::-;13200:4;13156:94;:::i;:::-;13276:1;13301:2;13296:3;13293:11;13318:1;13313:735;;;;14092:1;14109:3;14106:93;;;-1:-1:-1;14165:19:51;;;14152:33;14106:93;12903:66;12894:1;12890:11;;;12886:84;12882:89;12872:100;12978:1;12974:11;;;12869:117;14212:78;;13286:1014;;13313:735;8982:1;8975:14;;;9019:4;9006:18;;13358:66;13349:76;;;13509:9;13531:229;13545:7;13542:1;13539:14;13531:229;;;13634:19;;;13621:33;13606:49;;13741:4;13726:20;;;;13694:1;13682:14;;;;13561:12;13531:229;;;13535:3;13788;13779:7;13776:16;13773:219;;;13908:66;13902:3;13896;13893:1;13889:11;13885:21;13881:94;13877:99;13864:9;13859:3;13855:19;13842:33;13838:139;13830:6;13823:155;13773:219;;;14035:1;14029:3;14026:1;14022:11;14018:19;14012:4;14005:33;13286:1014;;12997:1309;;;:::o;14311:1379::-;14499:6;14464:33;14491:5;14464:33;:::i;:::-;14460:46;14531:4;14525:11;14638:2;14569:66;14565:2;14561:75;14558:83;14552:4;14545:97;14718:10;14673:42;14711:2;14704:5;14700:14;14673:42;:::i;:::-;14669:2;14665:51;14661:68;14839:2;14834;14765:66;14761:2;14757:75;14754:83;14751:91;14745:4;14738:105;15018:26;14973:42;15011:2;15004:5;15000:14;14973:42;:::i;:::-;14969:2;14965:51;14961:84;14955:2;14886:66;14882:2;14878:75;14875:83;14871:2;14868:91;14865:181;14859:4;14852:195;;;;15056:95;15108:42;15146:2;15139:5;15135:14;15108:42;:::i;:::-;10960:11;;11004:66;10996:75;11081:2;11077:14;;;;11093:42;11073:63;10993:144;10980:158;;10868:276;15056:95;15160:98;15214:43;15252:3;15245:5;15241:15;15214:43;:::i;:::-;11243:11;;11287:66;11279:75;11364:3;11360:15;;;;11377:58;11356:80;11276:161;11263:175;;11149:295;15160:98;15301:60;15356:3;15349:5;15345:15;15338:5;15301:60;:::i;:::-;15370:99;15455:13;15442:11;15438:1;15432:4;15428:12;15370:99;:::i;:::-;;;15514:60;15569:3;15562:5;15558:15;15551:5;15514:60;:::i;:::-;15583:101;15670:13;15655;15651:1;15645:4;15641:12;15583:101;:::i;15695:282::-;15762:9;;;15783:11;;;15780:191;;;15827:77;15824:1;15817:88;15928:4;15925:1;15918:15;15956:4;15953:1;15946:15;17392:956;17472:6;17525:2;17513:9;17504:7;17500:23;17496:32;17493:52;;;17541:1;17538;17531:12;17493:52;17574:9;17568:16;17603:18;17644:2;17636:6;17633:14;17630:34;;;17660:1;17657;17650:12;17630:34;17698:6;17687:9;17683:22;17673:32;;17743:7;17736:4;17732:2;17728:13;17724:27;17714:55;;17765:1;17762;17755:12;17714:55;17794:2;17788:9;17816:2;17812;17809:10;17806:36;;;17822:18;;:::i;:::-;17956:2;17950:9;18018:4;18010:13;;17861:66;18006:22;;;18030:2;18002:31;17998:40;17986:53;;;18054:18;;;18074:22;;;18051:46;18048:72;;;18100:18;;:::i;:::-;18140:10;18136:2;18129:22;18175:2;18167:6;18160:18;18215:7;18210:2;18205;18201;18197:11;18193:20;18190:33;18187:53;;;18236:1;18233;18226:12;18187:53;18249:68;18314:2;18309;18301:6;18297:15;18292:2;18288;18284:11;18249:68;:::i;:::-;18336:6;17392:956;-1:-1:-1;;;;;;;17392:956:51:o;18685:512::-;18879:4;18908:42;18989:2;18981:6;18977:15;18966:9;18959:34;19041:2;19033:6;19029:15;19024:2;19013:9;19009:18;19002:43;;19081:6;19076:2;19065:9;19061:18;19054:34;19124:3;19119:2;19108:9;19104:18;19097:31;19145:46;19186:3;19175:9;19171:19;19163:6;19145:46;:::i;:::-;19137:54;18685:512;-1:-1:-1;;;;;;18685:512:51:o;19202:249::-;19271:6;19324:2;19312:9;19303:7;19299:23;19295:32;19292:52;;;19340:1;19337;19330:12;19292:52;19372:9;19366:16;19391:30;19415:5;19391:30;:::i;19456:331::-;19561:9;19572;19614:8;19602:10;19599:24;19596:44;;;19636:1;19633;19626:12;19596:44;19665:6;19655:8;19652:20;19649:40;;;19685:1;19682;19675:12;19649:40;-1:-1:-1;;19711:23:51;;;19756:25;;;;;-1:-1:-1;19456:331:51:o"},"gasEstimates":{"creation":{"codeDepositCost":"2340200","executionCost":"infinite","totalCost":"infinite"},"external":{"MINTER_ROLE()":"306","OPERATOR_ROLE()":"305","__msgData()":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","burn(uint256)":"infinite","forwarderRegistry()":"infinite","getApproved(uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","isTrustedForwarder(address)":"infinite","metadataResolver()":"infinite","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"infinite","name()":"infinite","owner()":"infinite","ownerOf(uint256)":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setRevocationRegistry(address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","vcData(uint256)":"infinite"}},"methodIdentifiers":{"MINTER_ROLE()":"d5391393","OPERATOR_ROLE()":"f5b541a6","__msgData()":"31e66e1e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","forwarderRegistry()":"2b4c9f16","getApproved(uint256)":"081812fc","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isTrustedForwarder(address)":"572b6c05","metadataResolver()":"a0c76f62","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"54c7be06","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setRevocationRegistry(address)":"95f94bc4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","vcData(uint256)":"4bae2be8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"metadataResolver\",\"type\":\"address\"},{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"internalType\":\"struct CertificateNFTv1MetaData.MetaData\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"name\":\"setRevocationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vcData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SelfApproval(address)\":[{\"params\":{\"account\":\"The account trying to approve itself.\"}}],\"ERC721SelfApprovalForAll(address)\":[{\"params\":{\"account\":\"The account trying to approveForAll itself.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"burn(uint256)\":{\"details\":\"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.\",\"params\":{\"tokenId\":\"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))\":{\"details\":\"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\",\"params\":{\"metadata\":\"Metadata for `tokenId`\",\"to\":\"The owner of `tokenId`\",\"tokenId\":\"The id of the VC NFT to be minted\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"setRevocationRegistry(address)\":{\"params\":{\"revocationRegistry\":\"The address of the Revocation Registry contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC721SelfApproval(address)\":[{\"notice\":\"Thrown when trying to approve oneself.\"}],\"ERC721SelfApprovalForAll(address)\":[{\"notice\":\"Thrown when trying to approveForAll oneself.\"}],\"ERC721TransferToAddressZero()\":[{\"notice\":\"Thrown when transferring a token to the zero address.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidBurn()\":[{\"notice\":\"Thrown when burn operation cannot be executed.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol\":\"OpenCampusCertificateNFTv1Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./../../vc/interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./../../vc/interfaces/IRevocationRegistry.sol\\\";\\nimport {OpenCampusCertificateNFTv1} from \\\"./../../vc/OpenCampusCertificateNFTv1.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1Mock is OpenCampusCertificateNFTv1 {\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IForwarderRegistry forwarderRegistry,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) OpenCampusCertificateNFTv1(tokenName, tokenSymbol, forwarderRegistry, metadataResolver, revocationRegistry, didRegistry) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x29245603c614da3386393ac66b4260a8e04a95901ab7930a24d43ac6fd227c46\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTv1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// other imports\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// access control imports\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n// ERC721 imports\\nimport {IERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {Transfer} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\\\";\\nimport {ERC721Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\n// ForwardRegistry imports\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n// local imports\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl, ForwarderRegistryContext {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    IRevocationRegistry internal _revocationRegistry;\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n    bytes32 public constant OPERATOR_ROLE = \\\"operator\\\";\\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\\n\\n    /// @notice Thrown when burn operation cannot be executed.\\n    error InvalidBurn();\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IForwarderRegistry forwarderRegistry,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\\n        ERC721Storage.init();\\n        DID_REGISTRY = didRegistry;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\\n    /// @param to The owner of `tokenId`\\n    /// @param tokenId The id of the VC NFT to be minted\\n    /// @param metadata Metadata for `tokenId`\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\\n\\n        ERC721Storage.layout().mint(to, tokenId);\\n        vcData[tokenId] = metadata;\\n    }\\n\\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\\n    /// @param tokenId The Token Id to be burnt.\\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\\n    function burn(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\\n\\n            unchecked {\\n                // cannot underflow as balance is verified through TOKEN ownership\\n                --ERC721Storage.layout().balances[owner];\\n            }\\n            emit Transfer(owner, address(0), tokenId);\\n        } else {\\n            revert InvalidBurn();\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice `sender` is operatable if the sender is a valid issuer for `tokenId` or have been granted `operator` role before\\n    /// @dev Reverts with `NotRoleHolder` if `sender` is neither allowed token issuer nor an operator for this contract.\\n    /// @param sender The sender that trigger the contract.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function _isSenderOperatable(address sender, uint256 tokenId) internal view {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, sender);\\n        }\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().transferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x3a977107737d16e4e5d6e5099991c9f3cbbf1affb199ab71aefcabeca9bd03b9\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"},\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4484,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"_revocationRegistry","offset":0,"slot":"0","type":"t_contract(IRevocationRegistry)5000"},{"astId":4500,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"vcData","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(MetaData)5017_storage)"}],"types":{"t_contract(IRevocationRegistry)5000":{"encoding":"inplace","label":"contract IRevocationRegistry","numberOfBytes":"20"},"t_mapping(t_uint256,t_struct(MetaData)5017_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)","numberOfBytes":"32","value":"t_struct(MetaData)5017_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(MetaData)5017_storage":{"encoding":"inplace","label":"struct CertificateNFTv1MetaData.MetaData","members":[{"astId":5004,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"schemaVersion","offset":0,"slot":"0","type":"t_uint16"},{"astId":5006,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"achievementType","offset":2,"slot":"0","type":"t_uint16"},{"astId":5008,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"awardedDate","offset":4,"slot":"0","type":"t_uint64"},{"astId":5010,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"validFrom","offset":12,"slot":"0","type":"t_uint64"},{"astId":5012,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"validUtil","offset":20,"slot":"0","type":"t_uint64"},{"astId":5014,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"issuerDid","offset":0,"slot":"1","type":"t_string_storage"},{"astId":5016,"contract":"contracts/mocks/vc/OpenCampusCertificateNFTv1Mock.sol:OpenCampusCertificateNFTv1Mock","label":"achievementId","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"notice":"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"ERC721SelfApproval(address)":[{"notice":"Thrown when trying to approve oneself."}],"ERC721SelfApprovalForAll(address)":[{"notice":"Thrown when trying to approveForAll oneself."}],"ERC721TransferToAddressZero()":[{"notice":"Thrown when transferring a token to the zero address."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidBurn()":[{"notice":"Thrown when burn operation cannot be executed."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"owner()":{"notice":"Gets the address of the contract owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeTransferFrom(address,address,uint256)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom"},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."},"transferFrom(address,address,uint256)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom"},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"OpenCampusCertificateNFTMinter":{"abi":[{"inputs":[{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"},{"internalType":"contract OpenCampusCertificateNFTv1","name":"nftv1","type":"address"},{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"IssuerNotAllowed","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"VcRevoked","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"internalType":"struct CertificateNFTv1MetaData.MetaData","name":"metadata","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"name":"setRevocationRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":{"details":"Reverts with `VcRevoked` error if the token being minted has been revoked.Reverts with `IssuerNotAllowed` error if recovered issuer is not valid in the DIDRegistry.Reverts with `InvalidSignature` error if the signature is not 65 bytes in length.signature is ECDSA signature for (to, tokenId, metadata).signature is a 65 bytes raw signature without compacting.","params":{"metadata":"On-chain metadata for the NFT.","signature":"The ECDSA signature for the payload (`to`,`tokenId`,`metadata`).","to":"The address to which `tokenId` would be minted to.","tokenId":"The id of the token to be minted."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setRevocationRegistry(address)":{"params":{"revocationRegistry":"The address of the Revocation Registry contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4304":{"entryPoint":null,"id":4304,"parameterSlots":3,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@constructorInit_695":{"entryPoint":177,"id":695,"parameterSlots":2,"returnSlots":0},"@layout_851":{"entryPoint":123,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":300,"id":999,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_953":{"entryPoint":348,"id":953,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4969t_contract$_OpenCampusCertificateNFTv1_$4947t_contract$_IRevocationRegistry_$5000_fromMemory":{"entryPoint":466,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":550,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IIssuersDIDRegistry":{"entryPoint":441,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1076:51","nodeType":"YulBlock","src":"0:1076:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"80:86:51","nodeType":"YulBlock","src":"80:86:51","statements":[{"body":{"nativeSrc":"144:16:51","nodeType":"YulBlock","src":"144:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"153:1:51","nodeType":"YulLiteral","src":"153:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"156:1:51","nodeType":"YulLiteral","src":"156:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"146:6:51","nodeType":"YulIdentifier","src":"146:6:51"},"nativeSrc":"146:12:51","nodeType":"YulFunctionCall","src":"146:12:51"},"nativeSrc":"146:12:51","nodeType":"YulExpressionStatement","src":"146:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"103:5:51","nodeType":"YulIdentifier","src":"103:5:51"},{"arguments":[{"name":"value","nativeSrc":"114:5:51","nodeType":"YulIdentifier","src":"114:5:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"129:3:51","nodeType":"YulLiteral","src":"129:3:51","type":"","value":"160"},{"kind":"number","nativeSrc":"134:1:51","nodeType":"YulLiteral","src":"134:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"125:3:51","nodeType":"YulIdentifier","src":"125:3:51"},"nativeSrc":"125:11:51","nodeType":"YulFunctionCall","src":"125:11:51"},{"kind":"number","nativeSrc":"138:1:51","nodeType":"YulLiteral","src":"138:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"121:3:51","nodeType":"YulIdentifier","src":"121:3:51"},"nativeSrc":"121:19:51","nodeType":"YulFunctionCall","src":"121:19:51"}],"functionName":{"name":"and","nativeSrc":"110:3:51","nodeType":"YulIdentifier","src":"110:3:51"},"nativeSrc":"110:31:51","nodeType":"YulFunctionCall","src":"110:31:51"}],"functionName":{"name":"eq","nativeSrc":"100:2:51","nodeType":"YulIdentifier","src":"100:2:51"},"nativeSrc":"100:42:51","nodeType":"YulFunctionCall","src":"100:42:51"}],"functionName":{"name":"iszero","nativeSrc":"93:6:51","nodeType":"YulIdentifier","src":"93:6:51"},"nativeSrc":"93:50:51","nodeType":"YulFunctionCall","src":"93:50:51"},"nativeSrc":"90:70:51","nodeType":"YulIf","src":"90:70:51"}]},"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"14:152:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"69:5:51","nodeType":"YulTypedName","src":"69:5:51","type":""}],"src":"14:152:51"},{"body":{"nativeSrc":"377:467:51","nodeType":"YulBlock","src":"377:467:51","statements":[{"body":{"nativeSrc":"423:16:51","nodeType":"YulBlock","src":"423:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"432:1:51","nodeType":"YulLiteral","src":"432:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"435:1:51","nodeType":"YulLiteral","src":"435:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"425:6:51","nodeType":"YulIdentifier","src":"425:6:51"},"nativeSrc":"425:12:51","nodeType":"YulFunctionCall","src":"425:12:51"},"nativeSrc":"425:12:51","nodeType":"YulExpressionStatement","src":"425:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"398:7:51","nodeType":"YulIdentifier","src":"398:7:51"},{"name":"headStart","nativeSrc":"407:9:51","nodeType":"YulIdentifier","src":"407:9:51"}],"functionName":{"name":"sub","nativeSrc":"394:3:51","nodeType":"YulIdentifier","src":"394:3:51"},"nativeSrc":"394:23:51","nodeType":"YulFunctionCall","src":"394:23:51"},{"kind":"number","nativeSrc":"419:2:51","nodeType":"YulLiteral","src":"419:2:51","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"390:3:51","nodeType":"YulIdentifier","src":"390:3:51"},"nativeSrc":"390:32:51","nodeType":"YulFunctionCall","src":"390:32:51"},"nativeSrc":"387:52:51","nodeType":"YulIf","src":"387:52:51"},{"nativeSrc":"448:29:51","nodeType":"YulVariableDeclaration","src":"448:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"467:9:51","nodeType":"YulIdentifier","src":"467:9:51"}],"functionName":{"name":"mload","nativeSrc":"461:5:51","nodeType":"YulIdentifier","src":"461:5:51"},"nativeSrc":"461:16:51","nodeType":"YulFunctionCall","src":"461:16:51"},"variables":[{"name":"value","nativeSrc":"452:5:51","nodeType":"YulTypedName","src":"452:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"532:5:51","nodeType":"YulIdentifier","src":"532:5:51"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"486:45:51","nodeType":"YulIdentifier","src":"486:45:51"},"nativeSrc":"486:52:51","nodeType":"YulFunctionCall","src":"486:52:51"},"nativeSrc":"486:52:51","nodeType":"YulExpressionStatement","src":"486:52:51"},{"nativeSrc":"547:15:51","nodeType":"YulAssignment","src":"547:15:51","value":{"name":"value","nativeSrc":"557:5:51","nodeType":"YulIdentifier","src":"557:5:51"},"variableNames":[{"name":"value0","nativeSrc":"547:6:51","nodeType":"YulIdentifier","src":"547:6:51"}]},{"nativeSrc":"571:40:51","nodeType":"YulVariableDeclaration","src":"571:40:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:51","nodeType":"YulIdentifier","src":"596:9:51"},{"kind":"number","nativeSrc":"607:2:51","nodeType":"YulLiteral","src":"607:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"592:3:51","nodeType":"YulIdentifier","src":"592:3:51"},"nativeSrc":"592:18:51","nodeType":"YulFunctionCall","src":"592:18:51"}],"functionName":{"name":"mload","nativeSrc":"586:5:51","nodeType":"YulIdentifier","src":"586:5:51"},"nativeSrc":"586:25:51","nodeType":"YulFunctionCall","src":"586:25:51"},"variables":[{"name":"value_1","nativeSrc":"575:7:51","nodeType":"YulTypedName","src":"575:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"666:7:51","nodeType":"YulIdentifier","src":"666:7:51"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"620:45:51","nodeType":"YulIdentifier","src":"620:45:51"},"nativeSrc":"620:54:51","nodeType":"YulFunctionCall","src":"620:54:51"},"nativeSrc":"620:54:51","nodeType":"YulExpressionStatement","src":"620:54:51"},{"nativeSrc":"683:17:51","nodeType":"YulAssignment","src":"683:17:51","value":{"name":"value_1","nativeSrc":"693:7:51","nodeType":"YulIdentifier","src":"693:7:51"},"variableNames":[{"name":"value1","nativeSrc":"683:6:51","nodeType":"YulIdentifier","src":"683:6:51"}]},{"nativeSrc":"709:40:51","nodeType":"YulVariableDeclaration","src":"709:40:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"734:9:51","nodeType":"YulIdentifier","src":"734:9:51"},{"kind":"number","nativeSrc":"745:2:51","nodeType":"YulLiteral","src":"745:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"730:3:51","nodeType":"YulIdentifier","src":"730:3:51"},"nativeSrc":"730:18:51","nodeType":"YulFunctionCall","src":"730:18:51"}],"functionName":{"name":"mload","nativeSrc":"724:5:51","nodeType":"YulIdentifier","src":"724:5:51"},"nativeSrc":"724:25:51","nodeType":"YulFunctionCall","src":"724:25:51"},"variables":[{"name":"value_2","nativeSrc":"713:7:51","nodeType":"YulTypedName","src":"713:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"804:7:51","nodeType":"YulIdentifier","src":"804:7:51"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"758:45:51","nodeType":"YulIdentifier","src":"758:45:51"},"nativeSrc":"758:54:51","nodeType":"YulFunctionCall","src":"758:54:51"},"nativeSrc":"758:54:51","nodeType":"YulExpressionStatement","src":"758:54:51"},{"nativeSrc":"821:17:51","nodeType":"YulAssignment","src":"821:17:51","value":{"name":"value_2","nativeSrc":"831:7:51","nodeType":"YulIdentifier","src":"831:7:51"},"variableNames":[{"name":"value2","nativeSrc":"821:6:51","nodeType":"YulIdentifier","src":"821:6:51"}]}]},"name":"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4969t_contract$_OpenCampusCertificateNFTv1_$4947t_contract$_IRevocationRegistry_$5000_fromMemory","nativeSrc":"171:673:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"327:9:51","nodeType":"YulTypedName","src":"327:9:51","type":""},{"name":"dataEnd","nativeSrc":"338:7:51","nodeType":"YulTypedName","src":"338:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"350:6:51","nodeType":"YulTypedName","src":"350:6:51","type":""},{"name":"value1","nativeSrc":"358:6:51","nodeType":"YulTypedName","src":"358:6:51","type":""},{"name":"value2","nativeSrc":"366:6:51","nodeType":"YulTypedName","src":"366:6:51","type":""}],"src":"171:673:51"},{"body":{"nativeSrc":"898:176:51","nodeType":"YulBlock","src":"898:176:51","statements":[{"nativeSrc":"908:17:51","nodeType":"YulAssignment","src":"908:17:51","value":{"arguments":[{"name":"x","nativeSrc":"920:1:51","nodeType":"YulIdentifier","src":"920:1:51"},{"name":"y","nativeSrc":"923:1:51","nodeType":"YulIdentifier","src":"923:1:51"}],"functionName":{"name":"sub","nativeSrc":"916:3:51","nodeType":"YulIdentifier","src":"916:3:51"},"nativeSrc":"916:9:51","nodeType":"YulFunctionCall","src":"916:9:51"},"variableNames":[{"name":"diff","nativeSrc":"908:4:51","nodeType":"YulIdentifier","src":"908:4:51"}]},{"body":{"nativeSrc":"957:111:51","nodeType":"YulBlock","src":"957:111:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"978:1:51","nodeType":"YulLiteral","src":"978:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"985:3:51","nodeType":"YulLiteral","src":"985:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"990:10:51","nodeType":"YulLiteral","src":"990:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"981:3:51","nodeType":"YulIdentifier","src":"981:3:51"},"nativeSrc":"981:20:51","nodeType":"YulFunctionCall","src":"981:20:51"}],"functionName":{"name":"mstore","nativeSrc":"971:6:51","nodeType":"YulIdentifier","src":"971:6:51"},"nativeSrc":"971:31:51","nodeType":"YulFunctionCall","src":"971:31:51"},"nativeSrc":"971:31:51","nodeType":"YulExpressionStatement","src":"971:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1022:1:51","nodeType":"YulLiteral","src":"1022:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"1025:4:51","nodeType":"YulLiteral","src":"1025:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1015:6:51","nodeType":"YulIdentifier","src":"1015:6:51"},"nativeSrc":"1015:15:51","nodeType":"YulFunctionCall","src":"1015:15:51"},"nativeSrc":"1015:15:51","nodeType":"YulExpressionStatement","src":"1015:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1050:1:51","nodeType":"YulLiteral","src":"1050:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1053:4:51","nodeType":"YulLiteral","src":"1053:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1043:6:51","nodeType":"YulIdentifier","src":"1043:6:51"},"nativeSrc":"1043:15:51","nodeType":"YulFunctionCall","src":"1043:15:51"},"nativeSrc":"1043:15:51","nodeType":"YulExpressionStatement","src":"1043:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"940:4:51","nodeType":"YulIdentifier","src":"940:4:51"},{"name":"x","nativeSrc":"946:1:51","nodeType":"YulIdentifier","src":"946:1:51"}],"functionName":{"name":"gt","nativeSrc":"937:2:51","nodeType":"YulIdentifier","src":"937:2:51"},"nativeSrc":"937:11:51","nodeType":"YulFunctionCall","src":"937:11:51"},"nativeSrc":"934:134:51","nodeType":"YulIf","src":"934:134:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"849:225:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"880:1:51","nodeType":"YulTypedName","src":"880:1:51","type":""},{"name":"y","nativeSrc":"883:1:51","nodeType":"YulTypedName","src":"883:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"889:4:51","nodeType":"YulTypedName","src":"889:4:51","type":""}],"src":"849:225:51"}]},"contents":"{\n    { }\n    function validator_revert_contract_IIssuersDIDRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4969t_contract$_OpenCampusCertificateNFTv1_$4947t_contract$_IRevocationRegistry_$5000_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IIssuersDIDRegistry(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IIssuersDIDRegistry(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IIssuersDIDRegistry(value_2)\n        value2 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b5060405162000efa38038062000efa8339810160408190526200003491620001d2565b336200004b81620000446200007b565b90620000b1565b506001600160a01b0392831660805290821660a052600080546001600160a01b0319169190921617905562000248565b600080620000ab60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000226565b92915050565b6001600160a01b03811615620001085781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001286307f5828d60e41b6001620001206200012c565b91906200015c565b5050565b600080620000ab60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000226565b600160e01b6001600160e01b03198316016200018b576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001cf57600080fd5b50565b600080600060608486031215620001e857600080fd5b8351620001f581620001b9565b60208501519093506200020881620001b9565b60408501519092506200021b81620001b9565b809150509250925092565b81810381811115620000ab57634e487b7160e01b600052601160045260246000fd5b60805160a051610c8c6200026e6000396000610442015260006102c40152610c8c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b146100a957806395f94bc4146100d6578063f2fde38b146100e957600080fd5b806301ffc9a71461006c5780634d5b042314610094575b600080fd5b61007f61007a36600461084b565b6100fc565b60405190151581526020015b60405180910390f35b6100a76100a23660046108b6565b610116565b005b6100b16104f0565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100a76100e436600461096f565b61051c565b6100a76100f736600461096f565b610575565b60006101108261010a61058c565b906105ba565b92915050565b60418114610150576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160218301359083359060208086013591600091600191610179918c918c918c9101610a6f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156101f5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191506000905061023060a0890189610b85565b604051602001610241929190610bea565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff84811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610bfa565b156104b2576000546040517fa3a2656a00000000000000000000000000000000000000000000000000000000815260048101839052602481018b905273ffffffffffffffffffffffffffffffffffffffff9091169063a3a2656a90604401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610bfa565b15610405576040517f6e80385700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f54c7be0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906354c7be069061047b908d908d908d90600401610a6f565b600060405180830381600087803b15801561049557600080fd5b505af11580156104a9573d6000803e3d6000fd5b505050506104e4565b6040517fe41bfc5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b60006105176104fd610694565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61052e33610528610694565b906106c2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6105893382610582610694565b9190610736565b50565b60008061011060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610c1c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161060a57506000610110565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161065b57506001610110565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061011060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610c1c565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610732576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146107a3576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610729565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108455783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60006020828403121561085d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461088d57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461058957600080fd5b6000806000806000608086880312156108ce57600080fd5b85356108d981610894565b945060208601359350604086013567ffffffffffffffff808211156108fd57600080fd5b9087019060e0828a03121561091157600080fd5b9093506060870135908082111561092757600080fd5b818801915088601f83011261093b57600080fd5b81358181111561094a57600080fd5b89602082850101111561095c57600080fd5b9699959850939650602001949392505050565b60006020828403121561098157600080fd5b813561088d81610894565b803561ffff8116811461099e57600080fd5b919050565b803567ffffffffffffffff8116811461099e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109f057600080fd5b830160208101925035905067ffffffffffffffff811115610a1057600080fd5b803603821315610a1f57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061ffff80610aa48561098c565b16606084015280610ab76020860161098c565b1660808401525067ffffffffffffffff610ad3604085016109a3565b1660a0830152610ae5606084016109a3565b67ffffffffffffffff1660c0830152610b00608084016109a3565b67ffffffffffffffff1660e0830152610b1c60a08401846109bb565b60e0610100850152610b3361014085018284610a26565b915050610b4360c08501856109bb565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa085840301610120860152610b79838284610a26565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bba57600080fd5b83018035915067ffffffffffffffff821115610bd557600080fd5b602001915036819003821315610a1f57600080fd5b8183823760009101908152919050565b600060208284031215610c0c57600080fd5b8151801515811461088d57600080fd5b81810381811115610110577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220c82d58a890868dd2ba6f4ee020933f896a0640cbf8013599302b8a01c5f8df1764736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xEFA CODESIZE SUB DUP1 PUSH3 0xEFA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1D2 JUMP JUMPDEST CALLER PUSH3 0x4B DUP2 PUSH3 0x44 PUSH3 0x7B JUMP JUMPDEST SWAP1 PUSH3 0xB1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x80 MSTORE SWAP1 DUP3 AND PUSH1 0xA0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH3 0x248 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAB PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x226 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x108 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x128 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x120 PUSH3 0x12C JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x15C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAB PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x226 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x18B JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x1F5 DUP2 PUSH3 0x1B9 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x208 DUP2 PUSH3 0x1B9 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x21B DUP2 PUSH3 0x1B9 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xAB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0xC8C PUSH3 0x26E PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x442 ADD MSTORE PUSH1 0x0 PUSH2 0x2C4 ADD MSTORE PUSH2 0xC8C PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x4D5B0423 EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xFC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B6 JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST PUSH2 0xA7 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x96F JUMP JUMPDEST PUSH2 0x51C JUMP JUMPDEST PUSH2 0xA7 PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96F JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x110 DUP3 PUSH2 0x10A PUSH2 0x58C JUMP JUMPDEST SWAP1 PUSH2 0x5BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x179 SWAP2 DUP13 SWAP2 DUP13 SWAP2 DUP13 SWAP2 ADD PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x230 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x241 SWAP3 SWAP2 SWAP1 PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32F SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST ISZERO PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6E80385700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x54C7BE0600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x54C7BE06 SWAP1 PUSH2 0x47B SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE41BFC5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x517 PUSH2 0x4FD PUSH2 0x694 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x52E CALLER PUSH2 0x528 PUSH2 0x694 JUMP JUMPDEST SWAP1 PUSH2 0x6C2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x589 CALLER DUP3 PUSH2 0x582 PUSH2 0x694 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x110 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x60A JUMPI POP PUSH1 0x0 PUSH2 0x110 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x65B JUMPI POP PUSH1 0x1 PUSH2 0x110 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x110 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xC1C JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x7A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x729 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x845 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8D9 DUP2 PUSH2 0x894 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0xE0 DUP3 DUP11 SUB SLT ISZERO PUSH2 0x911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x927 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x94A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x88D DUP2 PUSH2 0x894 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFFFF DUP1 PUSH2 0xAA4 DUP6 PUSH2 0x98C JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH2 0xAB7 PUSH1 0x20 DUP7 ADD PUSH2 0x98C JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0xAD3 PUSH1 0x40 DUP6 ADD PUSH2 0x9A3 JUMP JUMPDEST AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0xAE5 PUSH1 0x60 DUP5 ADD PUSH2 0x9A3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xB00 PUSH1 0x80 DUP5 ADD PUSH2 0x9A3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0xB1C PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0xE0 PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0xB33 PUSH2 0x140 DUP6 ADD DUP3 DUP5 PUSH2 0xA26 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB43 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x9BB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP6 DUP5 SUB ADD PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0xB79 DUP4 DUP3 DUP5 PUSH2 0xA26 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xBD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x110 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0x2D PC 0xA8 SWAP1 DUP7 DUP14 0xD2 0xBA PUSH16 0x4EE020933F896A0640CBF8013599302B DUP11 ADD 0xC5 0xF8 0xDF OR PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"595:2903:46:-:0;;;1192:296;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1359:10;1008:63:2;1359:10:46;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;1381:26:46;;::::1;;::::0;1417:14;;::::1;;::::0;1441:19:::1;:40:::0;;-1:-1:-1;;;;;;1441:40:46::1;::::0;;;::::1;;::::0;;595:2903;;5065:174:13;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:13:o;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:152:51:-;-1:-1:-1;;;;;110:31:51;;100:42;;90:70;;156:1;153;146:12;90:70;14:152;:::o;171:673::-;350:6;358;366;419:2;407:9;398:7;394:23;390:32;387:52;;;435:1;432;425:12;387:52;467:9;461:16;486:52;532:5;486:52;:::i;:::-;607:2;592:18;;586:25;557:5;;-1:-1:-1;620:54:51;586:25;620:54;:::i;:::-;745:2;730:18;;724:25;693:7;;-1:-1:-1;758:54:51;724:25;758:54;:::i;:::-;831:7;821:17;;;171:673;;;;;:::o;849:225::-;916:9;;;937:11;;;934:134;;;990:10;985:3;981:20;978:1;971:31;1025:4;1022:1;1015:15;1053:4;1050:1;1043:15;849:225;595:2903:46;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_4065":{"entryPoint":null,"id":4065,"parameterSlots":0,"returnSlots":1},"@enforceIsContractOwner_819":{"entryPoint":1730,"id":819,"parameterSlots":2,"returnSlots":0},"@layout_851":{"entryPoint":1684,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":1420,"id":999,"parameterSlots":0,"returnSlots":1},"@mint_4412":{"entryPoint":278,"id":4412,"parameterSlots":5,"returnSlots":0},"@owner_209":{"entryPoint":1264,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_772":{"entryPoint":null,"id":772,"parameterSlots":1,"returnSlots":1},"@setRevocationRegistry_4325":{"entryPoint":1308,"id":4325,"parameterSlots":1,"returnSlots":0},"@supportsInterface_881":{"entryPoint":252,"id":881,"parameterSlots":1,"returnSlots":1},"@supportsInterface_987":{"entryPoint":1466,"id":987,"parameterSlots":2,"returnSlots":1},"@transferOwnership_226":{"entryPoint":1397,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_759":{"entryPoint":1846,"id":759,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":2230,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3066,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":2123,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000":{"entryPoint":2415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint16":{"entryPoint":2444,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":2467,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":2598,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3050,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$5017_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$5017_memory_ptr__fromStack_reversed":{"entryPoint":2671,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"access_calldata_tail_t_string_calldata_ptr":{"entryPoint":2949,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_string_calldata":{"entryPoint":2491,"id":null,"parameterSlots":2,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":3100,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":2196,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:7742:51","nodeType":"YulBlock","src":"0:7742:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"83:263:51","nodeType":"YulBlock","src":"83:263:51","statements":[{"body":{"nativeSrc":"129:16:51","nodeType":"YulBlock","src":"129:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:51","nodeType":"YulLiteral","src":"138:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:51","nodeType":"YulLiteral","src":"141:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:51","nodeType":"YulIdentifier","src":"131:6:51"},"nativeSrc":"131:12:51","nodeType":"YulFunctionCall","src":"131:12:51"},"nativeSrc":"131:12:51","nodeType":"YulExpressionStatement","src":"131:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:51","nodeType":"YulIdentifier","src":"104:7:51"},{"name":"headStart","nativeSrc":"113:9:51","nodeType":"YulIdentifier","src":"113:9:51"}],"functionName":{"name":"sub","nativeSrc":"100:3:51","nodeType":"YulIdentifier","src":"100:3:51"},"nativeSrc":"100:23:51","nodeType":"YulFunctionCall","src":"100:23:51"},{"kind":"number","nativeSrc":"125:2:51","nodeType":"YulLiteral","src":"125:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:51","nodeType":"YulIdentifier","src":"96:3:51"},"nativeSrc":"96:32:51","nodeType":"YulFunctionCall","src":"96:32:51"},"nativeSrc":"93:52:51","nodeType":"YulIf","src":"93:52:51"},{"nativeSrc":"154:36:51","nodeType":"YulVariableDeclaration","src":"154:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:51","nodeType":"YulIdentifier","src":"180:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:51","nodeType":"YulIdentifier","src":"167:12:51"},"nativeSrc":"167:23:51","nodeType":"YulFunctionCall","src":"167:23:51"},"variables":[{"name":"value","nativeSrc":"158:5:51","nodeType":"YulTypedName","src":"158:5:51","type":""}]},{"body":{"nativeSrc":"300:16:51","nodeType":"YulBlock","src":"300:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:51","nodeType":"YulLiteral","src":"309:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:51","nodeType":"YulLiteral","src":"312:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:51","nodeType":"YulIdentifier","src":"302:6:51"},"nativeSrc":"302:12:51","nodeType":"YulFunctionCall","src":"302:12:51"},"nativeSrc":"302:12:51","nodeType":"YulExpressionStatement","src":"302:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:51","nodeType":"YulIdentifier","src":"212:5:51"},{"arguments":[{"name":"value","nativeSrc":"223:5:51","nodeType":"YulIdentifier","src":"223:5:51"},{"kind":"number","nativeSrc":"230:66:51","nodeType":"YulLiteral","src":"230:66:51","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:51","nodeType":"YulIdentifier","src":"219:3:51"},"nativeSrc":"219:78:51","nodeType":"YulFunctionCall","src":"219:78:51"}],"functionName":{"name":"eq","nativeSrc":"209:2:51","nodeType":"YulIdentifier","src":"209:2:51"},"nativeSrc":"209:89:51","nodeType":"YulFunctionCall","src":"209:89:51"}],"functionName":{"name":"iszero","nativeSrc":"202:6:51","nodeType":"YulIdentifier","src":"202:6:51"},"nativeSrc":"202:97:51","nodeType":"YulFunctionCall","src":"202:97:51"},"nativeSrc":"199:117:51","nodeType":"YulIf","src":"199:117:51"},{"nativeSrc":"325:15:51","nodeType":"YulAssignment","src":"325:15:51","value":{"name":"value","nativeSrc":"335:5:51","nodeType":"YulIdentifier","src":"335:5:51"},"variableNames":[{"name":"value0","nativeSrc":"325:6:51","nodeType":"YulIdentifier","src":"325:6:51"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:51","nodeType":"YulTypedName","src":"49:9:51","type":""},{"name":"dataEnd","nativeSrc":"60:7:51","nodeType":"YulTypedName","src":"60:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:51","nodeType":"YulTypedName","src":"72:6:51","type":""}],"src":"14:332:51"},{"body":{"nativeSrc":"446:92:51","nodeType":"YulBlock","src":"446:92:51","statements":[{"nativeSrc":"456:26:51","nodeType":"YulAssignment","src":"456:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:51","nodeType":"YulIdentifier","src":"468:9:51"},{"kind":"number","nativeSrc":"479:2:51","nodeType":"YulLiteral","src":"479:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:51","nodeType":"YulIdentifier","src":"464:3:51"},"nativeSrc":"464:18:51","nodeType":"YulFunctionCall","src":"464:18:51"},"variableNames":[{"name":"tail","nativeSrc":"456:4:51","nodeType":"YulIdentifier","src":"456:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:51","nodeType":"YulIdentifier","src":"498:9:51"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:51","nodeType":"YulIdentifier","src":"523:6:51"}],"functionName":{"name":"iszero","nativeSrc":"516:6:51","nodeType":"YulIdentifier","src":"516:6:51"},"nativeSrc":"516:14:51","nodeType":"YulFunctionCall","src":"516:14:51"}],"functionName":{"name":"iszero","nativeSrc":"509:6:51","nodeType":"YulIdentifier","src":"509:6:51"},"nativeSrc":"509:22:51","nodeType":"YulFunctionCall","src":"509:22:51"}],"functionName":{"name":"mstore","nativeSrc":"491:6:51","nodeType":"YulIdentifier","src":"491:6:51"},"nativeSrc":"491:41:51","nodeType":"YulFunctionCall","src":"491:41:51"},"nativeSrc":"491:41:51","nodeType":"YulExpressionStatement","src":"491:41:51"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:51","nodeType":"YulTypedName","src":"415:9:51","type":""},{"name":"value0","nativeSrc":"426:6:51","nodeType":"YulTypedName","src":"426:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:51","nodeType":"YulTypedName","src":"437:4:51","type":""}],"src":"351:187:51"},{"body":{"nativeSrc":"588:109:51","nodeType":"YulBlock","src":"588:109:51","statements":[{"body":{"nativeSrc":"675:16:51","nodeType":"YulBlock","src":"675:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"684:1:51","nodeType":"YulLiteral","src":"684:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"687:1:51","nodeType":"YulLiteral","src":"687:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"677:6:51","nodeType":"YulIdentifier","src":"677:6:51"},"nativeSrc":"677:12:51","nodeType":"YulFunctionCall","src":"677:12:51"},"nativeSrc":"677:12:51","nodeType":"YulExpressionStatement","src":"677:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"611:5:51","nodeType":"YulIdentifier","src":"611:5:51"},{"arguments":[{"name":"value","nativeSrc":"622:5:51","nodeType":"YulIdentifier","src":"622:5:51"},{"kind":"number","nativeSrc":"629:42:51","nodeType":"YulLiteral","src":"629:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"618:3:51","nodeType":"YulIdentifier","src":"618:3:51"},"nativeSrc":"618:54:51","nodeType":"YulFunctionCall","src":"618:54:51"}],"functionName":{"name":"eq","nativeSrc":"608:2:51","nodeType":"YulIdentifier","src":"608:2:51"},"nativeSrc":"608:65:51","nodeType":"YulFunctionCall","src":"608:65:51"}],"functionName":{"name":"iszero","nativeSrc":"601:6:51","nodeType":"YulIdentifier","src":"601:6:51"},"nativeSrc":"601:73:51","nodeType":"YulFunctionCall","src":"601:73:51"},"nativeSrc":"598:93:51","nodeType":"YulIf","src":"598:93:51"}]},"name":"validator_revert_address","nativeSrc":"543:154:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"577:5:51","nodeType":"YulTypedName","src":"577:5:51","type":""}],"src":"543:154:51"},{"body":{"nativeSrc":"870:893:51","nodeType":"YulBlock","src":"870:893:51","statements":[{"body":{"nativeSrc":"917:16:51","nodeType":"YulBlock","src":"917:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"926:1:51","nodeType":"YulLiteral","src":"926:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"929:1:51","nodeType":"YulLiteral","src":"929:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"919:6:51","nodeType":"YulIdentifier","src":"919:6:51"},"nativeSrc":"919:12:51","nodeType":"YulFunctionCall","src":"919:12:51"},"nativeSrc":"919:12:51","nodeType":"YulExpressionStatement","src":"919:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"891:7:51","nodeType":"YulIdentifier","src":"891:7:51"},{"name":"headStart","nativeSrc":"900:9:51","nodeType":"YulIdentifier","src":"900:9:51"}],"functionName":{"name":"sub","nativeSrc":"887:3:51","nodeType":"YulIdentifier","src":"887:3:51"},"nativeSrc":"887:23:51","nodeType":"YulFunctionCall","src":"887:23:51"},{"kind":"number","nativeSrc":"912:3:51","nodeType":"YulLiteral","src":"912:3:51","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"883:3:51","nodeType":"YulIdentifier","src":"883:3:51"},"nativeSrc":"883:33:51","nodeType":"YulFunctionCall","src":"883:33:51"},"nativeSrc":"880:53:51","nodeType":"YulIf","src":"880:53:51"},{"nativeSrc":"942:36:51","nodeType":"YulVariableDeclaration","src":"942:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"968:9:51","nodeType":"YulIdentifier","src":"968:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"955:12:51","nodeType":"YulIdentifier","src":"955:12:51"},"nativeSrc":"955:23:51","nodeType":"YulFunctionCall","src":"955:23:51"},"variables":[{"name":"value","nativeSrc":"946:5:51","nodeType":"YulTypedName","src":"946:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1012:5:51","nodeType":"YulIdentifier","src":"1012:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"987:24:51","nodeType":"YulIdentifier","src":"987:24:51"},"nativeSrc":"987:31:51","nodeType":"YulFunctionCall","src":"987:31:51"},"nativeSrc":"987:31:51","nodeType":"YulExpressionStatement","src":"987:31:51"},{"nativeSrc":"1027:15:51","nodeType":"YulAssignment","src":"1027:15:51","value":{"name":"value","nativeSrc":"1037:5:51","nodeType":"YulIdentifier","src":"1037:5:51"},"variableNames":[{"name":"value0","nativeSrc":"1027:6:51","nodeType":"YulIdentifier","src":"1027:6:51"}]},{"nativeSrc":"1051:42:51","nodeType":"YulAssignment","src":"1051:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1078:9:51","nodeType":"YulIdentifier","src":"1078:9:51"},{"kind":"number","nativeSrc":"1089:2:51","nodeType":"YulLiteral","src":"1089:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1074:3:51","nodeType":"YulIdentifier","src":"1074:3:51"},"nativeSrc":"1074:18:51","nodeType":"YulFunctionCall","src":"1074:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"1061:12:51","nodeType":"YulIdentifier","src":"1061:12:51"},"nativeSrc":"1061:32:51","nodeType":"YulFunctionCall","src":"1061:32:51"},"variableNames":[{"name":"value1","nativeSrc":"1051:6:51","nodeType":"YulIdentifier","src":"1051:6:51"}]},{"nativeSrc":"1102:46:51","nodeType":"YulVariableDeclaration","src":"1102:46:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1133:9:51","nodeType":"YulIdentifier","src":"1133:9:51"},{"kind":"number","nativeSrc":"1144:2:51","nodeType":"YulLiteral","src":"1144:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1129:3:51","nodeType":"YulIdentifier","src":"1129:3:51"},"nativeSrc":"1129:18:51","nodeType":"YulFunctionCall","src":"1129:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"1116:12:51","nodeType":"YulIdentifier","src":"1116:12:51"},"nativeSrc":"1116:32:51","nodeType":"YulFunctionCall","src":"1116:32:51"},"variables":[{"name":"offset","nativeSrc":"1106:6:51","nodeType":"YulTypedName","src":"1106:6:51","type":""}]},{"nativeSrc":"1157:28:51","nodeType":"YulVariableDeclaration","src":"1157:28:51","value":{"kind":"number","nativeSrc":"1167:18:51","nodeType":"YulLiteral","src":"1167:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1161:2:51","nodeType":"YulTypedName","src":"1161:2:51","type":""}]},{"body":{"nativeSrc":"1212:16:51","nodeType":"YulBlock","src":"1212:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1221:1:51","nodeType":"YulLiteral","src":"1221:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1224:1:51","nodeType":"YulLiteral","src":"1224:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1214:6:51","nodeType":"YulIdentifier","src":"1214:6:51"},"nativeSrc":"1214:12:51","nodeType":"YulFunctionCall","src":"1214:12:51"},"nativeSrc":"1214:12:51","nodeType":"YulExpressionStatement","src":"1214:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1200:6:51","nodeType":"YulIdentifier","src":"1200:6:51"},{"name":"_1","nativeSrc":"1208:2:51","nodeType":"YulIdentifier","src":"1208:2:51"}],"functionName":{"name":"gt","nativeSrc":"1197:2:51","nodeType":"YulIdentifier","src":"1197:2:51"},"nativeSrc":"1197:14:51","nodeType":"YulFunctionCall","src":"1197:14:51"},"nativeSrc":"1194:34:51","nodeType":"YulIf","src":"1194:34:51"},{"nativeSrc":"1237:32:51","nodeType":"YulVariableDeclaration","src":"1237:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1251:9:51","nodeType":"YulIdentifier","src":"1251:9:51"},{"name":"offset","nativeSrc":"1262:6:51","nodeType":"YulIdentifier","src":"1262:6:51"}],"functionName":{"name":"add","nativeSrc":"1247:3:51","nodeType":"YulIdentifier","src":"1247:3:51"},"nativeSrc":"1247:22:51","nodeType":"YulFunctionCall","src":"1247:22:51"},"variables":[{"name":"_2","nativeSrc":"1241:2:51","nodeType":"YulTypedName","src":"1241:2:51","type":""}]},{"body":{"nativeSrc":"1308:16:51","nodeType":"YulBlock","src":"1308:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1317:1:51","nodeType":"YulLiteral","src":"1317:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1320:1:51","nodeType":"YulLiteral","src":"1320:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1310:6:51","nodeType":"YulIdentifier","src":"1310:6:51"},"nativeSrc":"1310:12:51","nodeType":"YulFunctionCall","src":"1310:12:51"},"nativeSrc":"1310:12:51","nodeType":"YulExpressionStatement","src":"1310:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1289:7:51","nodeType":"YulIdentifier","src":"1289:7:51"},{"name":"_2","nativeSrc":"1298:2:51","nodeType":"YulIdentifier","src":"1298:2:51"}],"functionName":{"name":"sub","nativeSrc":"1285:3:51","nodeType":"YulIdentifier","src":"1285:3:51"},"nativeSrc":"1285:16:51","nodeType":"YulFunctionCall","src":"1285:16:51"},{"kind":"number","nativeSrc":"1303:3:51","nodeType":"YulLiteral","src":"1303:3:51","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"1281:3:51","nodeType":"YulIdentifier","src":"1281:3:51"},"nativeSrc":"1281:26:51","nodeType":"YulFunctionCall","src":"1281:26:51"},"nativeSrc":"1278:46:51","nodeType":"YulIf","src":"1278:46:51"},{"nativeSrc":"1333:12:51","nodeType":"YulAssignment","src":"1333:12:51","value":{"name":"_2","nativeSrc":"1343:2:51","nodeType":"YulIdentifier","src":"1343:2:51"},"variableNames":[{"name":"value2","nativeSrc":"1333:6:51","nodeType":"YulIdentifier","src":"1333:6:51"}]},{"nativeSrc":"1354:48:51","nodeType":"YulVariableDeclaration","src":"1354:48:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1387:9:51","nodeType":"YulIdentifier","src":"1387:9:51"},{"kind":"number","nativeSrc":"1398:2:51","nodeType":"YulLiteral","src":"1398:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1383:3:51","nodeType":"YulIdentifier","src":"1383:3:51"},"nativeSrc":"1383:18:51","nodeType":"YulFunctionCall","src":"1383:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"1370:12:51","nodeType":"YulIdentifier","src":"1370:12:51"},"nativeSrc":"1370:32:51","nodeType":"YulFunctionCall","src":"1370:32:51"},"variables":[{"name":"offset_1","nativeSrc":"1358:8:51","nodeType":"YulTypedName","src":"1358:8:51","type":""}]},{"body":{"nativeSrc":"1431:16:51","nodeType":"YulBlock","src":"1431:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1440:1:51","nodeType":"YulLiteral","src":"1440:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1443:1:51","nodeType":"YulLiteral","src":"1443:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1433:6:51","nodeType":"YulIdentifier","src":"1433:6:51"},"nativeSrc":"1433:12:51","nodeType":"YulFunctionCall","src":"1433:12:51"},"nativeSrc":"1433:12:51","nodeType":"YulExpressionStatement","src":"1433:12:51"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1417:8:51","nodeType":"YulIdentifier","src":"1417:8:51"},{"name":"_1","nativeSrc":"1427:2:51","nodeType":"YulIdentifier","src":"1427:2:51"}],"functionName":{"name":"gt","nativeSrc":"1414:2:51","nodeType":"YulIdentifier","src":"1414:2:51"},"nativeSrc":"1414:16:51","nodeType":"YulFunctionCall","src":"1414:16:51"},"nativeSrc":"1411:36:51","nodeType":"YulIf","src":"1411:36:51"},{"nativeSrc":"1456:34:51","nodeType":"YulVariableDeclaration","src":"1456:34:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1470:9:51","nodeType":"YulIdentifier","src":"1470:9:51"},{"name":"offset_1","nativeSrc":"1481:8:51","nodeType":"YulIdentifier","src":"1481:8:51"}],"functionName":{"name":"add","nativeSrc":"1466:3:51","nodeType":"YulIdentifier","src":"1466:3:51"},"nativeSrc":"1466:24:51","nodeType":"YulFunctionCall","src":"1466:24:51"},"variables":[{"name":"_3","nativeSrc":"1460:2:51","nodeType":"YulTypedName","src":"1460:2:51","type":""}]},{"body":{"nativeSrc":"1538:16:51","nodeType":"YulBlock","src":"1538:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1547:1:51","nodeType":"YulLiteral","src":"1547:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1550:1:51","nodeType":"YulLiteral","src":"1550:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1540:6:51","nodeType":"YulIdentifier","src":"1540:6:51"},"nativeSrc":"1540:12:51","nodeType":"YulFunctionCall","src":"1540:12:51"},"nativeSrc":"1540:12:51","nodeType":"YulExpressionStatement","src":"1540:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"1517:2:51","nodeType":"YulIdentifier","src":"1517:2:51"},{"kind":"number","nativeSrc":"1521:4:51","nodeType":"YulLiteral","src":"1521:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1513:3:51","nodeType":"YulIdentifier","src":"1513:3:51"},"nativeSrc":"1513:13:51","nodeType":"YulFunctionCall","src":"1513:13:51"},{"name":"dataEnd","nativeSrc":"1528:7:51","nodeType":"YulIdentifier","src":"1528:7:51"}],"functionName":{"name":"slt","nativeSrc":"1509:3:51","nodeType":"YulIdentifier","src":"1509:3:51"},"nativeSrc":"1509:27:51","nodeType":"YulFunctionCall","src":"1509:27:51"}],"functionName":{"name":"iszero","nativeSrc":"1502:6:51","nodeType":"YulIdentifier","src":"1502:6:51"},"nativeSrc":"1502:35:51","nodeType":"YulFunctionCall","src":"1502:35:51"},"nativeSrc":"1499:55:51","nodeType":"YulIf","src":"1499:55:51"},{"nativeSrc":"1563:30:51","nodeType":"YulVariableDeclaration","src":"1563:30:51","value":{"arguments":[{"name":"_3","nativeSrc":"1590:2:51","nodeType":"YulIdentifier","src":"1590:2:51"}],"functionName":{"name":"calldataload","nativeSrc":"1577:12:51","nodeType":"YulIdentifier","src":"1577:12:51"},"nativeSrc":"1577:16:51","nodeType":"YulFunctionCall","src":"1577:16:51"},"variables":[{"name":"length","nativeSrc":"1567:6:51","nodeType":"YulTypedName","src":"1567:6:51","type":""}]},{"body":{"nativeSrc":"1620:16:51","nodeType":"YulBlock","src":"1620:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1629:1:51","nodeType":"YulLiteral","src":"1629:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1632:1:51","nodeType":"YulLiteral","src":"1632:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1622:6:51","nodeType":"YulIdentifier","src":"1622:6:51"},"nativeSrc":"1622:12:51","nodeType":"YulFunctionCall","src":"1622:12:51"},"nativeSrc":"1622:12:51","nodeType":"YulExpressionStatement","src":"1622:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1608:6:51","nodeType":"YulIdentifier","src":"1608:6:51"},{"name":"_1","nativeSrc":"1616:2:51","nodeType":"YulIdentifier","src":"1616:2:51"}],"functionName":{"name":"gt","nativeSrc":"1605:2:51","nodeType":"YulIdentifier","src":"1605:2:51"},"nativeSrc":"1605:14:51","nodeType":"YulFunctionCall","src":"1605:14:51"},"nativeSrc":"1602:34:51","nodeType":"YulIf","src":"1602:34:51"},{"body":{"nativeSrc":"1686:16:51","nodeType":"YulBlock","src":"1686:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1695:1:51","nodeType":"YulLiteral","src":"1695:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1698:1:51","nodeType":"YulLiteral","src":"1698:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1688:6:51","nodeType":"YulIdentifier","src":"1688:6:51"},"nativeSrc":"1688:12:51","nodeType":"YulFunctionCall","src":"1688:12:51"},"nativeSrc":"1688:12:51","nodeType":"YulExpressionStatement","src":"1688:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"1659:2:51","nodeType":"YulIdentifier","src":"1659:2:51"},{"name":"length","nativeSrc":"1663:6:51","nodeType":"YulIdentifier","src":"1663:6:51"}],"functionName":{"name":"add","nativeSrc":"1655:3:51","nodeType":"YulIdentifier","src":"1655:3:51"},"nativeSrc":"1655:15:51","nodeType":"YulFunctionCall","src":"1655:15:51"},{"kind":"number","nativeSrc":"1672:2:51","nodeType":"YulLiteral","src":"1672:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1651:3:51","nodeType":"YulIdentifier","src":"1651:3:51"},"nativeSrc":"1651:24:51","nodeType":"YulFunctionCall","src":"1651:24:51"},{"name":"dataEnd","nativeSrc":"1677:7:51","nodeType":"YulIdentifier","src":"1677:7:51"}],"functionName":{"name":"gt","nativeSrc":"1648:2:51","nodeType":"YulIdentifier","src":"1648:2:51"},"nativeSrc":"1648:37:51","nodeType":"YulFunctionCall","src":"1648:37:51"},"nativeSrc":"1645:57:51","nodeType":"YulIf","src":"1645:57:51"},{"nativeSrc":"1711:21:51","nodeType":"YulAssignment","src":"1711:21:51","value":{"arguments":[{"name":"_3","nativeSrc":"1725:2:51","nodeType":"YulIdentifier","src":"1725:2:51"},{"kind":"number","nativeSrc":"1729:2:51","nodeType":"YulLiteral","src":"1729:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1721:3:51","nodeType":"YulIdentifier","src":"1721:3:51"},"nativeSrc":"1721:11:51","nodeType":"YulFunctionCall","src":"1721:11:51"},"variableNames":[{"name":"value3","nativeSrc":"1711:6:51","nodeType":"YulIdentifier","src":"1711:6:51"}]},{"nativeSrc":"1741:16:51","nodeType":"YulAssignment","src":"1741:16:51","value":{"name":"length","nativeSrc":"1751:6:51","nodeType":"YulIdentifier","src":"1751:6:51"},"variableNames":[{"name":"value4","nativeSrc":"1741:6:51","nodeType":"YulIdentifier","src":"1741:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"702:1061:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"804:9:51","nodeType":"YulTypedName","src":"804:9:51","type":""},{"name":"dataEnd","nativeSrc":"815:7:51","nodeType":"YulTypedName","src":"815:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"827:6:51","nodeType":"YulTypedName","src":"827:6:51","type":""},{"name":"value1","nativeSrc":"835:6:51","nodeType":"YulTypedName","src":"835:6:51","type":""},{"name":"value2","nativeSrc":"843:6:51","nodeType":"YulTypedName","src":"843:6:51","type":""},{"name":"value3","nativeSrc":"851:6:51","nodeType":"YulTypedName","src":"851:6:51","type":""},{"name":"value4","nativeSrc":"859:6:51","nodeType":"YulTypedName","src":"859:6:51","type":""}],"src":"702:1061:51"},{"body":{"nativeSrc":"1869:125:51","nodeType":"YulBlock","src":"1869:125:51","statements":[{"nativeSrc":"1879:26:51","nodeType":"YulAssignment","src":"1879:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1891:9:51","nodeType":"YulIdentifier","src":"1891:9:51"},{"kind":"number","nativeSrc":"1902:2:51","nodeType":"YulLiteral","src":"1902:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1887:3:51","nodeType":"YulIdentifier","src":"1887:3:51"},"nativeSrc":"1887:18:51","nodeType":"YulFunctionCall","src":"1887:18:51"},"variableNames":[{"name":"tail","nativeSrc":"1879:4:51","nodeType":"YulIdentifier","src":"1879:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1921:9:51","nodeType":"YulIdentifier","src":"1921:9:51"},{"arguments":[{"name":"value0","nativeSrc":"1936:6:51","nodeType":"YulIdentifier","src":"1936:6:51"},{"kind":"number","nativeSrc":"1944:42:51","nodeType":"YulLiteral","src":"1944:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1932:3:51","nodeType":"YulIdentifier","src":"1932:3:51"},"nativeSrc":"1932:55:51","nodeType":"YulFunctionCall","src":"1932:55:51"}],"functionName":{"name":"mstore","nativeSrc":"1914:6:51","nodeType":"YulIdentifier","src":"1914:6:51"},"nativeSrc":"1914:74:51","nodeType":"YulFunctionCall","src":"1914:74:51"},"nativeSrc":"1914:74:51","nodeType":"YulExpressionStatement","src":"1914:74:51"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1768:226:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1838:9:51","nodeType":"YulTypedName","src":"1838:9:51","type":""},{"name":"value0","nativeSrc":"1849:6:51","nodeType":"YulTypedName","src":"1849:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1860:4:51","nodeType":"YulTypedName","src":"1860:4:51","type":""}],"src":"1768:226:51"},{"body":{"nativeSrc":"2097:177:51","nodeType":"YulBlock","src":"2097:177:51","statements":[{"body":{"nativeSrc":"2143:16:51","nodeType":"YulBlock","src":"2143:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2152:1:51","nodeType":"YulLiteral","src":"2152:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2155:1:51","nodeType":"YulLiteral","src":"2155:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2145:6:51","nodeType":"YulIdentifier","src":"2145:6:51"},"nativeSrc":"2145:12:51","nodeType":"YulFunctionCall","src":"2145:12:51"},"nativeSrc":"2145:12:51","nodeType":"YulExpressionStatement","src":"2145:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2118:7:51","nodeType":"YulIdentifier","src":"2118:7:51"},{"name":"headStart","nativeSrc":"2127:9:51","nodeType":"YulIdentifier","src":"2127:9:51"}],"functionName":{"name":"sub","nativeSrc":"2114:3:51","nodeType":"YulIdentifier","src":"2114:3:51"},"nativeSrc":"2114:23:51","nodeType":"YulFunctionCall","src":"2114:23:51"},{"kind":"number","nativeSrc":"2139:2:51","nodeType":"YulLiteral","src":"2139:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2110:3:51","nodeType":"YulIdentifier","src":"2110:3:51"},"nativeSrc":"2110:32:51","nodeType":"YulFunctionCall","src":"2110:32:51"},"nativeSrc":"2107:52:51","nodeType":"YulIf","src":"2107:52:51"},{"nativeSrc":"2168:36:51","nodeType":"YulVariableDeclaration","src":"2168:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2194:9:51","nodeType":"YulIdentifier","src":"2194:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2181:12:51","nodeType":"YulIdentifier","src":"2181:12:51"},"nativeSrc":"2181:23:51","nodeType":"YulFunctionCall","src":"2181:23:51"},"variables":[{"name":"value","nativeSrc":"2172:5:51","nodeType":"YulTypedName","src":"2172:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2238:5:51","nodeType":"YulIdentifier","src":"2238:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2213:24:51","nodeType":"YulIdentifier","src":"2213:24:51"},"nativeSrc":"2213:31:51","nodeType":"YulFunctionCall","src":"2213:31:51"},"nativeSrc":"2213:31:51","nodeType":"YulExpressionStatement","src":"2213:31:51"},{"nativeSrc":"2253:15:51","nodeType":"YulAssignment","src":"2253:15:51","value":{"name":"value","nativeSrc":"2263:5:51","nodeType":"YulIdentifier","src":"2263:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2253:6:51","nodeType":"YulIdentifier","src":"2253:6:51"}]}]},"name":"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000","nativeSrc":"1999:275:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2063:9:51","nodeType":"YulTypedName","src":"2063:9:51","type":""},{"name":"dataEnd","nativeSrc":"2074:7:51","nodeType":"YulTypedName","src":"2074:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2086:6:51","nodeType":"YulTypedName","src":"2086:6:51","type":""}],"src":"1999:275:51"},{"body":{"nativeSrc":"2349:177:51","nodeType":"YulBlock","src":"2349:177:51","statements":[{"body":{"nativeSrc":"2395:16:51","nodeType":"YulBlock","src":"2395:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2404:1:51","nodeType":"YulLiteral","src":"2404:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2407:1:51","nodeType":"YulLiteral","src":"2407:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2397:6:51","nodeType":"YulIdentifier","src":"2397:6:51"},"nativeSrc":"2397:12:51","nodeType":"YulFunctionCall","src":"2397:12:51"},"nativeSrc":"2397:12:51","nodeType":"YulExpressionStatement","src":"2397:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2370:7:51","nodeType":"YulIdentifier","src":"2370:7:51"},{"name":"headStart","nativeSrc":"2379:9:51","nodeType":"YulIdentifier","src":"2379:9:51"}],"functionName":{"name":"sub","nativeSrc":"2366:3:51","nodeType":"YulIdentifier","src":"2366:3:51"},"nativeSrc":"2366:23:51","nodeType":"YulFunctionCall","src":"2366:23:51"},{"kind":"number","nativeSrc":"2391:2:51","nodeType":"YulLiteral","src":"2391:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2362:3:51","nodeType":"YulIdentifier","src":"2362:3:51"},"nativeSrc":"2362:32:51","nodeType":"YulFunctionCall","src":"2362:32:51"},"nativeSrc":"2359:52:51","nodeType":"YulIf","src":"2359:52:51"},{"nativeSrc":"2420:36:51","nodeType":"YulVariableDeclaration","src":"2420:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2446:9:51","nodeType":"YulIdentifier","src":"2446:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2433:12:51","nodeType":"YulIdentifier","src":"2433:12:51"},"nativeSrc":"2433:23:51","nodeType":"YulFunctionCall","src":"2433:23:51"},"variables":[{"name":"value","nativeSrc":"2424:5:51","nodeType":"YulTypedName","src":"2424:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2490:5:51","nodeType":"YulIdentifier","src":"2490:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2465:24:51","nodeType":"YulIdentifier","src":"2465:24:51"},"nativeSrc":"2465:31:51","nodeType":"YulFunctionCall","src":"2465:31:51"},"nativeSrc":"2465:31:51","nodeType":"YulExpressionStatement","src":"2465:31:51"},{"nativeSrc":"2505:15:51","nodeType":"YulAssignment","src":"2505:15:51","value":{"name":"value","nativeSrc":"2515:5:51","nodeType":"YulIdentifier","src":"2515:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2505:6:51","nodeType":"YulIdentifier","src":"2505:6:51"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2279:247:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2315:9:51","nodeType":"YulTypedName","src":"2315:9:51","type":""},{"name":"dataEnd","nativeSrc":"2326:7:51","nodeType":"YulTypedName","src":"2326:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2338:6:51","nodeType":"YulTypedName","src":"2338:6:51","type":""}],"src":"2279:247:51"},{"body":{"nativeSrc":"2579:111:51","nodeType":"YulBlock","src":"2579:111:51","statements":[{"nativeSrc":"2589:29:51","nodeType":"YulAssignment","src":"2589:29:51","value":{"arguments":[{"name":"offset","nativeSrc":"2611:6:51","nodeType":"YulIdentifier","src":"2611:6:51"}],"functionName":{"name":"calldataload","nativeSrc":"2598:12:51","nodeType":"YulIdentifier","src":"2598:12:51"},"nativeSrc":"2598:20:51","nodeType":"YulFunctionCall","src":"2598:20:51"},"variableNames":[{"name":"value","nativeSrc":"2589:5:51","nodeType":"YulIdentifier","src":"2589:5:51"}]},{"body":{"nativeSrc":"2668:16:51","nodeType":"YulBlock","src":"2668:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2677:1:51","nodeType":"YulLiteral","src":"2677:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2680:1:51","nodeType":"YulLiteral","src":"2680:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2670:6:51","nodeType":"YulIdentifier","src":"2670:6:51"},"nativeSrc":"2670:12:51","nodeType":"YulFunctionCall","src":"2670:12:51"},"nativeSrc":"2670:12:51","nodeType":"YulExpressionStatement","src":"2670:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2640:5:51","nodeType":"YulIdentifier","src":"2640:5:51"},{"arguments":[{"name":"value","nativeSrc":"2651:5:51","nodeType":"YulIdentifier","src":"2651:5:51"},{"kind":"number","nativeSrc":"2658:6:51","nodeType":"YulLiteral","src":"2658:6:51","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"2647:3:51","nodeType":"YulIdentifier","src":"2647:3:51"},"nativeSrc":"2647:18:51","nodeType":"YulFunctionCall","src":"2647:18:51"}],"functionName":{"name":"eq","nativeSrc":"2637:2:51","nodeType":"YulIdentifier","src":"2637:2:51"},"nativeSrc":"2637:29:51","nodeType":"YulFunctionCall","src":"2637:29:51"}],"functionName":{"name":"iszero","nativeSrc":"2630:6:51","nodeType":"YulIdentifier","src":"2630:6:51"},"nativeSrc":"2630:37:51","nodeType":"YulFunctionCall","src":"2630:37:51"},"nativeSrc":"2627:57:51","nodeType":"YulIf","src":"2627:57:51"}]},"name":"abi_decode_uint16","nativeSrc":"2531:159:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2558:6:51","nodeType":"YulTypedName","src":"2558:6:51","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2569:5:51","nodeType":"YulTypedName","src":"2569:5:51","type":""}],"src":"2531:159:51"},{"body":{"nativeSrc":"2743:123:51","nodeType":"YulBlock","src":"2743:123:51","statements":[{"nativeSrc":"2753:29:51","nodeType":"YulAssignment","src":"2753:29:51","value":{"arguments":[{"name":"offset","nativeSrc":"2775:6:51","nodeType":"YulIdentifier","src":"2775:6:51"}],"functionName":{"name":"calldataload","nativeSrc":"2762:12:51","nodeType":"YulIdentifier","src":"2762:12:51"},"nativeSrc":"2762:20:51","nodeType":"YulFunctionCall","src":"2762:20:51"},"variableNames":[{"name":"value","nativeSrc":"2753:5:51","nodeType":"YulIdentifier","src":"2753:5:51"}]},{"body":{"nativeSrc":"2844:16:51","nodeType":"YulBlock","src":"2844:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2853:1:51","nodeType":"YulLiteral","src":"2853:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2856:1:51","nodeType":"YulLiteral","src":"2856:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2846:6:51","nodeType":"YulIdentifier","src":"2846:6:51"},"nativeSrc":"2846:12:51","nodeType":"YulFunctionCall","src":"2846:12:51"},"nativeSrc":"2846:12:51","nodeType":"YulExpressionStatement","src":"2846:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2804:5:51","nodeType":"YulIdentifier","src":"2804:5:51"},{"arguments":[{"name":"value","nativeSrc":"2815:5:51","nodeType":"YulIdentifier","src":"2815:5:51"},{"kind":"number","nativeSrc":"2822:18:51","nodeType":"YulLiteral","src":"2822:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2811:3:51","nodeType":"YulIdentifier","src":"2811:3:51"},"nativeSrc":"2811:30:51","nodeType":"YulFunctionCall","src":"2811:30:51"}],"functionName":{"name":"eq","nativeSrc":"2801:2:51","nodeType":"YulIdentifier","src":"2801:2:51"},"nativeSrc":"2801:41:51","nodeType":"YulFunctionCall","src":"2801:41:51"}],"functionName":{"name":"iszero","nativeSrc":"2794:6:51","nodeType":"YulIdentifier","src":"2794:6:51"},"nativeSrc":"2794:49:51","nodeType":"YulFunctionCall","src":"2794:49:51"},"nativeSrc":"2791:69:51","nodeType":"YulIf","src":"2791:69:51"}]},"name":"abi_decode_uint64","nativeSrc":"2695:171:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2722:6:51","nodeType":"YulTypedName","src":"2722:6:51","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2733:5:51","nodeType":"YulTypedName","src":"2733:5:51","type":""}],"src":"2695:171:51"},{"body":{"nativeSrc":"2914:59:51","nodeType":"YulBlock","src":"2914:59:51","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"2931:3:51","nodeType":"YulIdentifier","src":"2931:3:51"},{"arguments":[{"name":"value","nativeSrc":"2940:5:51","nodeType":"YulIdentifier","src":"2940:5:51"},{"kind":"number","nativeSrc":"2947:18:51","nodeType":"YulLiteral","src":"2947:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2936:3:51","nodeType":"YulIdentifier","src":"2936:3:51"},"nativeSrc":"2936:30:51","nodeType":"YulFunctionCall","src":"2936:30:51"}],"functionName":{"name":"mstore","nativeSrc":"2924:6:51","nodeType":"YulIdentifier","src":"2924:6:51"},"nativeSrc":"2924:43:51","nodeType":"YulFunctionCall","src":"2924:43:51"},"nativeSrc":"2924:43:51","nodeType":"YulExpressionStatement","src":"2924:43:51"}]},"name":"abi_encode_uint64","nativeSrc":"2871:102:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2898:5:51","nodeType":"YulTypedName","src":"2898:5:51","type":""},{"name":"pos","nativeSrc":"2905:3:51","nodeType":"YulTypedName","src":"2905:3:51","type":""}],"src":"2871:102:51"},{"body":{"nativeSrc":"3055:483:51","nodeType":"YulBlock","src":"3055:483:51","statements":[{"nativeSrc":"3065:43:51","nodeType":"YulVariableDeclaration","src":"3065:43:51","value":{"arguments":[{"name":"ptr","nativeSrc":"3104:3:51","nodeType":"YulIdentifier","src":"3104:3:51"}],"functionName":{"name":"calldataload","nativeSrc":"3091:12:51","nodeType":"YulIdentifier","src":"3091:12:51"},"nativeSrc":"3091:17:51","nodeType":"YulFunctionCall","src":"3091:17:51"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"3069:18:51","nodeType":"YulTypedName","src":"3069:18:51","type":""}]},{"body":{"nativeSrc":"3256:16:51","nodeType":"YulBlock","src":"3256:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3265:1:51","nodeType":"YulLiteral","src":"3265:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3268:1:51","nodeType":"YulLiteral","src":"3268:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3258:6:51","nodeType":"YulIdentifier","src":"3258:6:51"},"nativeSrc":"3258:12:51","nodeType":"YulFunctionCall","src":"3258:12:51"},"nativeSrc":"3258:12:51","nodeType":"YulExpressionStatement","src":"3258:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"3131:18:51","nodeType":"YulIdentifier","src":"3131:18:51"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3159:12:51","nodeType":"YulIdentifier","src":"3159:12:51"},"nativeSrc":"3159:14:51","nodeType":"YulFunctionCall","src":"3159:14:51"},{"name":"base_ref","nativeSrc":"3175:8:51","nodeType":"YulIdentifier","src":"3175:8:51"}],"functionName":{"name":"sub","nativeSrc":"3155:3:51","nodeType":"YulIdentifier","src":"3155:3:51"},"nativeSrc":"3155:29:51","nodeType":"YulFunctionCall","src":"3155:29:51"},{"kind":"number","nativeSrc":"3186:66:51","nodeType":"YulLiteral","src":"3186:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"3151:3:51","nodeType":"YulIdentifier","src":"3151:3:51"},"nativeSrc":"3151:102:51","nodeType":"YulFunctionCall","src":"3151:102:51"}],"functionName":{"name":"slt","nativeSrc":"3127:3:51","nodeType":"YulIdentifier","src":"3127:3:51"},"nativeSrc":"3127:127:51","nodeType":"YulFunctionCall","src":"3127:127:51"}],"functionName":{"name":"iszero","nativeSrc":"3120:6:51","nodeType":"YulIdentifier","src":"3120:6:51"},"nativeSrc":"3120:135:51","nodeType":"YulFunctionCall","src":"3120:135:51"},"nativeSrc":"3117:155:51","nodeType":"YulIf","src":"3117:155:51"},{"nativeSrc":"3281:48:51","nodeType":"YulVariableDeclaration","src":"3281:48:51","value":{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"3300:18:51","nodeType":"YulIdentifier","src":"3300:18:51"},{"name":"base_ref","nativeSrc":"3320:8:51","nodeType":"YulIdentifier","src":"3320:8:51"}],"functionName":{"name":"add","nativeSrc":"3296:3:51","nodeType":"YulIdentifier","src":"3296:3:51"},"nativeSrc":"3296:33:51","nodeType":"YulFunctionCall","src":"3296:33:51"},"variables":[{"name":"value_1","nativeSrc":"3285:7:51","nodeType":"YulTypedName","src":"3285:7:51","type":""}]},{"nativeSrc":"3338:31:51","nodeType":"YulAssignment","src":"3338:31:51","value":{"arguments":[{"name":"value_1","nativeSrc":"3361:7:51","nodeType":"YulIdentifier","src":"3361:7:51"}],"functionName":{"name":"calldataload","nativeSrc":"3348:12:51","nodeType":"YulIdentifier","src":"3348:12:51"},"nativeSrc":"3348:21:51","nodeType":"YulFunctionCall","src":"3348:21:51"},"variableNames":[{"name":"length","nativeSrc":"3338:6:51","nodeType":"YulIdentifier","src":"3338:6:51"}]},{"nativeSrc":"3378:27:51","nodeType":"YulAssignment","src":"3378:27:51","value":{"arguments":[{"name":"value_1","nativeSrc":"3391:7:51","nodeType":"YulIdentifier","src":"3391:7:51"},{"kind":"number","nativeSrc":"3400:4:51","nodeType":"YulLiteral","src":"3400:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3387:3:51","nodeType":"YulIdentifier","src":"3387:3:51"},"nativeSrc":"3387:18:51","nodeType":"YulFunctionCall","src":"3387:18:51"},"variableNames":[{"name":"value","nativeSrc":"3378:5:51","nodeType":"YulIdentifier","src":"3378:5:51"}]},{"body":{"nativeSrc":"3448:16:51","nodeType":"YulBlock","src":"3448:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3457:1:51","nodeType":"YulLiteral","src":"3457:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3460:1:51","nodeType":"YulLiteral","src":"3460:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3450:6:51","nodeType":"YulIdentifier","src":"3450:6:51"},"nativeSrc":"3450:12:51","nodeType":"YulFunctionCall","src":"3450:12:51"},"nativeSrc":"3450:12:51","nodeType":"YulExpressionStatement","src":"3450:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3420:6:51","nodeType":"YulIdentifier","src":"3420:6:51"},{"kind":"number","nativeSrc":"3428:18:51","nodeType":"YulLiteral","src":"3428:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3417:2:51","nodeType":"YulIdentifier","src":"3417:2:51"},"nativeSrc":"3417:30:51","nodeType":"YulFunctionCall","src":"3417:30:51"},"nativeSrc":"3414:50:51","nodeType":"YulIf","src":"3414:50:51"},{"body":{"nativeSrc":"3516:16:51","nodeType":"YulBlock","src":"3516:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3525:1:51","nodeType":"YulLiteral","src":"3525:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3528:1:51","nodeType":"YulLiteral","src":"3528:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3518:6:51","nodeType":"YulIdentifier","src":"3518:6:51"},"nativeSrc":"3518:12:51","nodeType":"YulFunctionCall","src":"3518:12:51"},"nativeSrc":"3518:12:51","nodeType":"YulExpressionStatement","src":"3518:12:51"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"3480:5:51","nodeType":"YulIdentifier","src":"3480:5:51"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3491:12:51","nodeType":"YulIdentifier","src":"3491:12:51"},"nativeSrc":"3491:14:51","nodeType":"YulFunctionCall","src":"3491:14:51"},{"name":"length","nativeSrc":"3507:6:51","nodeType":"YulIdentifier","src":"3507:6:51"}],"functionName":{"name":"sub","nativeSrc":"3487:3:51","nodeType":"YulIdentifier","src":"3487:3:51"},"nativeSrc":"3487:27:51","nodeType":"YulFunctionCall","src":"3487:27:51"}],"functionName":{"name":"sgt","nativeSrc":"3476:3:51","nodeType":"YulIdentifier","src":"3476:3:51"},"nativeSrc":"3476:39:51","nodeType":"YulFunctionCall","src":"3476:39:51"},"nativeSrc":"3473:59:51","nodeType":"YulIf","src":"3473:59:51"}]},"name":"calldata_access_string_calldata","nativeSrc":"2978:560:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"3019:8:51","nodeType":"YulTypedName","src":"3019:8:51","type":""},{"name":"ptr","nativeSrc":"3029:3:51","nodeType":"YulTypedName","src":"3029:3:51","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3037:5:51","nodeType":"YulTypedName","src":"3037:5:51","type":""},{"name":"length","nativeSrc":"3044:6:51","nodeType":"YulTypedName","src":"3044:6:51","type":""}],"src":"2978:560:51"},{"body":{"nativeSrc":"3610:259:51","nodeType":"YulBlock","src":"3610:259:51","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3627:3:51","nodeType":"YulIdentifier","src":"3627:3:51"},{"name":"length","nativeSrc":"3632:6:51","nodeType":"YulIdentifier","src":"3632:6:51"}],"functionName":{"name":"mstore","nativeSrc":"3620:6:51","nodeType":"YulIdentifier","src":"3620:6:51"},"nativeSrc":"3620:19:51","nodeType":"YulFunctionCall","src":"3620:19:51"},"nativeSrc":"3620:19:51","nodeType":"YulExpressionStatement","src":"3620:19:51"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3665:3:51","nodeType":"YulIdentifier","src":"3665:3:51"},{"kind":"number","nativeSrc":"3670:4:51","nodeType":"YulLiteral","src":"3670:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3661:3:51","nodeType":"YulIdentifier","src":"3661:3:51"},"nativeSrc":"3661:14:51","nodeType":"YulFunctionCall","src":"3661:14:51"},{"name":"start","nativeSrc":"3677:5:51","nodeType":"YulIdentifier","src":"3677:5:51"},{"name":"length","nativeSrc":"3684:6:51","nodeType":"YulIdentifier","src":"3684:6:51"}],"functionName":{"name":"calldatacopy","nativeSrc":"3648:12:51","nodeType":"YulIdentifier","src":"3648:12:51"},"nativeSrc":"3648:43:51","nodeType":"YulFunctionCall","src":"3648:43:51"},"nativeSrc":"3648:43:51","nodeType":"YulExpressionStatement","src":"3648:43:51"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3715:3:51","nodeType":"YulIdentifier","src":"3715:3:51"},{"name":"length","nativeSrc":"3720:6:51","nodeType":"YulIdentifier","src":"3720:6:51"}],"functionName":{"name":"add","nativeSrc":"3711:3:51","nodeType":"YulIdentifier","src":"3711:3:51"},"nativeSrc":"3711:16:51","nodeType":"YulFunctionCall","src":"3711:16:51"},{"kind":"number","nativeSrc":"3729:4:51","nodeType":"YulLiteral","src":"3729:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3707:3:51","nodeType":"YulIdentifier","src":"3707:3:51"},"nativeSrc":"3707:27:51","nodeType":"YulFunctionCall","src":"3707:27:51"},{"kind":"number","nativeSrc":"3736:1:51","nodeType":"YulLiteral","src":"3736:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3700:6:51","nodeType":"YulIdentifier","src":"3700:6:51"},"nativeSrc":"3700:38:51","nodeType":"YulFunctionCall","src":"3700:38:51"},"nativeSrc":"3700:38:51","nodeType":"YulExpressionStatement","src":"3700:38:51"},{"nativeSrc":"3747:116:51","nodeType":"YulAssignment","src":"3747:116:51","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3762:3:51","nodeType":"YulIdentifier","src":"3762:3:51"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"3775:6:51","nodeType":"YulIdentifier","src":"3775:6:51"},{"kind":"number","nativeSrc":"3783:2:51","nodeType":"YulLiteral","src":"3783:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3771:3:51","nodeType":"YulIdentifier","src":"3771:3:51"},"nativeSrc":"3771:15:51","nodeType":"YulFunctionCall","src":"3771:15:51"},{"kind":"number","nativeSrc":"3788:66:51","nodeType":"YulLiteral","src":"3788:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"3767:3:51","nodeType":"YulIdentifier","src":"3767:3:51"},"nativeSrc":"3767:88:51","nodeType":"YulFunctionCall","src":"3767:88:51"}],"functionName":{"name":"add","nativeSrc":"3758:3:51","nodeType":"YulIdentifier","src":"3758:3:51"},"nativeSrc":"3758:98:51","nodeType":"YulFunctionCall","src":"3758:98:51"},{"kind":"number","nativeSrc":"3858:4:51","nodeType":"YulLiteral","src":"3858:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3754:3:51","nodeType":"YulIdentifier","src":"3754:3:51"},"nativeSrc":"3754:109:51","nodeType":"YulFunctionCall","src":"3754:109:51"},"variableNames":[{"name":"end","nativeSrc":"3747:3:51","nodeType":"YulIdentifier","src":"3747:3:51"}]}]},"name":"abi_encode_string_calldata","nativeSrc":"3543:326:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"3579:5:51","nodeType":"YulTypedName","src":"3579:5:51","type":""},{"name":"length","nativeSrc":"3586:6:51","nodeType":"YulTypedName","src":"3586:6:51","type":""},{"name":"pos","nativeSrc":"3594:3:51","nodeType":"YulTypedName","src":"3594:3:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3602:3:51","nodeType":"YulTypedName","src":"3602:3:51","type":""}],"src":"3543:326:51"},{"body":{"nativeSrc":"4085:1264:51","nodeType":"YulBlock","src":"4085:1264:51","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4102:9:51","nodeType":"YulIdentifier","src":"4102:9:51"},{"arguments":[{"name":"value0","nativeSrc":"4117:6:51","nodeType":"YulIdentifier","src":"4117:6:51"},{"kind":"number","nativeSrc":"4125:42:51","nodeType":"YulLiteral","src":"4125:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4113:3:51","nodeType":"YulIdentifier","src":"4113:3:51"},"nativeSrc":"4113:55:51","nodeType":"YulFunctionCall","src":"4113:55:51"}],"functionName":{"name":"mstore","nativeSrc":"4095:6:51","nodeType":"YulIdentifier","src":"4095:6:51"},"nativeSrc":"4095:74:51","nodeType":"YulFunctionCall","src":"4095:74:51"},"nativeSrc":"4095:74:51","nodeType":"YulExpressionStatement","src":"4095:74:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4189:9:51","nodeType":"YulIdentifier","src":"4189:9:51"},{"kind":"number","nativeSrc":"4200:2:51","nodeType":"YulLiteral","src":"4200:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4185:3:51","nodeType":"YulIdentifier","src":"4185:3:51"},"nativeSrc":"4185:18:51","nodeType":"YulFunctionCall","src":"4185:18:51"},{"name":"value1","nativeSrc":"4205:6:51","nodeType":"YulIdentifier","src":"4205:6:51"}],"functionName":{"name":"mstore","nativeSrc":"4178:6:51","nodeType":"YulIdentifier","src":"4178:6:51"},"nativeSrc":"4178:34:51","nodeType":"YulFunctionCall","src":"4178:34:51"},"nativeSrc":"4178:34:51","nodeType":"YulExpressionStatement","src":"4178:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4232:9:51","nodeType":"YulIdentifier","src":"4232:9:51"},{"kind":"number","nativeSrc":"4243:2:51","nodeType":"YulLiteral","src":"4243:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4228:3:51","nodeType":"YulIdentifier","src":"4228:3:51"},"nativeSrc":"4228:18:51","nodeType":"YulFunctionCall","src":"4228:18:51"},{"kind":"number","nativeSrc":"4248:2:51","nodeType":"YulLiteral","src":"4248:2:51","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"4221:6:51","nodeType":"YulIdentifier","src":"4221:6:51"},"nativeSrc":"4221:30:51","nodeType":"YulFunctionCall","src":"4221:30:51"},"nativeSrc":"4221:30:51","nodeType":"YulExpressionStatement","src":"4221:30:51"},{"nativeSrc":"4260:16:51","nodeType":"YulVariableDeclaration","src":"4260:16:51","value":{"kind":"number","nativeSrc":"4270:6:51","nodeType":"YulLiteral","src":"4270:6:51","type":"","value":"0xffff"},"variables":[{"name":"_1","nativeSrc":"4264:2:51","nodeType":"YulTypedName","src":"4264:2:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4296:9:51","nodeType":"YulIdentifier","src":"4296:9:51"},{"kind":"number","nativeSrc":"4307:2:51","nodeType":"YulLiteral","src":"4307:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4292:3:51","nodeType":"YulIdentifier","src":"4292:3:51"},"nativeSrc":"4292:18:51","nodeType":"YulFunctionCall","src":"4292:18:51"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4334:6:51","nodeType":"YulIdentifier","src":"4334:6:51"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"4316:17:51","nodeType":"YulIdentifier","src":"4316:17:51"},"nativeSrc":"4316:25:51","nodeType":"YulFunctionCall","src":"4316:25:51"},{"name":"_1","nativeSrc":"4343:2:51","nodeType":"YulIdentifier","src":"4343:2:51"}],"functionName":{"name":"and","nativeSrc":"4312:3:51","nodeType":"YulIdentifier","src":"4312:3:51"},"nativeSrc":"4312:34:51","nodeType":"YulFunctionCall","src":"4312:34:51"}],"functionName":{"name":"mstore","nativeSrc":"4285:6:51","nodeType":"YulIdentifier","src":"4285:6:51"},"nativeSrc":"4285:62:51","nodeType":"YulFunctionCall","src":"4285:62:51"},"nativeSrc":"4285:62:51","nodeType":"YulExpressionStatement","src":"4285:62:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4367:9:51","nodeType":"YulIdentifier","src":"4367:9:51"},{"kind":"number","nativeSrc":"4378:3:51","nodeType":"YulLiteral","src":"4378:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4363:3:51","nodeType":"YulIdentifier","src":"4363:3:51"},"nativeSrc":"4363:19:51","nodeType":"YulFunctionCall","src":"4363:19:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4410:6:51","nodeType":"YulIdentifier","src":"4410:6:51"},{"kind":"number","nativeSrc":"4418:2:51","nodeType":"YulLiteral","src":"4418:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4406:3:51","nodeType":"YulIdentifier","src":"4406:3:51"},"nativeSrc":"4406:15:51","nodeType":"YulFunctionCall","src":"4406:15:51"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"4388:17:51","nodeType":"YulIdentifier","src":"4388:17:51"},"nativeSrc":"4388:34:51","nodeType":"YulFunctionCall","src":"4388:34:51"},{"name":"_1","nativeSrc":"4424:2:51","nodeType":"YulIdentifier","src":"4424:2:51"}],"functionName":{"name":"and","nativeSrc":"4384:3:51","nodeType":"YulIdentifier","src":"4384:3:51"},"nativeSrc":"4384:43:51","nodeType":"YulFunctionCall","src":"4384:43:51"}],"functionName":{"name":"mstore","nativeSrc":"4356:6:51","nodeType":"YulIdentifier","src":"4356:6:51"},"nativeSrc":"4356:72:51","nodeType":"YulFunctionCall","src":"4356:72:51"},"nativeSrc":"4356:72:51","nodeType":"YulExpressionStatement","src":"4356:72:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4448:9:51","nodeType":"YulIdentifier","src":"4448:9:51"},{"kind":"number","nativeSrc":"4459:3:51","nodeType":"YulLiteral","src":"4459:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4444:3:51","nodeType":"YulIdentifier","src":"4444:3:51"},"nativeSrc":"4444:19:51","nodeType":"YulFunctionCall","src":"4444:19:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4491:6:51","nodeType":"YulIdentifier","src":"4491:6:51"},{"kind":"number","nativeSrc":"4499:2:51","nodeType":"YulLiteral","src":"4499:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4487:3:51","nodeType":"YulIdentifier","src":"4487:3:51"},"nativeSrc":"4487:15:51","nodeType":"YulFunctionCall","src":"4487:15:51"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"4469:17:51","nodeType":"YulIdentifier","src":"4469:17:51"},"nativeSrc":"4469:34:51","nodeType":"YulFunctionCall","src":"4469:34:51"},{"kind":"number","nativeSrc":"4505:18:51","nodeType":"YulLiteral","src":"4505:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4465:3:51","nodeType":"YulIdentifier","src":"4465:3:51"},"nativeSrc":"4465:59:51","nodeType":"YulFunctionCall","src":"4465:59:51"}],"functionName":{"name":"mstore","nativeSrc":"4437:6:51","nodeType":"YulIdentifier","src":"4437:6:51"},"nativeSrc":"4437:88:51","nodeType":"YulFunctionCall","src":"4437:88:51"},"nativeSrc":"4437:88:51","nodeType":"YulExpressionStatement","src":"4437:88:51"},{"nativeSrc":"4534:54:51","nodeType":"YulVariableDeclaration","src":"4534:54:51","value":{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4576:6:51","nodeType":"YulIdentifier","src":"4576:6:51"},{"kind":"number","nativeSrc":"4584:2:51","nodeType":"YulLiteral","src":"4584:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4572:3:51","nodeType":"YulIdentifier","src":"4572:3:51"},"nativeSrc":"4572:15:51","nodeType":"YulFunctionCall","src":"4572:15:51"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"4554:17:51","nodeType":"YulIdentifier","src":"4554:17:51"},"nativeSrc":"4554:34:51","nodeType":"YulFunctionCall","src":"4554:34:51"},"variables":[{"name":"memberValue0","nativeSrc":"4538:12:51","nodeType":"YulTypedName","src":"4538:12:51","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"4615:12:51","nodeType":"YulIdentifier","src":"4615:12:51"},{"arguments":[{"name":"headStart","nativeSrc":"4633:9:51","nodeType":"YulIdentifier","src":"4633:9:51"},{"kind":"number","nativeSrc":"4644:3:51","nodeType":"YulLiteral","src":"4644:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4629:3:51","nodeType":"YulIdentifier","src":"4629:3:51"},"nativeSrc":"4629:19:51","nodeType":"YulFunctionCall","src":"4629:19:51"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"4597:17:51","nodeType":"YulIdentifier","src":"4597:17:51"},"nativeSrc":"4597:52:51","nodeType":"YulFunctionCall","src":"4597:52:51"},"nativeSrc":"4597:52:51","nodeType":"YulExpressionStatement","src":"4597:52:51"},{"nativeSrc":"4658:57:51","nodeType":"YulVariableDeclaration","src":"4658:57:51","value":{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4702:6:51","nodeType":"YulIdentifier","src":"4702:6:51"},{"kind":"number","nativeSrc":"4710:3:51","nodeType":"YulLiteral","src":"4710:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4698:3:51","nodeType":"YulIdentifier","src":"4698:3:51"},"nativeSrc":"4698:16:51","nodeType":"YulFunctionCall","src":"4698:16:51"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"4680:17:51","nodeType":"YulIdentifier","src":"4680:17:51"},"nativeSrc":"4680:35:51","nodeType":"YulFunctionCall","src":"4680:35:51"},"variables":[{"name":"memberValue0_1","nativeSrc":"4662:14:51","nodeType":"YulTypedName","src":"4662:14:51","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nativeSrc":"4742:14:51","nodeType":"YulIdentifier","src":"4742:14:51"},{"arguments":[{"name":"headStart","nativeSrc":"4762:9:51","nodeType":"YulIdentifier","src":"4762:9:51"},{"kind":"number","nativeSrc":"4773:4:51","nodeType":"YulLiteral","src":"4773:4:51","type":"","value":"0xe0"}],"functionName":{"name":"add","nativeSrc":"4758:3:51","nodeType":"YulIdentifier","src":"4758:3:51"},"nativeSrc":"4758:20:51","nodeType":"YulFunctionCall","src":"4758:20:51"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"4724:17:51","nodeType":"YulIdentifier","src":"4724:17:51"},"nativeSrc":"4724:55:51","nodeType":"YulFunctionCall","src":"4724:55:51"},"nativeSrc":"4724:55:51","nodeType":"YulExpressionStatement","src":"4724:55:51"},{"nativeSrc":"4788:93:51","nodeType":"YulVariableDeclaration","src":"4788:93:51","value":{"arguments":[{"name":"value2","nativeSrc":"4856:6:51","nodeType":"YulIdentifier","src":"4856:6:51"},{"arguments":[{"name":"value2","nativeSrc":"4868:6:51","nodeType":"YulIdentifier","src":"4868:6:51"},{"kind":"number","nativeSrc":"4876:3:51","nodeType":"YulLiteral","src":"4876:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4864:3:51","nodeType":"YulIdentifier","src":"4864:3:51"},"nativeSrc":"4864:16:51","nodeType":"YulFunctionCall","src":"4864:16:51"}],"functionName":{"name":"calldata_access_string_calldata","nativeSrc":"4824:31:51","nodeType":"YulIdentifier","src":"4824:31:51"},"nativeSrc":"4824:57:51","nodeType":"YulFunctionCall","src":"4824:57:51"},"variables":[{"name":"memberValue0_2","nativeSrc":"4792:14:51","nodeType":"YulTypedName","src":"4792:14:51","type":""},{"name":"memberValue1","nativeSrc":"4808:12:51","nodeType":"YulTypedName","src":"4808:12:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4901:9:51","nodeType":"YulIdentifier","src":"4901:9:51"},{"kind":"number","nativeSrc":"4912:3:51","nodeType":"YulLiteral","src":"4912:3:51","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"4897:3:51","nodeType":"YulIdentifier","src":"4897:3:51"},"nativeSrc":"4897:19:51","nodeType":"YulFunctionCall","src":"4897:19:51"},{"kind":"number","nativeSrc":"4918:4:51","nodeType":"YulLiteral","src":"4918:4:51","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nativeSrc":"4890:6:51","nodeType":"YulIdentifier","src":"4890:6:51"},"nativeSrc":"4890:33:51","nodeType":"YulFunctionCall","src":"4890:33:51"},"nativeSrc":"4890:33:51","nodeType":"YulExpressionStatement","src":"4890:33:51"},{"nativeSrc":"4932:91:51","nodeType":"YulVariableDeclaration","src":"4932:91:51","value":{"arguments":[{"name":"memberValue0_2","nativeSrc":"4973:14:51","nodeType":"YulIdentifier","src":"4973:14:51"},{"name":"memberValue1","nativeSrc":"4989:12:51","nodeType":"YulIdentifier","src":"4989:12:51"},{"arguments":[{"name":"headStart","nativeSrc":"5007:9:51","nodeType":"YulIdentifier","src":"5007:9:51"},{"kind":"number","nativeSrc":"5018:3:51","nodeType":"YulLiteral","src":"5018:3:51","type":"","value":"320"}],"functionName":{"name":"add","nativeSrc":"5003:3:51","nodeType":"YulIdentifier","src":"5003:3:51"},"nativeSrc":"5003:19:51","nodeType":"YulFunctionCall","src":"5003:19:51"}],"functionName":{"name":"abi_encode_string_calldata","nativeSrc":"4946:26:51","nodeType":"YulIdentifier","src":"4946:26:51"},"nativeSrc":"4946:77:51","nodeType":"YulFunctionCall","src":"4946:77:51"},"variables":[{"name":"tail_1","nativeSrc":"4936:6:51","nodeType":"YulTypedName","src":"4936:6:51","type":""}]},{"nativeSrc":"5032:95:51","nodeType":"YulVariableDeclaration","src":"5032:95:51","value":{"arguments":[{"name":"value2","nativeSrc":"5102:6:51","nodeType":"YulIdentifier","src":"5102:6:51"},{"arguments":[{"name":"value2","nativeSrc":"5114:6:51","nodeType":"YulIdentifier","src":"5114:6:51"},{"kind":"number","nativeSrc":"5122:3:51","nodeType":"YulLiteral","src":"5122:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"5110:3:51","nodeType":"YulIdentifier","src":"5110:3:51"},"nativeSrc":"5110:16:51","nodeType":"YulFunctionCall","src":"5110:16:51"}],"functionName":{"name":"calldata_access_string_calldata","nativeSrc":"5070:31:51","nodeType":"YulIdentifier","src":"5070:31:51"},"nativeSrc":"5070:57:51","nodeType":"YulFunctionCall","src":"5070:57:51"},"variables":[{"name":"memberValue0_3","nativeSrc":"5036:14:51","nodeType":"YulTypedName","src":"5036:14:51","type":""},{"name":"memberValue1_1","nativeSrc":"5052:14:51","nodeType":"YulTypedName","src":"5052:14:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5147:9:51","nodeType":"YulIdentifier","src":"5147:9:51"},{"kind":"number","nativeSrc":"5158:3:51","nodeType":"YulLiteral","src":"5158:3:51","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"5143:3:51","nodeType":"YulIdentifier","src":"5143:3:51"},"nativeSrc":"5143:19:51","nodeType":"YulFunctionCall","src":"5143:19:51"},{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"5172:6:51","nodeType":"YulIdentifier","src":"5172:6:51"},{"name":"headStart","nativeSrc":"5180:9:51","nodeType":"YulIdentifier","src":"5180:9:51"}],"functionName":{"name":"sub","nativeSrc":"5168:3:51","nodeType":"YulIdentifier","src":"5168:3:51"},"nativeSrc":"5168:22:51","nodeType":"YulFunctionCall","src":"5168:22:51"},{"kind":"number","nativeSrc":"5192:66:51","nodeType":"YulLiteral","src":"5192:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0"}],"functionName":{"name":"add","nativeSrc":"5164:3:51","nodeType":"YulIdentifier","src":"5164:3:51"},"nativeSrc":"5164:95:51","nodeType":"YulFunctionCall","src":"5164:95:51"}],"functionName":{"name":"mstore","nativeSrc":"5136:6:51","nodeType":"YulIdentifier","src":"5136:6:51"},"nativeSrc":"5136:124:51","nodeType":"YulFunctionCall","src":"5136:124:51"},"nativeSrc":"5136:124:51","nodeType":"YulExpressionStatement","src":"5136:124:51"},{"nativeSrc":"5269:74:51","nodeType":"YulAssignment","src":"5269:74:51","value":{"arguments":[{"name":"memberValue0_3","nativeSrc":"5304:14:51","nodeType":"YulIdentifier","src":"5304:14:51"},{"name":"memberValue1_1","nativeSrc":"5320:14:51","nodeType":"YulIdentifier","src":"5320:14:51"},{"name":"tail_1","nativeSrc":"5336:6:51","nodeType":"YulIdentifier","src":"5336:6:51"}],"functionName":{"name":"abi_encode_string_calldata","nativeSrc":"5277:26:51","nodeType":"YulIdentifier","src":"5277:26:51"},"nativeSrc":"5277:66:51","nodeType":"YulFunctionCall","src":"5277:66:51"},"variableNames":[{"name":"tail","nativeSrc":"5269:4:51","nodeType":"YulIdentifier","src":"5269:4:51"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$5017_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$5017_memory_ptr__fromStack_reversed","nativeSrc":"3874:1475:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4038:9:51","nodeType":"YulTypedName","src":"4038:9:51","type":""},{"name":"value2","nativeSrc":"4049:6:51","nodeType":"YulTypedName","src":"4049:6:51","type":""},{"name":"value1","nativeSrc":"4057:6:51","nodeType":"YulTypedName","src":"4057:6:51","type":""},{"name":"value0","nativeSrc":"4065:6:51","nodeType":"YulTypedName","src":"4065:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4076:4:51","nodeType":"YulTypedName","src":"4076:4:51","type":""}],"src":"3874:1475:51"},{"body":{"nativeSrc":"5535:217:51","nodeType":"YulBlock","src":"5535:217:51","statements":[{"nativeSrc":"5545:27:51","nodeType":"YulAssignment","src":"5545:27:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5557:9:51","nodeType":"YulIdentifier","src":"5557:9:51"},{"kind":"number","nativeSrc":"5568:3:51","nodeType":"YulLiteral","src":"5568:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5553:3:51","nodeType":"YulIdentifier","src":"5553:3:51"},"nativeSrc":"5553:19:51","nodeType":"YulFunctionCall","src":"5553:19:51"},"variableNames":[{"name":"tail","nativeSrc":"5545:4:51","nodeType":"YulIdentifier","src":"5545:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5588:9:51","nodeType":"YulIdentifier","src":"5588:9:51"},{"name":"value0","nativeSrc":"5599:6:51","nodeType":"YulIdentifier","src":"5599:6:51"}],"functionName":{"name":"mstore","nativeSrc":"5581:6:51","nodeType":"YulIdentifier","src":"5581:6:51"},"nativeSrc":"5581:25:51","nodeType":"YulFunctionCall","src":"5581:25:51"},"nativeSrc":"5581:25:51","nodeType":"YulExpressionStatement","src":"5581:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5626:9:51","nodeType":"YulIdentifier","src":"5626:9:51"},{"kind":"number","nativeSrc":"5637:2:51","nodeType":"YulLiteral","src":"5637:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5622:3:51","nodeType":"YulIdentifier","src":"5622:3:51"},"nativeSrc":"5622:18:51","nodeType":"YulFunctionCall","src":"5622:18:51"},{"arguments":[{"name":"value1","nativeSrc":"5646:6:51","nodeType":"YulIdentifier","src":"5646:6:51"},{"kind":"number","nativeSrc":"5654:4:51","nodeType":"YulLiteral","src":"5654:4:51","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"5642:3:51","nodeType":"YulIdentifier","src":"5642:3:51"},"nativeSrc":"5642:17:51","nodeType":"YulFunctionCall","src":"5642:17:51"}],"functionName":{"name":"mstore","nativeSrc":"5615:6:51","nodeType":"YulIdentifier","src":"5615:6:51"},"nativeSrc":"5615:45:51","nodeType":"YulFunctionCall","src":"5615:45:51"},"nativeSrc":"5615:45:51","nodeType":"YulExpressionStatement","src":"5615:45:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5680:9:51","nodeType":"YulIdentifier","src":"5680:9:51"},{"kind":"number","nativeSrc":"5691:2:51","nodeType":"YulLiteral","src":"5691:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5676:3:51","nodeType":"YulIdentifier","src":"5676:3:51"},"nativeSrc":"5676:18:51","nodeType":"YulFunctionCall","src":"5676:18:51"},{"name":"value2","nativeSrc":"5696:6:51","nodeType":"YulIdentifier","src":"5696:6:51"}],"functionName":{"name":"mstore","nativeSrc":"5669:6:51","nodeType":"YulIdentifier","src":"5669:6:51"},"nativeSrc":"5669:34:51","nodeType":"YulFunctionCall","src":"5669:34:51"},"nativeSrc":"5669:34:51","nodeType":"YulExpressionStatement","src":"5669:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5723:9:51","nodeType":"YulIdentifier","src":"5723:9:51"},{"kind":"number","nativeSrc":"5734:2:51","nodeType":"YulLiteral","src":"5734:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5719:3:51","nodeType":"YulIdentifier","src":"5719:3:51"},"nativeSrc":"5719:18:51","nodeType":"YulFunctionCall","src":"5719:18:51"},{"name":"value3","nativeSrc":"5739:6:51","nodeType":"YulIdentifier","src":"5739:6:51"}],"functionName":{"name":"mstore","nativeSrc":"5712:6:51","nodeType":"YulIdentifier","src":"5712:6:51"},"nativeSrc":"5712:34:51","nodeType":"YulFunctionCall","src":"5712:34:51"},"nativeSrc":"5712:34:51","nodeType":"YulExpressionStatement","src":"5712:34:51"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"5354:398:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5480:9:51","nodeType":"YulTypedName","src":"5480:9:51","type":""},{"name":"value3","nativeSrc":"5491:6:51","nodeType":"YulTypedName","src":"5491:6:51","type":""},{"name":"value2","nativeSrc":"5499:6:51","nodeType":"YulTypedName","src":"5499:6:51","type":""},{"name":"value1","nativeSrc":"5507:6:51","nodeType":"YulTypedName","src":"5507:6:51","type":""},{"name":"value0","nativeSrc":"5515:6:51","nodeType":"YulTypedName","src":"5515:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5526:4:51","nodeType":"YulTypedName","src":"5526:4:51","type":""}],"src":"5354:398:51"},{"body":{"nativeSrc":"5852:486:51","nodeType":"YulBlock","src":"5852:486:51","statements":[{"nativeSrc":"5862:51:51","nodeType":"YulVariableDeclaration","src":"5862:51:51","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"5901:11:51","nodeType":"YulIdentifier","src":"5901:11:51"}],"functionName":{"name":"calldataload","nativeSrc":"5888:12:51","nodeType":"YulIdentifier","src":"5888:12:51"},"nativeSrc":"5888:25:51","nodeType":"YulFunctionCall","src":"5888:25:51"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"5866:18:51","nodeType":"YulTypedName","src":"5866:18:51","type":""}]},{"body":{"nativeSrc":"6061:16:51","nodeType":"YulBlock","src":"6061:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6070:1:51","nodeType":"YulLiteral","src":"6070:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6073:1:51","nodeType":"YulLiteral","src":"6073:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6063:6:51","nodeType":"YulIdentifier","src":"6063:6:51"},"nativeSrc":"6063:12:51","nodeType":"YulFunctionCall","src":"6063:12:51"},"nativeSrc":"6063:12:51","nodeType":"YulExpressionStatement","src":"6063:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"5936:18:51","nodeType":"YulIdentifier","src":"5936:18:51"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"5964:12:51","nodeType":"YulIdentifier","src":"5964:12:51"},"nativeSrc":"5964:14:51","nodeType":"YulFunctionCall","src":"5964:14:51"},{"name":"base_ref","nativeSrc":"5980:8:51","nodeType":"YulIdentifier","src":"5980:8:51"}],"functionName":{"name":"sub","nativeSrc":"5960:3:51","nodeType":"YulIdentifier","src":"5960:3:51"},"nativeSrc":"5960:29:51","nodeType":"YulFunctionCall","src":"5960:29:51"},{"kind":"number","nativeSrc":"5991:66:51","nodeType":"YulLiteral","src":"5991:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"5956:3:51","nodeType":"YulIdentifier","src":"5956:3:51"},"nativeSrc":"5956:102:51","nodeType":"YulFunctionCall","src":"5956:102:51"}],"functionName":{"name":"slt","nativeSrc":"5932:3:51","nodeType":"YulIdentifier","src":"5932:3:51"},"nativeSrc":"5932:127:51","nodeType":"YulFunctionCall","src":"5932:127:51"}],"functionName":{"name":"iszero","nativeSrc":"5925:6:51","nodeType":"YulIdentifier","src":"5925:6:51"},"nativeSrc":"5925:135:51","nodeType":"YulFunctionCall","src":"5925:135:51"},"nativeSrc":"5922:155:51","nodeType":"YulIf","src":"5922:155:51"},{"nativeSrc":"6086:47:51","nodeType":"YulVariableDeclaration","src":"6086:47:51","value":{"arguments":[{"name":"base_ref","nativeSrc":"6104:8:51","nodeType":"YulIdentifier","src":"6104:8:51"},{"name":"rel_offset_of_tail","nativeSrc":"6114:18:51","nodeType":"YulIdentifier","src":"6114:18:51"}],"functionName":{"name":"add","nativeSrc":"6100:3:51","nodeType":"YulIdentifier","src":"6100:3:51"},"nativeSrc":"6100:33:51","nodeType":"YulFunctionCall","src":"6100:33:51"},"variables":[{"name":"addr_1","nativeSrc":"6090:6:51","nodeType":"YulTypedName","src":"6090:6:51","type":""}]},{"nativeSrc":"6142:30:51","nodeType":"YulAssignment","src":"6142:30:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"6165:6:51","nodeType":"YulIdentifier","src":"6165:6:51"}],"functionName":{"name":"calldataload","nativeSrc":"6152:12:51","nodeType":"YulIdentifier","src":"6152:12:51"},"nativeSrc":"6152:20:51","nodeType":"YulFunctionCall","src":"6152:20:51"},"variableNames":[{"name":"length","nativeSrc":"6142:6:51","nodeType":"YulIdentifier","src":"6142:6:51"}]},{"body":{"nativeSrc":"6215:16:51","nodeType":"YulBlock","src":"6215:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6224:1:51","nodeType":"YulLiteral","src":"6224:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6227:1:51","nodeType":"YulLiteral","src":"6227:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6217:6:51","nodeType":"YulIdentifier","src":"6217:6:51"},"nativeSrc":"6217:12:51","nodeType":"YulFunctionCall","src":"6217:12:51"},"nativeSrc":"6217:12:51","nodeType":"YulExpressionStatement","src":"6217:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6187:6:51","nodeType":"YulIdentifier","src":"6187:6:51"},{"kind":"number","nativeSrc":"6195:18:51","nodeType":"YulLiteral","src":"6195:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6184:2:51","nodeType":"YulIdentifier","src":"6184:2:51"},"nativeSrc":"6184:30:51","nodeType":"YulFunctionCall","src":"6184:30:51"},"nativeSrc":"6181:50:51","nodeType":"YulIf","src":"6181:50:51"},{"nativeSrc":"6240:25:51","nodeType":"YulAssignment","src":"6240:25:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"6252:6:51","nodeType":"YulIdentifier","src":"6252:6:51"},{"kind":"number","nativeSrc":"6260:4:51","nodeType":"YulLiteral","src":"6260:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6248:3:51","nodeType":"YulIdentifier","src":"6248:3:51"},"nativeSrc":"6248:17:51","nodeType":"YulFunctionCall","src":"6248:17:51"},"variableNames":[{"name":"addr","nativeSrc":"6240:4:51","nodeType":"YulIdentifier","src":"6240:4:51"}]},{"body":{"nativeSrc":"6316:16:51","nodeType":"YulBlock","src":"6316:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6325:1:51","nodeType":"YulLiteral","src":"6325:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6328:1:51","nodeType":"YulLiteral","src":"6328:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6318:6:51","nodeType":"YulIdentifier","src":"6318:6:51"},"nativeSrc":"6318:12:51","nodeType":"YulFunctionCall","src":"6318:12:51"},"nativeSrc":"6318:12:51","nodeType":"YulExpressionStatement","src":"6318:12:51"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"6281:4:51","nodeType":"YulIdentifier","src":"6281:4:51"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6291:12:51","nodeType":"YulIdentifier","src":"6291:12:51"},"nativeSrc":"6291:14:51","nodeType":"YulFunctionCall","src":"6291:14:51"},{"name":"length","nativeSrc":"6307:6:51","nodeType":"YulIdentifier","src":"6307:6:51"}],"functionName":{"name":"sub","nativeSrc":"6287:3:51","nodeType":"YulIdentifier","src":"6287:3:51"},"nativeSrc":"6287:27:51","nodeType":"YulFunctionCall","src":"6287:27:51"}],"functionName":{"name":"sgt","nativeSrc":"6277:3:51","nodeType":"YulIdentifier","src":"6277:3:51"},"nativeSrc":"6277:38:51","nodeType":"YulFunctionCall","src":"6277:38:51"},"nativeSrc":"6274:58:51","nodeType":"YulIf","src":"6274:58:51"}]},"name":"access_calldata_tail_t_string_calldata_ptr","nativeSrc":"5757:581:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"5809:8:51","nodeType":"YulTypedName","src":"5809:8:51","type":""},{"name":"ptr_to_tail","nativeSrc":"5819:11:51","nodeType":"YulTypedName","src":"5819:11:51","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"5835:4:51","nodeType":"YulTypedName","src":"5835:4:51","type":""},{"name":"length","nativeSrc":"5841:6:51","nodeType":"YulTypedName","src":"5841:6:51","type":""}],"src":"5757:581:51"},{"body":{"nativeSrc":"6492:124:51","nodeType":"YulBlock","src":"6492:124:51","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6515:3:51","nodeType":"YulIdentifier","src":"6515:3:51"},{"name":"value0","nativeSrc":"6520:6:51","nodeType":"YulIdentifier","src":"6520:6:51"},{"name":"value1","nativeSrc":"6528:6:51","nodeType":"YulIdentifier","src":"6528:6:51"}],"functionName":{"name":"calldatacopy","nativeSrc":"6502:12:51","nodeType":"YulIdentifier","src":"6502:12:51"},"nativeSrc":"6502:33:51","nodeType":"YulFunctionCall","src":"6502:33:51"},"nativeSrc":"6502:33:51","nodeType":"YulExpressionStatement","src":"6502:33:51"},{"nativeSrc":"6544:26:51","nodeType":"YulVariableDeclaration","src":"6544:26:51","value":{"arguments":[{"name":"pos","nativeSrc":"6558:3:51","nodeType":"YulIdentifier","src":"6558:3:51"},{"name":"value1","nativeSrc":"6563:6:51","nodeType":"YulIdentifier","src":"6563:6:51"}],"functionName":{"name":"add","nativeSrc":"6554:3:51","nodeType":"YulIdentifier","src":"6554:3:51"},"nativeSrc":"6554:16:51","nodeType":"YulFunctionCall","src":"6554:16:51"},"variables":[{"name":"_1","nativeSrc":"6548:2:51","nodeType":"YulTypedName","src":"6548:2:51","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"6586:2:51","nodeType":"YulIdentifier","src":"6586:2:51"},{"kind":"number","nativeSrc":"6590:1:51","nodeType":"YulLiteral","src":"6590:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6579:6:51","nodeType":"YulIdentifier","src":"6579:6:51"},"nativeSrc":"6579:13:51","nodeType":"YulFunctionCall","src":"6579:13:51"},"nativeSrc":"6579:13:51","nodeType":"YulExpressionStatement","src":"6579:13:51"},{"nativeSrc":"6601:9:51","nodeType":"YulAssignment","src":"6601:9:51","value":{"name":"_1","nativeSrc":"6608:2:51","nodeType":"YulIdentifier","src":"6608:2:51"},"variableNames":[{"name":"end","nativeSrc":"6601:3:51","nodeType":"YulIdentifier","src":"6601:3:51"}]}]},"name":"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"6343:273:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"6460:3:51","nodeType":"YulTypedName","src":"6460:3:51","type":""},{"name":"value1","nativeSrc":"6465:6:51","nodeType":"YulTypedName","src":"6465:6:51","type":""},{"name":"value0","nativeSrc":"6473:6:51","nodeType":"YulTypedName","src":"6473:6:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6484:3:51","nodeType":"YulTypedName","src":"6484:3:51","type":""}],"src":"6343:273:51"},{"body":{"nativeSrc":"6750:168:51","nodeType":"YulBlock","src":"6750:168:51","statements":[{"nativeSrc":"6760:26:51","nodeType":"YulAssignment","src":"6760:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6772:9:51","nodeType":"YulIdentifier","src":"6772:9:51"},{"kind":"number","nativeSrc":"6783:2:51","nodeType":"YulLiteral","src":"6783:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6768:3:51","nodeType":"YulIdentifier","src":"6768:3:51"},"nativeSrc":"6768:18:51","nodeType":"YulFunctionCall","src":"6768:18:51"},"variableNames":[{"name":"tail","nativeSrc":"6760:4:51","nodeType":"YulIdentifier","src":"6760:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6802:9:51","nodeType":"YulIdentifier","src":"6802:9:51"},{"name":"value0","nativeSrc":"6813:6:51","nodeType":"YulIdentifier","src":"6813:6:51"}],"functionName":{"name":"mstore","nativeSrc":"6795:6:51","nodeType":"YulIdentifier","src":"6795:6:51"},"nativeSrc":"6795:25:51","nodeType":"YulFunctionCall","src":"6795:25:51"},"nativeSrc":"6795:25:51","nodeType":"YulExpressionStatement","src":"6795:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6840:9:51","nodeType":"YulIdentifier","src":"6840:9:51"},{"kind":"number","nativeSrc":"6851:2:51","nodeType":"YulLiteral","src":"6851:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6836:3:51","nodeType":"YulIdentifier","src":"6836:3:51"},"nativeSrc":"6836:18:51","nodeType":"YulFunctionCall","src":"6836:18:51"},{"arguments":[{"name":"value1","nativeSrc":"6860:6:51","nodeType":"YulIdentifier","src":"6860:6:51"},{"kind":"number","nativeSrc":"6868:42:51","nodeType":"YulLiteral","src":"6868:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6856:3:51","nodeType":"YulIdentifier","src":"6856:3:51"},"nativeSrc":"6856:55:51","nodeType":"YulFunctionCall","src":"6856:55:51"}],"functionName":{"name":"mstore","nativeSrc":"6829:6:51","nodeType":"YulIdentifier","src":"6829:6:51"},"nativeSrc":"6829:83:51","nodeType":"YulFunctionCall","src":"6829:83:51"},"nativeSrc":"6829:83:51","nodeType":"YulExpressionStatement","src":"6829:83:51"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"6621:297:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6711:9:51","nodeType":"YulTypedName","src":"6711:9:51","type":""},{"name":"value1","nativeSrc":"6722:6:51","nodeType":"YulTypedName","src":"6722:6:51","type":""},{"name":"value0","nativeSrc":"6730:6:51","nodeType":"YulTypedName","src":"6730:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6741:4:51","nodeType":"YulTypedName","src":"6741:4:51","type":""}],"src":"6621:297:51"},{"body":{"nativeSrc":"7001:199:51","nodeType":"YulBlock","src":"7001:199:51","statements":[{"body":{"nativeSrc":"7047:16:51","nodeType":"YulBlock","src":"7047:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7056:1:51","nodeType":"YulLiteral","src":"7056:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7059:1:51","nodeType":"YulLiteral","src":"7059:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7049:6:51","nodeType":"YulIdentifier","src":"7049:6:51"},"nativeSrc":"7049:12:51","nodeType":"YulFunctionCall","src":"7049:12:51"},"nativeSrc":"7049:12:51","nodeType":"YulExpressionStatement","src":"7049:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7022:7:51","nodeType":"YulIdentifier","src":"7022:7:51"},{"name":"headStart","nativeSrc":"7031:9:51","nodeType":"YulIdentifier","src":"7031:9:51"}],"functionName":{"name":"sub","nativeSrc":"7018:3:51","nodeType":"YulIdentifier","src":"7018:3:51"},"nativeSrc":"7018:23:51","nodeType":"YulFunctionCall","src":"7018:23:51"},{"kind":"number","nativeSrc":"7043:2:51","nodeType":"YulLiteral","src":"7043:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7014:3:51","nodeType":"YulIdentifier","src":"7014:3:51"},"nativeSrc":"7014:32:51","nodeType":"YulFunctionCall","src":"7014:32:51"},"nativeSrc":"7011:52:51","nodeType":"YulIf","src":"7011:52:51"},{"nativeSrc":"7072:29:51","nodeType":"YulVariableDeclaration","src":"7072:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7091:9:51","nodeType":"YulIdentifier","src":"7091:9:51"}],"functionName":{"name":"mload","nativeSrc":"7085:5:51","nodeType":"YulIdentifier","src":"7085:5:51"},"nativeSrc":"7085:16:51","nodeType":"YulFunctionCall","src":"7085:16:51"},"variables":[{"name":"value","nativeSrc":"7076:5:51","nodeType":"YulTypedName","src":"7076:5:51","type":""}]},{"body":{"nativeSrc":"7154:16:51","nodeType":"YulBlock","src":"7154:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7163:1:51","nodeType":"YulLiteral","src":"7163:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7166:1:51","nodeType":"YulLiteral","src":"7166:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7156:6:51","nodeType":"YulIdentifier","src":"7156:6:51"},"nativeSrc":"7156:12:51","nodeType":"YulFunctionCall","src":"7156:12:51"},"nativeSrc":"7156:12:51","nodeType":"YulExpressionStatement","src":"7156:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7123:5:51","nodeType":"YulIdentifier","src":"7123:5:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7144:5:51","nodeType":"YulIdentifier","src":"7144:5:51"}],"functionName":{"name":"iszero","nativeSrc":"7137:6:51","nodeType":"YulIdentifier","src":"7137:6:51"},"nativeSrc":"7137:13:51","nodeType":"YulFunctionCall","src":"7137:13:51"}],"functionName":{"name":"iszero","nativeSrc":"7130:6:51","nodeType":"YulIdentifier","src":"7130:6:51"},"nativeSrc":"7130:21:51","nodeType":"YulFunctionCall","src":"7130:21:51"}],"functionName":{"name":"eq","nativeSrc":"7120:2:51","nodeType":"YulIdentifier","src":"7120:2:51"},"nativeSrc":"7120:32:51","nodeType":"YulFunctionCall","src":"7120:32:51"}],"functionName":{"name":"iszero","nativeSrc":"7113:6:51","nodeType":"YulIdentifier","src":"7113:6:51"},"nativeSrc":"7113:40:51","nodeType":"YulFunctionCall","src":"7113:40:51"},"nativeSrc":"7110:60:51","nodeType":"YulIf","src":"7110:60:51"},{"nativeSrc":"7179:15:51","nodeType":"YulAssignment","src":"7179:15:51","value":{"name":"value","nativeSrc":"7189:5:51","nodeType":"YulIdentifier","src":"7189:5:51"},"variableNames":[{"name":"value0","nativeSrc":"7179:6:51","nodeType":"YulIdentifier","src":"7179:6:51"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6923:277:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6967:9:51","nodeType":"YulTypedName","src":"6967:9:51","type":""},{"name":"dataEnd","nativeSrc":"6978:7:51","nodeType":"YulTypedName","src":"6978:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6990:6:51","nodeType":"YulTypedName","src":"6990:6:51","type":""}],"src":"6923:277:51"},{"body":{"nativeSrc":"7334:119:51","nodeType":"YulBlock","src":"7334:119:51","statements":[{"nativeSrc":"7344:26:51","nodeType":"YulAssignment","src":"7344:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7356:9:51","nodeType":"YulIdentifier","src":"7356:9:51"},{"kind":"number","nativeSrc":"7367:2:51","nodeType":"YulLiteral","src":"7367:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7352:3:51","nodeType":"YulIdentifier","src":"7352:3:51"},"nativeSrc":"7352:18:51","nodeType":"YulFunctionCall","src":"7352:18:51"},"variableNames":[{"name":"tail","nativeSrc":"7344:4:51","nodeType":"YulIdentifier","src":"7344:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7386:9:51","nodeType":"YulIdentifier","src":"7386:9:51"},{"name":"value0","nativeSrc":"7397:6:51","nodeType":"YulIdentifier","src":"7397:6:51"}],"functionName":{"name":"mstore","nativeSrc":"7379:6:51","nodeType":"YulIdentifier","src":"7379:6:51"},"nativeSrc":"7379:25:51","nodeType":"YulFunctionCall","src":"7379:25:51"},"nativeSrc":"7379:25:51","nodeType":"YulExpressionStatement","src":"7379:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7424:9:51","nodeType":"YulIdentifier","src":"7424:9:51"},{"kind":"number","nativeSrc":"7435:2:51","nodeType":"YulLiteral","src":"7435:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7420:3:51","nodeType":"YulIdentifier","src":"7420:3:51"},"nativeSrc":"7420:18:51","nodeType":"YulFunctionCall","src":"7420:18:51"},{"name":"value1","nativeSrc":"7440:6:51","nodeType":"YulIdentifier","src":"7440:6:51"}],"functionName":{"name":"mstore","nativeSrc":"7413:6:51","nodeType":"YulIdentifier","src":"7413:6:51"},"nativeSrc":"7413:34:51","nodeType":"YulFunctionCall","src":"7413:34:51"},"nativeSrc":"7413:34:51","nodeType":"YulExpressionStatement","src":"7413:34:51"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"7205:248:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7295:9:51","nodeType":"YulTypedName","src":"7295:9:51","type":""},{"name":"value1","nativeSrc":"7306:6:51","nodeType":"YulTypedName","src":"7306:6:51","type":""},{"name":"value0","nativeSrc":"7314:6:51","nodeType":"YulTypedName","src":"7314:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7325:4:51","nodeType":"YulTypedName","src":"7325:4:51","type":""}],"src":"7205:248:51"},{"body":{"nativeSrc":"7507:233:51","nodeType":"YulBlock","src":"7507:233:51","statements":[{"nativeSrc":"7517:17:51","nodeType":"YulAssignment","src":"7517:17:51","value":{"arguments":[{"name":"x","nativeSrc":"7529:1:51","nodeType":"YulIdentifier","src":"7529:1:51"},{"name":"y","nativeSrc":"7532:1:51","nodeType":"YulIdentifier","src":"7532:1:51"}],"functionName":{"name":"sub","nativeSrc":"7525:3:51","nodeType":"YulIdentifier","src":"7525:3:51"},"nativeSrc":"7525:9:51","nodeType":"YulFunctionCall","src":"7525:9:51"},"variableNames":[{"name":"diff","nativeSrc":"7517:4:51","nodeType":"YulIdentifier","src":"7517:4:51"}]},{"body":{"nativeSrc":"7566:168:51","nodeType":"YulBlock","src":"7566:168:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7587:1:51","nodeType":"YulLiteral","src":"7587:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7590:77:51","nodeType":"YulLiteral","src":"7590:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7580:6:51","nodeType":"YulIdentifier","src":"7580:6:51"},"nativeSrc":"7580:88:51","nodeType":"YulFunctionCall","src":"7580:88:51"},"nativeSrc":"7580:88:51","nodeType":"YulExpressionStatement","src":"7580:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7688:1:51","nodeType":"YulLiteral","src":"7688:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"7691:4:51","nodeType":"YulLiteral","src":"7691:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"7681:6:51","nodeType":"YulIdentifier","src":"7681:6:51"},"nativeSrc":"7681:15:51","nodeType":"YulFunctionCall","src":"7681:15:51"},"nativeSrc":"7681:15:51","nodeType":"YulExpressionStatement","src":"7681:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7716:1:51","nodeType":"YulLiteral","src":"7716:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7719:4:51","nodeType":"YulLiteral","src":"7719:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7709:6:51","nodeType":"YulIdentifier","src":"7709:6:51"},"nativeSrc":"7709:15:51","nodeType":"YulFunctionCall","src":"7709:15:51"},"nativeSrc":"7709:15:51","nodeType":"YulExpressionStatement","src":"7709:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"7549:4:51","nodeType":"YulIdentifier","src":"7549:4:51"},{"name":"x","nativeSrc":"7555:1:51","nodeType":"YulIdentifier","src":"7555:1:51"}],"functionName":{"name":"gt","nativeSrc":"7546:2:51","nodeType":"YulIdentifier","src":"7546:2:51"},"nativeSrc":"7546:11:51","nodeType":"YulFunctionCall","src":"7546:11:51"},"nativeSrc":"7543:191:51","nodeType":"YulIf","src":"7543:191:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"7458:282:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7489:1:51","nodeType":"YulTypedName","src":"7489:1:51","type":""},{"name":"y","nativeSrc":"7492:1:51","nodeType":"YulTypedName","src":"7492:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"7498:4:51","nodeType":"YulTypedName","src":"7498:4:51","type":""}],"src":"7458:282:51"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 224) { revert(0, 0) }\n        value2 := _2\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_3)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_3, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_3, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IRevocationRegistry_$5000(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_encode_uint64(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffff))\n    }\n    function calldata_access_string_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$5017_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$5017_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        let _1 := 0xffff\n        mstore(add(headStart, 96), and(abi_decode_uint16(value2), _1))\n        mstore(add(headStart, 128), and(abi_decode_uint16(add(value2, 32)), _1))\n        mstore(add(headStart, 160), and(abi_decode_uint64(add(value2, 64)), 0xffffffffffffffff))\n        let memberValue0 := abi_decode_uint64(add(value2, 96))\n        abi_encode_uint64(memberValue0, add(headStart, 192))\n        let memberValue0_1 := abi_decode_uint64(add(value2, 128))\n        abi_encode_uint64(memberValue0_1, add(headStart, 0xe0))\n        let memberValue0_2, memberValue1 := calldata_access_string_calldata(value2, add(value2, 160))\n        mstore(add(headStart, 256), 0xe0)\n        let tail_1 := abi_encode_string_calldata(memberValue0_2, memberValue1, add(headStart, 320))\n        let memberValue0_3, memberValue1_1 := calldata_access_string_calldata(value2, add(value2, 192))\n        mstore(add(headStart, 288), add(sub(tail_1, headStart), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0))\n        tail := abi_encode_string_calldata(memberValue0_3, memberValue1_1, tail_1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function access_calldata_tail_t_string_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4260":[{"length":32,"start":708}],"4263":[{"length":32,"start":1090}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b146100a957806395f94bc4146100d6578063f2fde38b146100e957600080fd5b806301ffc9a71461006c5780634d5b042314610094575b600080fd5b61007f61007a36600461084b565b6100fc565b60405190151581526020015b60405180910390f35b6100a76100a23660046108b6565b610116565b005b6100b16104f0565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100a76100e436600461096f565b61051c565b6100a76100f736600461096f565b610575565b60006101108261010a61058c565b906105ba565b92915050565b60418114610150576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160218301359083359060208086013591600091600191610179918c918c918c9101610a6f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156101f5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191506000905061023060a0890189610b85565b604051602001610241929190610bea565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff84811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610bfa565b156104b2576000546040517fa3a2656a00000000000000000000000000000000000000000000000000000000815260048101839052602481018b905273ffffffffffffffffffffffffffffffffffffffff9091169063a3a2656a90604401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610bfa565b15610405576040517f6e80385700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f54c7be0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906354c7be069061047b908d908d908d90600401610a6f565b600060405180830381600087803b15801561049557600080fd5b505af11580156104a9573d6000803e3d6000fd5b505050506104e4565b6040517fe41bfc5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b60006105176104fd610694565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61052e33610528610694565b906106c2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6105893382610582610694565b9190610736565b50565b60008061011060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610c1c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161060a57506000610110565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161065b57506001610110565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061011060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610c1c565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610732576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146107a3576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610729565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108455783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b60006020828403121561085d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461088d57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461058957600080fd5b6000806000806000608086880312156108ce57600080fd5b85356108d981610894565b945060208601359350604086013567ffffffffffffffff808211156108fd57600080fd5b9087019060e0828a03121561091157600080fd5b9093506060870135908082111561092757600080fd5b818801915088601f83011261093b57600080fd5b81358181111561094a57600080fd5b89602082850101111561095c57600080fd5b9699959850939650602001949392505050565b60006020828403121561098157600080fd5b813561088d81610894565b803561ffff8116811461099e57600080fd5b919050565b803567ffffffffffffffff8116811461099e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109f057600080fd5b830160208101925035905067ffffffffffffffff811115610a1057600080fd5b803603821315610a1f57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061ffff80610aa48561098c565b16606084015280610ab76020860161098c565b1660808401525067ffffffffffffffff610ad3604085016109a3565b1660a0830152610ae5606084016109a3565b67ffffffffffffffff1660c0830152610b00608084016109a3565b67ffffffffffffffff1660e0830152610b1c60a08401846109bb565b60e0610100850152610b3361014085018284610a26565b915050610b4360c08501856109bb565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa085840301610120860152610b79838284610a26565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610bba57600080fd5b83018035915067ffffffffffffffff821115610bd557600080fd5b602001915036819003821315610a1f57600080fd5b8183823760009101908152919050565b600060208284031215610c0c57600080fd5b8151801515811461088d57600080fd5b81810381811115610110577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220c82d58a890868dd2ba6f4ee020933f896a0640cbf8013599302b8a01c5f8df1764736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x4D5B0423 EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xFC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B6 JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST PUSH2 0xA7 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x96F JUMP JUMPDEST PUSH2 0x51C JUMP JUMPDEST PUSH2 0xA7 PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96F JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x110 DUP3 PUSH2 0x10A PUSH2 0x58C JUMP JUMPDEST SWAP1 PUSH2 0x5BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x179 SWAP2 DUP13 SWAP2 DUP13 SWAP2 DUP13 SWAP2 ADD PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x230 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x241 SWAP3 SWAP2 SWAP1 PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32F SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0xBFA JUMP JUMPDEST ISZERO PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6E80385700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x54C7BE0600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x54C7BE06 SWAP1 PUSH2 0x47B SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE41BFC5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x517 PUSH2 0x4FD PUSH2 0x694 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x52E CALLER PUSH2 0x528 PUSH2 0x694 JUMP JUMPDEST SWAP1 PUSH2 0x6C2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x589 CALLER DUP3 PUSH2 0x582 PUSH2 0x694 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x110 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x60A JUMPI POP PUSH1 0x0 PUSH2 0x110 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x65B JUMPI POP PUSH1 0x1 PUSH2 0x110 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x110 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xC1C JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x7A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x729 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x845 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x589 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8D9 DUP2 PUSH2 0x894 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0xE0 DUP3 DUP11 SUB SLT ISZERO PUSH2 0x911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x927 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x94A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x88D DUP2 PUSH2 0x894 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFFFF DUP1 PUSH2 0xAA4 DUP6 PUSH2 0x98C JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH2 0xAB7 PUSH1 0x20 DUP7 ADD PUSH2 0x98C JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0xAD3 PUSH1 0x40 DUP6 ADD PUSH2 0x9A3 JUMP JUMPDEST AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0xAE5 PUSH1 0x60 DUP5 ADD PUSH2 0x9A3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xB00 PUSH1 0x80 DUP5 ADD PUSH2 0x9A3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0xB1C PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0x9BB JUMP JUMPDEST PUSH1 0xE0 PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0xB33 PUSH2 0x140 DUP6 ADD DUP3 DUP5 PUSH2 0xA26 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB43 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x9BB JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP6 DUP5 SUB ADD PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0xB79 DUP4 DUP3 DUP5 PUSH2 0xA26 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xBD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x110 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0x2D PC 0xA8 SWAP1 DUP7 DUP14 0xD2 0xBA PUSH16 0x4EE020933F896A0640CBF8013599302B DUP11 ADD 0xC5 0xF8 0xDF OR PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"595:2903:46:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;516:14:51;;509:22;491:41;;479:2;464:18;542:165:14;;;;;;;;2500:996:46;;;;;;:::i;:::-;;:::i;:::-;;710:120:4;;;:::i;:::-;;;1944:42:51;1932:55;;;1914:74;;1902:2;1887:18;710:120:4;1768:226:51;1577:217:46;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;2500:996:46:-;2695:2;2675:22;;2671:53;;2706:18;;;;;;;;;;;;;;2671:53;3079:33;;2960:4;2938:27;;2925:41;;2818:30;;;2901:4;2879:27;;;2866:41;;2735:7;;3059:64;;3079:33;;3090:2;;3094:7;;3103:8;;3079:33;;:::i;:::-;;;;;;;;;;;;;;3069:44;;3079:33;3069:44;;;;3059:64;;;;;;;;;5581:25:51;5654:4;5642:17;;5622:18;;;5615:45;5676:18;;;5669:34;;;5719:18;;;5712:34;;;5553:19;;3059:64:46;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3059:64:46;;;;;;-1:-1:-1;3133:17:46;;-1:-1:-1;3180:18:46;;;;:8;:18;:::i;:::-;3163:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;3153:47;;3163:36;3153:47;;;;3215:39;;;;;;6795:25:51;;;3215:20:46;6856:55:51;;;6836:18;;;6829:83;3153:47:46;;-1:-1:-1;3215:12:46;:20;;;;6768:18:51;;3215:39:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3211:279;;;3274:19;;:49;;;;;;;;7379:25:51;;;7420:18;;;7413:34;;;3274:19:46;;;;;:29;;7352:18:51;;3274:49:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3270:106;;;3350:11;;;;;;;;;;;;;;3270:106;3389:34;;;;;:11;:6;:11;;;;:34;;3401:2;;3405:7;;3414:8;;3389:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3211:279;;;3461:18;;;;;;;;;;;;;;3211:279;2631:865;;;;;2500:996;;;;;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;782:41:4;775:48;;710:120;:::o;1577:217:46:-;1667:70;719:10:43;1667:33:46;:31;:33::i;:::-;:56;;:70::i;:::-;1747:19;:40;;;;;;;;;;;;;;;1577:217::o;864:152:4:-;934:75;719:10:43;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1944:42:51;1932:55;;4543:25:13;;;1914:74:51;1887:18;;4543:25:13;;;;;;;;4504:64;4413:162;;:::o;3060:369::-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1944:42:51;1932:55;;3243:24:13;;;1914:74:51;1887:18;;3243:24:13;1768:226:51;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3277:146;3148:281;3060:369;;;:::o;14:332:51:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:51:o;543:154::-;629:42;622:5;618:54;611:5;608:65;598:93;;687:1;684;677:12;702:1061;827:6;835;843;851;859;912:3;900:9;891:7;887:23;883:33;880:53;;;929:1;926;919:12;880:53;968:9;955:23;987:31;1012:5;987:31;:::i;:::-;1037:5;-1:-1:-1;1089:2:51;1074:18;;1061:32;;-1:-1:-1;1144:2:51;1129:18;;1116:32;1167:18;1197:14;;;1194:34;;;1224:1;1221;1214:12;1194:34;1247:22;;;;1303:3;1285:16;;;1281:26;1278:46;;;1320:1;1317;1310:12;1278:46;1343:2;;-1:-1:-1;1398:2:51;1383:18;;1370:32;;1414:16;;;1411:36;;;1443:1;1440;1433:12;1411:36;1481:8;1470:9;1466:24;1456:34;;1528:7;1521:4;1517:2;1513:13;1509:27;1499:55;;1550:1;1547;1540:12;1499:55;1590:2;1577:16;1616:2;1608:6;1605:14;1602:34;;;1632:1;1629;1622:12;1602:34;1677:7;1672:2;1663:6;1659:2;1655:15;1651:24;1648:37;1645:57;;;1698:1;1695;1688:12;1645:57;702:1061;;;;-1:-1:-1;702:1061:51;;-1:-1:-1;1729:2:51;1721:11;;1751:6;702:1061;-1:-1:-1;;;702:1061:51:o;1999:275::-;2086:6;2139:2;2127:9;2118:7;2114:23;2110:32;2107:52;;;2155:1;2152;2145:12;2107:52;2194:9;2181:23;2213:31;2238:5;2213:31;:::i;2531:159::-;2598:20;;2658:6;2647:18;;2637:29;;2627:57;;2680:1;2677;2670:12;2627:57;2531:159;;;:::o;2695:171::-;2762:20;;2822:18;2811:30;;2801:41;;2791:69;;2856:1;2853;2846:12;2978:560;3037:5;3044:6;3104:3;3091:17;3186:66;3175:8;3159:14;3155:29;3151:102;3131:18;3127:127;3117:155;;3268:1;3265;3258:12;3117:155;3296:33;;3400:4;3387:18;;;-1:-1:-1;3348:21:51;;-1:-1:-1;3428:18:51;3417:30;;3414:50;;;3460:1;3457;3450:12;3414:50;3507:6;3491:14;3487:27;3480:5;3476:39;3473:59;;;3528:1;3525;3518:12;3473:59;2978:560;;;;;:::o;3543:326::-;3632:6;3627:3;3620:19;3684:6;3677:5;3670:4;3665:3;3661:14;3648:43;;3736:1;3729:4;3720:6;3715:3;3711:16;3707:27;3700:38;3602:3;3858:4;3788:66;3783:2;3775:6;3771:15;3767:88;3762:3;3758:98;3754:109;3747:116;;3543:326;;;;:::o;3874:1475::-;4125:42;4117:6;4113:55;4102:9;4095:74;4205:6;4200:2;4189:9;4185:18;4178:34;4248:2;4243;4232:9;4228:18;4221:30;4076:4;4270:6;4343:2;4316:25;4334:6;4316:25;:::i;:::-;4312:34;4307:2;4296:9;4292:18;4285:62;4424:2;4388:34;4418:2;4410:6;4406:15;4388:34;:::i;:::-;4384:43;4378:3;4367:9;4363:19;4356:72;;4505:18;4469:34;4499:2;4491:6;4487:15;4469:34;:::i;:::-;4465:59;4459:3;4448:9;4444:19;4437:88;4554:34;4584:2;4576:6;4572:15;4554:34;:::i;:::-;2947:18;2936:30;4644:3;4629:19;;2924:43;4680:35;4710:3;4698:16;;4680:35;:::i;:::-;2947:18;2936:30;4773:4;4758:20;;2924:43;4824:57;4876:3;4864:16;;4868:6;4824:57;:::i;:::-;4918:4;4912:3;4901:9;4897:19;4890:33;4946:77;5018:3;5007:9;5003:19;4989:12;4973:14;4946:77;:::i;:::-;4932:91;;;5070:57;5122:3;5114:6;5110:16;5102:6;5070:57;:::i;:::-;5192:66;5180:9;5172:6;5168:22;5164:95;5158:3;5147:9;5143:19;5136:124;5277:66;5336:6;5320:14;5304;5277:66;:::i;:::-;5269:74;3874:1475;-1:-1:-1;;;;;;;;3874:1475:51:o;5757:581::-;5835:4;5841:6;5901:11;5888:25;5991:66;5980:8;5964:14;5960:29;5956:102;5936:18;5932:127;5922:155;;6073:1;6070;6063:12;5922:155;6100:33;;6152:20;;;-1:-1:-1;6195:18:51;6184:30;;6181:50;;;6227:1;6224;6217:12;6181:50;6260:4;6248:17;;-1:-1:-1;6291:14:51;6287:27;;;6277:38;;6274:58;;;6328:1;6325;6318:12;6343:273;6528:6;6520;6515:3;6502:33;6484:3;6554:16;;6579:13;;;6554:16;6343:273;-1:-1:-1;6343:273:51:o;6923:277::-;6990:6;7043:2;7031:9;7022:7;7018:23;7014:32;7011:52;;;7059:1;7056;7049:12;7011:52;7091:9;7085:16;7144:5;7137:13;7130:21;7123:5;7120:32;7110:60;;7166:1;7163;7156:12;7458:282;7525:9;;;7546:11;;;7543:191;;;7590:77;7587:1;7580:88;7691:4;7688:1;7681:15;7719:4;7716:1;7709:15"},"gasEstimates":{"creation":{"codeDepositCost":"642400","executionCost":"infinite","totalCost":"infinite"},"external":{"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":"infinite","owner()":"infinite","setRevocationRegistry(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":"4d5b0423","owner()":"8da5cb5b","setRevocationRegistry(address)":"95f94bc4","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"},{\"internalType\":\"contract OpenCampusCertificateNFTv1\",\"name\":\"nftv1\",\"type\":\"address\"},{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssuerNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VcRevoked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"internalType\":\"struct CertificateNFTv1MetaData.MetaData\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"name\":\"setRevocationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)\":{\"details\":\"Reverts with `VcRevoked` error if the token being minted has been revoked.Reverts with `IssuerNotAllowed` error if recovered issuer is not valid in the DIDRegistry.Reverts with `InvalidSignature` error if the signature is not 65 bytes in length.signature is ECDSA signature for (to, tokenId, metadata).signature is a 65 bytes raw signature without compacting.\",\"params\":{\"metadata\":\"On-chain metadata for the NFT.\",\"signature\":\"The ECDSA signature for the payload (`to`,`tokenId`,`metadata`).\",\"to\":\"The address to which `tokenId` would be minted to.\",\"tokenId\":\"The id of the token to be minted.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setRevocationRegistry(address)\":{\"params\":{\"revocationRegistry\":\"The address of the Revocation Registry contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the signature is invalid for the NFT payload.\"}],\"IssuerNotAllowed()\":[{\"notice\":\"Thrown when the issuer is not one of the allowed issuers.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"VcRevoked()\":[{\"notice\":\"Thrown when the VC has been revoked.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateNFTMinter.sol\":\"OpenCampusCertificateNFTMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\nimport {OpenCampusCertificateNFTv1} from \\\"./OpenCampusCertificateNFTv1.sol\\\";\\n\\ncontract OpenCampusCertificateNFTMinter is ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    OpenCampusCertificateNFTv1 internal immutable NFT_V1;\\n\\n    IRevocationRegistry internal _revocationRegistry;\\n    /// @notice Thrown when the signature is invalid for the NFT payload.\\n    error InvalidSignature();\\n\\n    /// @notice Thrown when the issuer is not one of the allowed issuers.\\n    error IssuerNotAllowed();\\n\\n    /// @notice Thrown when the VC has been revoked.\\n    error VcRevoked();\\n\\n    constructor(\\n        IIssuersDIDRegistry didRegistry,\\n        OpenCampusCertificateNFTv1 nftv1,\\n        IRevocationRegistry revocationRegistry\\n    ) ContractOwnership(msg.sender) {\\n        DID_REGISTRY = didRegistry;\\n        NFT_V1 = nftv1;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `VcRevoked` error if the token being minted has been revoked.\\n    /// @dev Reverts with `IssuerNotAllowed` error if recovered issuer is not valid in the DIDRegistry.\\n    /// @dev Reverts with `InvalidSignature` error if the signature is not 65 bytes in length.\\n    /// @dev signature is ECDSA signature for (to, tokenId, metadata).\\n    /// @dev signature is a 65 bytes raw signature without compacting.\\n    /// @param to The address to which `tokenId` would be minted to.\\n    /// @param tokenId The id of the token to be minted.\\n    /// @param metadata On-chain metadata for the NFT.\\n    /// @param signature The ECDSA signature for the payload (`to`,`tokenId`,`metadata`).\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata, bytes calldata signature) external {\\n        // recover the signer\\n        if (signature.length != 65) revert InvalidSignature();\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        assembly {\\n            r := calldataload(signature.offset)\\n            s := calldataload(add(signature.offset, 0x20))\\n            v := calldataload(add(signature.offset, 0x21))\\n        }\\n\\n        // Use the native ecrecover provided by the EVM\\n        address signer = ecrecover(keccak256(abi.encode(to, tokenId, metadata)), v, r, s);\\n        bytes32 hashedDid = keccak256(abi.encodePacked(metadata.issuerDid));\\n\\n        if (DID_REGISTRY.issuers(hashedDid, signer)) {\\n            if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n                revert VcRevoked();\\n            }\\n            NFT_V1.mint(to, tokenId, metadata);\\n        } else {\\n            revert IssuerNotAllowed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe262b426abf000deaa2295dad6e4536e65e2c6e37f9625393fa5c6218e261dde\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTv1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// other imports\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// access control imports\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n// ERC721 imports\\nimport {IERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {Transfer} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\\\";\\nimport {ERC721Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\n// ForwardRegistry imports\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n// local imports\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl, ForwarderRegistryContext {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    IRevocationRegistry internal _revocationRegistry;\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n    bytes32 public constant OPERATOR_ROLE = \\\"operator\\\";\\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\\n\\n    /// @notice Thrown when burn operation cannot be executed.\\n    error InvalidBurn();\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IForwarderRegistry forwarderRegistry,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\\n        ERC721Storage.init();\\n        DID_REGISTRY = didRegistry;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\\n    /// @param to The owner of `tokenId`\\n    /// @param tokenId The id of the VC NFT to be minted\\n    /// @param metadata Metadata for `tokenId`\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\\n\\n        ERC721Storage.layout().mint(to, tokenId);\\n        vcData[tokenId] = metadata;\\n    }\\n\\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\\n    /// @param tokenId The Token Id to be burnt.\\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\\n    function burn(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\\n\\n            unchecked {\\n                // cannot underflow as balance is verified through TOKEN ownership\\n                --ERC721Storage.layout().balances[owner];\\n            }\\n            emit Transfer(owner, address(0), tokenId);\\n        } else {\\n            revert InvalidBurn();\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice `sender` is operatable if the sender is a valid issuer for `tokenId` or have been granted `operator` role before\\n    /// @dev Reverts with `NotRoleHolder` if `sender` is neither allowed token issuer nor an operator for this contract.\\n    /// @param sender The sender that trigger the contract.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function _isSenderOperatable(address sender, uint256 tokenId) internal view {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, sender);\\n        }\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().transferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x3a977107737d16e4e5d6e5099991c9f3cbbf1affb199ab71aefcabeca9bd03b9\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"},\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4266,"contract":"contracts/vc/OpenCampusCertificateNFTMinter.sol:OpenCampusCertificateNFTMinter","label":"_revocationRegistry","offset":0,"slot":"0","type":"t_contract(IRevocationRegistry)5000"}],"types":{"t_contract(IRevocationRegistry)5000":{"encoding":"inplace","label":"contract IRevocationRegistry","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidSignature()":[{"notice":"Thrown when the signature is invalid for the NFT payload."}],"IssuerNotAllowed()":[{"notice":"Thrown when the issuer is not one of the allowed issuers."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"VcRevoked()":[{"notice":"Thrown when the VC has been revoked."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"OpenCampusCertificateNFTv1":{"abi":[{"inputs":[{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"},{"internalType":"contract ITokenMetadataResolver","name":"metadataResolver","type":"address"},{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"},{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForApproval","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApproval","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ERC721SelfApprovalForAll","type":"error"},{"inputs":[],"name":"ERC721TransferToAddressZero","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidBurn","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"internalType":"struct CertificateNFTv1MetaData.MetaData","name":"metadata","type":"tuple"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"name":"setRevocationRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vcData","outputs":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"ERC721SelfApproval(address)":[{"params":{"account":"The account trying to approve itself."}}],"ERC721SelfApprovalForAll(address)":[{"params":{"account":"The account trying to approveForAll itself."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"burn(uint256)":{"details":"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.","params":{"tokenId":"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":{"details":"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.","params":{"metadata":"Metadata for `tokenId`","to":"The owner of `tokenId`","tokenId":"The id of the VC NFT to be minted"}},"name()":{"returns":{"tokenName":"The name of the token."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"setRevocationRegistry(address)":{"params":{"revocationRegistry":"The address of the Revocation Registry contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1023":{"entryPoint":null,"id":1023,"parameterSlots":1,"returnSlots":0},"@_1070":{"entryPoint":null,"id":1070,"parameterSlots":1,"returnSlots":0},"@_1324":{"entryPoint":null,"id":1324,"parameterSlots":3,"returnSlots":0},"@_4548":{"entryPoint":null,"id":4548,"parameterSlots":6,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@constructorInit_3609":{"entryPoint":252,"id":3609,"parameterSlots":4,"returnSlots":0},"@constructorInit_695":{"entryPoint":405,"id":695,"parameterSlots":2,"returnSlots":0},"@initERC721Metadata_1863":{"entryPoint":323,"id":1863,"parameterSlots":0,"returnSlots":0},"@init_1829":{"entryPoint":520,"id":1829,"parameterSlots":0,"returnSlots":0},"@layout_3722":{"entryPoint":198,"id":3722,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":357,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":539,"id":999,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_953":{"entryPoint":587,"id":953,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory":{"entryPoint":905,"id":null,"parameterSlots":2,"returnSlots":6},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1097,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1191,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1276,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1131,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":680,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IForwarderRegistry":{"entryPoint":880,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:5252:51","nodeType":"YulBlock","src":"0:5252:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"46:95:51","nodeType":"YulBlock","src":"46:95:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:51","nodeType":"YulLiteral","src":"63:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:51","nodeType":"YulLiteral","src":"70:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:51","nodeType":"YulLiteral","src":"75:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:51","nodeType":"YulIdentifier","src":"66:3:51"},"nativeSrc":"66:20:51","nodeType":"YulFunctionCall","src":"66:20:51"}],"functionName":{"name":"mstore","nativeSrc":"56:6:51","nodeType":"YulIdentifier","src":"56:6:51"},"nativeSrc":"56:31:51","nodeType":"YulFunctionCall","src":"56:31:51"},"nativeSrc":"56:31:51","nodeType":"YulExpressionStatement","src":"56:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:51","nodeType":"YulLiteral","src":"103:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:51","nodeType":"YulLiteral","src":"106:4:51","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:51","nodeType":"YulIdentifier","src":"96:6:51"},"nativeSrc":"96:15:51","nodeType":"YulFunctionCall","src":"96:15:51"},"nativeSrc":"96:15:51","nodeType":"YulExpressionStatement","src":"96:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:51","nodeType":"YulLiteral","src":"127:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:51","nodeType":"YulLiteral","src":"130:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:51","nodeType":"YulIdentifier","src":"120:6:51"},"nativeSrc":"120:15:51","nodeType":"YulFunctionCall","src":"120:15:51"},"nativeSrc":"120:15:51","nodeType":"YulExpressionStatement","src":"120:15:51"}]},"name":"panic_error_0x41","nativeSrc":"14:127:51","nodeType":"YulFunctionDefinition","src":"14:127:51"},{"body":{"nativeSrc":"210:780:51","nodeType":"YulBlock","src":"210:780:51","statements":[{"body":{"nativeSrc":"259:16:51","nodeType":"YulBlock","src":"259:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"268:1:51","nodeType":"YulLiteral","src":"268:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"271:1:51","nodeType":"YulLiteral","src":"271:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"261:6:51","nodeType":"YulIdentifier","src":"261:6:51"},"nativeSrc":"261:12:51","nodeType":"YulFunctionCall","src":"261:12:51"},"nativeSrc":"261:12:51","nodeType":"YulExpressionStatement","src":"261:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"238:6:51","nodeType":"YulIdentifier","src":"238:6:51"},{"kind":"number","nativeSrc":"246:4:51","nodeType":"YulLiteral","src":"246:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"234:3:51","nodeType":"YulIdentifier","src":"234:3:51"},"nativeSrc":"234:17:51","nodeType":"YulFunctionCall","src":"234:17:51"},{"name":"end","nativeSrc":"253:3:51","nodeType":"YulIdentifier","src":"253:3:51"}],"functionName":{"name":"slt","nativeSrc":"230:3:51","nodeType":"YulIdentifier","src":"230:3:51"},"nativeSrc":"230:27:51","nodeType":"YulFunctionCall","src":"230:27:51"}],"functionName":{"name":"iszero","nativeSrc":"223:6:51","nodeType":"YulIdentifier","src":"223:6:51"},"nativeSrc":"223:35:51","nodeType":"YulFunctionCall","src":"223:35:51"},"nativeSrc":"220:55:51","nodeType":"YulIf","src":"220:55:51"},{"nativeSrc":"284:23:51","nodeType":"YulVariableDeclaration","src":"284:23:51","value":{"arguments":[{"name":"offset","nativeSrc":"300:6:51","nodeType":"YulIdentifier","src":"300:6:51"}],"functionName":{"name":"mload","nativeSrc":"294:5:51","nodeType":"YulIdentifier","src":"294:5:51"},"nativeSrc":"294:13:51","nodeType":"YulFunctionCall","src":"294:13:51"},"variables":[{"name":"_1","nativeSrc":"288:2:51","nodeType":"YulTypedName","src":"288:2:51","type":""}]},{"nativeSrc":"316:28:51","nodeType":"YulVariableDeclaration","src":"316:28:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"334:2:51","nodeType":"YulLiteral","src":"334:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"338:1:51","nodeType":"YulLiteral","src":"338:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"330:3:51","nodeType":"YulIdentifier","src":"330:3:51"},"nativeSrc":"330:10:51","nodeType":"YulFunctionCall","src":"330:10:51"},{"kind":"number","nativeSrc":"342:1:51","nodeType":"YulLiteral","src":"342:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"326:3:51","nodeType":"YulIdentifier","src":"326:3:51"},"nativeSrc":"326:18:51","nodeType":"YulFunctionCall","src":"326:18:51"},"variables":[{"name":"_2","nativeSrc":"320:2:51","nodeType":"YulTypedName","src":"320:2:51","type":""}]},{"body":{"nativeSrc":"367:22:51","nodeType":"YulBlock","src":"367:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"369:16:51","nodeType":"YulIdentifier","src":"369:16:51"},"nativeSrc":"369:18:51","nodeType":"YulFunctionCall","src":"369:18:51"},"nativeSrc":"369:18:51","nodeType":"YulExpressionStatement","src":"369:18:51"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"359:2:51","nodeType":"YulIdentifier","src":"359:2:51"},{"name":"_2","nativeSrc":"363:2:51","nodeType":"YulIdentifier","src":"363:2:51"}],"functionName":{"name":"gt","nativeSrc":"356:2:51","nodeType":"YulIdentifier","src":"356:2:51"},"nativeSrc":"356:10:51","nodeType":"YulFunctionCall","src":"356:10:51"},"nativeSrc":"353:36:51","nodeType":"YulIf","src":"353:36:51"},{"nativeSrc":"398:17:51","nodeType":"YulVariableDeclaration","src":"398:17:51","value":{"arguments":[{"kind":"number","nativeSrc":"412:2:51","nodeType":"YulLiteral","src":"412:2:51","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"408:3:51","nodeType":"YulIdentifier","src":"408:3:51"},"nativeSrc":"408:7:51","nodeType":"YulFunctionCall","src":"408:7:51"},"variables":[{"name":"_3","nativeSrc":"402:2:51","nodeType":"YulTypedName","src":"402:2:51","type":""}]},{"nativeSrc":"424:23:51","nodeType":"YulVariableDeclaration","src":"424:23:51","value":{"arguments":[{"kind":"number","nativeSrc":"444:2:51","nodeType":"YulLiteral","src":"444:2:51","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"438:5:51","nodeType":"YulIdentifier","src":"438:5:51"},"nativeSrc":"438:9:51","nodeType":"YulFunctionCall","src":"438:9:51"},"variables":[{"name":"memPtr","nativeSrc":"428:6:51","nodeType":"YulTypedName","src":"428:6:51","type":""}]},{"nativeSrc":"456:71:51","nodeType":"YulVariableDeclaration","src":"456:71:51","value":{"arguments":[{"name":"memPtr","nativeSrc":"478:6:51","nodeType":"YulIdentifier","src":"478:6:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"502:2:51","nodeType":"YulIdentifier","src":"502:2:51"},{"kind":"number","nativeSrc":"506:4:51","nodeType":"YulLiteral","src":"506:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"498:3:51","nodeType":"YulIdentifier","src":"498:3:51"},"nativeSrc":"498:13:51","nodeType":"YulFunctionCall","src":"498:13:51"},{"name":"_3","nativeSrc":"513:2:51","nodeType":"YulIdentifier","src":"513:2:51"}],"functionName":{"name":"and","nativeSrc":"494:3:51","nodeType":"YulIdentifier","src":"494:3:51"},"nativeSrc":"494:22:51","nodeType":"YulFunctionCall","src":"494:22:51"},{"kind":"number","nativeSrc":"518:2:51","nodeType":"YulLiteral","src":"518:2:51","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"490:3:51","nodeType":"YulIdentifier","src":"490:3:51"},"nativeSrc":"490:31:51","nodeType":"YulFunctionCall","src":"490:31:51"},{"name":"_3","nativeSrc":"523:2:51","nodeType":"YulIdentifier","src":"523:2:51"}],"functionName":{"name":"and","nativeSrc":"486:3:51","nodeType":"YulIdentifier","src":"486:3:51"},"nativeSrc":"486:40:51","nodeType":"YulFunctionCall","src":"486:40:51"}],"functionName":{"name":"add","nativeSrc":"474:3:51","nodeType":"YulIdentifier","src":"474:3:51"},"nativeSrc":"474:53:51","nodeType":"YulFunctionCall","src":"474:53:51"},"variables":[{"name":"newFreePtr","nativeSrc":"460:10:51","nodeType":"YulTypedName","src":"460:10:51","type":""}]},{"body":{"nativeSrc":"586:22:51","nodeType":"YulBlock","src":"586:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"588:16:51","nodeType":"YulIdentifier","src":"588:16:51"},"nativeSrc":"588:18:51","nodeType":"YulFunctionCall","src":"588:18:51"},"nativeSrc":"588:18:51","nodeType":"YulExpressionStatement","src":"588:18:51"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"545:10:51","nodeType":"YulIdentifier","src":"545:10:51"},{"name":"_2","nativeSrc":"557:2:51","nodeType":"YulIdentifier","src":"557:2:51"}],"functionName":{"name":"gt","nativeSrc":"542:2:51","nodeType":"YulIdentifier","src":"542:2:51"},"nativeSrc":"542:18:51","nodeType":"YulFunctionCall","src":"542:18:51"},{"arguments":[{"name":"newFreePtr","nativeSrc":"565:10:51","nodeType":"YulIdentifier","src":"565:10:51"},{"name":"memPtr","nativeSrc":"577:6:51","nodeType":"YulIdentifier","src":"577:6:51"}],"functionName":{"name":"lt","nativeSrc":"562:2:51","nodeType":"YulIdentifier","src":"562:2:51"},"nativeSrc":"562:22:51","nodeType":"YulFunctionCall","src":"562:22:51"}],"functionName":{"name":"or","nativeSrc":"539:2:51","nodeType":"YulIdentifier","src":"539:2:51"},"nativeSrc":"539:46:51","nodeType":"YulFunctionCall","src":"539:46:51"},"nativeSrc":"536:72:51","nodeType":"YulIf","src":"536:72:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"624:2:51","nodeType":"YulLiteral","src":"624:2:51","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"628:10:51","nodeType":"YulIdentifier","src":"628:10:51"}],"functionName":{"name":"mstore","nativeSrc":"617:6:51","nodeType":"YulIdentifier","src":"617:6:51"},"nativeSrc":"617:22:51","nodeType":"YulFunctionCall","src":"617:22:51"},"nativeSrc":"617:22:51","nodeType":"YulExpressionStatement","src":"617:22:51"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"655:6:51","nodeType":"YulIdentifier","src":"655:6:51"},{"name":"_1","nativeSrc":"663:2:51","nodeType":"YulIdentifier","src":"663:2:51"}],"functionName":{"name":"mstore","nativeSrc":"648:6:51","nodeType":"YulIdentifier","src":"648:6:51"},"nativeSrc":"648:18:51","nodeType":"YulFunctionCall","src":"648:18:51"},"nativeSrc":"648:18:51","nodeType":"YulExpressionStatement","src":"648:18:51"},{"nativeSrc":"675:14:51","nodeType":"YulVariableDeclaration","src":"675:14:51","value":{"kind":"number","nativeSrc":"685:4:51","nodeType":"YulLiteral","src":"685:4:51","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"679:2:51","nodeType":"YulTypedName","src":"679:2:51","type":""}]},{"body":{"nativeSrc":"737:16:51","nodeType":"YulBlock","src":"737:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"746:1:51","nodeType":"YulLiteral","src":"746:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"749:1:51","nodeType":"YulLiteral","src":"749:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"739:6:51","nodeType":"YulIdentifier","src":"739:6:51"},"nativeSrc":"739:12:51","nodeType":"YulFunctionCall","src":"739:12:51"},"nativeSrc":"739:12:51","nodeType":"YulExpressionStatement","src":"739:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"712:6:51","nodeType":"YulIdentifier","src":"712:6:51"},{"name":"_1","nativeSrc":"720:2:51","nodeType":"YulIdentifier","src":"720:2:51"}],"functionName":{"name":"add","nativeSrc":"708:3:51","nodeType":"YulIdentifier","src":"708:3:51"},"nativeSrc":"708:15:51","nodeType":"YulFunctionCall","src":"708:15:51"},{"kind":"number","nativeSrc":"725:4:51","nodeType":"YulLiteral","src":"725:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"704:3:51","nodeType":"YulIdentifier","src":"704:3:51"},"nativeSrc":"704:26:51","nodeType":"YulFunctionCall","src":"704:26:51"},{"name":"end","nativeSrc":"732:3:51","nodeType":"YulIdentifier","src":"732:3:51"}],"functionName":{"name":"gt","nativeSrc":"701:2:51","nodeType":"YulIdentifier","src":"701:2:51"},"nativeSrc":"701:35:51","nodeType":"YulFunctionCall","src":"701:35:51"},"nativeSrc":"698:55:51","nodeType":"YulIf","src":"698:55:51"},{"nativeSrc":"762:10:51","nodeType":"YulVariableDeclaration","src":"762:10:51","value":{"kind":"number","nativeSrc":"771:1:51","nodeType":"YulLiteral","src":"771:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"766:1:51","nodeType":"YulTypedName","src":"766:1:51","type":""}]},{"body":{"nativeSrc":"827:87:51","nodeType":"YulBlock","src":"827:87:51","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"856:6:51","nodeType":"YulIdentifier","src":"856:6:51"},{"name":"i","nativeSrc":"864:1:51","nodeType":"YulIdentifier","src":"864:1:51"}],"functionName":{"name":"add","nativeSrc":"852:3:51","nodeType":"YulIdentifier","src":"852:3:51"},"nativeSrc":"852:14:51","nodeType":"YulFunctionCall","src":"852:14:51"},{"name":"_4","nativeSrc":"868:2:51","nodeType":"YulIdentifier","src":"868:2:51"}],"functionName":{"name":"add","nativeSrc":"848:3:51","nodeType":"YulIdentifier","src":"848:3:51"},"nativeSrc":"848:23:51","nodeType":"YulFunctionCall","src":"848:23:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"887:6:51","nodeType":"YulIdentifier","src":"887:6:51"},{"name":"i","nativeSrc":"895:1:51","nodeType":"YulIdentifier","src":"895:1:51"}],"functionName":{"name":"add","nativeSrc":"883:3:51","nodeType":"YulIdentifier","src":"883:3:51"},"nativeSrc":"883:14:51","nodeType":"YulFunctionCall","src":"883:14:51"},{"name":"_4","nativeSrc":"899:2:51","nodeType":"YulIdentifier","src":"899:2:51"}],"functionName":{"name":"add","nativeSrc":"879:3:51","nodeType":"YulIdentifier","src":"879:3:51"},"nativeSrc":"879:23:51","nodeType":"YulFunctionCall","src":"879:23:51"}],"functionName":{"name":"mload","nativeSrc":"873:5:51","nodeType":"YulIdentifier","src":"873:5:51"},"nativeSrc":"873:30:51","nodeType":"YulFunctionCall","src":"873:30:51"}],"functionName":{"name":"mstore","nativeSrc":"841:6:51","nodeType":"YulIdentifier","src":"841:6:51"},"nativeSrc":"841:63:51","nodeType":"YulFunctionCall","src":"841:63:51"},"nativeSrc":"841:63:51","nodeType":"YulExpressionStatement","src":"841:63:51"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"792:1:51","nodeType":"YulIdentifier","src":"792:1:51"},{"name":"_1","nativeSrc":"795:2:51","nodeType":"YulIdentifier","src":"795:2:51"}],"functionName":{"name":"lt","nativeSrc":"789:2:51","nodeType":"YulIdentifier","src":"789:2:51"},"nativeSrc":"789:9:51","nodeType":"YulFunctionCall","src":"789:9:51"},"nativeSrc":"781:133:51","nodeType":"YulForLoop","post":{"nativeSrc":"799:19:51","nodeType":"YulBlock","src":"799:19:51","statements":[{"nativeSrc":"801:15:51","nodeType":"YulAssignment","src":"801:15:51","value":{"arguments":[{"name":"i","nativeSrc":"810:1:51","nodeType":"YulIdentifier","src":"810:1:51"},{"name":"_4","nativeSrc":"813:2:51","nodeType":"YulIdentifier","src":"813:2:51"}],"functionName":{"name":"add","nativeSrc":"806:3:51","nodeType":"YulIdentifier","src":"806:3:51"},"nativeSrc":"806:10:51","nodeType":"YulFunctionCall","src":"806:10:51"},"variableNames":[{"name":"i","nativeSrc":"801:1:51","nodeType":"YulIdentifier","src":"801:1:51"}]}]},"pre":{"nativeSrc":"785:3:51","nodeType":"YulBlock","src":"785:3:51","statements":[]},"src":"781:133:51"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"938:6:51","nodeType":"YulIdentifier","src":"938:6:51"},{"name":"_1","nativeSrc":"946:2:51","nodeType":"YulIdentifier","src":"946:2:51"}],"functionName":{"name":"add","nativeSrc":"934:3:51","nodeType":"YulIdentifier","src":"934:3:51"},"nativeSrc":"934:15:51","nodeType":"YulFunctionCall","src":"934:15:51"},{"kind":"number","nativeSrc":"951:4:51","nodeType":"YulLiteral","src":"951:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"930:3:51","nodeType":"YulIdentifier","src":"930:3:51"},"nativeSrc":"930:26:51","nodeType":"YulFunctionCall","src":"930:26:51"},{"kind":"number","nativeSrc":"958:1:51","nodeType":"YulLiteral","src":"958:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"923:6:51","nodeType":"YulIdentifier","src":"923:6:51"},"nativeSrc":"923:37:51","nodeType":"YulFunctionCall","src":"923:37:51"},"nativeSrc":"923:37:51","nodeType":"YulExpressionStatement","src":"923:37:51"},{"nativeSrc":"969:15:51","nodeType":"YulAssignment","src":"969:15:51","value":{"name":"memPtr","nativeSrc":"978:6:51","nodeType":"YulIdentifier","src":"978:6:51"},"variableNames":[{"name":"array","nativeSrc":"969:5:51","nodeType":"YulIdentifier","src":"969:5:51"}]}]},"name":"abi_decode_string_fromMemory","nativeSrc":"146:844:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"184:6:51","nodeType":"YulTypedName","src":"184:6:51","type":""},{"name":"end","nativeSrc":"192:3:51","nodeType":"YulTypedName","src":"192:3:51","type":""}],"returnVariables":[{"name":"array","nativeSrc":"200:5:51","nodeType":"YulTypedName","src":"200:5:51","type":""}],"src":"146:844:51"},{"body":{"nativeSrc":"1060:86:51","nodeType":"YulBlock","src":"1060:86:51","statements":[{"body":{"nativeSrc":"1124:16:51","nodeType":"YulBlock","src":"1124:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1133:1:51","nodeType":"YulLiteral","src":"1133:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1136:1:51","nodeType":"YulLiteral","src":"1136:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1126:6:51","nodeType":"YulIdentifier","src":"1126:6:51"},"nativeSrc":"1126:12:51","nodeType":"YulFunctionCall","src":"1126:12:51"},"nativeSrc":"1126:12:51","nodeType":"YulExpressionStatement","src":"1126:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1083:5:51","nodeType":"YulIdentifier","src":"1083:5:51"},{"arguments":[{"name":"value","nativeSrc":"1094:5:51","nodeType":"YulIdentifier","src":"1094:5:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1109:3:51","nodeType":"YulLiteral","src":"1109:3:51","type":"","value":"160"},{"kind":"number","nativeSrc":"1114:1:51","nodeType":"YulLiteral","src":"1114:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1105:3:51","nodeType":"YulIdentifier","src":"1105:3:51"},"nativeSrc":"1105:11:51","nodeType":"YulFunctionCall","src":"1105:11:51"},{"kind":"number","nativeSrc":"1118:1:51","nodeType":"YulLiteral","src":"1118:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1101:3:51","nodeType":"YulIdentifier","src":"1101:3:51"},"nativeSrc":"1101:19:51","nodeType":"YulFunctionCall","src":"1101:19:51"}],"functionName":{"name":"and","nativeSrc":"1090:3:51","nodeType":"YulIdentifier","src":"1090:3:51"},"nativeSrc":"1090:31:51","nodeType":"YulFunctionCall","src":"1090:31:51"}],"functionName":{"name":"eq","nativeSrc":"1080:2:51","nodeType":"YulIdentifier","src":"1080:2:51"},"nativeSrc":"1080:42:51","nodeType":"YulFunctionCall","src":"1080:42:51"}],"functionName":{"name":"iszero","nativeSrc":"1073:6:51","nodeType":"YulIdentifier","src":"1073:6:51"},"nativeSrc":"1073:50:51","nodeType":"YulFunctionCall","src":"1073:50:51"},"nativeSrc":"1070:70:51","nodeType":"YulIf","src":"1070:70:51"}]},"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"995:151:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1049:5:51","nodeType":"YulTypedName","src":"1049:5:51","type":""}],"src":"995:151:51"},{"body":{"nativeSrc":"1451:989:51","nodeType":"YulBlock","src":"1451:989:51","statements":[{"body":{"nativeSrc":"1498:16:51","nodeType":"YulBlock","src":"1498:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1507:1:51","nodeType":"YulLiteral","src":"1507:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1510:1:51","nodeType":"YulLiteral","src":"1510:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1500:6:51","nodeType":"YulIdentifier","src":"1500:6:51"},"nativeSrc":"1500:12:51","nodeType":"YulFunctionCall","src":"1500:12:51"},"nativeSrc":"1500:12:51","nodeType":"YulExpressionStatement","src":"1500:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1472:7:51","nodeType":"YulIdentifier","src":"1472:7:51"},{"name":"headStart","nativeSrc":"1481:9:51","nodeType":"YulIdentifier","src":"1481:9:51"}],"functionName":{"name":"sub","nativeSrc":"1468:3:51","nodeType":"YulIdentifier","src":"1468:3:51"},"nativeSrc":"1468:23:51","nodeType":"YulFunctionCall","src":"1468:23:51"},{"kind":"number","nativeSrc":"1493:3:51","nodeType":"YulLiteral","src":"1493:3:51","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"1464:3:51","nodeType":"YulIdentifier","src":"1464:3:51"},"nativeSrc":"1464:33:51","nodeType":"YulFunctionCall","src":"1464:33:51"},"nativeSrc":"1461:53:51","nodeType":"YulIf","src":"1461:53:51"},{"nativeSrc":"1523:30:51","nodeType":"YulVariableDeclaration","src":"1523:30:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1543:9:51","nodeType":"YulIdentifier","src":"1543:9:51"}],"functionName":{"name":"mload","nativeSrc":"1537:5:51","nodeType":"YulIdentifier","src":"1537:5:51"},"nativeSrc":"1537:16:51","nodeType":"YulFunctionCall","src":"1537:16:51"},"variables":[{"name":"offset","nativeSrc":"1527:6:51","nodeType":"YulTypedName","src":"1527:6:51","type":""}]},{"nativeSrc":"1562:28:51","nodeType":"YulVariableDeclaration","src":"1562:28:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1580:2:51","nodeType":"YulLiteral","src":"1580:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"1584:1:51","nodeType":"YulLiteral","src":"1584:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1576:3:51","nodeType":"YulIdentifier","src":"1576:3:51"},"nativeSrc":"1576:10:51","nodeType":"YulFunctionCall","src":"1576:10:51"},{"kind":"number","nativeSrc":"1588:1:51","nodeType":"YulLiteral","src":"1588:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1572:3:51","nodeType":"YulIdentifier","src":"1572:3:51"},"nativeSrc":"1572:18:51","nodeType":"YulFunctionCall","src":"1572:18:51"},"variables":[{"name":"_1","nativeSrc":"1566:2:51","nodeType":"YulTypedName","src":"1566:2:51","type":""}]},{"body":{"nativeSrc":"1617:16:51","nodeType":"YulBlock","src":"1617:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1626:1:51","nodeType":"YulLiteral","src":"1626:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1629:1:51","nodeType":"YulLiteral","src":"1629:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1619:6:51","nodeType":"YulIdentifier","src":"1619:6:51"},"nativeSrc":"1619:12:51","nodeType":"YulFunctionCall","src":"1619:12:51"},"nativeSrc":"1619:12:51","nodeType":"YulExpressionStatement","src":"1619:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1605:6:51","nodeType":"YulIdentifier","src":"1605:6:51"},{"name":"_1","nativeSrc":"1613:2:51","nodeType":"YulIdentifier","src":"1613:2:51"}],"functionName":{"name":"gt","nativeSrc":"1602:2:51","nodeType":"YulIdentifier","src":"1602:2:51"},"nativeSrc":"1602:14:51","nodeType":"YulFunctionCall","src":"1602:14:51"},"nativeSrc":"1599:34:51","nodeType":"YulIf","src":"1599:34:51"},{"nativeSrc":"1642:71:51","nodeType":"YulAssignment","src":"1642:71:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1685:9:51","nodeType":"YulIdentifier","src":"1685:9:51"},{"name":"offset","nativeSrc":"1696:6:51","nodeType":"YulIdentifier","src":"1696:6:51"}],"functionName":{"name":"add","nativeSrc":"1681:3:51","nodeType":"YulIdentifier","src":"1681:3:51"},"nativeSrc":"1681:22:51","nodeType":"YulFunctionCall","src":"1681:22:51"},{"name":"dataEnd","nativeSrc":"1705:7:51","nodeType":"YulIdentifier","src":"1705:7:51"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1652:28:51","nodeType":"YulIdentifier","src":"1652:28:51"},"nativeSrc":"1652:61:51","nodeType":"YulFunctionCall","src":"1652:61:51"},"variableNames":[{"name":"value0","nativeSrc":"1642:6:51","nodeType":"YulIdentifier","src":"1642:6:51"}]},{"nativeSrc":"1722:41:51","nodeType":"YulVariableDeclaration","src":"1722:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1748:9:51","nodeType":"YulIdentifier","src":"1748:9:51"},{"kind":"number","nativeSrc":"1759:2:51","nodeType":"YulLiteral","src":"1759:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1744:3:51","nodeType":"YulIdentifier","src":"1744:3:51"},"nativeSrc":"1744:18:51","nodeType":"YulFunctionCall","src":"1744:18:51"}],"functionName":{"name":"mload","nativeSrc":"1738:5:51","nodeType":"YulIdentifier","src":"1738:5:51"},"nativeSrc":"1738:25:51","nodeType":"YulFunctionCall","src":"1738:25:51"},"variables":[{"name":"offset_1","nativeSrc":"1726:8:51","nodeType":"YulTypedName","src":"1726:8:51","type":""}]},{"body":{"nativeSrc":"1792:16:51","nodeType":"YulBlock","src":"1792:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1801:1:51","nodeType":"YulLiteral","src":"1801:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1804:1:51","nodeType":"YulLiteral","src":"1804:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1794:6:51","nodeType":"YulIdentifier","src":"1794:6:51"},"nativeSrc":"1794:12:51","nodeType":"YulFunctionCall","src":"1794:12:51"},"nativeSrc":"1794:12:51","nodeType":"YulExpressionStatement","src":"1794:12:51"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1778:8:51","nodeType":"YulIdentifier","src":"1778:8:51"},{"name":"_1","nativeSrc":"1788:2:51","nodeType":"YulIdentifier","src":"1788:2:51"}],"functionName":{"name":"gt","nativeSrc":"1775:2:51","nodeType":"YulIdentifier","src":"1775:2:51"},"nativeSrc":"1775:16:51","nodeType":"YulFunctionCall","src":"1775:16:51"},"nativeSrc":"1772:36:51","nodeType":"YulIf","src":"1772:36:51"},{"nativeSrc":"1817:73:51","nodeType":"YulAssignment","src":"1817:73:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1860:9:51","nodeType":"YulIdentifier","src":"1860:9:51"},{"name":"offset_1","nativeSrc":"1871:8:51","nodeType":"YulIdentifier","src":"1871:8:51"}],"functionName":{"name":"add","nativeSrc":"1856:3:51","nodeType":"YulIdentifier","src":"1856:3:51"},"nativeSrc":"1856:24:51","nodeType":"YulFunctionCall","src":"1856:24:51"},{"name":"dataEnd","nativeSrc":"1882:7:51","nodeType":"YulIdentifier","src":"1882:7:51"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1827:28:51","nodeType":"YulIdentifier","src":"1827:28:51"},"nativeSrc":"1827:63:51","nodeType":"YulFunctionCall","src":"1827:63:51"},"variableNames":[{"name":"value1","nativeSrc":"1817:6:51","nodeType":"YulIdentifier","src":"1817:6:51"}]},{"nativeSrc":"1899:38:51","nodeType":"YulVariableDeclaration","src":"1899:38:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1922:9:51","nodeType":"YulIdentifier","src":"1922:9:51"},{"kind":"number","nativeSrc":"1933:2:51","nodeType":"YulLiteral","src":"1933:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1918:3:51","nodeType":"YulIdentifier","src":"1918:3:51"},"nativeSrc":"1918:18:51","nodeType":"YulFunctionCall","src":"1918:18:51"}],"functionName":{"name":"mload","nativeSrc":"1912:5:51","nodeType":"YulIdentifier","src":"1912:5:51"},"nativeSrc":"1912:25:51","nodeType":"YulFunctionCall","src":"1912:25:51"},"variables":[{"name":"value","nativeSrc":"1903:5:51","nodeType":"YulTypedName","src":"1903:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1991:5:51","nodeType":"YulIdentifier","src":"1991:5:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"1946:44:51","nodeType":"YulIdentifier","src":"1946:44:51"},"nativeSrc":"1946:51:51","nodeType":"YulFunctionCall","src":"1946:51:51"},"nativeSrc":"1946:51:51","nodeType":"YulExpressionStatement","src":"1946:51:51"},{"nativeSrc":"2006:15:51","nodeType":"YulAssignment","src":"2006:15:51","value":{"name":"value","nativeSrc":"2016:5:51","nodeType":"YulIdentifier","src":"2016:5:51"},"variableNames":[{"name":"value2","nativeSrc":"2006:6:51","nodeType":"YulIdentifier","src":"2006:6:51"}]},{"nativeSrc":"2030:40:51","nodeType":"YulVariableDeclaration","src":"2030:40:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2055:9:51","nodeType":"YulIdentifier","src":"2055:9:51"},{"kind":"number","nativeSrc":"2066:2:51","nodeType":"YulLiteral","src":"2066:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2051:3:51","nodeType":"YulIdentifier","src":"2051:3:51"},"nativeSrc":"2051:18:51","nodeType":"YulFunctionCall","src":"2051:18:51"}],"functionName":{"name":"mload","nativeSrc":"2045:5:51","nodeType":"YulIdentifier","src":"2045:5:51"},"nativeSrc":"2045:25:51","nodeType":"YulFunctionCall","src":"2045:25:51"},"variables":[{"name":"value_1","nativeSrc":"2034:7:51","nodeType":"YulTypedName","src":"2034:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2124:7:51","nodeType":"YulIdentifier","src":"2124:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2079:44:51","nodeType":"YulIdentifier","src":"2079:44:51"},"nativeSrc":"2079:53:51","nodeType":"YulFunctionCall","src":"2079:53:51"},"nativeSrc":"2079:53:51","nodeType":"YulExpressionStatement","src":"2079:53:51"},{"nativeSrc":"2141:17:51","nodeType":"YulAssignment","src":"2141:17:51","value":{"name":"value_1","nativeSrc":"2151:7:51","nodeType":"YulIdentifier","src":"2151:7:51"},"variableNames":[{"name":"value3","nativeSrc":"2141:6:51","nodeType":"YulIdentifier","src":"2141:6:51"}]},{"nativeSrc":"2167:41:51","nodeType":"YulVariableDeclaration","src":"2167:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2192:9:51","nodeType":"YulIdentifier","src":"2192:9:51"},{"kind":"number","nativeSrc":"2203:3:51","nodeType":"YulLiteral","src":"2203:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2188:3:51","nodeType":"YulIdentifier","src":"2188:3:51"},"nativeSrc":"2188:19:51","nodeType":"YulFunctionCall","src":"2188:19:51"}],"functionName":{"name":"mload","nativeSrc":"2182:5:51","nodeType":"YulIdentifier","src":"2182:5:51"},"nativeSrc":"2182:26:51","nodeType":"YulFunctionCall","src":"2182:26:51"},"variables":[{"name":"value_2","nativeSrc":"2171:7:51","nodeType":"YulTypedName","src":"2171:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"2262:7:51","nodeType":"YulIdentifier","src":"2262:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2217:44:51","nodeType":"YulIdentifier","src":"2217:44:51"},"nativeSrc":"2217:53:51","nodeType":"YulFunctionCall","src":"2217:53:51"},"nativeSrc":"2217:53:51","nodeType":"YulExpressionStatement","src":"2217:53:51"},{"nativeSrc":"2279:17:51","nodeType":"YulAssignment","src":"2279:17:51","value":{"name":"value_2","nativeSrc":"2289:7:51","nodeType":"YulIdentifier","src":"2289:7:51"},"variableNames":[{"name":"value4","nativeSrc":"2279:6:51","nodeType":"YulIdentifier","src":"2279:6:51"}]},{"nativeSrc":"2305:41:51","nodeType":"YulVariableDeclaration","src":"2305:41:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2330:9:51","nodeType":"YulIdentifier","src":"2330:9:51"},{"kind":"number","nativeSrc":"2341:3:51","nodeType":"YulLiteral","src":"2341:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"2326:3:51","nodeType":"YulIdentifier","src":"2326:3:51"},"nativeSrc":"2326:19:51","nodeType":"YulFunctionCall","src":"2326:19:51"}],"functionName":{"name":"mload","nativeSrc":"2320:5:51","nodeType":"YulIdentifier","src":"2320:5:51"},"nativeSrc":"2320:26:51","nodeType":"YulFunctionCall","src":"2320:26:51"},"variables":[{"name":"value_3","nativeSrc":"2309:7:51","nodeType":"YulTypedName","src":"2309:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"2400:7:51","nodeType":"YulIdentifier","src":"2400:7:51"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nativeSrc":"2355:44:51","nodeType":"YulIdentifier","src":"2355:44:51"},"nativeSrc":"2355:53:51","nodeType":"YulFunctionCall","src":"2355:53:51"},"nativeSrc":"2355:53:51","nodeType":"YulExpressionStatement","src":"2355:53:51"},{"nativeSrc":"2417:17:51","nodeType":"YulAssignment","src":"2417:17:51","value":{"name":"value_3","nativeSrc":"2427:7:51","nodeType":"YulIdentifier","src":"2427:7:51"},"variableNames":[{"name":"value5","nativeSrc":"2417:6:51","nodeType":"YulIdentifier","src":"2417:6:51"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory","nativeSrc":"1151:1289:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1377:9:51","nodeType":"YulTypedName","src":"1377:9:51","type":""},{"name":"dataEnd","nativeSrc":"1388:7:51","nodeType":"YulTypedName","src":"1388:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1400:6:51","nodeType":"YulTypedName","src":"1400:6:51","type":""},{"name":"value1","nativeSrc":"1408:6:51","nodeType":"YulTypedName","src":"1408:6:51","type":""},{"name":"value2","nativeSrc":"1416:6:51","nodeType":"YulTypedName","src":"1416:6:51","type":""},{"name":"value3","nativeSrc":"1424:6:51","nodeType":"YulTypedName","src":"1424:6:51","type":""},{"name":"value4","nativeSrc":"1432:6:51","nodeType":"YulTypedName","src":"1432:6:51","type":""},{"name":"value5","nativeSrc":"1440:6:51","nodeType":"YulTypedName","src":"1440:6:51","type":""}],"src":"1151:1289:51"},{"body":{"nativeSrc":"2494:176:51","nodeType":"YulBlock","src":"2494:176:51","statements":[{"nativeSrc":"2504:17:51","nodeType":"YulAssignment","src":"2504:17:51","value":{"arguments":[{"name":"x","nativeSrc":"2516:1:51","nodeType":"YulIdentifier","src":"2516:1:51"},{"name":"y","nativeSrc":"2519:1:51","nodeType":"YulIdentifier","src":"2519:1:51"}],"functionName":{"name":"sub","nativeSrc":"2512:3:51","nodeType":"YulIdentifier","src":"2512:3:51"},"nativeSrc":"2512:9:51","nodeType":"YulFunctionCall","src":"2512:9:51"},"variableNames":[{"name":"diff","nativeSrc":"2504:4:51","nodeType":"YulIdentifier","src":"2504:4:51"}]},{"body":{"nativeSrc":"2553:111:51","nodeType":"YulBlock","src":"2553:111:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2574:1:51","nodeType":"YulLiteral","src":"2574:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2581:3:51","nodeType":"YulLiteral","src":"2581:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"2586:10:51","nodeType":"YulLiteral","src":"2586:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2577:3:51","nodeType":"YulIdentifier","src":"2577:3:51"},"nativeSrc":"2577:20:51","nodeType":"YulFunctionCall","src":"2577:20:51"}],"functionName":{"name":"mstore","nativeSrc":"2567:6:51","nodeType":"YulIdentifier","src":"2567:6:51"},"nativeSrc":"2567:31:51","nodeType":"YulFunctionCall","src":"2567:31:51"},"nativeSrc":"2567:31:51","nodeType":"YulExpressionStatement","src":"2567:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2618:1:51","nodeType":"YulLiteral","src":"2618:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"2621:4:51","nodeType":"YulLiteral","src":"2621:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2611:6:51","nodeType":"YulIdentifier","src":"2611:6:51"},"nativeSrc":"2611:15:51","nodeType":"YulFunctionCall","src":"2611:15:51"},"nativeSrc":"2611:15:51","nodeType":"YulExpressionStatement","src":"2611:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2646:1:51","nodeType":"YulLiteral","src":"2646:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2649:4:51","nodeType":"YulLiteral","src":"2649:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2639:6:51","nodeType":"YulIdentifier","src":"2639:6:51"},"nativeSrc":"2639:15:51","nodeType":"YulFunctionCall","src":"2639:15:51"},"nativeSrc":"2639:15:51","nodeType":"YulExpressionStatement","src":"2639:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"2536:4:51","nodeType":"YulIdentifier","src":"2536:4:51"},{"name":"x","nativeSrc":"2542:1:51","nodeType":"YulIdentifier","src":"2542:1:51"}],"functionName":{"name":"gt","nativeSrc":"2533:2:51","nodeType":"YulIdentifier","src":"2533:2:51"},"nativeSrc":"2533:11:51","nodeType":"YulFunctionCall","src":"2533:11:51"},"nativeSrc":"2530:134:51","nodeType":"YulIf","src":"2530:134:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"2445:225:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2476:1:51","nodeType":"YulTypedName","src":"2476:1:51","type":""},{"name":"y","nativeSrc":"2479:1:51","nodeType":"YulTypedName","src":"2479:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"2485:4:51","nodeType":"YulTypedName","src":"2485:4:51","type":""}],"src":"2445:225:51"},{"body":{"nativeSrc":"2730:325:51","nodeType":"YulBlock","src":"2730:325:51","statements":[{"nativeSrc":"2740:22:51","nodeType":"YulAssignment","src":"2740:22:51","value":{"arguments":[{"kind":"number","nativeSrc":"2754:1:51","nodeType":"YulLiteral","src":"2754:1:51","type":"","value":"1"},{"name":"data","nativeSrc":"2757:4:51","nodeType":"YulIdentifier","src":"2757:4:51"}],"functionName":{"name":"shr","nativeSrc":"2750:3:51","nodeType":"YulIdentifier","src":"2750:3:51"},"nativeSrc":"2750:12:51","nodeType":"YulFunctionCall","src":"2750:12:51"},"variableNames":[{"name":"length","nativeSrc":"2740:6:51","nodeType":"YulIdentifier","src":"2740:6:51"}]},{"nativeSrc":"2771:38:51","nodeType":"YulVariableDeclaration","src":"2771:38:51","value":{"arguments":[{"name":"data","nativeSrc":"2801:4:51","nodeType":"YulIdentifier","src":"2801:4:51"},{"kind":"number","nativeSrc":"2807:1:51","nodeType":"YulLiteral","src":"2807:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2797:3:51","nodeType":"YulIdentifier","src":"2797:3:51"},"nativeSrc":"2797:12:51","nodeType":"YulFunctionCall","src":"2797:12:51"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2775:18:51","nodeType":"YulTypedName","src":"2775:18:51","type":""}]},{"body":{"nativeSrc":"2848:31:51","nodeType":"YulBlock","src":"2848:31:51","statements":[{"nativeSrc":"2850:27:51","nodeType":"YulAssignment","src":"2850:27:51","value":{"arguments":[{"name":"length","nativeSrc":"2864:6:51","nodeType":"YulIdentifier","src":"2864:6:51"},{"kind":"number","nativeSrc":"2872:4:51","nodeType":"YulLiteral","src":"2872:4:51","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2860:3:51","nodeType":"YulIdentifier","src":"2860:3:51"},"nativeSrc":"2860:17:51","nodeType":"YulFunctionCall","src":"2860:17:51"},"variableNames":[{"name":"length","nativeSrc":"2850:6:51","nodeType":"YulIdentifier","src":"2850:6:51"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2828:18:51","nodeType":"YulIdentifier","src":"2828:18:51"}],"functionName":{"name":"iszero","nativeSrc":"2821:6:51","nodeType":"YulIdentifier","src":"2821:6:51"},"nativeSrc":"2821:26:51","nodeType":"YulFunctionCall","src":"2821:26:51"},"nativeSrc":"2818:61:51","nodeType":"YulIf","src":"2818:61:51"},{"body":{"nativeSrc":"2938:111:51","nodeType":"YulBlock","src":"2938:111:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2959:1:51","nodeType":"YulLiteral","src":"2959:1:51","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2966:3:51","nodeType":"YulLiteral","src":"2966:3:51","type":"","value":"224"},{"kind":"number","nativeSrc":"2971:10:51","nodeType":"YulLiteral","src":"2971:10:51","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2962:3:51","nodeType":"YulIdentifier","src":"2962:3:51"},"nativeSrc":"2962:20:51","nodeType":"YulFunctionCall","src":"2962:20:51"}],"functionName":{"name":"mstore","nativeSrc":"2952:6:51","nodeType":"YulIdentifier","src":"2952:6:51"},"nativeSrc":"2952:31:51","nodeType":"YulFunctionCall","src":"2952:31:51"},"nativeSrc":"2952:31:51","nodeType":"YulExpressionStatement","src":"2952:31:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3003:1:51","nodeType":"YulLiteral","src":"3003:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"3006:4:51","nodeType":"YulLiteral","src":"3006:4:51","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2996:6:51","nodeType":"YulIdentifier","src":"2996:6:51"},"nativeSrc":"2996:15:51","nodeType":"YulFunctionCall","src":"2996:15:51"},"nativeSrc":"2996:15:51","nodeType":"YulExpressionStatement","src":"2996:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3031:1:51","nodeType":"YulLiteral","src":"3031:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3034:4:51","nodeType":"YulLiteral","src":"3034:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3024:6:51","nodeType":"YulIdentifier","src":"3024:6:51"},"nativeSrc":"3024:15:51","nodeType":"YulFunctionCall","src":"3024:15:51"},"nativeSrc":"3024:15:51","nodeType":"YulExpressionStatement","src":"3024:15:51"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2894:18:51","nodeType":"YulIdentifier","src":"2894:18:51"},{"arguments":[{"name":"length","nativeSrc":"2917:6:51","nodeType":"YulIdentifier","src":"2917:6:51"},{"kind":"number","nativeSrc":"2925:2:51","nodeType":"YulLiteral","src":"2925:2:51","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2914:2:51","nodeType":"YulIdentifier","src":"2914:2:51"},"nativeSrc":"2914:14:51","nodeType":"YulFunctionCall","src":"2914:14:51"}],"functionName":{"name":"eq","nativeSrc":"2891:2:51","nodeType":"YulIdentifier","src":"2891:2:51"},"nativeSrc":"2891:38:51","nodeType":"YulFunctionCall","src":"2891:38:51"},"nativeSrc":"2888:161:51","nodeType":"YulIf","src":"2888:161:51"}]},"name":"extract_byte_array_length","nativeSrc":"2675:380:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2710:4:51","nodeType":"YulTypedName","src":"2710:4:51","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2719:6:51","nodeType":"YulTypedName","src":"2719:6:51","type":""}],"src":"2675:380:51"},{"body":{"nativeSrc":"3116:65:51","nodeType":"YulBlock","src":"3116:65:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3133:1:51","nodeType":"YulLiteral","src":"3133:1:51","type":"","value":"0"},{"name":"ptr","nativeSrc":"3136:3:51","nodeType":"YulIdentifier","src":"3136:3:51"}],"functionName":{"name":"mstore","nativeSrc":"3126:6:51","nodeType":"YulIdentifier","src":"3126:6:51"},"nativeSrc":"3126:14:51","nodeType":"YulFunctionCall","src":"3126:14:51"},"nativeSrc":"3126:14:51","nodeType":"YulExpressionStatement","src":"3126:14:51"},{"nativeSrc":"3149:26:51","nodeType":"YulAssignment","src":"3149:26:51","value":{"arguments":[{"kind":"number","nativeSrc":"3167:1:51","nodeType":"YulLiteral","src":"3167:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3170:4:51","nodeType":"YulLiteral","src":"3170:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3157:9:51","nodeType":"YulIdentifier","src":"3157:9:51"},"nativeSrc":"3157:18:51","nodeType":"YulFunctionCall","src":"3157:18:51"},"variableNames":[{"name":"data","nativeSrc":"3149:4:51","nodeType":"YulIdentifier","src":"3149:4:51"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"3060:121:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"3099:3:51","nodeType":"YulTypedName","src":"3099:3:51","type":""}],"returnVariables":[{"name":"data","nativeSrc":"3107:4:51","nodeType":"YulTypedName","src":"3107:4:51","type":""}],"src":"3060:121:51"},{"body":{"nativeSrc":"3267:462:51","nodeType":"YulBlock","src":"3267:462:51","statements":[{"body":{"nativeSrc":"3300:423:51","nodeType":"YulBlock","src":"3300:423:51","statements":[{"nativeSrc":"3314:11:51","nodeType":"YulVariableDeclaration","src":"3314:11:51","value":{"kind":"number","nativeSrc":"3324:1:51","nodeType":"YulLiteral","src":"3324:1:51","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"3318:2:51","nodeType":"YulTypedName","src":"3318:2:51","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3345:1:51","nodeType":"YulLiteral","src":"3345:1:51","type":"","value":"0"},{"name":"array","nativeSrc":"3348:5:51","nodeType":"YulIdentifier","src":"3348:5:51"}],"functionName":{"name":"mstore","nativeSrc":"3338:6:51","nodeType":"YulIdentifier","src":"3338:6:51"},"nativeSrc":"3338:16:51","nodeType":"YulFunctionCall","src":"3338:16:51"},"nativeSrc":"3338:16:51","nodeType":"YulExpressionStatement","src":"3338:16:51"},{"nativeSrc":"3367:30:51","nodeType":"YulVariableDeclaration","src":"3367:30:51","value":{"arguments":[{"kind":"number","nativeSrc":"3389:1:51","nodeType":"YulLiteral","src":"3389:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3392:4:51","nodeType":"YulLiteral","src":"3392:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3379:9:51","nodeType":"YulIdentifier","src":"3379:9:51"},"nativeSrc":"3379:18:51","nodeType":"YulFunctionCall","src":"3379:18:51"},"variables":[{"name":"data","nativeSrc":"3371:4:51","nodeType":"YulTypedName","src":"3371:4:51","type":""}]},{"nativeSrc":"3410:57:51","nodeType":"YulVariableDeclaration","src":"3410:57:51","value":{"arguments":[{"name":"data","nativeSrc":"3433:4:51","nodeType":"YulIdentifier","src":"3433:4:51"},{"arguments":[{"kind":"number","nativeSrc":"3443:1:51","nodeType":"YulLiteral","src":"3443:1:51","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"3450:10:51","nodeType":"YulIdentifier","src":"3450:10:51"},{"kind":"number","nativeSrc":"3462:2:51","nodeType":"YulLiteral","src":"3462:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3446:3:51","nodeType":"YulIdentifier","src":"3446:3:51"},"nativeSrc":"3446:19:51","nodeType":"YulFunctionCall","src":"3446:19:51"}],"functionName":{"name":"shr","nativeSrc":"3439:3:51","nodeType":"YulIdentifier","src":"3439:3:51"},"nativeSrc":"3439:27:51","nodeType":"YulFunctionCall","src":"3439:27:51"}],"functionName":{"name":"add","nativeSrc":"3429:3:51","nodeType":"YulIdentifier","src":"3429:3:51"},"nativeSrc":"3429:38:51","nodeType":"YulFunctionCall","src":"3429:38:51"},"variables":[{"name":"deleteStart","nativeSrc":"3414:11:51","nodeType":"YulTypedName","src":"3414:11:51","type":""}]},{"body":{"nativeSrc":"3504:23:51","nodeType":"YulBlock","src":"3504:23:51","statements":[{"nativeSrc":"3506:19:51","nodeType":"YulAssignment","src":"3506:19:51","value":{"name":"data","nativeSrc":"3521:4:51","nodeType":"YulIdentifier","src":"3521:4:51"},"variableNames":[{"name":"deleteStart","nativeSrc":"3506:11:51","nodeType":"YulIdentifier","src":"3506:11:51"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"3486:10:51","nodeType":"YulIdentifier","src":"3486:10:51"},{"kind":"number","nativeSrc":"3498:4:51","nodeType":"YulLiteral","src":"3498:4:51","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"3483:2:51","nodeType":"YulIdentifier","src":"3483:2:51"},"nativeSrc":"3483:20:51","nodeType":"YulFunctionCall","src":"3483:20:51"},"nativeSrc":"3480:47:51","nodeType":"YulIf","src":"3480:47:51"},{"nativeSrc":"3540:41:51","nodeType":"YulVariableDeclaration","src":"3540:41:51","value":{"arguments":[{"name":"data","nativeSrc":"3554:4:51","nodeType":"YulIdentifier","src":"3554:4:51"},{"arguments":[{"kind":"number","nativeSrc":"3564:1:51","nodeType":"YulLiteral","src":"3564:1:51","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"3571:3:51","nodeType":"YulIdentifier","src":"3571:3:51"},{"kind":"number","nativeSrc":"3576:2:51","nodeType":"YulLiteral","src":"3576:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3567:3:51","nodeType":"YulIdentifier","src":"3567:3:51"},"nativeSrc":"3567:12:51","nodeType":"YulFunctionCall","src":"3567:12:51"}],"functionName":{"name":"shr","nativeSrc":"3560:3:51","nodeType":"YulIdentifier","src":"3560:3:51"},"nativeSrc":"3560:20:51","nodeType":"YulFunctionCall","src":"3560:20:51"}],"functionName":{"name":"add","nativeSrc":"3550:3:51","nodeType":"YulIdentifier","src":"3550:3:51"},"nativeSrc":"3550:31:51","nodeType":"YulFunctionCall","src":"3550:31:51"},"variables":[{"name":"_2","nativeSrc":"3544:2:51","nodeType":"YulTypedName","src":"3544:2:51","type":""}]},{"nativeSrc":"3594:24:51","nodeType":"YulVariableDeclaration","src":"3594:24:51","value":{"name":"deleteStart","nativeSrc":"3607:11:51","nodeType":"YulIdentifier","src":"3607:11:51"},"variables":[{"name":"start","nativeSrc":"3598:5:51","nodeType":"YulTypedName","src":"3598:5:51","type":""}]},{"body":{"nativeSrc":"3692:21:51","nodeType":"YulBlock","src":"3692:21:51","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"3701:5:51","nodeType":"YulIdentifier","src":"3701:5:51"},{"name":"_1","nativeSrc":"3708:2:51","nodeType":"YulIdentifier","src":"3708:2:51"}],"functionName":{"name":"sstore","nativeSrc":"3694:6:51","nodeType":"YulIdentifier","src":"3694:6:51"},"nativeSrc":"3694:17:51","nodeType":"YulFunctionCall","src":"3694:17:51"},"nativeSrc":"3694:17:51","nodeType":"YulExpressionStatement","src":"3694:17:51"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"3642:5:51","nodeType":"YulIdentifier","src":"3642:5:51"},{"name":"_2","nativeSrc":"3649:2:51","nodeType":"YulIdentifier","src":"3649:2:51"}],"functionName":{"name":"lt","nativeSrc":"3639:2:51","nodeType":"YulIdentifier","src":"3639:2:51"},"nativeSrc":"3639:13:51","nodeType":"YulFunctionCall","src":"3639:13:51"},"nativeSrc":"3631:82:51","nodeType":"YulForLoop","post":{"nativeSrc":"3653:26:51","nodeType":"YulBlock","src":"3653:26:51","statements":[{"nativeSrc":"3655:22:51","nodeType":"YulAssignment","src":"3655:22:51","value":{"arguments":[{"name":"start","nativeSrc":"3668:5:51","nodeType":"YulIdentifier","src":"3668:5:51"},{"kind":"number","nativeSrc":"3675:1:51","nodeType":"YulLiteral","src":"3675:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3664:3:51","nodeType":"YulIdentifier","src":"3664:3:51"},"nativeSrc":"3664:13:51","nodeType":"YulFunctionCall","src":"3664:13:51"},"variableNames":[{"name":"start","nativeSrc":"3655:5:51","nodeType":"YulIdentifier","src":"3655:5:51"}]}]},"pre":{"nativeSrc":"3635:3:51","nodeType":"YulBlock","src":"3635:3:51","statements":[]},"src":"3631:82:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"3283:3:51","nodeType":"YulIdentifier","src":"3283:3:51"},{"kind":"number","nativeSrc":"3288:2:51","nodeType":"YulLiteral","src":"3288:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"3280:2:51","nodeType":"YulIdentifier","src":"3280:2:51"},"nativeSrc":"3280:11:51","nodeType":"YulFunctionCall","src":"3280:11:51"},"nativeSrc":"3277:446:51","nodeType":"YulIf","src":"3277:446:51"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"3186:543:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"3239:5:51","nodeType":"YulTypedName","src":"3239:5:51","type":""},{"name":"len","nativeSrc":"3246:3:51","nodeType":"YulTypedName","src":"3246:3:51","type":""},{"name":"startIndex","nativeSrc":"3251:10:51","nodeType":"YulTypedName","src":"3251:10:51","type":""}],"src":"3186:543:51"},{"body":{"nativeSrc":"3819:81:51","nodeType":"YulBlock","src":"3819:81:51","statements":[{"nativeSrc":"3829:65:51","nodeType":"YulAssignment","src":"3829:65:51","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"3844:4:51","nodeType":"YulIdentifier","src":"3844:4:51"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3862:1:51","nodeType":"YulLiteral","src":"3862:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"3865:3:51","nodeType":"YulIdentifier","src":"3865:3:51"}],"functionName":{"name":"shl","nativeSrc":"3858:3:51","nodeType":"YulIdentifier","src":"3858:3:51"},"nativeSrc":"3858:11:51","nodeType":"YulFunctionCall","src":"3858:11:51"},{"arguments":[{"kind":"number","nativeSrc":"3875:1:51","nodeType":"YulLiteral","src":"3875:1:51","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3871:3:51","nodeType":"YulIdentifier","src":"3871:3:51"},"nativeSrc":"3871:6:51","nodeType":"YulFunctionCall","src":"3871:6:51"}],"functionName":{"name":"shr","nativeSrc":"3854:3:51","nodeType":"YulIdentifier","src":"3854:3:51"},"nativeSrc":"3854:24:51","nodeType":"YulFunctionCall","src":"3854:24:51"}],"functionName":{"name":"not","nativeSrc":"3850:3:51","nodeType":"YulIdentifier","src":"3850:3:51"},"nativeSrc":"3850:29:51","nodeType":"YulFunctionCall","src":"3850:29:51"}],"functionName":{"name":"and","nativeSrc":"3840:3:51","nodeType":"YulIdentifier","src":"3840:3:51"},"nativeSrc":"3840:40:51","nodeType":"YulFunctionCall","src":"3840:40:51"},{"arguments":[{"kind":"number","nativeSrc":"3886:1:51","nodeType":"YulLiteral","src":"3886:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"3889:3:51","nodeType":"YulIdentifier","src":"3889:3:51"}],"functionName":{"name":"shl","nativeSrc":"3882:3:51","nodeType":"YulIdentifier","src":"3882:3:51"},"nativeSrc":"3882:11:51","nodeType":"YulFunctionCall","src":"3882:11:51"}],"functionName":{"name":"or","nativeSrc":"3837:2:51","nodeType":"YulIdentifier","src":"3837:2:51"},"nativeSrc":"3837:57:51","nodeType":"YulFunctionCall","src":"3837:57:51"},"variableNames":[{"name":"used","nativeSrc":"3829:4:51","nodeType":"YulIdentifier","src":"3829:4:51"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3734:166:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3796:4:51","nodeType":"YulTypedName","src":"3796:4:51","type":""},{"name":"len","nativeSrc":"3802:3:51","nodeType":"YulTypedName","src":"3802:3:51","type":""}],"returnVariables":[{"name":"used","nativeSrc":"3810:4:51","nodeType":"YulTypedName","src":"3810:4:51","type":""}],"src":"3734:166:51"},{"body":{"nativeSrc":"4001:1249:51","nodeType":"YulBlock","src":"4001:1249:51","statements":[{"nativeSrc":"4011:24:51","nodeType":"YulVariableDeclaration","src":"4011:24:51","value":{"arguments":[{"name":"src","nativeSrc":"4031:3:51","nodeType":"YulIdentifier","src":"4031:3:51"}],"functionName":{"name":"mload","nativeSrc":"4025:5:51","nodeType":"YulIdentifier","src":"4025:5:51"},"nativeSrc":"4025:10:51","nodeType":"YulFunctionCall","src":"4025:10:51"},"variables":[{"name":"newLen","nativeSrc":"4015:6:51","nodeType":"YulTypedName","src":"4015:6:51","type":""}]},{"body":{"nativeSrc":"4078:22:51","nodeType":"YulBlock","src":"4078:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4080:16:51","nodeType":"YulIdentifier","src":"4080:16:51"},"nativeSrc":"4080:18:51","nodeType":"YulFunctionCall","src":"4080:18:51"},"nativeSrc":"4080:18:51","nodeType":"YulExpressionStatement","src":"4080:18:51"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"4050:6:51","nodeType":"YulIdentifier","src":"4050:6:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4066:2:51","nodeType":"YulLiteral","src":"4066:2:51","type":"","value":"64"},{"kind":"number","nativeSrc":"4070:1:51","nodeType":"YulLiteral","src":"4070:1:51","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4062:3:51","nodeType":"YulIdentifier","src":"4062:3:51"},"nativeSrc":"4062:10:51","nodeType":"YulFunctionCall","src":"4062:10:51"},{"kind":"number","nativeSrc":"4074:1:51","nodeType":"YulLiteral","src":"4074:1:51","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4058:3:51","nodeType":"YulIdentifier","src":"4058:3:51"},"nativeSrc":"4058:18:51","nodeType":"YulFunctionCall","src":"4058:18:51"}],"functionName":{"name":"gt","nativeSrc":"4047:2:51","nodeType":"YulIdentifier","src":"4047:2:51"},"nativeSrc":"4047:30:51","nodeType":"YulFunctionCall","src":"4047:30:51"},"nativeSrc":"4044:56:51","nodeType":"YulIf","src":"4044:56:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4153:4:51","nodeType":"YulIdentifier","src":"4153:4:51"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"4191:4:51","nodeType":"YulIdentifier","src":"4191:4:51"}],"functionName":{"name":"sload","nativeSrc":"4185:5:51","nodeType":"YulIdentifier","src":"4185:5:51"},"nativeSrc":"4185:11:51","nodeType":"YulFunctionCall","src":"4185:11:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"4159:25:51","nodeType":"YulIdentifier","src":"4159:25:51"},"nativeSrc":"4159:38:51","nodeType":"YulFunctionCall","src":"4159:38:51"},{"name":"newLen","nativeSrc":"4199:6:51","nodeType":"YulIdentifier","src":"4199:6:51"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"4109:43:51","nodeType":"YulIdentifier","src":"4109:43:51"},"nativeSrc":"4109:97:51","nodeType":"YulFunctionCall","src":"4109:97:51"},"nativeSrc":"4109:97:51","nodeType":"YulExpressionStatement","src":"4109:97:51"},{"nativeSrc":"4215:18:51","nodeType":"YulVariableDeclaration","src":"4215:18:51","value":{"kind":"number","nativeSrc":"4232:1:51","nodeType":"YulLiteral","src":"4232:1:51","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"4219:9:51","nodeType":"YulTypedName","src":"4219:9:51","type":""}]},{"nativeSrc":"4242:23:51","nodeType":"YulVariableDeclaration","src":"4242:23:51","value":{"kind":"number","nativeSrc":"4261:4:51","nodeType":"YulLiteral","src":"4261:4:51","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"4246:11:51","nodeType":"YulTypedName","src":"4246:11:51","type":""}]},{"nativeSrc":"4274:17:51","nodeType":"YulAssignment","src":"4274:17:51","value":{"kind":"number","nativeSrc":"4287:4:51","nodeType":"YulLiteral","src":"4287:4:51","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"4274:9:51","nodeType":"YulIdentifier","src":"4274:9:51"}]},{"cases":[{"body":{"nativeSrc":"4337:656:51","nodeType":"YulBlock","src":"4337:656:51","statements":[{"nativeSrc":"4351:35:51","nodeType":"YulVariableDeclaration","src":"4351:35:51","value":{"arguments":[{"name":"newLen","nativeSrc":"4370:6:51","nodeType":"YulIdentifier","src":"4370:6:51"},{"arguments":[{"kind":"number","nativeSrc":"4382:2:51","nodeType":"YulLiteral","src":"4382:2:51","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"4378:3:51","nodeType":"YulIdentifier","src":"4378:3:51"},"nativeSrc":"4378:7:51","nodeType":"YulFunctionCall","src":"4378:7:51"}],"functionName":{"name":"and","nativeSrc":"4366:3:51","nodeType":"YulIdentifier","src":"4366:3:51"},"nativeSrc":"4366:20:51","nodeType":"YulFunctionCall","src":"4366:20:51"},"variables":[{"name":"loopEnd","nativeSrc":"4355:7:51","nodeType":"YulTypedName","src":"4355:7:51","type":""}]},{"nativeSrc":"4399:49:51","nodeType":"YulVariableDeclaration","src":"4399:49:51","value":{"arguments":[{"name":"slot","nativeSrc":"4443:4:51","nodeType":"YulIdentifier","src":"4443:4:51"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"4413:29:51","nodeType":"YulIdentifier","src":"4413:29:51"},"nativeSrc":"4413:35:51","nodeType":"YulFunctionCall","src":"4413:35:51"},"variables":[{"name":"dstPtr","nativeSrc":"4403:6:51","nodeType":"YulTypedName","src":"4403:6:51","type":""}]},{"nativeSrc":"4461:10:51","nodeType":"YulVariableDeclaration","src":"4461:10:51","value":{"kind":"number","nativeSrc":"4470:1:51","nodeType":"YulLiteral","src":"4470:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4465:1:51","nodeType":"YulTypedName","src":"4465:1:51","type":""}]},{"body":{"nativeSrc":"4548:172:51","nodeType":"YulBlock","src":"4548:172:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4573:6:51","nodeType":"YulIdentifier","src":"4573:6:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4591:3:51","nodeType":"YulIdentifier","src":"4591:3:51"},{"name":"srcOffset","nativeSrc":"4596:9:51","nodeType":"YulIdentifier","src":"4596:9:51"}],"functionName":{"name":"add","nativeSrc":"4587:3:51","nodeType":"YulIdentifier","src":"4587:3:51"},"nativeSrc":"4587:19:51","nodeType":"YulFunctionCall","src":"4587:19:51"}],"functionName":{"name":"mload","nativeSrc":"4581:5:51","nodeType":"YulIdentifier","src":"4581:5:51"},"nativeSrc":"4581:26:51","nodeType":"YulFunctionCall","src":"4581:26:51"}],"functionName":{"name":"sstore","nativeSrc":"4566:6:51","nodeType":"YulIdentifier","src":"4566:6:51"},"nativeSrc":"4566:42:51","nodeType":"YulFunctionCall","src":"4566:42:51"},"nativeSrc":"4566:42:51","nodeType":"YulExpressionStatement","src":"4566:42:51"},{"nativeSrc":"4625:24:51","nodeType":"YulAssignment","src":"4625:24:51","value":{"arguments":[{"name":"dstPtr","nativeSrc":"4639:6:51","nodeType":"YulIdentifier","src":"4639:6:51"},{"kind":"number","nativeSrc":"4647:1:51","nodeType":"YulLiteral","src":"4647:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4635:3:51","nodeType":"YulIdentifier","src":"4635:3:51"},"nativeSrc":"4635:14:51","nodeType":"YulFunctionCall","src":"4635:14:51"},"variableNames":[{"name":"dstPtr","nativeSrc":"4625:6:51","nodeType":"YulIdentifier","src":"4625:6:51"}]},{"nativeSrc":"4666:40:51","nodeType":"YulAssignment","src":"4666:40:51","value":{"arguments":[{"name":"srcOffset","nativeSrc":"4683:9:51","nodeType":"YulIdentifier","src":"4683:9:51"},{"name":"srcOffset_1","nativeSrc":"4694:11:51","nodeType":"YulIdentifier","src":"4694:11:51"}],"functionName":{"name":"add","nativeSrc":"4679:3:51","nodeType":"YulIdentifier","src":"4679:3:51"},"nativeSrc":"4679:27:51","nodeType":"YulFunctionCall","src":"4679:27:51"},"variableNames":[{"name":"srcOffset","nativeSrc":"4666:9:51","nodeType":"YulIdentifier","src":"4666:9:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4495:1:51","nodeType":"YulIdentifier","src":"4495:1:51"},{"name":"loopEnd","nativeSrc":"4498:7:51","nodeType":"YulIdentifier","src":"4498:7:51"}],"functionName":{"name":"lt","nativeSrc":"4492:2:51","nodeType":"YulIdentifier","src":"4492:2:51"},"nativeSrc":"4492:14:51","nodeType":"YulFunctionCall","src":"4492:14:51"},"nativeSrc":"4484:236:51","nodeType":"YulForLoop","post":{"nativeSrc":"4507:28:51","nodeType":"YulBlock","src":"4507:28:51","statements":[{"nativeSrc":"4509:24:51","nodeType":"YulAssignment","src":"4509:24:51","value":{"arguments":[{"name":"i","nativeSrc":"4518:1:51","nodeType":"YulIdentifier","src":"4518:1:51"},{"name":"srcOffset_1","nativeSrc":"4521:11:51","nodeType":"YulIdentifier","src":"4521:11:51"}],"functionName":{"name":"add","nativeSrc":"4514:3:51","nodeType":"YulIdentifier","src":"4514:3:51"},"nativeSrc":"4514:19:51","nodeType":"YulFunctionCall","src":"4514:19:51"},"variableNames":[{"name":"i","nativeSrc":"4509:1:51","nodeType":"YulIdentifier","src":"4509:1:51"}]}]},"pre":{"nativeSrc":"4488:3:51","nodeType":"YulBlock","src":"4488:3:51","statements":[]},"src":"4484:236:51"},{"body":{"nativeSrc":"4768:166:51","nodeType":"YulBlock","src":"4768:166:51","statements":[{"nativeSrc":"4786:43:51","nodeType":"YulVariableDeclaration","src":"4786:43:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4813:3:51","nodeType":"YulIdentifier","src":"4813:3:51"},{"name":"srcOffset","nativeSrc":"4818:9:51","nodeType":"YulIdentifier","src":"4818:9:51"}],"functionName":{"name":"add","nativeSrc":"4809:3:51","nodeType":"YulIdentifier","src":"4809:3:51"},"nativeSrc":"4809:19:51","nodeType":"YulFunctionCall","src":"4809:19:51"}],"functionName":{"name":"mload","nativeSrc":"4803:5:51","nodeType":"YulIdentifier","src":"4803:5:51"},"nativeSrc":"4803:26:51","nodeType":"YulFunctionCall","src":"4803:26:51"},"variables":[{"name":"lastValue","nativeSrc":"4790:9:51","nodeType":"YulTypedName","src":"4790:9:51","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4853:6:51","nodeType":"YulIdentifier","src":"4853:6:51"},{"arguments":[{"name":"lastValue","nativeSrc":"4865:9:51","nodeType":"YulIdentifier","src":"4865:9:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4892:1:51","nodeType":"YulLiteral","src":"4892:1:51","type":"","value":"3"},{"name":"newLen","nativeSrc":"4895:6:51","nodeType":"YulIdentifier","src":"4895:6:51"}],"functionName":{"name":"shl","nativeSrc":"4888:3:51","nodeType":"YulIdentifier","src":"4888:3:51"},"nativeSrc":"4888:14:51","nodeType":"YulFunctionCall","src":"4888:14:51"},{"kind":"number","nativeSrc":"4904:3:51","nodeType":"YulLiteral","src":"4904:3:51","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"4884:3:51","nodeType":"YulIdentifier","src":"4884:3:51"},"nativeSrc":"4884:24:51","nodeType":"YulFunctionCall","src":"4884:24:51"},{"arguments":[{"kind":"number","nativeSrc":"4914:1:51","nodeType":"YulLiteral","src":"4914:1:51","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4910:3:51","nodeType":"YulIdentifier","src":"4910:3:51"},"nativeSrc":"4910:6:51","nodeType":"YulFunctionCall","src":"4910:6:51"}],"functionName":{"name":"shr","nativeSrc":"4880:3:51","nodeType":"YulIdentifier","src":"4880:3:51"},"nativeSrc":"4880:37:51","nodeType":"YulFunctionCall","src":"4880:37:51"}],"functionName":{"name":"not","nativeSrc":"4876:3:51","nodeType":"YulIdentifier","src":"4876:3:51"},"nativeSrc":"4876:42:51","nodeType":"YulFunctionCall","src":"4876:42:51"}],"functionName":{"name":"and","nativeSrc":"4861:3:51","nodeType":"YulIdentifier","src":"4861:3:51"},"nativeSrc":"4861:58:51","nodeType":"YulFunctionCall","src":"4861:58:51"}],"functionName":{"name":"sstore","nativeSrc":"4846:6:51","nodeType":"YulIdentifier","src":"4846:6:51"},"nativeSrc":"4846:74:51","nodeType":"YulFunctionCall","src":"4846:74:51"},"nativeSrc":"4846:74:51","nodeType":"YulExpressionStatement","src":"4846:74:51"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"4739:7:51","nodeType":"YulIdentifier","src":"4739:7:51"},{"name":"newLen","nativeSrc":"4748:6:51","nodeType":"YulIdentifier","src":"4748:6:51"}],"functionName":{"name":"lt","nativeSrc":"4736:2:51","nodeType":"YulIdentifier","src":"4736:2:51"},"nativeSrc":"4736:19:51","nodeType":"YulFunctionCall","src":"4736:19:51"},"nativeSrc":"4733:201:51","nodeType":"YulIf","src":"4733:201:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4954:4:51","nodeType":"YulIdentifier","src":"4954:4:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4968:1:51","nodeType":"YulLiteral","src":"4968:1:51","type":"","value":"1"},{"name":"newLen","nativeSrc":"4971:6:51","nodeType":"YulIdentifier","src":"4971:6:51"}],"functionName":{"name":"shl","nativeSrc":"4964:3:51","nodeType":"YulIdentifier","src":"4964:3:51"},"nativeSrc":"4964:14:51","nodeType":"YulFunctionCall","src":"4964:14:51"},{"kind":"number","nativeSrc":"4980:1:51","nodeType":"YulLiteral","src":"4980:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4960:3:51","nodeType":"YulIdentifier","src":"4960:3:51"},"nativeSrc":"4960:22:51","nodeType":"YulFunctionCall","src":"4960:22:51"}],"functionName":{"name":"sstore","nativeSrc":"4947:6:51","nodeType":"YulIdentifier","src":"4947:6:51"},"nativeSrc":"4947:36:51","nodeType":"YulFunctionCall","src":"4947:36:51"},"nativeSrc":"4947:36:51","nodeType":"YulExpressionStatement","src":"4947:36:51"}]},"nativeSrc":"4330:663:51","nodeType":"YulCase","src":"4330:663:51","value":{"kind":"number","nativeSrc":"4335:1:51","nodeType":"YulLiteral","src":"4335:1:51","type":"","value":"1"}},{"body":{"nativeSrc":"5010:234:51","nodeType":"YulBlock","src":"5010:234:51","statements":[{"nativeSrc":"5024:14:51","nodeType":"YulVariableDeclaration","src":"5024:14:51","value":{"kind":"number","nativeSrc":"5037:1:51","nodeType":"YulLiteral","src":"5037:1:51","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5028:5:51","nodeType":"YulTypedName","src":"5028:5:51","type":""}]},{"body":{"nativeSrc":"5073:67:51","nodeType":"YulBlock","src":"5073:67:51","statements":[{"nativeSrc":"5091:35:51","nodeType":"YulAssignment","src":"5091:35:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5110:3:51","nodeType":"YulIdentifier","src":"5110:3:51"},{"name":"srcOffset","nativeSrc":"5115:9:51","nodeType":"YulIdentifier","src":"5115:9:51"}],"functionName":{"name":"add","nativeSrc":"5106:3:51","nodeType":"YulIdentifier","src":"5106:3:51"},"nativeSrc":"5106:19:51","nodeType":"YulFunctionCall","src":"5106:19:51"}],"functionName":{"name":"mload","nativeSrc":"5100:5:51","nodeType":"YulIdentifier","src":"5100:5:51"},"nativeSrc":"5100:26:51","nodeType":"YulFunctionCall","src":"5100:26:51"},"variableNames":[{"name":"value","nativeSrc":"5091:5:51","nodeType":"YulIdentifier","src":"5091:5:51"}]}]},"condition":{"name":"newLen","nativeSrc":"5054:6:51","nodeType":"YulIdentifier","src":"5054:6:51"},"nativeSrc":"5051:89:51","nodeType":"YulIf","src":"5051:89:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5160:4:51","nodeType":"YulIdentifier","src":"5160:4:51"},{"arguments":[{"name":"value","nativeSrc":"5219:5:51","nodeType":"YulIdentifier","src":"5219:5:51"},{"name":"newLen","nativeSrc":"5226:6:51","nodeType":"YulIdentifier","src":"5226:6:51"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5166:52:51","nodeType":"YulIdentifier","src":"5166:52:51"},"nativeSrc":"5166:67:51","nodeType":"YulFunctionCall","src":"5166:67:51"}],"functionName":{"name":"sstore","nativeSrc":"5153:6:51","nodeType":"YulIdentifier","src":"5153:6:51"},"nativeSrc":"5153:81:51","nodeType":"YulFunctionCall","src":"5153:81:51"},"nativeSrc":"5153:81:51","nodeType":"YulExpressionStatement","src":"5153:81:51"}]},"nativeSrc":"5002:242:51","nodeType":"YulCase","src":"5002:242:51","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"4310:6:51","nodeType":"YulIdentifier","src":"4310:6:51"},{"kind":"number","nativeSrc":"4318:2:51","nodeType":"YulLiteral","src":"4318:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4307:2:51","nodeType":"YulIdentifier","src":"4307:2:51"},"nativeSrc":"4307:14:51","nodeType":"YulFunctionCall","src":"4307:14:51"},"nativeSrc":"4300:944:51","nodeType":"YulSwitch","src":"4300:944:51"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"3905:1345:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3986:4:51","nodeType":"YulTypedName","src":"3986:4:51","type":""},{"name":"src","nativeSrc":"3992:3:51","nodeType":"YulTypedName","src":"3992:3:51","type":""}],"src":"3905:1345:51"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function validator_revert_contract_IForwarderRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_IForwarderRegistry_$1195t_contract$_ITokenMetadataResolver_$3536t_contract$_IRevocationRegistry_$5000t_contract$_IIssuersDIDRegistry_$4969_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IForwarderRegistry(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IForwarderRegistry(value_1)\n        value3 := value_1\n        let value_2 := mload(add(headStart, 128))\n        validator_revert_contract_IForwarderRegistry(value_2)\n        value4 := value_2\n        let value_3 := mload(add(headStart, 160))\n        validator_revert_contract_IForwarderRegistry(value_3)\n        value5 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b506040516200316738038062003167833981016040819052620000349162000389565b838033888887620000548383836200004b620000c6565b929190620000fc565b6200005e62000143565b5050506200007d81620000766200016560201b60201c565b9062000195565b506001600160a01b0316608052506200009562000208565b6001600160a01b0390811660a052600080546001600160a01b0319169290911691909117905550620005c892505050565b600080620000f660017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a562000449565b92915050565b83620001098482620004fc565b50600184016200011a8382620004fc565b5060029390930180546001600160a01b0319166001600160a01b03909416939093179092555050565b62000163635b5e139f60e01b60016200015b6200021b565b91906200024b565b565b600080620000f660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000449565b6001600160a01b03811615620001ec5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620002046307f5828d60e41b60016200015b6200021b565b5050565b620001636380ac58cd60e01b60016200015b5b600080620000f660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000449565b600160e01b6001600160e01b03198316016200027a576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002d057600080fd5b81516001600160401b0380821115620002ed57620002ed620002a8565b604051601f8301601f19908116603f01168101908282118183101715620003185762000318620002a8565b81604052838152602092508660208588010111156200033657600080fd5b600091505b838210156200035a57858201830151818301840152908201906200033b565b6000602085830101528094505050505092915050565b6001600160a01b03811681146200038657600080fd5b50565b60008060008060008060c08789031215620003a357600080fd5b86516001600160401b0380821115620003bb57600080fd5b620003c98a838b01620002be565b97506020890151915080821115620003e057600080fd5b50620003ef89828a01620002be565b9550506040870151620004028162000370565b6060880151909450620004158162000370565b6080880151909350620004288162000370565b60a08801519092506200043b8162000370565b809150509295509295509295565b81810381811115620000f657634e487b7160e01b600052601160045260246000fd5b600181811c908216806200048057607f821691505b602082108103620004a157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f7576000816000526020600020601f850160051c81016020861015620004d25750805b601f850160051c820191505b81811015620004f357828155600101620004de565b5050505b505050565b81516001600160401b03811115620005185762000518620002a8565b62000530816200052984546200046b565b84620004a7565b602080601f8311600181146200056857600084156200054f5750858301515b600019600386901b1c1916600185901b178555620004f3565b600085815260208120601f198616915b82811015620005995788860151825594840194600190910190840162000578565b5085821015620005b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612b646200060360003960006110f30152600081816102680152818161030e01528181611ebe0152611f460152612b646000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638bb9c5bf116100f9578063b88d4fde11610097578063d547741f11610071578063d547741f14610430578063e985e9c514610443578063f2fde38b14610456578063f5b541a61461046957600080fd5b8063b88d4fde146103e3578063c87b56dd146103f6578063d53913931461040957600080fd5b806395d89b41116100d357806395d89b41146103ad57806395f94bc4146103b5578063a0c76f62146103c8578063a22cb465146103d057600080fd5b80638bb9c5bf1461037f5780638da5cb5b1461039257806391d148541461039a57600080fd5b806342842e0e1161016657806354c7be061161014057806354c7be06146102eb578063572b6c05146102fe5780636352211e1461034b57806370a082311461035e57600080fd5b806342842e0e1461029f57806342966c68146102b25780634bae2be8146102c557600080fd5b8063095ea7b3116101a2578063095ea7b31461023e57806323b872dd146102535780632b4c9f16146102665780632f2ff15d1461028c57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d736600461218b565b610490565b60405190151581526020015b60405180910390f35b6101f96104aa565b6040516101e89190612216565b610219610214366004612229565b6104b9565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e8565b61025161024c366004612264565b6104cd565b005b610251610261366004612290565b6104ee565b7f0000000000000000000000000000000000000000000000000000000000000000610219565b61025161029a3660046122d1565b610522565b6102516102ad366004612290565b61055b565b6102516102c0366004612229565b610589565b6102d86102d3366004612229565b610787565b6040516101e89796959493929190612301565b6102516102f9366004612368565b61090e565b6101dc61030c3660046123c8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b610219610359366004612229565b610977565b61037161036c3660046123c8565b610985565b6040519081526020016101e8565b61025161038d366004612229565b610999565b6102196109b7565b6101dc6103a83660046122d1565b6109de565b6101f9610a29565b6102516103c33660046123c8565b610a33565b610219610a8d565b6102516103de3660046123f3565b610ab7565b6102516103f1366004612421565b610ad4565b6101f9610404366004612229565b610b0e565b6103717f6d696e746572000000000000000000000000000000000000000000000000000081565b61025161043e3660046122d1565b610b31565b6101dc6104513660046124c0565b610b5f565b6102516104643660046123c8565b610bad565b6103717f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104a48261049e610bc8565b90610bf6565b92915050565b60606104b4610cd0565b905090565b60006104a4826104c7610ce2565b90610d10565b6104ea6104d8610dc9565b83836104e2610ce2565b929190610dd3565b5050565b60006104f8610dc9565b9050610504818361104e565b61051c81858585610513610ce2565b9392919061118f565b50505050565b600061052c610dc9565b90506105408161053a61146d565b9061149b565b61055683838361054e611506565b929190611534565b505050565b6000610565610dc9565b9050610571818361104e565b61051c81858585610580610ce2565b9392919061160a565b600081815260016020818152604080842090516105ab93919091019101612541565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a91906125d5565b156107555760006106938361068d610ce2565b90611650565b90507fdead0000000000000000000000000000000000000000000000000000000000006106be610ce2565b600085815260209190915260409020556106d6610ce2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c01000000000000000000000000840482169474010000000000000000000000000000000000000000909404909116926107fd906124ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610829906124ee565b80156108765780601f1061084b57610100808354040283529160200191610876565b820191906000526020600020905b81548152906001019060200180831161085957829003601f168201915b50505050509080600201805461088b906124ee565b80601f01602080910402602001604051908101604052809291908181526020018280546108b7906124ee565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b5050505050905087565b6109427f6d696e74657200000000000000000000000000000000000000000000000000003361093b611506565b91906116b9565b610956838361094f610ce2565b919061173f565b60008281526001602052604090208190610970828261281d565b5050505050565b60006104a48261068d610ce2565b60006104a482610993610ce2565b90611859565b6109b46109a4610dc9565b826109ad611506565b91906118d5565b50565b60006104b46109c461146d565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a2283836109ed611506565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104b4611979565b610a46610a3e610dc9565b61053a61146d565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104b4610a9a61198b565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6104ea610ac2610dc9565b8383610acc610ce2565b9291906119b9565b6000610ade610dc9565b9050610aea818561104e565b610b06818787878787610afb610ce2565b959493929190611ad1565b505050505050565b6060610b1c8261068d610ce2565b506104a43083610b2a61198b565b9190611b47565b6000610b3b610dc9565b9050610b498161053a61146d565b610556838383610b57611506565b929190611c07565b6000610a228383610b6e610ce2565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6109b4610bb8610dc9565b82610bc161146d565b9190611cd1565b6000806104a460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6129c3565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c46575060006104a4565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c97575060016104a4565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104b4610cdd61198b565b611de5565b6000806104a460017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16129c3565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610d74576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610dbf575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166104a4565b60009150506104a4565b60006104b4611e7b565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff8116610e32576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d6b565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610e9d576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d6b565b610ea8868287611fc2565b610f05576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528216602482015260448101849052606401610d6b565b73ffffffffffffffffffffffffffffffffffffffff8416610f6a5774010000000000000000000000000000000000000000821615610f6557600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b610feb565b740100000000000000000000000000000000000000008217808314610f9b5760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000818152600160208181526040808420905161107093919091019101612541565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff85811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906125d5565b610556576105567f6f70657261746f720000000000000000000000000000000000000000000000008461093b611506565b73ffffffffffffffffffffffffffffffffffffffff82166111dc576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff811661123b576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d6b565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff16146112bf576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610d6b565b6112ca868587611fc2565b61137957740100000000000000000000000000000000000000008116158061131b5750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b15611379576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606401610d6b565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff8085169182905585161461140a5773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806104a460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6129c3565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104ea576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d6b565b6000806104a460017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236129c3565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661051c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b611617858585858561118f565b73ffffffffffffffffffffffffffffffffffffffff82163b15610970576109708484848460405180602001604052806000815250612037565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116af576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101849052602401610d6b565b805b949350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610556576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610d6b565b73ffffffffffffffffffffffffffffffffffffffff821661178c576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff16156117eb576040517f753eceac00000000000000000000000000000000000000000000000000000000815260048101829052602401610d6b565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff82166118a8576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b6118e08382846116b9565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104b461198661198b565b61214c565b6000806104a460017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56129c3565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a36576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d6b565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b611ade878787878761118f565b73ffffffffffffffffffffffffffffffffffffffff84163b15611b3e57611b3e8686868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203792505050565b50505050505050565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611bc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b191908101906129fd565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561051c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016115fc565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611d3e576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d6b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611df6906124ee565b80601f0160208091040260200160405190810160405280929190818152602001828054611e22906124ee565b8015611e6f5780601f10611e4457610100808354040283529160200191611e6f565b820191906000526020600020905b815481529060010190602001808311611e5257829003601f168201915b50505050509050919050565b600033321480611e8b5750601836105b15611e9557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611fb157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb191906125d5565b15611fbb57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116b157505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290612091908990899088908890600401612ac8565b6020604051808303816000875af11580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d49190612b11565b7fffffffff000000000000000000000000000000000000000000000000000000001614610970576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610d6b565b6060816001018054611df6906124ee565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146109b457600080fd5b60006020828403121561219d57600080fd5b8135610a228161215d565b60005b838110156121c35781810151838201526020016121ab565b50506000910152565b600081518084526121e48160208601602086016121a8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a2260208301846121cc565b60006020828403121561223b57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146109b457600080fd5b6000806040838503121561227757600080fd5b823561228281612242565b946020939093013593505050565b6000806000606084860312156122a557600080fd5b83356122b081612242565b925060208401356122c081612242565b929592945050506040919091013590565b600080604083850312156122e457600080fd5b8235915060208301356122f681612242565b809150509250929050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a08201819052600090612348908301856121cc565b82810360c084015261235a81856121cc565b9a9950505050505050505050565b60008060006060848603121561237d57600080fd5b833561238881612242565b925060208401359150604084013567ffffffffffffffff8111156123ab57600080fd5b840160e081870312156123bd57600080fd5b809150509250925092565b6000602082840312156123da57600080fd5b8135610a2281612242565b80151581146109b457600080fd5b6000806040838503121561240657600080fd5b823561241181612242565b915060208301356122f6816123e5565b60008060008060006080868803121561243957600080fd5b853561244481612242565b9450602086013561245481612242565b935060408601359250606086013567ffffffffffffffff8082111561247857600080fd5b818801915088601f83011261248c57600080fd5b81358181111561249b57600080fd5b8960208285010111156124ad57600080fd5b9699959850939650602001949392505050565b600080604083850312156124d357600080fd5b82356124de81612242565b915060208301356122f681612242565b600181811c9082168061250257607f821691505b60208210810361253b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080835461254f816124ee565b60018281168015612567576001811461259a576125c9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506125c9565b8760005260208060002060005b858110156125c05781548a8201529084019082016125a7565b50505082870194505b50929695505050505050565b6000602082840312156125e757600080fd5b8151610a22816123e5565b6000813561ffff811681146104a457600080fd5b6000813567ffffffffffffffff811681146104a457600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261265557600080fd5b83018035915067ffffffffffffffff82111561267057600080fd5b60200191503681900382131561268557600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610556576000816000526020600020601f850160051c810160208610156126e45750805b601f850160051c820191505b81811015610b06578281556001016126f0565b67ffffffffffffffff83111561271b5761271b61268c565b61272f8361272983546124ee565b836126bb565b6000601f841160018114612781576000851561274b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610970565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156127d057868501358255602094850194600190920191016127b0565b508682101561280b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff612829836125f2565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff0000612864602086016125f2565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff000000006128aa60408701612606565b60201b16837fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841617821717845550505061292f6128ea60608401612606565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b61298b61293e60808401612606565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b61299860a0830183612620565b6129a6818360018601612703565b50506129b560c0830183612620565b61051c818360028601612703565b818103818111156104a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215612a0f57600080fd5b815167ffffffffffffffff80821115612a2757600080fd5b818401915084601f830112612a3b57600080fd5b815181811115612a4d57612a4d61268c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612a9357612a9361268c565b81604052828152876020848701011115612aac57600080fd5b612abd8360208301602088016121a8565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612b0760808301846121cc565b9695505050505050565b600060208284031215612b2357600080fd5b8151610a228161215d56fea2646970667358221220968e34f244ade75feba903a7a199bbf20d1927b12fede1bbe006259da8fb272964736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3167 CODESIZE SUB DUP1 PUSH3 0x3167 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x389 JUMP JUMPDEST DUP4 DUP1 CALLER DUP9 DUP9 DUP8 PUSH3 0x54 DUP4 DUP4 DUP4 PUSH3 0x4B PUSH3 0xC6 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH3 0xFC JUMP JUMPDEST PUSH3 0x5E PUSH3 0x143 JUMP JUMPDEST POP POP POP PUSH3 0x7D DUP2 PUSH3 0x76 PUSH3 0x165 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x195 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE POP PUSH3 0x95 PUSH3 0x208 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x5C8 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xF6 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH3 0x449 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 PUSH3 0x109 DUP5 DUP3 PUSH3 0x4FC JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH3 0x11A DUP4 DUP3 PUSH3 0x4FC JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH3 0x163 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x15B PUSH3 0x21B JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x24B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xF6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x449 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x1EC JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x204 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x15B PUSH3 0x21B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x163 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x15B JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xF6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x449 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x27A JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2ED JUMPI PUSH3 0x2ED PUSH3 0x2A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x318 JUMPI PUSH3 0x318 PUSH3 0x2A8 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x35A JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x33B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3C9 DUP11 DUP4 DUP12 ADD PUSH3 0x2BE JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3EF DUP10 DUP3 DUP11 ADD PUSH3 0x2BE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD MLOAD PUSH3 0x402 DUP2 PUSH3 0x370 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x415 DUP2 PUSH3 0x370 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x428 DUP2 PUSH3 0x370 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x43B DUP2 PUSH3 0x370 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xF6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x480 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x4A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x4F7 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x4D2 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4F3 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x4DE JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x518 JUMPI PUSH3 0x518 PUSH3 0x2A8 JUMP JUMPDEST PUSH3 0x530 DUP2 PUSH3 0x529 DUP5 SLOAD PUSH3 0x46B JUMP JUMPDEST DUP5 PUSH3 0x4A7 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x568 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x54F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x4F3 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x599 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x578 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x5B8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x2B64 PUSH3 0x603 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x10F3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x268 ADD MSTORE DUP2 DUP2 PUSH2 0x30E ADD MSTORE DUP2 DUP2 PUSH2 0x1EBE ADD MSTORE PUSH2 0x1F46 ADD MSTORE PUSH2 0x2B64 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3B5 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x54C7BE06 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x206 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x218B JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F9 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0x2290 JUMP JUMPDEST PUSH2 0x4EE JUMP JUMPDEST PUSH32 0x0 PUSH2 0x219 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0x522 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x2290 JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x589 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x787 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2368 JUMP JUMPDEST PUSH2 0x90E JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x30C CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x977 JUMP JUMPDEST PUSH2 0x371 PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x999 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0xA29 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x219 PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2421 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0xB0E JUMP JUMPDEST PUSH2 0x371 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0xB31 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x24C0 JUMP JUMPDEST PUSH2 0xB5F JUMP JUMPDEST PUSH2 0x251 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x371 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x49E PUSH2 0xBC8 JUMP JUMPDEST SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0xCD0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x4C7 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x4EA PUSH2 0x4D8 PUSH2 0xDC9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x4E2 PUSH2 0xCE2 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xDD3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F8 PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x504 DUP2 DUP4 PUSH2 0x104E JUMP JUMPDEST PUSH2 0x51C DUP2 DUP6 DUP6 DUP6 PUSH2 0x513 PUSH2 0xCE2 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x118F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52C PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x540 DUP2 PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH2 0x556 DUP4 DUP4 DUP4 PUSH2 0x54E PUSH2 0x1506 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1534 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x565 PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x571 DUP2 DUP4 PUSH2 0x104E JUMP JUMPDEST PUSH2 0x51C DUP2 DUP6 DUP6 DUP6 PUSH2 0x580 PUSH2 0xCE2 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x5AB SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x656 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67A SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST ISZERO PUSH2 0x755 JUMPI PUSH1 0x0 PUSH2 0x693 DUP4 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0x6BE PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x6D6 PUSH2 0xCE2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0x7FD SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x829 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x876 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x84B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x876 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x859 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x88B SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8B7 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x904 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x904 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x942 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x93B PUSH2 0x1506 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x956 DUP4 DUP4 PUSH2 0x94F PUSH2 0xCE2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x970 DUP3 DUP3 PUSH2 0x281D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x993 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0x1859 JUMP JUMPDEST PUSH2 0x9B4 PUSH2 0x9A4 PUSH2 0xDC9 JUMP JUMPDEST DUP3 PUSH2 0x9AD PUSH2 0x1506 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x18D5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x9C4 PUSH2 0x146D JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA22 DUP4 DUP4 PUSH2 0x9ED PUSH2 0x1506 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0x1979 JUMP JUMPDEST PUSH2 0xA46 PUSH2 0xA3E PUSH2 0xDC9 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0xA9A PUSH2 0x198B JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4EA PUSH2 0xAC2 PUSH2 0xDC9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xACC PUSH2 0xCE2 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x19B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0xAEA DUP2 DUP6 PUSH2 0x104E JUMP JUMPDEST PUSH2 0xB06 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xAFB PUSH2 0xCE2 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB1C DUP3 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST POP PUSH2 0x4A4 ADDRESS DUP4 PUSH2 0xB2A PUSH2 0x198B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B47 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3B PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0xB49 DUP2 PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST PUSH2 0x556 DUP4 DUP4 DUP4 PUSH2 0xB57 PUSH2 0x1506 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1C07 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA22 DUP4 DUP4 PUSH2 0xB6E PUSH2 0xCE2 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9B4 PUSH2 0xBB8 PUSH2 0xDC9 JUMP JUMPDEST DUP3 PUSH2 0xBC1 PUSH2 0x146D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC46 JUMPI POP PUSH1 0x0 PUSH2 0x4A4 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC97 JUMPI POP PUSH1 0x1 PUSH2 0x4A4 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0xCDD PUSH2 0x198B JUMP JUMPDEST PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xD74 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0xDBF JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x1E7B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xE9D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH2 0xEA8 DUP7 DUP3 DUP8 PUSH2 0x1FC2 JUMP JUMPDEST PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xF6A JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xF65 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0xFEB JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xF9B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x1070 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x115E SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x556 JUMPI PUSH2 0x556 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP5 PUSH2 0x93B PUSH2 0x1506 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x123B JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x12CA DUP7 DUP6 DUP8 PUSH2 0x1FC2 JUMP JUMPDEST PUSH2 0x1379 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0x131B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1379 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0x140A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x29C3 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x51C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x1617 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x118F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x970 JUMPI PUSH2 0x970 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x178C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x17EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x18A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x18E0 DUP4 DUP3 DUP5 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0x1986 PUSH2 0x198B JUMP JUMPDEST PUSH2 0x214C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x29C3 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A36 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x1ADE DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x118F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B3E JUMPI PUSH2 0x1B3E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2037 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16B1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x15FC JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1D3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x51C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1DF6 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E22 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E6F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E44 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E6F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E52 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E95 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1FB1 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB1 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST ISZERO PUSH2 0x1FBB JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x16B1 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x2091 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AC8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20D4 SWAP2 SWAP1 PUSH2 0x2B11 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1DF6 SWAP1 PUSH2 0x24EE JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA22 DUP2 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21C3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21AB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x21E4 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21A8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA22 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2282 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x22B0 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x22C0 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x2242 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2348 SWAP1 DUP4 ADD DUP6 PUSH2 0x21CC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x235A DUP2 DUP6 PUSH2 0x21CC JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2388 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x23BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA22 DUP2 PUSH2 0x2242 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2411 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2444 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2454 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x248C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x249B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x24AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24DE DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x2242 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2502 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x253B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x254F DUP2 PUSH2 0x24EE JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2567 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x259A JUMPI PUSH2 0x25C9 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x25C9 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x25C0 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x25A7 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA22 DUP2 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x26E4 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26F0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x271B JUMPI PUSH2 0x271B PUSH2 0x268C JUMP JUMPDEST PUSH2 0x272F DUP4 PUSH2 0x2729 DUP4 SLOAD PUSH2 0x24EE JUMP JUMPDEST DUP4 PUSH2 0x26BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2781 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x274B JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x970 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27D0 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x27B0 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x280B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x2829 DUP4 PUSH2 0x25F2 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2864 PUSH1 0x20 DUP7 ADD PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x28AA PUSH1 0x40 DUP8 ADD PUSH2 0x2606 JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x292F PUSH2 0x28EA PUSH1 0x60 DUP5 ADD PUSH2 0x2606 JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x298B PUSH2 0x293E PUSH1 0x80 DUP5 ADD PUSH2 0x2606 JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2998 PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x29A6 DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x2703 JUMP JUMPDEST POP POP PUSH2 0x29B5 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x51C DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x2703 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4A4 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2A4D JUMPI PUSH2 0x2A4D PUSH2 0x268C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2A93 JUMPI PUSH2 0x2A93 PUSH2 0x268C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ABD DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x21A8 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2B07 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x21CC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA22 DUP2 PUSH2 0x215D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 DUP15 CALLVALUE CALLCODE PREVRANDAO 0xAD 0xE7 PUSH0 0xEB 0xA9 SUB 0xA7 LOG1 SWAP10 0xBB CALLCODE 0xD NOT 0x27 0xB1 0x2F 0xED 0xE1 0xBB 0xE0 MOD 0x25 SWAP14 0xA8 0xFB 0x27 0x29 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1987:6840:47:-:0;;;2862:524;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3187:17;;3150:10;3221:9;3232:11;3245:16;1139:77:25;3221:9:47;3232:11;3245:16;1139:29:25;:27;:29::i;:::-;:45;:77;;:45;:77::i;:::-;1226:34;:32;:34::i;:::-;1034:233;;;1008:63:2;1058:12;1008:33;:31;;;:33;;:::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:19;;;-1:-1:-1;3273:20:47::3;:18;:20::i;:::-;-1:-1:-1::0;;;;;3303:26:47;;::::3;;::::0;3339:19:::3;:40:::0;;-1:-1:-1;;;;;;3339:40:47::3;::::0;;;::::3;::::0;;;::::3;::::0;;-1:-1:-1;1987:6840:47;;-1:-1:-1;;;1987:6840:47;3441:174:41;3482:16;;456:70;525:1;464:57;456:70;:::i;:::-;448:79;3441:174;-1:-1:-1;;3441:174:41:o;1021:322::-;1219:1;:23;1233:9;1219:1;:23;:::i;:::-;-1:-1:-1;1252:13:41;;;:27;1268:11;1252:13;:27;:::i;:::-;-1:-1:-1;1289:23:41;;;;;:47;;-1:-1:-1;;;;;;1289:47:41;-1:-1:-1;;;;;1289:47:41;;;;;;;;;;-1:-1:-1;;1021:322:41:o;3013:153:38:-;3062:97;-1:-1:-1;;;3154:4:38;3062:34;:32;:34::i;:::-;:56;:97;:56;:97::i;:::-;3013:153::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:89::-;1567:341;;:::o;2530:131:38:-;2565:89;-1:-1:-1;;;2649:4:38;2565:34;1705:174:17;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:127:51:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:844;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:51;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:51;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;732:3;725:4;720:2;712:6;708:15;704:26;701:35;698:55;;;749:1;746;739:12;698:55;771:1;762:10;;781:133;795:2;792:1;789:9;781:133;;;883:14;;;879:23;;873:30;852:14;;;848:23;;841:63;806:10;;;;781:133;;;958:1;951:4;946:2;938:6;934:15;930:26;923:37;978:6;969:15;;;;;;146:844;;;;:::o;995:151::-;-1:-1:-1;;;;;1090:31:51;;1080:42;;1070:70;;1136:1;1133;1126:12;1070:70;995:151;:::o;1151:1289::-;1400:6;1408;1416;1424;1432;1440;1493:3;1481:9;1472:7;1468:23;1464:33;1461:53;;;1510:1;1507;1500:12;1461:53;1537:16;;-1:-1:-1;;;;;1602:14:51;;;1599:34;;;1629:1;1626;1619:12;1599:34;1652:61;1705:7;1696:6;1685:9;1681:22;1652:61;:::i;:::-;1642:71;;1759:2;1748:9;1744:18;1738:25;1722:41;;1788:2;1778:8;1775:16;1772:36;;;1804:1;1801;1794:12;1772:36;;1827:63;1882:7;1871:8;1860:9;1856:24;1827:63;:::i;:::-;1817:73;;;1933:2;1922:9;1918:18;1912:25;1946:51;1991:5;1946:51;:::i;:::-;2066:2;2051:18;;2045:25;2016:5;;-1:-1:-1;2079:53:51;2045:25;2079:53;:::i;:::-;2203:3;2188:19;;2182:26;2151:7;;-1:-1:-1;2217:53:51;2182:26;2217:53;:::i;:::-;2341:3;2326:19;;2320:26;2289:7;;-1:-1:-1;2355:53:51;2320:26;2355:53;:::i;:::-;2427:7;2417:17;;;1151:1289;;;;;;;;:::o;2445:225::-;2512:9;;;2533:11;;;2530:134;;;2586:10;2581:3;2577:20;2574:1;2567:31;2621:4;2618:1;2611:15;2649:4;2646:1;2639:15;2675:380;2754:1;2750:12;;;;2797;;;2818:61;;2872:4;2864:6;2860:17;2850:27;;2818:61;2925:2;2917:6;2914:14;2894:18;2891:38;2888:161;;2971:10;2966:3;2962:20;2959:1;2952:31;3006:4;3003:1;2996:15;3034:4;3031:1;3024:15;2888:161;;2675:380;;;:::o;3186:543::-;3288:2;3283:3;3280:11;3277:446;;;3324:1;3348:5;3345:1;3338:16;3392:4;3389:1;3379:18;3462:2;3450:10;3446:19;3443:1;3439:27;3433:4;3429:38;3498:4;3486:10;3483:20;3480:47;;;-1:-1:-1;3521:4:51;3480:47;3576:2;3571:3;3567:12;3564:1;3560:20;3554:4;3550:31;3540:41;;3631:82;3649:2;3642:5;3639:13;3631:82;;;3694:17;;;3675:1;3664:13;3631:82;;;3635:3;;;3277:446;3186:543;;;:::o;3905:1345::-;4025:10;;-1:-1:-1;;;;;4047:30:51;;4044:56;;;4080:18;;:::i;:::-;4109:97;4199:6;4159:38;4191:4;4185:11;4159:38;:::i;:::-;4153:4;4109:97;:::i;:::-;4261:4;;4318:2;4307:14;;4335:1;4330:663;;;;5037:1;5054:6;5051:89;;;-1:-1:-1;5106:19:51;;;5100:26;5051:89;-1:-1:-1;;3862:1:51;3858:11;;;3854:24;3850:29;3840:40;3886:1;3882:11;;;3837:57;5153:81;;4300:944;;4330:663;3133:1;3126:14;;;3170:4;3157:18;;-1:-1:-1;;4366:20:51;;;4484:236;4498:7;4495:1;4492:14;4484:236;;;4587:19;;;4581:26;4566:42;;4679:27;;;;4647:1;4635:14;;;;4514:19;;4484:236;;;4488:3;4748:6;4739:7;4736:19;4733:201;;;4809:19;;;4803:26;-1:-1:-1;;4892:1:51;4888:14;;;4904:3;4884:24;4880:37;4876:42;4861:58;4846:74;;4733:201;-1:-1:-1;;;;;4980:1:51;4964:14;;;4960:22;4947:36;;-1:-1:-1;3905:1345:51:o;:::-;1987:6840:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINTER_ROLE_4492":{"entryPoint":null,"id":4492,"parameterSlots":0,"returnSlots":0},"@OPERATOR_ROLE_4495":{"entryPoint":null,"id":4495,"parameterSlots":0,"returnSlots":0},"@_callOnERC721Received_3386":{"entryPoint":8247,"id":3386,"parameterSlots":5,"returnSlots":0},"@_isOperatable_3412":{"entryPoint":8130,"id":3412,"parameterSlots":3,"returnSlots":1},"@_isSenderOperatable_4819":{"entryPoint":4174,"id":4819,"parameterSlots":2,"returnSlots":0},"@_msgSender_1120":{"entryPoint":7803,"id":1120,"parameterSlots":0,"returnSlots":1},"@_msgSender_4932":{"entryPoint":3529,"id":4932,"parameterSlots":0,"returnSlots":1},"@_tokenExists_3443":{"entryPoint":null,"id":3443,"parameterSlots":1,"returnSlots":1},"@_tokenHasApproval_3469":{"entryPoint":null,"id":3469,"parameterSlots":1,"returnSlots":1},"@_tokenOwner_3428":{"entryPoint":null,"id":3428,"parameterSlots":1,"returnSlots":1},"@approve_2032":{"entryPoint":3539,"id":2032,"parameterSlots":4,"returnSlots":0},"@approve_4694":{"entryPoint":1229,"id":4694,"parameterSlots":2,"returnSlots":0},"@balanceOf_3226":{"entryPoint":6233,"id":3226,"parameterSlots":2,"returnSlots":1},"@balanceOf_4730":{"entryPoint":2437,"id":4730,"parameterSlots":1,"returnSlots":1},"@burn_4674":{"entryPoint":1417,"id":4674,"parameterSlots":1,"returnSlots":0},"@enforceHasRole_557":{"entryPoint":5817,"id":557,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_819":{"entryPoint":5275,"id":819,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1032":{"entryPoint":null,"id":1032,"parameterSlots":0,"returnSlots":1},"@getApproved_3302":{"entryPoint":3344,"id":3302,"parameterSlots":2,"returnSlots":1},"@getApproved_4762":{"entryPoint":1209,"id":4762,"parameterSlots":1,"returnSlots":1},"@grantRole_110":{"entryPoint":1314,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_410":{"entryPoint":5428,"id":410,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":2526,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_3323":{"entryPoint":null,"id":3323,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_4781":{"entryPoint":2911,"id":4781,"parameterSlots":2,"returnSlots":1},"@isContract_3741":{"entryPoint":null,"id":3741,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_1048":{"entryPoint":null,"id":1048,"parameterSlots":1,"returnSlots":1},"@layout_3354":{"entryPoint":3298,"id":3354,"parameterSlots":0,"returnSlots":1},"@layout_3722":{"entryPoint":6539,"id":3722,"parameterSlots":0,"returnSlots":1},"@layout_593":{"entryPoint":5382,"id":593,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":5229,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":3016,"id":999,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3521":{"entryPoint":2701,"id":3521,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3689":{"entryPoint":null,"id":3689,"parameterSlots":1,"returnSlots":1},"@mint_2480":{"entryPoint":5951,"id":2480,"parameterSlots":3,"returnSlots":0},"@mint_4606":{"entryPoint":2318,"id":4606,"parameterSlots":3,"returnSlots":0},"@msgSender_1206":{"entryPoint":null,"id":1206,"parameterSlots":0,"returnSlots":1},"@name_1362":{"entryPoint":1194,"id":1362,"parameterSlots":0,"returnSlots":1},"@name_3494":{"entryPoint":3280,"id":3494,"parameterSlots":0,"returnSlots":1},"@name_3662":{"entryPoint":7653,"id":3662,"parameterSlots":1,"returnSlots":1},"@ownerOf_3258":{"entryPoint":5712,"id":3258,"parameterSlots":2,"returnSlots":1},"@ownerOf_4746":{"entryPoint":2423,"id":4746,"parameterSlots":1,"returnSlots":1},"@owner_209":{"entryPoint":2487,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_772":{"entryPoint":null,"id":772,"parameterSlots":1,"returnSlots":1},"@renounceRole_159":{"entryPoint":2457,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":6357,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":2865,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_447":{"entryPoint":7175,"id":447,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_2225":{"entryPoint":5642,"id":2225,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_2265":{"entryPoint":6865,"id":2265,"parameterSlots":7,"returnSlots":0},"@safeTransferFrom_4883":{"entryPoint":1371,"id":4883,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_4918":{"entryPoint":2772,"id":4918,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_2070":{"entryPoint":6585,"id":2070,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_4714":{"entryPoint":2743,"id":4714,"parameterSlots":2,"returnSlots":0},"@setRevocationRegistry_4569":{"entryPoint":2611,"id":4569,"parameterSlots":1,"returnSlots":0},"@supportsInterface_881":{"entryPoint":1168,"id":881,"parameterSlots":1,"returnSlots":1},"@supportsInterface_987":{"entryPoint":3062,"id":987,"parameterSlots":2,"returnSlots":1},"@symbol_1376":{"entryPoint":2601,"id":1376,"parameterSlots":0,"returnSlots":1},"@symbol_3507":{"entryPoint":6521,"id":3507,"parameterSlots":0,"returnSlots":1},"@symbol_3675":{"entryPoint":8524,"id":3675,"parameterSlots":1,"returnSlots":1},"@tokenMetadataURI_3710":{"entryPoint":6983,"id":3710,"parameterSlots":3,"returnSlots":1},"@tokenURI_1404":{"entryPoint":2830,"id":1404,"parameterSlots":1,"returnSlots":1},"@transferFrom_2187":{"entryPoint":4495,"id":2187,"parameterSlots":5,"returnSlots":0},"@transferFrom_4851":{"entryPoint":1262,"id":4851,"parameterSlots":3,"returnSlots":0},"@transferOwnership_226":{"entryPoint":2989,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_759":{"entryPoint":7377,"id":759,"parameterSlots":3,"returnSlots":0},"@vcData_4500":{"entryPoint":1927,"id":4500,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":9160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":9408,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":8848,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9249,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":9203,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8804,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr":{"entryPoint":9064,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":9685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":8913,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11025,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":10749,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8745,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":8652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9537,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10952,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8726,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8961,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_string_calldata":{"entryPoint":9760,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10691,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9915,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_string_calldata_to_string":{"entryPoint":9987,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8616,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9454,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":9868,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_uint16":{"entryPoint":9714,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint64":{"entryPoint":9734,"id":null,"parameterSlots":1,"returnSlots":1},"update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage":{"entryPoint":10269,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_t_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_revert_address":{"entryPoint":8770,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":9189,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":8541,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:19001:51","nodeType":"YulBlock","src":"0:19001:51","statements":[{"nativeSrc":"6:3:51","nodeType":"YulBlock","src":"6:3:51","statements":[]},{"body":{"nativeSrc":"58:133:51","nodeType":"YulBlock","src":"58:133:51","statements":[{"body":{"nativeSrc":"169:16:51","nodeType":"YulBlock","src":"169:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:51","nodeType":"YulLiteral","src":"178:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:51","nodeType":"YulLiteral","src":"181:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:51","nodeType":"YulIdentifier","src":"171:6:51"},"nativeSrc":"171:12:51","nodeType":"YulFunctionCall","src":"171:12:51"},"nativeSrc":"171:12:51","nodeType":"YulExpressionStatement","src":"171:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"81:5:51","nodeType":"YulIdentifier","src":"81:5:51"},{"arguments":[{"name":"value","nativeSrc":"92:5:51","nodeType":"YulIdentifier","src":"92:5:51"},{"kind":"number","nativeSrc":"99:66:51","nodeType":"YulLiteral","src":"99:66:51","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"88:3:51","nodeType":"YulIdentifier","src":"88:3:51"},"nativeSrc":"88:78:51","nodeType":"YulFunctionCall","src":"88:78:51"}],"functionName":{"name":"eq","nativeSrc":"78:2:51","nodeType":"YulIdentifier","src":"78:2:51"},"nativeSrc":"78:89:51","nodeType":"YulFunctionCall","src":"78:89:51"}],"functionName":{"name":"iszero","nativeSrc":"71:6:51","nodeType":"YulIdentifier","src":"71:6:51"},"nativeSrc":"71:97:51","nodeType":"YulFunctionCall","src":"71:97:51"},"nativeSrc":"68:117:51","nodeType":"YulIf","src":"68:117:51"}]},"name":"validator_revert_bytes4","nativeSrc":"14:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"47:5:51","nodeType":"YulTypedName","src":"47:5:51","type":""}],"src":"14:177:51"},{"body":{"nativeSrc":"265:176:51","nodeType":"YulBlock","src":"265:176:51","statements":[{"body":{"nativeSrc":"311:16:51","nodeType":"YulBlock","src":"311:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:51","nodeType":"YulLiteral","src":"320:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:51","nodeType":"YulLiteral","src":"323:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:51","nodeType":"YulIdentifier","src":"313:6:51"},"nativeSrc":"313:12:51","nodeType":"YulFunctionCall","src":"313:12:51"},"nativeSrc":"313:12:51","nodeType":"YulExpressionStatement","src":"313:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"286:7:51","nodeType":"YulIdentifier","src":"286:7:51"},{"name":"headStart","nativeSrc":"295:9:51","nodeType":"YulIdentifier","src":"295:9:51"}],"functionName":{"name":"sub","nativeSrc":"282:3:51","nodeType":"YulIdentifier","src":"282:3:51"},"nativeSrc":"282:23:51","nodeType":"YulFunctionCall","src":"282:23:51"},{"kind":"number","nativeSrc":"307:2:51","nodeType":"YulLiteral","src":"307:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"278:3:51","nodeType":"YulIdentifier","src":"278:3:51"},"nativeSrc":"278:32:51","nodeType":"YulFunctionCall","src":"278:32:51"},"nativeSrc":"275:52:51","nodeType":"YulIf","src":"275:52:51"},{"nativeSrc":"336:36:51","nodeType":"YulVariableDeclaration","src":"336:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"362:9:51","nodeType":"YulIdentifier","src":"362:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"349:12:51","nodeType":"YulIdentifier","src":"349:12:51"},"nativeSrc":"349:23:51","nodeType":"YulFunctionCall","src":"349:23:51"},"variables":[{"name":"value","nativeSrc":"340:5:51","nodeType":"YulTypedName","src":"340:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"405:5:51","nodeType":"YulIdentifier","src":"405:5:51"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"381:23:51","nodeType":"YulIdentifier","src":"381:23:51"},"nativeSrc":"381:30:51","nodeType":"YulFunctionCall","src":"381:30:51"},"nativeSrc":"381:30:51","nodeType":"YulExpressionStatement","src":"381:30:51"},{"nativeSrc":"420:15:51","nodeType":"YulAssignment","src":"420:15:51","value":{"name":"value","nativeSrc":"430:5:51","nodeType":"YulIdentifier","src":"430:5:51"},"variableNames":[{"name":"value0","nativeSrc":"420:6:51","nodeType":"YulIdentifier","src":"420:6:51"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"196:245:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"231:9:51","nodeType":"YulTypedName","src":"231:9:51","type":""},{"name":"dataEnd","nativeSrc":"242:7:51","nodeType":"YulTypedName","src":"242:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"254:6:51","nodeType":"YulTypedName","src":"254:6:51","type":""}],"src":"196:245:51"},{"body":{"nativeSrc":"541:92:51","nodeType":"YulBlock","src":"541:92:51","statements":[{"nativeSrc":"551:26:51","nodeType":"YulAssignment","src":"551:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"563:9:51","nodeType":"YulIdentifier","src":"563:9:51"},{"kind":"number","nativeSrc":"574:2:51","nodeType":"YulLiteral","src":"574:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"559:3:51","nodeType":"YulIdentifier","src":"559:3:51"},"nativeSrc":"559:18:51","nodeType":"YulFunctionCall","src":"559:18:51"},"variableNames":[{"name":"tail","nativeSrc":"551:4:51","nodeType":"YulIdentifier","src":"551:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"593:9:51","nodeType":"YulIdentifier","src":"593:9:51"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"618:6:51","nodeType":"YulIdentifier","src":"618:6:51"}],"functionName":{"name":"iszero","nativeSrc":"611:6:51","nodeType":"YulIdentifier","src":"611:6:51"},"nativeSrc":"611:14:51","nodeType":"YulFunctionCall","src":"611:14:51"}],"functionName":{"name":"iszero","nativeSrc":"604:6:51","nodeType":"YulIdentifier","src":"604:6:51"},"nativeSrc":"604:22:51","nodeType":"YulFunctionCall","src":"604:22:51"}],"functionName":{"name":"mstore","nativeSrc":"586:6:51","nodeType":"YulIdentifier","src":"586:6:51"},"nativeSrc":"586:41:51","nodeType":"YulFunctionCall","src":"586:41:51"},"nativeSrc":"586:41:51","nodeType":"YulExpressionStatement","src":"586:41:51"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"446:187:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"510:9:51","nodeType":"YulTypedName","src":"510:9:51","type":""},{"name":"value0","nativeSrc":"521:6:51","nodeType":"YulTypedName","src":"521:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"532:4:51","nodeType":"YulTypedName","src":"532:4:51","type":""}],"src":"446:187:51"},{"body":{"nativeSrc":"704:184:51","nodeType":"YulBlock","src":"704:184:51","statements":[{"nativeSrc":"714:10:51","nodeType":"YulVariableDeclaration","src":"714:10:51","value":{"kind":"number","nativeSrc":"723:1:51","nodeType":"YulLiteral","src":"723:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"718:1:51","nodeType":"YulTypedName","src":"718:1:51","type":""}]},{"body":{"nativeSrc":"783:63:51","nodeType":"YulBlock","src":"783:63:51","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"808:3:51","nodeType":"YulIdentifier","src":"808:3:51"},{"name":"i","nativeSrc":"813:1:51","nodeType":"YulIdentifier","src":"813:1:51"}],"functionName":{"name":"add","nativeSrc":"804:3:51","nodeType":"YulIdentifier","src":"804:3:51"},"nativeSrc":"804:11:51","nodeType":"YulFunctionCall","src":"804:11:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"827:3:51","nodeType":"YulIdentifier","src":"827:3:51"},{"name":"i","nativeSrc":"832:1:51","nodeType":"YulIdentifier","src":"832:1:51"}],"functionName":{"name":"add","nativeSrc":"823:3:51","nodeType":"YulIdentifier","src":"823:3:51"},"nativeSrc":"823:11:51","nodeType":"YulFunctionCall","src":"823:11:51"}],"functionName":{"name":"mload","nativeSrc":"817:5:51","nodeType":"YulIdentifier","src":"817:5:51"},"nativeSrc":"817:18:51","nodeType":"YulFunctionCall","src":"817:18:51"}],"functionName":{"name":"mstore","nativeSrc":"797:6:51","nodeType":"YulIdentifier","src":"797:6:51"},"nativeSrc":"797:39:51","nodeType":"YulFunctionCall","src":"797:39:51"},"nativeSrc":"797:39:51","nodeType":"YulExpressionStatement","src":"797:39:51"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"744:1:51","nodeType":"YulIdentifier","src":"744:1:51"},{"name":"length","nativeSrc":"747:6:51","nodeType":"YulIdentifier","src":"747:6:51"}],"functionName":{"name":"lt","nativeSrc":"741:2:51","nodeType":"YulIdentifier","src":"741:2:51"},"nativeSrc":"741:13:51","nodeType":"YulFunctionCall","src":"741:13:51"},"nativeSrc":"733:113:51","nodeType":"YulForLoop","post":{"nativeSrc":"755:19:51","nodeType":"YulBlock","src":"755:19:51","statements":[{"nativeSrc":"757:15:51","nodeType":"YulAssignment","src":"757:15:51","value":{"arguments":[{"name":"i","nativeSrc":"766:1:51","nodeType":"YulIdentifier","src":"766:1:51"},{"kind":"number","nativeSrc":"769:2:51","nodeType":"YulLiteral","src":"769:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"762:3:51","nodeType":"YulIdentifier","src":"762:3:51"},"nativeSrc":"762:10:51","nodeType":"YulFunctionCall","src":"762:10:51"},"variableNames":[{"name":"i","nativeSrc":"757:1:51","nodeType":"YulIdentifier","src":"757:1:51"}]}]},"pre":{"nativeSrc":"737:3:51","nodeType":"YulBlock","src":"737:3:51","statements":[]},"src":"733:113:51"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"866:3:51","nodeType":"YulIdentifier","src":"866:3:51"},{"name":"length","nativeSrc":"871:6:51","nodeType":"YulIdentifier","src":"871:6:51"}],"functionName":{"name":"add","nativeSrc":"862:3:51","nodeType":"YulIdentifier","src":"862:3:51"},"nativeSrc":"862:16:51","nodeType":"YulFunctionCall","src":"862:16:51"},{"kind":"number","nativeSrc":"880:1:51","nodeType":"YulLiteral","src":"880:1:51","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"855:6:51","nodeType":"YulIdentifier","src":"855:6:51"},"nativeSrc":"855:27:51","nodeType":"YulFunctionCall","src":"855:27:51"},"nativeSrc":"855:27:51","nodeType":"YulExpressionStatement","src":"855:27:51"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"638:250:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"682:3:51","nodeType":"YulTypedName","src":"682:3:51","type":""},{"name":"dst","nativeSrc":"687:3:51","nodeType":"YulTypedName","src":"687:3:51","type":""},{"name":"length","nativeSrc":"692:6:51","nodeType":"YulTypedName","src":"692:6:51","type":""}],"src":"638:250:51"},{"body":{"nativeSrc":"943:280:51","nodeType":"YulBlock","src":"943:280:51","statements":[{"nativeSrc":"953:26:51","nodeType":"YulVariableDeclaration","src":"953:26:51","value":{"arguments":[{"name":"value","nativeSrc":"973:5:51","nodeType":"YulIdentifier","src":"973:5:51"}],"functionName":{"name":"mload","nativeSrc":"967:5:51","nodeType":"YulIdentifier","src":"967:5:51"},"nativeSrc":"967:12:51","nodeType":"YulFunctionCall","src":"967:12:51"},"variables":[{"name":"length","nativeSrc":"957:6:51","nodeType":"YulTypedName","src":"957:6:51","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"995:3:51","nodeType":"YulIdentifier","src":"995:3:51"},{"name":"length","nativeSrc":"1000:6:51","nodeType":"YulIdentifier","src":"1000:6:51"}],"functionName":{"name":"mstore","nativeSrc":"988:6:51","nodeType":"YulIdentifier","src":"988:6:51"},"nativeSrc":"988:19:51","nodeType":"YulFunctionCall","src":"988:19:51"},"nativeSrc":"988:19:51","nodeType":"YulExpressionStatement","src":"988:19:51"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1055:5:51","nodeType":"YulIdentifier","src":"1055:5:51"},{"kind":"number","nativeSrc":"1062:4:51","nodeType":"YulLiteral","src":"1062:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1051:3:51","nodeType":"YulIdentifier","src":"1051:3:51"},"nativeSrc":"1051:16:51","nodeType":"YulFunctionCall","src":"1051:16:51"},{"arguments":[{"name":"pos","nativeSrc":"1073:3:51","nodeType":"YulIdentifier","src":"1073:3:51"},{"kind":"number","nativeSrc":"1078:4:51","nodeType":"YulLiteral","src":"1078:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1069:3:51","nodeType":"YulIdentifier","src":"1069:3:51"},"nativeSrc":"1069:14:51","nodeType":"YulFunctionCall","src":"1069:14:51"},{"name":"length","nativeSrc":"1085:6:51","nodeType":"YulIdentifier","src":"1085:6:51"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1016:34:51","nodeType":"YulIdentifier","src":"1016:34:51"},"nativeSrc":"1016:76:51","nodeType":"YulFunctionCall","src":"1016:76:51"},"nativeSrc":"1016:76:51","nodeType":"YulExpressionStatement","src":"1016:76:51"},{"nativeSrc":"1101:116:51","nodeType":"YulAssignment","src":"1101:116:51","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1116:3:51","nodeType":"YulIdentifier","src":"1116:3:51"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1129:6:51","nodeType":"YulIdentifier","src":"1129:6:51"},{"kind":"number","nativeSrc":"1137:2:51","nodeType":"YulLiteral","src":"1137:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1125:3:51","nodeType":"YulIdentifier","src":"1125:3:51"},"nativeSrc":"1125:15:51","nodeType":"YulFunctionCall","src":"1125:15:51"},{"kind":"number","nativeSrc":"1142:66:51","nodeType":"YulLiteral","src":"1142:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1121:3:51","nodeType":"YulIdentifier","src":"1121:3:51"},"nativeSrc":"1121:88:51","nodeType":"YulFunctionCall","src":"1121:88:51"}],"functionName":{"name":"add","nativeSrc":"1112:3:51","nodeType":"YulIdentifier","src":"1112:3:51"},"nativeSrc":"1112:98:51","nodeType":"YulFunctionCall","src":"1112:98:51"},{"kind":"number","nativeSrc":"1212:4:51","nodeType":"YulLiteral","src":"1212:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1108:3:51","nodeType":"YulIdentifier","src":"1108:3:51"},"nativeSrc":"1108:109:51","nodeType":"YulFunctionCall","src":"1108:109:51"},"variableNames":[{"name":"end","nativeSrc":"1101:3:51","nodeType":"YulIdentifier","src":"1101:3:51"}]}]},"name":"abi_encode_string","nativeSrc":"893:330:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"920:5:51","nodeType":"YulTypedName","src":"920:5:51","type":""},{"name":"pos","nativeSrc":"927:3:51","nodeType":"YulTypedName","src":"927:3:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"935:3:51","nodeType":"YulTypedName","src":"935:3:51","type":""}],"src":"893:330:51"},{"body":{"nativeSrc":"1349:99:51","nodeType":"YulBlock","src":"1349:99:51","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1366:9:51","nodeType":"YulIdentifier","src":"1366:9:51"},{"kind":"number","nativeSrc":"1377:2:51","nodeType":"YulLiteral","src":"1377:2:51","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:51","nodeType":"YulIdentifier","src":"1359:6:51"},"nativeSrc":"1359:21:51","nodeType":"YulFunctionCall","src":"1359:21:51"},"nativeSrc":"1359:21:51","nodeType":"YulExpressionStatement","src":"1359:21:51"},{"nativeSrc":"1389:53:51","nodeType":"YulAssignment","src":"1389:53:51","value":{"arguments":[{"name":"value0","nativeSrc":"1415:6:51","nodeType":"YulIdentifier","src":"1415:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"1427:9:51","nodeType":"YulIdentifier","src":"1427:9:51"},{"kind":"number","nativeSrc":"1438:2:51","nodeType":"YulLiteral","src":"1438:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1423:3:51","nodeType":"YulIdentifier","src":"1423:3:51"},"nativeSrc":"1423:18:51","nodeType":"YulFunctionCall","src":"1423:18:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"1397:17:51","nodeType":"YulIdentifier","src":"1397:17:51"},"nativeSrc":"1397:45:51","nodeType":"YulFunctionCall","src":"1397:45:51"},"variableNames":[{"name":"tail","nativeSrc":"1389:4:51","nodeType":"YulIdentifier","src":"1389:4:51"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1228:220:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1318:9:51","nodeType":"YulTypedName","src":"1318:9:51","type":""},{"name":"value0","nativeSrc":"1329:6:51","nodeType":"YulTypedName","src":"1329:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1340:4:51","nodeType":"YulTypedName","src":"1340:4:51","type":""}],"src":"1228:220:51"},{"body":{"nativeSrc":"1523:110:51","nodeType":"YulBlock","src":"1523:110:51","statements":[{"body":{"nativeSrc":"1569:16:51","nodeType":"YulBlock","src":"1569:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1578:1:51","nodeType":"YulLiteral","src":"1578:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"1581:1:51","nodeType":"YulLiteral","src":"1581:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1571:6:51","nodeType":"YulIdentifier","src":"1571:6:51"},"nativeSrc":"1571:12:51","nodeType":"YulFunctionCall","src":"1571:12:51"},"nativeSrc":"1571:12:51","nodeType":"YulExpressionStatement","src":"1571:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1544:7:51","nodeType":"YulIdentifier","src":"1544:7:51"},{"name":"headStart","nativeSrc":"1553:9:51","nodeType":"YulIdentifier","src":"1553:9:51"}],"functionName":{"name":"sub","nativeSrc":"1540:3:51","nodeType":"YulIdentifier","src":"1540:3:51"},"nativeSrc":"1540:23:51","nodeType":"YulFunctionCall","src":"1540:23:51"},{"kind":"number","nativeSrc":"1565:2:51","nodeType":"YulLiteral","src":"1565:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1536:3:51","nodeType":"YulIdentifier","src":"1536:3:51"},"nativeSrc":"1536:32:51","nodeType":"YulFunctionCall","src":"1536:32:51"},"nativeSrc":"1533:52:51","nodeType":"YulIf","src":"1533:52:51"},{"nativeSrc":"1594:33:51","nodeType":"YulAssignment","src":"1594:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1617:9:51","nodeType":"YulIdentifier","src":"1617:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"1604:12:51","nodeType":"YulIdentifier","src":"1604:12:51"},"nativeSrc":"1604:23:51","nodeType":"YulFunctionCall","src":"1604:23:51"},"variableNames":[{"name":"value0","nativeSrc":"1594:6:51","nodeType":"YulIdentifier","src":"1594:6:51"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1453:180:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1489:9:51","nodeType":"YulTypedName","src":"1489:9:51","type":""},{"name":"dataEnd","nativeSrc":"1500:7:51","nodeType":"YulTypedName","src":"1500:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1512:6:51","nodeType":"YulTypedName","src":"1512:6:51","type":""}],"src":"1453:180:51"},{"body":{"nativeSrc":"1739:125:51","nodeType":"YulBlock","src":"1739:125:51","statements":[{"nativeSrc":"1749:26:51","nodeType":"YulAssignment","src":"1749:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"1761:9:51","nodeType":"YulIdentifier","src":"1761:9:51"},{"kind":"number","nativeSrc":"1772:2:51","nodeType":"YulLiteral","src":"1772:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1757:3:51","nodeType":"YulIdentifier","src":"1757:3:51"},"nativeSrc":"1757:18:51","nodeType":"YulFunctionCall","src":"1757:18:51"},"variableNames":[{"name":"tail","nativeSrc":"1749:4:51","nodeType":"YulIdentifier","src":"1749:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1791:9:51","nodeType":"YulIdentifier","src":"1791:9:51"},{"arguments":[{"name":"value0","nativeSrc":"1806:6:51","nodeType":"YulIdentifier","src":"1806:6:51"},{"kind":"number","nativeSrc":"1814:42:51","nodeType":"YulLiteral","src":"1814:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1802:3:51","nodeType":"YulIdentifier","src":"1802:3:51"},"nativeSrc":"1802:55:51","nodeType":"YulFunctionCall","src":"1802:55:51"}],"functionName":{"name":"mstore","nativeSrc":"1784:6:51","nodeType":"YulIdentifier","src":"1784:6:51"},"nativeSrc":"1784:74:51","nodeType":"YulFunctionCall","src":"1784:74:51"},"nativeSrc":"1784:74:51","nodeType":"YulExpressionStatement","src":"1784:74:51"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1638:226:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1708:9:51","nodeType":"YulTypedName","src":"1708:9:51","type":""},{"name":"value0","nativeSrc":"1719:6:51","nodeType":"YulTypedName","src":"1719:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1730:4:51","nodeType":"YulTypedName","src":"1730:4:51","type":""}],"src":"1638:226:51"},{"body":{"nativeSrc":"1914:109:51","nodeType":"YulBlock","src":"1914:109:51","statements":[{"body":{"nativeSrc":"2001:16:51","nodeType":"YulBlock","src":"2001:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2010:1:51","nodeType":"YulLiteral","src":"2010:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2013:1:51","nodeType":"YulLiteral","src":"2013:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2003:6:51","nodeType":"YulIdentifier","src":"2003:6:51"},"nativeSrc":"2003:12:51","nodeType":"YulFunctionCall","src":"2003:12:51"},"nativeSrc":"2003:12:51","nodeType":"YulExpressionStatement","src":"2003:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1937:5:51","nodeType":"YulIdentifier","src":"1937:5:51"},{"arguments":[{"name":"value","nativeSrc":"1948:5:51","nodeType":"YulIdentifier","src":"1948:5:51"},{"kind":"number","nativeSrc":"1955:42:51","nodeType":"YulLiteral","src":"1955:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1944:3:51","nodeType":"YulIdentifier","src":"1944:3:51"},"nativeSrc":"1944:54:51","nodeType":"YulFunctionCall","src":"1944:54:51"}],"functionName":{"name":"eq","nativeSrc":"1934:2:51","nodeType":"YulIdentifier","src":"1934:2:51"},"nativeSrc":"1934:65:51","nodeType":"YulFunctionCall","src":"1934:65:51"}],"functionName":{"name":"iszero","nativeSrc":"1927:6:51","nodeType":"YulIdentifier","src":"1927:6:51"},"nativeSrc":"1927:73:51","nodeType":"YulFunctionCall","src":"1927:73:51"},"nativeSrc":"1924:93:51","nodeType":"YulIf","src":"1924:93:51"}]},"name":"validator_revert_address","nativeSrc":"1869:154:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1903:5:51","nodeType":"YulTypedName","src":"1903:5:51","type":""}],"src":"1869:154:51"},{"body":{"nativeSrc":"2115:228:51","nodeType":"YulBlock","src":"2115:228:51","statements":[{"body":{"nativeSrc":"2161:16:51","nodeType":"YulBlock","src":"2161:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2170:1:51","nodeType":"YulLiteral","src":"2170:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2173:1:51","nodeType":"YulLiteral","src":"2173:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2163:6:51","nodeType":"YulIdentifier","src":"2163:6:51"},"nativeSrc":"2163:12:51","nodeType":"YulFunctionCall","src":"2163:12:51"},"nativeSrc":"2163:12:51","nodeType":"YulExpressionStatement","src":"2163:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2136:7:51","nodeType":"YulIdentifier","src":"2136:7:51"},{"name":"headStart","nativeSrc":"2145:9:51","nodeType":"YulIdentifier","src":"2145:9:51"}],"functionName":{"name":"sub","nativeSrc":"2132:3:51","nodeType":"YulIdentifier","src":"2132:3:51"},"nativeSrc":"2132:23:51","nodeType":"YulFunctionCall","src":"2132:23:51"},{"kind":"number","nativeSrc":"2157:2:51","nodeType":"YulLiteral","src":"2157:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2128:3:51","nodeType":"YulIdentifier","src":"2128:3:51"},"nativeSrc":"2128:32:51","nodeType":"YulFunctionCall","src":"2128:32:51"},"nativeSrc":"2125:52:51","nodeType":"YulIf","src":"2125:52:51"},{"nativeSrc":"2186:36:51","nodeType":"YulVariableDeclaration","src":"2186:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2212:9:51","nodeType":"YulIdentifier","src":"2212:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2199:12:51","nodeType":"YulIdentifier","src":"2199:12:51"},"nativeSrc":"2199:23:51","nodeType":"YulFunctionCall","src":"2199:23:51"},"variables":[{"name":"value","nativeSrc":"2190:5:51","nodeType":"YulTypedName","src":"2190:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2256:5:51","nodeType":"YulIdentifier","src":"2256:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2231:24:51","nodeType":"YulIdentifier","src":"2231:24:51"},"nativeSrc":"2231:31:51","nodeType":"YulFunctionCall","src":"2231:31:51"},"nativeSrc":"2231:31:51","nodeType":"YulExpressionStatement","src":"2231:31:51"},{"nativeSrc":"2271:15:51","nodeType":"YulAssignment","src":"2271:15:51","value":{"name":"value","nativeSrc":"2281:5:51","nodeType":"YulIdentifier","src":"2281:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2271:6:51","nodeType":"YulIdentifier","src":"2271:6:51"}]},{"nativeSrc":"2295:42:51","nodeType":"YulAssignment","src":"2295:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2322:9:51","nodeType":"YulIdentifier","src":"2322:9:51"},{"kind":"number","nativeSrc":"2333:2:51","nodeType":"YulLiteral","src":"2333:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2318:3:51","nodeType":"YulIdentifier","src":"2318:3:51"},"nativeSrc":"2318:18:51","nodeType":"YulFunctionCall","src":"2318:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2305:12:51","nodeType":"YulIdentifier","src":"2305:12:51"},"nativeSrc":"2305:32:51","nodeType":"YulFunctionCall","src":"2305:32:51"},"variableNames":[{"name":"value1","nativeSrc":"2295:6:51","nodeType":"YulIdentifier","src":"2295:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2028:315:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2073:9:51","nodeType":"YulTypedName","src":"2073:9:51","type":""},{"name":"dataEnd","nativeSrc":"2084:7:51","nodeType":"YulTypedName","src":"2084:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2096:6:51","nodeType":"YulTypedName","src":"2096:6:51","type":""},{"name":"value1","nativeSrc":"2104:6:51","nodeType":"YulTypedName","src":"2104:6:51","type":""}],"src":"2028:315:51"},{"body":{"nativeSrc":"2452:352:51","nodeType":"YulBlock","src":"2452:352:51","statements":[{"body":{"nativeSrc":"2498:16:51","nodeType":"YulBlock","src":"2498:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2507:1:51","nodeType":"YulLiteral","src":"2507:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"2510:1:51","nodeType":"YulLiteral","src":"2510:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2500:6:51","nodeType":"YulIdentifier","src":"2500:6:51"},"nativeSrc":"2500:12:51","nodeType":"YulFunctionCall","src":"2500:12:51"},"nativeSrc":"2500:12:51","nodeType":"YulExpressionStatement","src":"2500:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2473:7:51","nodeType":"YulIdentifier","src":"2473:7:51"},{"name":"headStart","nativeSrc":"2482:9:51","nodeType":"YulIdentifier","src":"2482:9:51"}],"functionName":{"name":"sub","nativeSrc":"2469:3:51","nodeType":"YulIdentifier","src":"2469:3:51"},"nativeSrc":"2469:23:51","nodeType":"YulFunctionCall","src":"2469:23:51"},{"kind":"number","nativeSrc":"2494:2:51","nodeType":"YulLiteral","src":"2494:2:51","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2465:3:51","nodeType":"YulIdentifier","src":"2465:3:51"},"nativeSrc":"2465:32:51","nodeType":"YulFunctionCall","src":"2465:32:51"},"nativeSrc":"2462:52:51","nodeType":"YulIf","src":"2462:52:51"},{"nativeSrc":"2523:36:51","nodeType":"YulVariableDeclaration","src":"2523:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2549:9:51","nodeType":"YulIdentifier","src":"2549:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"2536:12:51","nodeType":"YulIdentifier","src":"2536:12:51"},"nativeSrc":"2536:23:51","nodeType":"YulFunctionCall","src":"2536:23:51"},"variables":[{"name":"value","nativeSrc":"2527:5:51","nodeType":"YulTypedName","src":"2527:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2593:5:51","nodeType":"YulIdentifier","src":"2593:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2568:24:51","nodeType":"YulIdentifier","src":"2568:24:51"},"nativeSrc":"2568:31:51","nodeType":"YulFunctionCall","src":"2568:31:51"},"nativeSrc":"2568:31:51","nodeType":"YulExpressionStatement","src":"2568:31:51"},{"nativeSrc":"2608:15:51","nodeType":"YulAssignment","src":"2608:15:51","value":{"name":"value","nativeSrc":"2618:5:51","nodeType":"YulIdentifier","src":"2618:5:51"},"variableNames":[{"name":"value0","nativeSrc":"2608:6:51","nodeType":"YulIdentifier","src":"2608:6:51"}]},{"nativeSrc":"2632:47:51","nodeType":"YulVariableDeclaration","src":"2632:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2664:9:51","nodeType":"YulIdentifier","src":"2664:9:51"},{"kind":"number","nativeSrc":"2675:2:51","nodeType":"YulLiteral","src":"2675:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2660:3:51","nodeType":"YulIdentifier","src":"2660:3:51"},"nativeSrc":"2660:18:51","nodeType":"YulFunctionCall","src":"2660:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2647:12:51","nodeType":"YulIdentifier","src":"2647:12:51"},"nativeSrc":"2647:32:51","nodeType":"YulFunctionCall","src":"2647:32:51"},"variables":[{"name":"value_1","nativeSrc":"2636:7:51","nodeType":"YulTypedName","src":"2636:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2713:7:51","nodeType":"YulIdentifier","src":"2713:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2688:24:51","nodeType":"YulIdentifier","src":"2688:24:51"},"nativeSrc":"2688:33:51","nodeType":"YulFunctionCall","src":"2688:33:51"},"nativeSrc":"2688:33:51","nodeType":"YulExpressionStatement","src":"2688:33:51"},{"nativeSrc":"2730:17:51","nodeType":"YulAssignment","src":"2730:17:51","value":{"name":"value_1","nativeSrc":"2740:7:51","nodeType":"YulIdentifier","src":"2740:7:51"},"variableNames":[{"name":"value1","nativeSrc":"2730:6:51","nodeType":"YulIdentifier","src":"2730:6:51"}]},{"nativeSrc":"2756:42:51","nodeType":"YulAssignment","src":"2756:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2783:9:51","nodeType":"YulIdentifier","src":"2783:9:51"},{"kind":"number","nativeSrc":"2794:2:51","nodeType":"YulLiteral","src":"2794:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2779:3:51","nodeType":"YulIdentifier","src":"2779:3:51"},"nativeSrc":"2779:18:51","nodeType":"YulFunctionCall","src":"2779:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"2766:12:51","nodeType":"YulIdentifier","src":"2766:12:51"},"nativeSrc":"2766:32:51","nodeType":"YulFunctionCall","src":"2766:32:51"},"variableNames":[{"name":"value2","nativeSrc":"2756:6:51","nodeType":"YulIdentifier","src":"2756:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"2348:456:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2402:9:51","nodeType":"YulTypedName","src":"2402:9:51","type":""},{"name":"dataEnd","nativeSrc":"2413:7:51","nodeType":"YulTypedName","src":"2413:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2425:6:51","nodeType":"YulTypedName","src":"2425:6:51","type":""},{"name":"value1","nativeSrc":"2433:6:51","nodeType":"YulTypedName","src":"2433:6:51","type":""},{"name":"value2","nativeSrc":"2441:6:51","nodeType":"YulTypedName","src":"2441:6:51","type":""}],"src":"2348:456:51"},{"body":{"nativeSrc":"2937:125:51","nodeType":"YulBlock","src":"2937:125:51","statements":[{"nativeSrc":"2947:26:51","nodeType":"YulAssignment","src":"2947:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"2959:9:51","nodeType":"YulIdentifier","src":"2959:9:51"},{"kind":"number","nativeSrc":"2970:2:51","nodeType":"YulLiteral","src":"2970:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2955:3:51","nodeType":"YulIdentifier","src":"2955:3:51"},"nativeSrc":"2955:18:51","nodeType":"YulFunctionCall","src":"2955:18:51"},"variableNames":[{"name":"tail","nativeSrc":"2947:4:51","nodeType":"YulIdentifier","src":"2947:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2989:9:51","nodeType":"YulIdentifier","src":"2989:9:51"},{"arguments":[{"name":"value0","nativeSrc":"3004:6:51","nodeType":"YulIdentifier","src":"3004:6:51"},{"kind":"number","nativeSrc":"3012:42:51","nodeType":"YulLiteral","src":"3012:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3000:3:51","nodeType":"YulIdentifier","src":"3000:3:51"},"nativeSrc":"3000:55:51","nodeType":"YulFunctionCall","src":"3000:55:51"}],"functionName":{"name":"mstore","nativeSrc":"2982:6:51","nodeType":"YulIdentifier","src":"2982:6:51"},"nativeSrc":"2982:74:51","nodeType":"YulFunctionCall","src":"2982:74:51"},"nativeSrc":"2982:74:51","nodeType":"YulExpressionStatement","src":"2982:74:51"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed","nativeSrc":"2809:253:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2906:9:51","nodeType":"YulTypedName","src":"2906:9:51","type":""},{"name":"value0","nativeSrc":"2917:6:51","nodeType":"YulTypedName","src":"2917:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2928:4:51","nodeType":"YulTypedName","src":"2928:4:51","type":""}],"src":"2809:253:51"},{"body":{"nativeSrc":"3154:228:51","nodeType":"YulBlock","src":"3154:228:51","statements":[{"body":{"nativeSrc":"3200:16:51","nodeType":"YulBlock","src":"3200:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3209:1:51","nodeType":"YulLiteral","src":"3209:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"3212:1:51","nodeType":"YulLiteral","src":"3212:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3202:6:51","nodeType":"YulIdentifier","src":"3202:6:51"},"nativeSrc":"3202:12:51","nodeType":"YulFunctionCall","src":"3202:12:51"},"nativeSrc":"3202:12:51","nodeType":"YulExpressionStatement","src":"3202:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3175:7:51","nodeType":"YulIdentifier","src":"3175:7:51"},{"name":"headStart","nativeSrc":"3184:9:51","nodeType":"YulIdentifier","src":"3184:9:51"}],"functionName":{"name":"sub","nativeSrc":"3171:3:51","nodeType":"YulIdentifier","src":"3171:3:51"},"nativeSrc":"3171:23:51","nodeType":"YulFunctionCall","src":"3171:23:51"},{"kind":"number","nativeSrc":"3196:2:51","nodeType":"YulLiteral","src":"3196:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3167:3:51","nodeType":"YulIdentifier","src":"3167:3:51"},"nativeSrc":"3167:32:51","nodeType":"YulFunctionCall","src":"3167:32:51"},"nativeSrc":"3164:52:51","nodeType":"YulIf","src":"3164:52:51"},{"nativeSrc":"3225:33:51","nodeType":"YulAssignment","src":"3225:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"3248:9:51","nodeType":"YulIdentifier","src":"3248:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"3235:12:51","nodeType":"YulIdentifier","src":"3235:12:51"},"nativeSrc":"3235:23:51","nodeType":"YulFunctionCall","src":"3235:23:51"},"variableNames":[{"name":"value0","nativeSrc":"3225:6:51","nodeType":"YulIdentifier","src":"3225:6:51"}]},{"nativeSrc":"3267:45:51","nodeType":"YulVariableDeclaration","src":"3267:45:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3297:9:51","nodeType":"YulIdentifier","src":"3297:9:51"},{"kind":"number","nativeSrc":"3308:2:51","nodeType":"YulLiteral","src":"3308:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3293:3:51","nodeType":"YulIdentifier","src":"3293:3:51"},"nativeSrc":"3293:18:51","nodeType":"YulFunctionCall","src":"3293:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"3280:12:51","nodeType":"YulIdentifier","src":"3280:12:51"},"nativeSrc":"3280:32:51","nodeType":"YulFunctionCall","src":"3280:32:51"},"variables":[{"name":"value","nativeSrc":"3271:5:51","nodeType":"YulTypedName","src":"3271:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3346:5:51","nodeType":"YulIdentifier","src":"3346:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3321:24:51","nodeType":"YulIdentifier","src":"3321:24:51"},"nativeSrc":"3321:31:51","nodeType":"YulFunctionCall","src":"3321:31:51"},"nativeSrc":"3321:31:51","nodeType":"YulExpressionStatement","src":"3321:31:51"},{"nativeSrc":"3361:15:51","nodeType":"YulAssignment","src":"3361:15:51","value":{"name":"value","nativeSrc":"3371:5:51","nodeType":"YulIdentifier","src":"3371:5:51"},"variableNames":[{"name":"value1","nativeSrc":"3361:6:51","nodeType":"YulIdentifier","src":"3361:6:51"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"3067:315:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3112:9:51","nodeType":"YulTypedName","src":"3112:9:51","type":""},{"name":"dataEnd","nativeSrc":"3123:7:51","nodeType":"YulTypedName","src":"3123:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3135:6:51","nodeType":"YulTypedName","src":"3135:6:51","type":""},{"name":"value1","nativeSrc":"3143:6:51","nodeType":"YulTypedName","src":"3143:6:51","type":""}],"src":"3067:315:51"},{"body":{"nativeSrc":"3686:541:51","nodeType":"YulBlock","src":"3686:541:51","statements":[{"nativeSrc":"3696:16:51","nodeType":"YulVariableDeclaration","src":"3696:16:51","value":{"kind":"number","nativeSrc":"3706:6:51","nodeType":"YulLiteral","src":"3706:6:51","type":"","value":"0xffff"},"variables":[{"name":"_1","nativeSrc":"3700:2:51","nodeType":"YulTypedName","src":"3700:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3728:9:51","nodeType":"YulIdentifier","src":"3728:9:51"},{"arguments":[{"name":"value0","nativeSrc":"3743:6:51","nodeType":"YulIdentifier","src":"3743:6:51"},{"name":"_1","nativeSrc":"3751:2:51","nodeType":"YulIdentifier","src":"3751:2:51"}],"functionName":{"name":"and","nativeSrc":"3739:3:51","nodeType":"YulIdentifier","src":"3739:3:51"},"nativeSrc":"3739:15:51","nodeType":"YulFunctionCall","src":"3739:15:51"}],"functionName":{"name":"mstore","nativeSrc":"3721:6:51","nodeType":"YulIdentifier","src":"3721:6:51"},"nativeSrc":"3721:34:51","nodeType":"YulFunctionCall","src":"3721:34:51"},"nativeSrc":"3721:34:51","nodeType":"YulExpressionStatement","src":"3721:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3775:9:51","nodeType":"YulIdentifier","src":"3775:9:51"},{"kind":"number","nativeSrc":"3786:2:51","nodeType":"YulLiteral","src":"3786:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3771:3:51","nodeType":"YulIdentifier","src":"3771:3:51"},"nativeSrc":"3771:18:51","nodeType":"YulFunctionCall","src":"3771:18:51"},{"arguments":[{"name":"value1","nativeSrc":"3795:6:51","nodeType":"YulIdentifier","src":"3795:6:51"},{"name":"_1","nativeSrc":"3803:2:51","nodeType":"YulIdentifier","src":"3803:2:51"}],"functionName":{"name":"and","nativeSrc":"3791:3:51","nodeType":"YulIdentifier","src":"3791:3:51"},"nativeSrc":"3791:15:51","nodeType":"YulFunctionCall","src":"3791:15:51"}],"functionName":{"name":"mstore","nativeSrc":"3764:6:51","nodeType":"YulIdentifier","src":"3764:6:51"},"nativeSrc":"3764:43:51","nodeType":"YulFunctionCall","src":"3764:43:51"},"nativeSrc":"3764:43:51","nodeType":"YulExpressionStatement","src":"3764:43:51"},{"nativeSrc":"3816:28:51","nodeType":"YulVariableDeclaration","src":"3816:28:51","value":{"kind":"number","nativeSrc":"3826:18:51","nodeType":"YulLiteral","src":"3826:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"3820:2:51","nodeType":"YulTypedName","src":"3820:2:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3864:9:51","nodeType":"YulIdentifier","src":"3864:9:51"},{"kind":"number","nativeSrc":"3875:2:51","nodeType":"YulLiteral","src":"3875:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3860:3:51","nodeType":"YulIdentifier","src":"3860:3:51"},"nativeSrc":"3860:18:51","nodeType":"YulFunctionCall","src":"3860:18:51"},{"arguments":[{"name":"value2","nativeSrc":"3884:6:51","nodeType":"YulIdentifier","src":"3884:6:51"},{"name":"_2","nativeSrc":"3892:2:51","nodeType":"YulIdentifier","src":"3892:2:51"}],"functionName":{"name":"and","nativeSrc":"3880:3:51","nodeType":"YulIdentifier","src":"3880:3:51"},"nativeSrc":"3880:15:51","nodeType":"YulFunctionCall","src":"3880:15:51"}],"functionName":{"name":"mstore","nativeSrc":"3853:6:51","nodeType":"YulIdentifier","src":"3853:6:51"},"nativeSrc":"3853:43:51","nodeType":"YulFunctionCall","src":"3853:43:51"},"nativeSrc":"3853:43:51","nodeType":"YulExpressionStatement","src":"3853:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3916:9:51","nodeType":"YulIdentifier","src":"3916:9:51"},{"kind":"number","nativeSrc":"3927:2:51","nodeType":"YulLiteral","src":"3927:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3912:3:51","nodeType":"YulIdentifier","src":"3912:3:51"},"nativeSrc":"3912:18:51","nodeType":"YulFunctionCall","src":"3912:18:51"},{"arguments":[{"name":"value3","nativeSrc":"3936:6:51","nodeType":"YulIdentifier","src":"3936:6:51"},{"name":"_2","nativeSrc":"3944:2:51","nodeType":"YulIdentifier","src":"3944:2:51"}],"functionName":{"name":"and","nativeSrc":"3932:3:51","nodeType":"YulIdentifier","src":"3932:3:51"},"nativeSrc":"3932:15:51","nodeType":"YulFunctionCall","src":"3932:15:51"}],"functionName":{"name":"mstore","nativeSrc":"3905:6:51","nodeType":"YulIdentifier","src":"3905:6:51"},"nativeSrc":"3905:43:51","nodeType":"YulFunctionCall","src":"3905:43:51"},"nativeSrc":"3905:43:51","nodeType":"YulExpressionStatement","src":"3905:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3968:9:51","nodeType":"YulIdentifier","src":"3968:9:51"},{"kind":"number","nativeSrc":"3979:3:51","nodeType":"YulLiteral","src":"3979:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3964:3:51","nodeType":"YulIdentifier","src":"3964:3:51"},"nativeSrc":"3964:19:51","nodeType":"YulFunctionCall","src":"3964:19:51"},{"arguments":[{"name":"value4","nativeSrc":"3989:6:51","nodeType":"YulIdentifier","src":"3989:6:51"},{"name":"_2","nativeSrc":"3997:2:51","nodeType":"YulIdentifier","src":"3997:2:51"}],"functionName":{"name":"and","nativeSrc":"3985:3:51","nodeType":"YulIdentifier","src":"3985:3:51"},"nativeSrc":"3985:15:51","nodeType":"YulFunctionCall","src":"3985:15:51"}],"functionName":{"name":"mstore","nativeSrc":"3957:6:51","nodeType":"YulIdentifier","src":"3957:6:51"},"nativeSrc":"3957:44:51","nodeType":"YulFunctionCall","src":"3957:44:51"},"nativeSrc":"3957:44:51","nodeType":"YulExpressionStatement","src":"3957:44:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4021:9:51","nodeType":"YulIdentifier","src":"4021:9:51"},{"kind":"number","nativeSrc":"4032:3:51","nodeType":"YulLiteral","src":"4032:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4017:3:51","nodeType":"YulIdentifier","src":"4017:3:51"},"nativeSrc":"4017:19:51","nodeType":"YulFunctionCall","src":"4017:19:51"},{"kind":"number","nativeSrc":"4038:3:51","nodeType":"YulLiteral","src":"4038:3:51","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"4010:6:51","nodeType":"YulIdentifier","src":"4010:6:51"},"nativeSrc":"4010:32:51","nodeType":"YulFunctionCall","src":"4010:32:51"},"nativeSrc":"4010:32:51","nodeType":"YulExpressionStatement","src":"4010:32:51"},{"nativeSrc":"4051:60:51","nodeType":"YulVariableDeclaration","src":"4051:60:51","value":{"arguments":[{"name":"value5","nativeSrc":"4083:6:51","nodeType":"YulIdentifier","src":"4083:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"4095:9:51","nodeType":"YulIdentifier","src":"4095:9:51"},{"kind":"number","nativeSrc":"4106:3:51","nodeType":"YulLiteral","src":"4106:3:51","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"4091:3:51","nodeType":"YulIdentifier","src":"4091:3:51"},"nativeSrc":"4091:19:51","nodeType":"YulFunctionCall","src":"4091:19:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"4065:17:51","nodeType":"YulIdentifier","src":"4065:17:51"},"nativeSrc":"4065:46:51","nodeType":"YulFunctionCall","src":"4065:46:51"},"variables":[{"name":"tail_1","nativeSrc":"4055:6:51","nodeType":"YulTypedName","src":"4055:6:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4131:9:51","nodeType":"YulIdentifier","src":"4131:9:51"},{"kind":"number","nativeSrc":"4142:3:51","nodeType":"YulLiteral","src":"4142:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"4127:3:51","nodeType":"YulIdentifier","src":"4127:3:51"},"nativeSrc":"4127:19:51","nodeType":"YulFunctionCall","src":"4127:19:51"},{"arguments":[{"name":"tail_1","nativeSrc":"4152:6:51","nodeType":"YulIdentifier","src":"4152:6:51"},{"name":"headStart","nativeSrc":"4160:9:51","nodeType":"YulIdentifier","src":"4160:9:51"}],"functionName":{"name":"sub","nativeSrc":"4148:3:51","nodeType":"YulIdentifier","src":"4148:3:51"},"nativeSrc":"4148:22:51","nodeType":"YulFunctionCall","src":"4148:22:51"}],"functionName":{"name":"mstore","nativeSrc":"4120:6:51","nodeType":"YulIdentifier","src":"4120:6:51"},"nativeSrc":"4120:51:51","nodeType":"YulFunctionCall","src":"4120:51:51"},"nativeSrc":"4120:51:51","nodeType":"YulExpressionStatement","src":"4120:51:51"},{"nativeSrc":"4180:41:51","nodeType":"YulAssignment","src":"4180:41:51","value":{"arguments":[{"name":"value6","nativeSrc":"4206:6:51","nodeType":"YulIdentifier","src":"4206:6:51"},{"name":"tail_1","nativeSrc":"4214:6:51","nodeType":"YulIdentifier","src":"4214:6:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"4188:17:51","nodeType":"YulIdentifier","src":"4188:17:51"},"nativeSrc":"4188:33:51","nodeType":"YulFunctionCall","src":"4188:33:51"},"variableNames":[{"name":"tail","nativeSrc":"4180:4:51","nodeType":"YulIdentifier","src":"4180:4:51"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3387:840:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3607:9:51","nodeType":"YulTypedName","src":"3607:9:51","type":""},{"name":"value6","nativeSrc":"3618:6:51","nodeType":"YulTypedName","src":"3618:6:51","type":""},{"name":"value5","nativeSrc":"3626:6:51","nodeType":"YulTypedName","src":"3626:6:51","type":""},{"name":"value4","nativeSrc":"3634:6:51","nodeType":"YulTypedName","src":"3634:6:51","type":""},{"name":"value3","nativeSrc":"3642:6:51","nodeType":"YulTypedName","src":"3642:6:51","type":""},{"name":"value2","nativeSrc":"3650:6:51","nodeType":"YulTypedName","src":"3650:6:51","type":""},{"name":"value1","nativeSrc":"3658:6:51","nodeType":"YulTypedName","src":"3658:6:51","type":""},{"name":"value0","nativeSrc":"3666:6:51","nodeType":"YulTypedName","src":"3666:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3677:4:51","nodeType":"YulTypedName","src":"3677:4:51","type":""}],"src":"3387:840:51"},{"body":{"nativeSrc":"4364:459:51","nodeType":"YulBlock","src":"4364:459:51","statements":[{"body":{"nativeSrc":"4410:16:51","nodeType":"YulBlock","src":"4410:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4419:1:51","nodeType":"YulLiteral","src":"4419:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"4422:1:51","nodeType":"YulLiteral","src":"4422:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4412:6:51","nodeType":"YulIdentifier","src":"4412:6:51"},"nativeSrc":"4412:12:51","nodeType":"YulFunctionCall","src":"4412:12:51"},"nativeSrc":"4412:12:51","nodeType":"YulExpressionStatement","src":"4412:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4385:7:51","nodeType":"YulIdentifier","src":"4385:7:51"},{"name":"headStart","nativeSrc":"4394:9:51","nodeType":"YulIdentifier","src":"4394:9:51"}],"functionName":{"name":"sub","nativeSrc":"4381:3:51","nodeType":"YulIdentifier","src":"4381:3:51"},"nativeSrc":"4381:23:51","nodeType":"YulFunctionCall","src":"4381:23:51"},{"kind":"number","nativeSrc":"4406:2:51","nodeType":"YulLiteral","src":"4406:2:51","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4377:3:51","nodeType":"YulIdentifier","src":"4377:3:51"},"nativeSrc":"4377:32:51","nodeType":"YulFunctionCall","src":"4377:32:51"},"nativeSrc":"4374:52:51","nodeType":"YulIf","src":"4374:52:51"},{"nativeSrc":"4435:36:51","nodeType":"YulVariableDeclaration","src":"4435:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"4461:9:51","nodeType":"YulIdentifier","src":"4461:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"4448:12:51","nodeType":"YulIdentifier","src":"4448:12:51"},"nativeSrc":"4448:23:51","nodeType":"YulFunctionCall","src":"4448:23:51"},"variables":[{"name":"value","nativeSrc":"4439:5:51","nodeType":"YulTypedName","src":"4439:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4505:5:51","nodeType":"YulIdentifier","src":"4505:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4480:24:51","nodeType":"YulIdentifier","src":"4480:24:51"},"nativeSrc":"4480:31:51","nodeType":"YulFunctionCall","src":"4480:31:51"},"nativeSrc":"4480:31:51","nodeType":"YulExpressionStatement","src":"4480:31:51"},{"nativeSrc":"4520:15:51","nodeType":"YulAssignment","src":"4520:15:51","value":{"name":"value","nativeSrc":"4530:5:51","nodeType":"YulIdentifier","src":"4530:5:51"},"variableNames":[{"name":"value0","nativeSrc":"4520:6:51","nodeType":"YulIdentifier","src":"4520:6:51"}]},{"nativeSrc":"4544:42:51","nodeType":"YulAssignment","src":"4544:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4571:9:51","nodeType":"YulIdentifier","src":"4571:9:51"},{"kind":"number","nativeSrc":"4582:2:51","nodeType":"YulLiteral","src":"4582:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4567:3:51","nodeType":"YulIdentifier","src":"4567:3:51"},"nativeSrc":"4567:18:51","nodeType":"YulFunctionCall","src":"4567:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"4554:12:51","nodeType":"YulIdentifier","src":"4554:12:51"},"nativeSrc":"4554:32:51","nodeType":"YulFunctionCall","src":"4554:32:51"},"variableNames":[{"name":"value1","nativeSrc":"4544:6:51","nodeType":"YulIdentifier","src":"4544:6:51"}]},{"nativeSrc":"4595:46:51","nodeType":"YulVariableDeclaration","src":"4595:46:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4626:9:51","nodeType":"YulIdentifier","src":"4626:9:51"},{"kind":"number","nativeSrc":"4637:2:51","nodeType":"YulLiteral","src":"4637:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4622:3:51","nodeType":"YulIdentifier","src":"4622:3:51"},"nativeSrc":"4622:18:51","nodeType":"YulFunctionCall","src":"4622:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"4609:12:51","nodeType":"YulIdentifier","src":"4609:12:51"},"nativeSrc":"4609:32:51","nodeType":"YulFunctionCall","src":"4609:32:51"},"variables":[{"name":"offset","nativeSrc":"4599:6:51","nodeType":"YulTypedName","src":"4599:6:51","type":""}]},{"body":{"nativeSrc":"4684:16:51","nodeType":"YulBlock","src":"4684:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4693:1:51","nodeType":"YulLiteral","src":"4693:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"4696:1:51","nodeType":"YulLiteral","src":"4696:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4686:6:51","nodeType":"YulIdentifier","src":"4686:6:51"},"nativeSrc":"4686:12:51","nodeType":"YulFunctionCall","src":"4686:12:51"},"nativeSrc":"4686:12:51","nodeType":"YulExpressionStatement","src":"4686:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4656:6:51","nodeType":"YulIdentifier","src":"4656:6:51"},{"kind":"number","nativeSrc":"4664:18:51","nodeType":"YulLiteral","src":"4664:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4653:2:51","nodeType":"YulIdentifier","src":"4653:2:51"},"nativeSrc":"4653:30:51","nodeType":"YulFunctionCall","src":"4653:30:51"},"nativeSrc":"4650:50:51","nodeType":"YulIf","src":"4650:50:51"},{"nativeSrc":"4709:32:51","nodeType":"YulVariableDeclaration","src":"4709:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"4723:9:51","nodeType":"YulIdentifier","src":"4723:9:51"},{"name":"offset","nativeSrc":"4734:6:51","nodeType":"YulIdentifier","src":"4734:6:51"}],"functionName":{"name":"add","nativeSrc":"4719:3:51","nodeType":"YulIdentifier","src":"4719:3:51"},"nativeSrc":"4719:22:51","nodeType":"YulFunctionCall","src":"4719:22:51"},"variables":[{"name":"_1","nativeSrc":"4713:2:51","nodeType":"YulTypedName","src":"4713:2:51","type":""}]},{"body":{"nativeSrc":"4780:16:51","nodeType":"YulBlock","src":"4780:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4789:1:51","nodeType":"YulLiteral","src":"4789:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"4792:1:51","nodeType":"YulLiteral","src":"4792:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4782:6:51","nodeType":"YulIdentifier","src":"4782:6:51"},"nativeSrc":"4782:12:51","nodeType":"YulFunctionCall","src":"4782:12:51"},"nativeSrc":"4782:12:51","nodeType":"YulExpressionStatement","src":"4782:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4761:7:51","nodeType":"YulIdentifier","src":"4761:7:51"},{"name":"_1","nativeSrc":"4770:2:51","nodeType":"YulIdentifier","src":"4770:2:51"}],"functionName":{"name":"sub","nativeSrc":"4757:3:51","nodeType":"YulIdentifier","src":"4757:3:51"},"nativeSrc":"4757:16:51","nodeType":"YulFunctionCall","src":"4757:16:51"},{"kind":"number","nativeSrc":"4775:3:51","nodeType":"YulLiteral","src":"4775:3:51","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"4753:3:51","nodeType":"YulIdentifier","src":"4753:3:51"},"nativeSrc":"4753:26:51","nodeType":"YulFunctionCall","src":"4753:26:51"},"nativeSrc":"4750:46:51","nodeType":"YulIf","src":"4750:46:51"},{"nativeSrc":"4805:12:51","nodeType":"YulAssignment","src":"4805:12:51","value":{"name":"_1","nativeSrc":"4815:2:51","nodeType":"YulIdentifier","src":"4815:2:51"},"variableNames":[{"name":"value2","nativeSrc":"4805:6:51","nodeType":"YulIdentifier","src":"4805:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr","nativeSrc":"4232:591:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4314:9:51","nodeType":"YulTypedName","src":"4314:9:51","type":""},{"name":"dataEnd","nativeSrc":"4325:7:51","nodeType":"YulTypedName","src":"4325:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4337:6:51","nodeType":"YulTypedName","src":"4337:6:51","type":""},{"name":"value1","nativeSrc":"4345:6:51","nodeType":"YulTypedName","src":"4345:6:51","type":""},{"name":"value2","nativeSrc":"4353:6:51","nodeType":"YulTypedName","src":"4353:6:51","type":""}],"src":"4232:591:51"},{"body":{"nativeSrc":"4898:177:51","nodeType":"YulBlock","src":"4898:177:51","statements":[{"body":{"nativeSrc":"4944:16:51","nodeType":"YulBlock","src":"4944:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4953:1:51","nodeType":"YulLiteral","src":"4953:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"4956:1:51","nodeType":"YulLiteral","src":"4956:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4946:6:51","nodeType":"YulIdentifier","src":"4946:6:51"},"nativeSrc":"4946:12:51","nodeType":"YulFunctionCall","src":"4946:12:51"},"nativeSrc":"4946:12:51","nodeType":"YulExpressionStatement","src":"4946:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4919:7:51","nodeType":"YulIdentifier","src":"4919:7:51"},{"name":"headStart","nativeSrc":"4928:9:51","nodeType":"YulIdentifier","src":"4928:9:51"}],"functionName":{"name":"sub","nativeSrc":"4915:3:51","nodeType":"YulIdentifier","src":"4915:3:51"},"nativeSrc":"4915:23:51","nodeType":"YulFunctionCall","src":"4915:23:51"},{"kind":"number","nativeSrc":"4940:2:51","nodeType":"YulLiteral","src":"4940:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4911:3:51","nodeType":"YulIdentifier","src":"4911:3:51"},"nativeSrc":"4911:32:51","nodeType":"YulFunctionCall","src":"4911:32:51"},"nativeSrc":"4908:52:51","nodeType":"YulIf","src":"4908:52:51"},{"nativeSrc":"4969:36:51","nodeType":"YulVariableDeclaration","src":"4969:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"4995:9:51","nodeType":"YulIdentifier","src":"4995:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"4982:12:51","nodeType":"YulIdentifier","src":"4982:12:51"},"nativeSrc":"4982:23:51","nodeType":"YulFunctionCall","src":"4982:23:51"},"variables":[{"name":"value","nativeSrc":"4973:5:51","nodeType":"YulTypedName","src":"4973:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5039:5:51","nodeType":"YulIdentifier","src":"5039:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5014:24:51","nodeType":"YulIdentifier","src":"5014:24:51"},"nativeSrc":"5014:31:51","nodeType":"YulFunctionCall","src":"5014:31:51"},"nativeSrc":"5014:31:51","nodeType":"YulExpressionStatement","src":"5014:31:51"},{"nativeSrc":"5054:15:51","nodeType":"YulAssignment","src":"5054:15:51","value":{"name":"value","nativeSrc":"5064:5:51","nodeType":"YulIdentifier","src":"5064:5:51"},"variableNames":[{"name":"value0","nativeSrc":"5054:6:51","nodeType":"YulIdentifier","src":"5054:6:51"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"4828:247:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4864:9:51","nodeType":"YulTypedName","src":"4864:9:51","type":""},{"name":"dataEnd","nativeSrc":"4875:7:51","nodeType":"YulTypedName","src":"4875:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4887:6:51","nodeType":"YulTypedName","src":"4887:6:51","type":""}],"src":"4828:247:51"},{"body":{"nativeSrc":"5181:76:51","nodeType":"YulBlock","src":"5181:76:51","statements":[{"nativeSrc":"5191:26:51","nodeType":"YulAssignment","src":"5191:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5203:9:51","nodeType":"YulIdentifier","src":"5203:9:51"},{"kind":"number","nativeSrc":"5214:2:51","nodeType":"YulLiteral","src":"5214:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5199:3:51","nodeType":"YulIdentifier","src":"5199:3:51"},"nativeSrc":"5199:18:51","nodeType":"YulFunctionCall","src":"5199:18:51"},"variableNames":[{"name":"tail","nativeSrc":"5191:4:51","nodeType":"YulIdentifier","src":"5191:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5233:9:51","nodeType":"YulIdentifier","src":"5233:9:51"},{"name":"value0","nativeSrc":"5244:6:51","nodeType":"YulIdentifier","src":"5244:6:51"}],"functionName":{"name":"mstore","nativeSrc":"5226:6:51","nodeType":"YulIdentifier","src":"5226:6:51"},"nativeSrc":"5226:25:51","nodeType":"YulFunctionCall","src":"5226:25:51"},"nativeSrc":"5226:25:51","nodeType":"YulExpressionStatement","src":"5226:25:51"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5080:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5150:9:51","nodeType":"YulTypedName","src":"5150:9:51","type":""},{"name":"value0","nativeSrc":"5161:6:51","nodeType":"YulTypedName","src":"5161:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5172:4:51","nodeType":"YulTypedName","src":"5172:4:51","type":""}],"src":"5080:177:51"},{"body":{"nativeSrc":"5332:110:51","nodeType":"YulBlock","src":"5332:110:51","statements":[{"body":{"nativeSrc":"5378:16:51","nodeType":"YulBlock","src":"5378:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5387:1:51","nodeType":"YulLiteral","src":"5387:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5390:1:51","nodeType":"YulLiteral","src":"5390:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5380:6:51","nodeType":"YulIdentifier","src":"5380:6:51"},"nativeSrc":"5380:12:51","nodeType":"YulFunctionCall","src":"5380:12:51"},"nativeSrc":"5380:12:51","nodeType":"YulExpressionStatement","src":"5380:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5353:7:51","nodeType":"YulIdentifier","src":"5353:7:51"},{"name":"headStart","nativeSrc":"5362:9:51","nodeType":"YulIdentifier","src":"5362:9:51"}],"functionName":{"name":"sub","nativeSrc":"5349:3:51","nodeType":"YulIdentifier","src":"5349:3:51"},"nativeSrc":"5349:23:51","nodeType":"YulFunctionCall","src":"5349:23:51"},{"kind":"number","nativeSrc":"5374:2:51","nodeType":"YulLiteral","src":"5374:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5345:3:51","nodeType":"YulIdentifier","src":"5345:3:51"},"nativeSrc":"5345:32:51","nodeType":"YulFunctionCall","src":"5345:32:51"},"nativeSrc":"5342:52:51","nodeType":"YulIf","src":"5342:52:51"},{"nativeSrc":"5403:33:51","nodeType":"YulAssignment","src":"5403:33:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5426:9:51","nodeType":"YulIdentifier","src":"5426:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"5413:12:51","nodeType":"YulIdentifier","src":"5413:12:51"},"nativeSrc":"5413:23:51","nodeType":"YulFunctionCall","src":"5413:23:51"},"variableNames":[{"name":"value0","nativeSrc":"5403:6:51","nodeType":"YulIdentifier","src":"5403:6:51"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"5262:180:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5298:9:51","nodeType":"YulTypedName","src":"5298:9:51","type":""},{"name":"dataEnd","nativeSrc":"5309:7:51","nodeType":"YulTypedName","src":"5309:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5321:6:51","nodeType":"YulTypedName","src":"5321:6:51","type":""}],"src":"5262:180:51"},{"body":{"nativeSrc":"5545:177:51","nodeType":"YulBlock","src":"5545:177:51","statements":[{"body":{"nativeSrc":"5591:16:51","nodeType":"YulBlock","src":"5591:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5600:1:51","nodeType":"YulLiteral","src":"5600:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"5603:1:51","nodeType":"YulLiteral","src":"5603:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5593:6:51","nodeType":"YulIdentifier","src":"5593:6:51"},"nativeSrc":"5593:12:51","nodeType":"YulFunctionCall","src":"5593:12:51"},"nativeSrc":"5593:12:51","nodeType":"YulExpressionStatement","src":"5593:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5566:7:51","nodeType":"YulIdentifier","src":"5566:7:51"},{"name":"headStart","nativeSrc":"5575:9:51","nodeType":"YulIdentifier","src":"5575:9:51"}],"functionName":{"name":"sub","nativeSrc":"5562:3:51","nodeType":"YulIdentifier","src":"5562:3:51"},"nativeSrc":"5562:23:51","nodeType":"YulFunctionCall","src":"5562:23:51"},{"kind":"number","nativeSrc":"5587:2:51","nodeType":"YulLiteral","src":"5587:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5558:3:51","nodeType":"YulIdentifier","src":"5558:3:51"},"nativeSrc":"5558:32:51","nodeType":"YulFunctionCall","src":"5558:32:51"},"nativeSrc":"5555:52:51","nodeType":"YulIf","src":"5555:52:51"},{"nativeSrc":"5616:36:51","nodeType":"YulVariableDeclaration","src":"5616:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5642:9:51","nodeType":"YulIdentifier","src":"5642:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"5629:12:51","nodeType":"YulIdentifier","src":"5629:12:51"},"nativeSrc":"5629:23:51","nodeType":"YulFunctionCall","src":"5629:23:51"},"variables":[{"name":"value","nativeSrc":"5620:5:51","nodeType":"YulTypedName","src":"5620:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5686:5:51","nodeType":"YulIdentifier","src":"5686:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5661:24:51","nodeType":"YulIdentifier","src":"5661:24:51"},"nativeSrc":"5661:31:51","nodeType":"YulFunctionCall","src":"5661:31:51"},"nativeSrc":"5661:31:51","nodeType":"YulExpressionStatement","src":"5661:31:51"},{"nativeSrc":"5701:15:51","nodeType":"YulAssignment","src":"5701:15:51","value":{"name":"value","nativeSrc":"5711:5:51","nodeType":"YulIdentifier","src":"5711:5:51"},"variableNames":[{"name":"value0","nativeSrc":"5701:6:51","nodeType":"YulIdentifier","src":"5701:6:51"}]}]},"name":"abi_decode_tuple_t_contract$_IRevocationRegistry_$5000","nativeSrc":"5447:275:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5511:9:51","nodeType":"YulTypedName","src":"5511:9:51","type":""},{"name":"dataEnd","nativeSrc":"5522:7:51","nodeType":"YulTypedName","src":"5522:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5534:6:51","nodeType":"YulTypedName","src":"5534:6:51","type":""}],"src":"5447:275:51"},{"body":{"nativeSrc":"5859:125:51","nodeType":"YulBlock","src":"5859:125:51","statements":[{"nativeSrc":"5869:26:51","nodeType":"YulAssignment","src":"5869:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"5881:9:51","nodeType":"YulIdentifier","src":"5881:9:51"},{"kind":"number","nativeSrc":"5892:2:51","nodeType":"YulLiteral","src":"5892:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5877:3:51","nodeType":"YulIdentifier","src":"5877:3:51"},"nativeSrc":"5877:18:51","nodeType":"YulFunctionCall","src":"5877:18:51"},"variableNames":[{"name":"tail","nativeSrc":"5869:4:51","nodeType":"YulIdentifier","src":"5869:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5911:9:51","nodeType":"YulIdentifier","src":"5911:9:51"},{"arguments":[{"name":"value0","nativeSrc":"5926:6:51","nodeType":"YulIdentifier","src":"5926:6:51"},{"kind":"number","nativeSrc":"5934:42:51","nodeType":"YulLiteral","src":"5934:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5922:3:51","nodeType":"YulIdentifier","src":"5922:3:51"},"nativeSrc":"5922:55:51","nodeType":"YulFunctionCall","src":"5922:55:51"}],"functionName":{"name":"mstore","nativeSrc":"5904:6:51","nodeType":"YulIdentifier","src":"5904:6:51"},"nativeSrc":"5904:74:51","nodeType":"YulFunctionCall","src":"5904:74:51"},"nativeSrc":"5904:74:51","nodeType":"YulExpressionStatement","src":"5904:74:51"}]},"name":"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed","nativeSrc":"5727:257:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5828:9:51","nodeType":"YulTypedName","src":"5828:9:51","type":""},{"name":"value0","nativeSrc":"5839:6:51","nodeType":"YulTypedName","src":"5839:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5850:4:51","nodeType":"YulTypedName","src":"5850:4:51","type":""}],"src":"5727:257:51"},{"body":{"nativeSrc":"6031:76:51","nodeType":"YulBlock","src":"6031:76:51","statements":[{"body":{"nativeSrc":"6085:16:51","nodeType":"YulBlock","src":"6085:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6094:1:51","nodeType":"YulLiteral","src":"6094:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6097:1:51","nodeType":"YulLiteral","src":"6097:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6087:6:51","nodeType":"YulIdentifier","src":"6087:6:51"},"nativeSrc":"6087:12:51","nodeType":"YulFunctionCall","src":"6087:12:51"},"nativeSrc":"6087:12:51","nodeType":"YulExpressionStatement","src":"6087:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6054:5:51","nodeType":"YulIdentifier","src":"6054:5:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6075:5:51","nodeType":"YulIdentifier","src":"6075:5:51"}],"functionName":{"name":"iszero","nativeSrc":"6068:6:51","nodeType":"YulIdentifier","src":"6068:6:51"},"nativeSrc":"6068:13:51","nodeType":"YulFunctionCall","src":"6068:13:51"}],"functionName":{"name":"iszero","nativeSrc":"6061:6:51","nodeType":"YulIdentifier","src":"6061:6:51"},"nativeSrc":"6061:21:51","nodeType":"YulFunctionCall","src":"6061:21:51"}],"functionName":{"name":"eq","nativeSrc":"6051:2:51","nodeType":"YulIdentifier","src":"6051:2:51"},"nativeSrc":"6051:32:51","nodeType":"YulFunctionCall","src":"6051:32:51"}],"functionName":{"name":"iszero","nativeSrc":"6044:6:51","nodeType":"YulIdentifier","src":"6044:6:51"},"nativeSrc":"6044:40:51","nodeType":"YulFunctionCall","src":"6044:40:51"},"nativeSrc":"6041:60:51","nodeType":"YulIf","src":"6041:60:51"}]},"name":"validator_revert_bool","nativeSrc":"5989:118:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6020:5:51","nodeType":"YulTypedName","src":"6020:5:51","type":""}],"src":"5989:118:51"},{"body":{"nativeSrc":"6196:298:51","nodeType":"YulBlock","src":"6196:298:51","statements":[{"body":{"nativeSrc":"6242:16:51","nodeType":"YulBlock","src":"6242:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6251:1:51","nodeType":"YulLiteral","src":"6251:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6254:1:51","nodeType":"YulLiteral","src":"6254:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6244:6:51","nodeType":"YulIdentifier","src":"6244:6:51"},"nativeSrc":"6244:12:51","nodeType":"YulFunctionCall","src":"6244:12:51"},"nativeSrc":"6244:12:51","nodeType":"YulExpressionStatement","src":"6244:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6217:7:51","nodeType":"YulIdentifier","src":"6217:7:51"},{"name":"headStart","nativeSrc":"6226:9:51","nodeType":"YulIdentifier","src":"6226:9:51"}],"functionName":{"name":"sub","nativeSrc":"6213:3:51","nodeType":"YulIdentifier","src":"6213:3:51"},"nativeSrc":"6213:23:51","nodeType":"YulFunctionCall","src":"6213:23:51"},{"kind":"number","nativeSrc":"6238:2:51","nodeType":"YulLiteral","src":"6238:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6209:3:51","nodeType":"YulIdentifier","src":"6209:3:51"},"nativeSrc":"6209:32:51","nodeType":"YulFunctionCall","src":"6209:32:51"},"nativeSrc":"6206:52:51","nodeType":"YulIf","src":"6206:52:51"},{"nativeSrc":"6267:36:51","nodeType":"YulVariableDeclaration","src":"6267:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6293:9:51","nodeType":"YulIdentifier","src":"6293:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"6280:12:51","nodeType":"YulIdentifier","src":"6280:12:51"},"nativeSrc":"6280:23:51","nodeType":"YulFunctionCall","src":"6280:23:51"},"variables":[{"name":"value","nativeSrc":"6271:5:51","nodeType":"YulTypedName","src":"6271:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6337:5:51","nodeType":"YulIdentifier","src":"6337:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6312:24:51","nodeType":"YulIdentifier","src":"6312:24:51"},"nativeSrc":"6312:31:51","nodeType":"YulFunctionCall","src":"6312:31:51"},"nativeSrc":"6312:31:51","nodeType":"YulExpressionStatement","src":"6312:31:51"},{"nativeSrc":"6352:15:51","nodeType":"YulAssignment","src":"6352:15:51","value":{"name":"value","nativeSrc":"6362:5:51","nodeType":"YulIdentifier","src":"6362:5:51"},"variableNames":[{"name":"value0","nativeSrc":"6352:6:51","nodeType":"YulIdentifier","src":"6352:6:51"}]},{"nativeSrc":"6376:47:51","nodeType":"YulVariableDeclaration","src":"6376:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6408:9:51","nodeType":"YulIdentifier","src":"6408:9:51"},{"kind":"number","nativeSrc":"6419:2:51","nodeType":"YulLiteral","src":"6419:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6404:3:51","nodeType":"YulIdentifier","src":"6404:3:51"},"nativeSrc":"6404:18:51","nodeType":"YulFunctionCall","src":"6404:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"6391:12:51","nodeType":"YulIdentifier","src":"6391:12:51"},"nativeSrc":"6391:32:51","nodeType":"YulFunctionCall","src":"6391:32:51"},"variables":[{"name":"value_1","nativeSrc":"6380:7:51","nodeType":"YulTypedName","src":"6380:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"6454:7:51","nodeType":"YulIdentifier","src":"6454:7:51"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"6432:21:51","nodeType":"YulIdentifier","src":"6432:21:51"},"nativeSrc":"6432:30:51","nodeType":"YulFunctionCall","src":"6432:30:51"},"nativeSrc":"6432:30:51","nodeType":"YulExpressionStatement","src":"6432:30:51"},{"nativeSrc":"6471:17:51","nodeType":"YulAssignment","src":"6471:17:51","value":{"name":"value_1","nativeSrc":"6481:7:51","nodeType":"YulIdentifier","src":"6481:7:51"},"variableNames":[{"name":"value1","nativeSrc":"6471:6:51","nodeType":"YulIdentifier","src":"6471:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"6112:382:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6154:9:51","nodeType":"YulTypedName","src":"6154:9:51","type":""},{"name":"dataEnd","nativeSrc":"6165:7:51","nodeType":"YulTypedName","src":"6165:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6177:6:51","nodeType":"YulTypedName","src":"6177:6:51","type":""},{"name":"value1","nativeSrc":"6185:6:51","nodeType":"YulTypedName","src":"6185:6:51","type":""}],"src":"6112:382:51"},{"body":{"nativeSrc":"6639:796:51","nodeType":"YulBlock","src":"6639:796:51","statements":[{"body":{"nativeSrc":"6686:16:51","nodeType":"YulBlock","src":"6686:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6695:1:51","nodeType":"YulLiteral","src":"6695:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"6698:1:51","nodeType":"YulLiteral","src":"6698:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6688:6:51","nodeType":"YulIdentifier","src":"6688:6:51"},"nativeSrc":"6688:12:51","nodeType":"YulFunctionCall","src":"6688:12:51"},"nativeSrc":"6688:12:51","nodeType":"YulExpressionStatement","src":"6688:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6660:7:51","nodeType":"YulIdentifier","src":"6660:7:51"},{"name":"headStart","nativeSrc":"6669:9:51","nodeType":"YulIdentifier","src":"6669:9:51"}],"functionName":{"name":"sub","nativeSrc":"6656:3:51","nodeType":"YulIdentifier","src":"6656:3:51"},"nativeSrc":"6656:23:51","nodeType":"YulFunctionCall","src":"6656:23:51"},{"kind":"number","nativeSrc":"6681:3:51","nodeType":"YulLiteral","src":"6681:3:51","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"6652:3:51","nodeType":"YulIdentifier","src":"6652:3:51"},"nativeSrc":"6652:33:51","nodeType":"YulFunctionCall","src":"6652:33:51"},"nativeSrc":"6649:53:51","nodeType":"YulIf","src":"6649:53:51"},{"nativeSrc":"6711:36:51","nodeType":"YulVariableDeclaration","src":"6711:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"6737:9:51","nodeType":"YulIdentifier","src":"6737:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"6724:12:51","nodeType":"YulIdentifier","src":"6724:12:51"},"nativeSrc":"6724:23:51","nodeType":"YulFunctionCall","src":"6724:23:51"},"variables":[{"name":"value","nativeSrc":"6715:5:51","nodeType":"YulTypedName","src":"6715:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6781:5:51","nodeType":"YulIdentifier","src":"6781:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6756:24:51","nodeType":"YulIdentifier","src":"6756:24:51"},"nativeSrc":"6756:31:51","nodeType":"YulFunctionCall","src":"6756:31:51"},"nativeSrc":"6756:31:51","nodeType":"YulExpressionStatement","src":"6756:31:51"},{"nativeSrc":"6796:15:51","nodeType":"YulAssignment","src":"6796:15:51","value":{"name":"value","nativeSrc":"6806:5:51","nodeType":"YulIdentifier","src":"6806:5:51"},"variableNames":[{"name":"value0","nativeSrc":"6796:6:51","nodeType":"YulIdentifier","src":"6796:6:51"}]},{"nativeSrc":"6820:47:51","nodeType":"YulVariableDeclaration","src":"6820:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6852:9:51","nodeType":"YulIdentifier","src":"6852:9:51"},{"kind":"number","nativeSrc":"6863:2:51","nodeType":"YulLiteral","src":"6863:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6848:3:51","nodeType":"YulIdentifier","src":"6848:3:51"},"nativeSrc":"6848:18:51","nodeType":"YulFunctionCall","src":"6848:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"6835:12:51","nodeType":"YulIdentifier","src":"6835:12:51"},"nativeSrc":"6835:32:51","nodeType":"YulFunctionCall","src":"6835:32:51"},"variables":[{"name":"value_1","nativeSrc":"6824:7:51","nodeType":"YulTypedName","src":"6824:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"6901:7:51","nodeType":"YulIdentifier","src":"6901:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6876:24:51","nodeType":"YulIdentifier","src":"6876:24:51"},"nativeSrc":"6876:33:51","nodeType":"YulFunctionCall","src":"6876:33:51"},"nativeSrc":"6876:33:51","nodeType":"YulExpressionStatement","src":"6876:33:51"},{"nativeSrc":"6918:17:51","nodeType":"YulAssignment","src":"6918:17:51","value":{"name":"value_1","nativeSrc":"6928:7:51","nodeType":"YulIdentifier","src":"6928:7:51"},"variableNames":[{"name":"value1","nativeSrc":"6918:6:51","nodeType":"YulIdentifier","src":"6918:6:51"}]},{"nativeSrc":"6944:42:51","nodeType":"YulAssignment","src":"6944:42:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6971:9:51","nodeType":"YulIdentifier","src":"6971:9:51"},{"kind":"number","nativeSrc":"6982:2:51","nodeType":"YulLiteral","src":"6982:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6967:3:51","nodeType":"YulIdentifier","src":"6967:3:51"},"nativeSrc":"6967:18:51","nodeType":"YulFunctionCall","src":"6967:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"6954:12:51","nodeType":"YulIdentifier","src":"6954:12:51"},"nativeSrc":"6954:32:51","nodeType":"YulFunctionCall","src":"6954:32:51"},"variableNames":[{"name":"value2","nativeSrc":"6944:6:51","nodeType":"YulIdentifier","src":"6944:6:51"}]},{"nativeSrc":"6995:46:51","nodeType":"YulVariableDeclaration","src":"6995:46:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7026:9:51","nodeType":"YulIdentifier","src":"7026:9:51"},{"kind":"number","nativeSrc":"7037:2:51","nodeType":"YulLiteral","src":"7037:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7022:3:51","nodeType":"YulIdentifier","src":"7022:3:51"},"nativeSrc":"7022:18:51","nodeType":"YulFunctionCall","src":"7022:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"7009:12:51","nodeType":"YulIdentifier","src":"7009:12:51"},"nativeSrc":"7009:32:51","nodeType":"YulFunctionCall","src":"7009:32:51"},"variables":[{"name":"offset","nativeSrc":"6999:6:51","nodeType":"YulTypedName","src":"6999:6:51","type":""}]},{"nativeSrc":"7050:28:51","nodeType":"YulVariableDeclaration","src":"7050:28:51","value":{"kind":"number","nativeSrc":"7060:18:51","nodeType":"YulLiteral","src":"7060:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7054:2:51","nodeType":"YulTypedName","src":"7054:2:51","type":""}]},{"body":{"nativeSrc":"7105:16:51","nodeType":"YulBlock","src":"7105:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7114:1:51","nodeType":"YulLiteral","src":"7114:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7117:1:51","nodeType":"YulLiteral","src":"7117:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7107:6:51","nodeType":"YulIdentifier","src":"7107:6:51"},"nativeSrc":"7107:12:51","nodeType":"YulFunctionCall","src":"7107:12:51"},"nativeSrc":"7107:12:51","nodeType":"YulExpressionStatement","src":"7107:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7093:6:51","nodeType":"YulIdentifier","src":"7093:6:51"},{"name":"_1","nativeSrc":"7101:2:51","nodeType":"YulIdentifier","src":"7101:2:51"}],"functionName":{"name":"gt","nativeSrc":"7090:2:51","nodeType":"YulIdentifier","src":"7090:2:51"},"nativeSrc":"7090:14:51","nodeType":"YulFunctionCall","src":"7090:14:51"},"nativeSrc":"7087:34:51","nodeType":"YulIf","src":"7087:34:51"},{"nativeSrc":"7130:32:51","nodeType":"YulVariableDeclaration","src":"7130:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7144:9:51","nodeType":"YulIdentifier","src":"7144:9:51"},{"name":"offset","nativeSrc":"7155:6:51","nodeType":"YulIdentifier","src":"7155:6:51"}],"functionName":{"name":"add","nativeSrc":"7140:3:51","nodeType":"YulIdentifier","src":"7140:3:51"},"nativeSrc":"7140:22:51","nodeType":"YulFunctionCall","src":"7140:22:51"},"variables":[{"name":"_2","nativeSrc":"7134:2:51","nodeType":"YulTypedName","src":"7134:2:51","type":""}]},{"body":{"nativeSrc":"7210:16:51","nodeType":"YulBlock","src":"7210:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7219:1:51","nodeType":"YulLiteral","src":"7219:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7222:1:51","nodeType":"YulLiteral","src":"7222:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7212:6:51","nodeType":"YulIdentifier","src":"7212:6:51"},"nativeSrc":"7212:12:51","nodeType":"YulFunctionCall","src":"7212:12:51"},"nativeSrc":"7212:12:51","nodeType":"YulExpressionStatement","src":"7212:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7189:2:51","nodeType":"YulIdentifier","src":"7189:2:51"},{"kind":"number","nativeSrc":"7193:4:51","nodeType":"YulLiteral","src":"7193:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7185:3:51","nodeType":"YulIdentifier","src":"7185:3:51"},"nativeSrc":"7185:13:51","nodeType":"YulFunctionCall","src":"7185:13:51"},{"name":"dataEnd","nativeSrc":"7200:7:51","nodeType":"YulIdentifier","src":"7200:7:51"}],"functionName":{"name":"slt","nativeSrc":"7181:3:51","nodeType":"YulIdentifier","src":"7181:3:51"},"nativeSrc":"7181:27:51","nodeType":"YulFunctionCall","src":"7181:27:51"}],"functionName":{"name":"iszero","nativeSrc":"7174:6:51","nodeType":"YulIdentifier","src":"7174:6:51"},"nativeSrc":"7174:35:51","nodeType":"YulFunctionCall","src":"7174:35:51"},"nativeSrc":"7171:55:51","nodeType":"YulIf","src":"7171:55:51"},{"nativeSrc":"7235:30:51","nodeType":"YulVariableDeclaration","src":"7235:30:51","value":{"arguments":[{"name":"_2","nativeSrc":"7262:2:51","nodeType":"YulIdentifier","src":"7262:2:51"}],"functionName":{"name":"calldataload","nativeSrc":"7249:12:51","nodeType":"YulIdentifier","src":"7249:12:51"},"nativeSrc":"7249:16:51","nodeType":"YulFunctionCall","src":"7249:16:51"},"variables":[{"name":"length","nativeSrc":"7239:6:51","nodeType":"YulTypedName","src":"7239:6:51","type":""}]},{"body":{"nativeSrc":"7292:16:51","nodeType":"YulBlock","src":"7292:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7301:1:51","nodeType":"YulLiteral","src":"7301:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7304:1:51","nodeType":"YulLiteral","src":"7304:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7294:6:51","nodeType":"YulIdentifier","src":"7294:6:51"},"nativeSrc":"7294:12:51","nodeType":"YulFunctionCall","src":"7294:12:51"},"nativeSrc":"7294:12:51","nodeType":"YulExpressionStatement","src":"7294:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7280:6:51","nodeType":"YulIdentifier","src":"7280:6:51"},{"name":"_1","nativeSrc":"7288:2:51","nodeType":"YulIdentifier","src":"7288:2:51"}],"functionName":{"name":"gt","nativeSrc":"7277:2:51","nodeType":"YulIdentifier","src":"7277:2:51"},"nativeSrc":"7277:14:51","nodeType":"YulFunctionCall","src":"7277:14:51"},"nativeSrc":"7274:34:51","nodeType":"YulIf","src":"7274:34:51"},{"body":{"nativeSrc":"7358:16:51","nodeType":"YulBlock","src":"7358:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7367:1:51","nodeType":"YulLiteral","src":"7367:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7370:1:51","nodeType":"YulLiteral","src":"7370:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7360:6:51","nodeType":"YulIdentifier","src":"7360:6:51"},"nativeSrc":"7360:12:51","nodeType":"YulFunctionCall","src":"7360:12:51"},"nativeSrc":"7360:12:51","nodeType":"YulExpressionStatement","src":"7360:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7331:2:51","nodeType":"YulIdentifier","src":"7331:2:51"},{"name":"length","nativeSrc":"7335:6:51","nodeType":"YulIdentifier","src":"7335:6:51"}],"functionName":{"name":"add","nativeSrc":"7327:3:51","nodeType":"YulIdentifier","src":"7327:3:51"},"nativeSrc":"7327:15:51","nodeType":"YulFunctionCall","src":"7327:15:51"},{"kind":"number","nativeSrc":"7344:2:51","nodeType":"YulLiteral","src":"7344:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7323:3:51","nodeType":"YulIdentifier","src":"7323:3:51"},"nativeSrc":"7323:24:51","nodeType":"YulFunctionCall","src":"7323:24:51"},{"name":"dataEnd","nativeSrc":"7349:7:51","nodeType":"YulIdentifier","src":"7349:7:51"}],"functionName":{"name":"gt","nativeSrc":"7320:2:51","nodeType":"YulIdentifier","src":"7320:2:51"},"nativeSrc":"7320:37:51","nodeType":"YulFunctionCall","src":"7320:37:51"},"nativeSrc":"7317:57:51","nodeType":"YulIf","src":"7317:57:51"},{"nativeSrc":"7383:21:51","nodeType":"YulAssignment","src":"7383:21:51","value":{"arguments":[{"name":"_2","nativeSrc":"7397:2:51","nodeType":"YulIdentifier","src":"7397:2:51"},{"kind":"number","nativeSrc":"7401:2:51","nodeType":"YulLiteral","src":"7401:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7393:3:51","nodeType":"YulIdentifier","src":"7393:3:51"},"nativeSrc":"7393:11:51","nodeType":"YulFunctionCall","src":"7393:11:51"},"variableNames":[{"name":"value3","nativeSrc":"7383:6:51","nodeType":"YulIdentifier","src":"7383:6:51"}]},{"nativeSrc":"7413:16:51","nodeType":"YulAssignment","src":"7413:16:51","value":{"name":"length","nativeSrc":"7423:6:51","nodeType":"YulIdentifier","src":"7423:6:51"},"variableNames":[{"name":"value4","nativeSrc":"7413:6:51","nodeType":"YulIdentifier","src":"7413:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"6499:936:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6573:9:51","nodeType":"YulTypedName","src":"6573:9:51","type":""},{"name":"dataEnd","nativeSrc":"6584:7:51","nodeType":"YulTypedName","src":"6584:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6596:6:51","nodeType":"YulTypedName","src":"6596:6:51","type":""},{"name":"value1","nativeSrc":"6604:6:51","nodeType":"YulTypedName","src":"6604:6:51","type":""},{"name":"value2","nativeSrc":"6612:6:51","nodeType":"YulTypedName","src":"6612:6:51","type":""},{"name":"value3","nativeSrc":"6620:6:51","nodeType":"YulTypedName","src":"6620:6:51","type":""},{"name":"value4","nativeSrc":"6628:6:51","nodeType":"YulTypedName","src":"6628:6:51","type":""}],"src":"6499:936:51"},{"body":{"nativeSrc":"7541:76:51","nodeType":"YulBlock","src":"7541:76:51","statements":[{"nativeSrc":"7551:26:51","nodeType":"YulAssignment","src":"7551:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7563:9:51","nodeType":"YulIdentifier","src":"7563:9:51"},{"kind":"number","nativeSrc":"7574:2:51","nodeType":"YulLiteral","src":"7574:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7559:3:51","nodeType":"YulIdentifier","src":"7559:3:51"},"nativeSrc":"7559:18:51","nodeType":"YulFunctionCall","src":"7559:18:51"},"variableNames":[{"name":"tail","nativeSrc":"7551:4:51","nodeType":"YulIdentifier","src":"7551:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7593:9:51","nodeType":"YulIdentifier","src":"7593:9:51"},{"name":"value0","nativeSrc":"7604:6:51","nodeType":"YulIdentifier","src":"7604:6:51"}],"functionName":{"name":"mstore","nativeSrc":"7586:6:51","nodeType":"YulIdentifier","src":"7586:6:51"},"nativeSrc":"7586:25:51","nodeType":"YulFunctionCall","src":"7586:25:51"},"nativeSrc":"7586:25:51","nodeType":"YulExpressionStatement","src":"7586:25:51"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7440:177:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7510:9:51","nodeType":"YulTypedName","src":"7510:9:51","type":""},{"name":"value0","nativeSrc":"7521:6:51","nodeType":"YulTypedName","src":"7521:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7532:4:51","nodeType":"YulTypedName","src":"7532:4:51","type":""}],"src":"7440:177:51"},{"body":{"nativeSrc":"7709:301:51","nodeType":"YulBlock","src":"7709:301:51","statements":[{"body":{"nativeSrc":"7755:16:51","nodeType":"YulBlock","src":"7755:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7764:1:51","nodeType":"YulLiteral","src":"7764:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"7767:1:51","nodeType":"YulLiteral","src":"7767:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7757:6:51","nodeType":"YulIdentifier","src":"7757:6:51"},"nativeSrc":"7757:12:51","nodeType":"YulFunctionCall","src":"7757:12:51"},"nativeSrc":"7757:12:51","nodeType":"YulExpressionStatement","src":"7757:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7730:7:51","nodeType":"YulIdentifier","src":"7730:7:51"},{"name":"headStart","nativeSrc":"7739:9:51","nodeType":"YulIdentifier","src":"7739:9:51"}],"functionName":{"name":"sub","nativeSrc":"7726:3:51","nodeType":"YulIdentifier","src":"7726:3:51"},"nativeSrc":"7726:23:51","nodeType":"YulFunctionCall","src":"7726:23:51"},{"kind":"number","nativeSrc":"7751:2:51","nodeType":"YulLiteral","src":"7751:2:51","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7722:3:51","nodeType":"YulIdentifier","src":"7722:3:51"},"nativeSrc":"7722:32:51","nodeType":"YulFunctionCall","src":"7722:32:51"},"nativeSrc":"7719:52:51","nodeType":"YulIf","src":"7719:52:51"},{"nativeSrc":"7780:36:51","nodeType":"YulVariableDeclaration","src":"7780:36:51","value":{"arguments":[{"name":"headStart","nativeSrc":"7806:9:51","nodeType":"YulIdentifier","src":"7806:9:51"}],"functionName":{"name":"calldataload","nativeSrc":"7793:12:51","nodeType":"YulIdentifier","src":"7793:12:51"},"nativeSrc":"7793:23:51","nodeType":"YulFunctionCall","src":"7793:23:51"},"variables":[{"name":"value","nativeSrc":"7784:5:51","nodeType":"YulTypedName","src":"7784:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7850:5:51","nodeType":"YulIdentifier","src":"7850:5:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7825:24:51","nodeType":"YulIdentifier","src":"7825:24:51"},"nativeSrc":"7825:31:51","nodeType":"YulFunctionCall","src":"7825:31:51"},"nativeSrc":"7825:31:51","nodeType":"YulExpressionStatement","src":"7825:31:51"},{"nativeSrc":"7865:15:51","nodeType":"YulAssignment","src":"7865:15:51","value":{"name":"value","nativeSrc":"7875:5:51","nodeType":"YulIdentifier","src":"7875:5:51"},"variableNames":[{"name":"value0","nativeSrc":"7865:6:51","nodeType":"YulIdentifier","src":"7865:6:51"}]},{"nativeSrc":"7889:47:51","nodeType":"YulVariableDeclaration","src":"7889:47:51","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7921:9:51","nodeType":"YulIdentifier","src":"7921:9:51"},{"kind":"number","nativeSrc":"7932:2:51","nodeType":"YulLiteral","src":"7932:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7917:3:51","nodeType":"YulIdentifier","src":"7917:3:51"},"nativeSrc":"7917:18:51","nodeType":"YulFunctionCall","src":"7917:18:51"}],"functionName":{"name":"calldataload","nativeSrc":"7904:12:51","nodeType":"YulIdentifier","src":"7904:12:51"},"nativeSrc":"7904:32:51","nodeType":"YulFunctionCall","src":"7904:32:51"},"variables":[{"name":"value_1","nativeSrc":"7893:7:51","nodeType":"YulTypedName","src":"7893:7:51","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"7970:7:51","nodeType":"YulIdentifier","src":"7970:7:51"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7945:24:51","nodeType":"YulIdentifier","src":"7945:24:51"},"nativeSrc":"7945:33:51","nodeType":"YulFunctionCall","src":"7945:33:51"},"nativeSrc":"7945:33:51","nodeType":"YulExpressionStatement","src":"7945:33:51"},{"nativeSrc":"7987:17:51","nodeType":"YulAssignment","src":"7987:17:51","value":{"name":"value_1","nativeSrc":"7997:7:51","nodeType":"YulIdentifier","src":"7997:7:51"},"variableNames":[{"name":"value1","nativeSrc":"7987:6:51","nodeType":"YulIdentifier","src":"7987:6:51"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"7622:388:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7667:9:51","nodeType":"YulTypedName","src":"7667:9:51","type":""},{"name":"dataEnd","nativeSrc":"7678:7:51","nodeType":"YulTypedName","src":"7678:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7690:6:51","nodeType":"YulTypedName","src":"7690:6:51","type":""},{"name":"value1","nativeSrc":"7698:6:51","nodeType":"YulTypedName","src":"7698:6:51","type":""}],"src":"7622:388:51"},{"body":{"nativeSrc":"8070:382:51","nodeType":"YulBlock","src":"8070:382:51","statements":[{"nativeSrc":"8080:22:51","nodeType":"YulAssignment","src":"8080:22:51","value":{"arguments":[{"kind":"number","nativeSrc":"8094:1:51","nodeType":"YulLiteral","src":"8094:1:51","type":"","value":"1"},{"name":"data","nativeSrc":"8097:4:51","nodeType":"YulIdentifier","src":"8097:4:51"}],"functionName":{"name":"shr","nativeSrc":"8090:3:51","nodeType":"YulIdentifier","src":"8090:3:51"},"nativeSrc":"8090:12:51","nodeType":"YulFunctionCall","src":"8090:12:51"},"variableNames":[{"name":"length","nativeSrc":"8080:6:51","nodeType":"YulIdentifier","src":"8080:6:51"}]},{"nativeSrc":"8111:38:51","nodeType":"YulVariableDeclaration","src":"8111:38:51","value":{"arguments":[{"name":"data","nativeSrc":"8141:4:51","nodeType":"YulIdentifier","src":"8141:4:51"},{"kind":"number","nativeSrc":"8147:1:51","nodeType":"YulLiteral","src":"8147:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"8137:3:51","nodeType":"YulIdentifier","src":"8137:3:51"},"nativeSrc":"8137:12:51","nodeType":"YulFunctionCall","src":"8137:12:51"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"8115:18:51","nodeType":"YulTypedName","src":"8115:18:51","type":""}]},{"body":{"nativeSrc":"8188:31:51","nodeType":"YulBlock","src":"8188:31:51","statements":[{"nativeSrc":"8190:27:51","nodeType":"YulAssignment","src":"8190:27:51","value":{"arguments":[{"name":"length","nativeSrc":"8204:6:51","nodeType":"YulIdentifier","src":"8204:6:51"},{"kind":"number","nativeSrc":"8212:4:51","nodeType":"YulLiteral","src":"8212:4:51","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"8200:3:51","nodeType":"YulIdentifier","src":"8200:3:51"},"nativeSrc":"8200:17:51","nodeType":"YulFunctionCall","src":"8200:17:51"},"variableNames":[{"name":"length","nativeSrc":"8190:6:51","nodeType":"YulIdentifier","src":"8190:6:51"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"8168:18:51","nodeType":"YulIdentifier","src":"8168:18:51"}],"functionName":{"name":"iszero","nativeSrc":"8161:6:51","nodeType":"YulIdentifier","src":"8161:6:51"},"nativeSrc":"8161:26:51","nodeType":"YulFunctionCall","src":"8161:26:51"},"nativeSrc":"8158:61:51","nodeType":"YulIf","src":"8158:61:51"},{"body":{"nativeSrc":"8278:168:51","nodeType":"YulBlock","src":"8278:168:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8299:1:51","nodeType":"YulLiteral","src":"8299:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8302:77:51","nodeType":"YulLiteral","src":"8302:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8292:6:51","nodeType":"YulIdentifier","src":"8292:6:51"},"nativeSrc":"8292:88:51","nodeType":"YulFunctionCall","src":"8292:88:51"},"nativeSrc":"8292:88:51","nodeType":"YulExpressionStatement","src":"8292:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8400:1:51","nodeType":"YulLiteral","src":"8400:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"8403:4:51","nodeType":"YulLiteral","src":"8403:4:51","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"8393:6:51","nodeType":"YulIdentifier","src":"8393:6:51"},"nativeSrc":"8393:15:51","nodeType":"YulFunctionCall","src":"8393:15:51"},"nativeSrc":"8393:15:51","nodeType":"YulExpressionStatement","src":"8393:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8428:1:51","nodeType":"YulLiteral","src":"8428:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8431:4:51","nodeType":"YulLiteral","src":"8431:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8421:6:51","nodeType":"YulIdentifier","src":"8421:6:51"},"nativeSrc":"8421:15:51","nodeType":"YulFunctionCall","src":"8421:15:51"},"nativeSrc":"8421:15:51","nodeType":"YulExpressionStatement","src":"8421:15:51"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"8234:18:51","nodeType":"YulIdentifier","src":"8234:18:51"},{"arguments":[{"name":"length","nativeSrc":"8257:6:51","nodeType":"YulIdentifier","src":"8257:6:51"},{"kind":"number","nativeSrc":"8265:2:51","nodeType":"YulLiteral","src":"8265:2:51","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"8254:2:51","nodeType":"YulIdentifier","src":"8254:2:51"},"nativeSrc":"8254:14:51","nodeType":"YulFunctionCall","src":"8254:14:51"}],"functionName":{"name":"eq","nativeSrc":"8231:2:51","nodeType":"YulIdentifier","src":"8231:2:51"},"nativeSrc":"8231:38:51","nodeType":"YulFunctionCall","src":"8231:38:51"},"nativeSrc":"8228:218:51","nodeType":"YulIf","src":"8228:218:51"}]},"name":"extract_byte_array_length","nativeSrc":"8015:437:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"8050:4:51","nodeType":"YulTypedName","src":"8050:4:51","type":""}],"returnVariables":[{"name":"length","nativeSrc":"8059:6:51","nodeType":"YulTypedName","src":"8059:6:51","type":""}],"src":"8015:437:51"},{"body":{"nativeSrc":"8513:65:51","nodeType":"YulBlock","src":"8513:65:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8530:1:51","nodeType":"YulLiteral","src":"8530:1:51","type":"","value":"0"},{"name":"ptr","nativeSrc":"8533:3:51","nodeType":"YulIdentifier","src":"8533:3:51"}],"functionName":{"name":"mstore","nativeSrc":"8523:6:51","nodeType":"YulIdentifier","src":"8523:6:51"},"nativeSrc":"8523:14:51","nodeType":"YulFunctionCall","src":"8523:14:51"},"nativeSrc":"8523:14:51","nodeType":"YulExpressionStatement","src":"8523:14:51"},{"nativeSrc":"8546:26:51","nodeType":"YulAssignment","src":"8546:26:51","value":{"arguments":[{"kind":"number","nativeSrc":"8564:1:51","nodeType":"YulLiteral","src":"8564:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"8567:4:51","nodeType":"YulLiteral","src":"8567:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"8554:9:51","nodeType":"YulIdentifier","src":"8554:9:51"},"nativeSrc":"8554:18:51","nodeType":"YulFunctionCall","src":"8554:18:51"},"variableNames":[{"name":"data","nativeSrc":"8546:4:51","nodeType":"YulIdentifier","src":"8546:4:51"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"8457:121:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"8496:3:51","nodeType":"YulTypedName","src":"8496:3:51","type":""}],"returnVariables":[{"name":"data","nativeSrc":"8504:4:51","nodeType":"YulTypedName","src":"8504:4:51","type":""}],"src":"8457:121:51"},{"body":{"nativeSrc":"8719:765:51","nodeType":"YulBlock","src":"8719:765:51","statements":[{"nativeSrc":"8729:12:51","nodeType":"YulVariableDeclaration","src":"8729:12:51","value":{"kind":"number","nativeSrc":"8740:1:51","nodeType":"YulLiteral","src":"8740:1:51","type":"","value":"0"},"variables":[{"name":"ret","nativeSrc":"8733:3:51","nodeType":"YulTypedName","src":"8733:3:51","type":""}]},{"nativeSrc":"8750:30:51","nodeType":"YulVariableDeclaration","src":"8750:30:51","value":{"arguments":[{"name":"value0","nativeSrc":"8773:6:51","nodeType":"YulIdentifier","src":"8773:6:51"}],"functionName":{"name":"sload","nativeSrc":"8767:5:51","nodeType":"YulIdentifier","src":"8767:5:51"},"nativeSrc":"8767:13:51","nodeType":"YulFunctionCall","src":"8767:13:51"},"variables":[{"name":"slotValue","nativeSrc":"8754:9:51","nodeType":"YulTypedName","src":"8754:9:51","type":""}]},{"nativeSrc":"8789:50:51","nodeType":"YulVariableDeclaration","src":"8789:50:51","value":{"arguments":[{"name":"slotValue","nativeSrc":"8829:9:51","nodeType":"YulIdentifier","src":"8829:9:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"8803:25:51","nodeType":"YulIdentifier","src":"8803:25:51"},"nativeSrc":"8803:36:51","nodeType":"YulFunctionCall","src":"8803:36:51"},"variables":[{"name":"length","nativeSrc":"8793:6:51","nodeType":"YulTypedName","src":"8793:6:51","type":""}]},{"nativeSrc":"8848:11:51","nodeType":"YulVariableDeclaration","src":"8848:11:51","value":{"kind":"number","nativeSrc":"8858:1:51","nodeType":"YulLiteral","src":"8858:1:51","type":"","value":"1"},"variables":[{"name":"_1","nativeSrc":"8852:2:51","nodeType":"YulTypedName","src":"8852:2:51","type":""}]},{"cases":[{"body":{"nativeSrc":"8908:184:51","nodeType":"YulBlock","src":"8908:184:51","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8929:3:51","nodeType":"YulIdentifier","src":"8929:3:51"},{"arguments":[{"name":"slotValue","nativeSrc":"8938:9:51","nodeType":"YulIdentifier","src":"8938:9:51"},{"kind":"number","nativeSrc":"8949:66:51","nodeType":"YulLiteral","src":"8949:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nativeSrc":"8934:3:51","nodeType":"YulIdentifier","src":"8934:3:51"},"nativeSrc":"8934:82:51","nodeType":"YulFunctionCall","src":"8934:82:51"}],"functionName":{"name":"mstore","nativeSrc":"8922:6:51","nodeType":"YulIdentifier","src":"8922:6:51"},"nativeSrc":"8922:95:51","nodeType":"YulFunctionCall","src":"8922:95:51"},"nativeSrc":"8922:95:51","nodeType":"YulExpressionStatement","src":"8922:95:51"},{"nativeSrc":"9030:52:51","nodeType":"YulAssignment","src":"9030:52:51","value":{"arguments":[{"name":"pos","nativeSrc":"9041:3:51","nodeType":"YulIdentifier","src":"9041:3:51"},{"arguments":[{"name":"length","nativeSrc":"9050:6:51","nodeType":"YulIdentifier","src":"9050:6:51"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"9072:6:51","nodeType":"YulIdentifier","src":"9072:6:51"}],"functionName":{"name":"iszero","nativeSrc":"9065:6:51","nodeType":"YulIdentifier","src":"9065:6:51"},"nativeSrc":"9065:14:51","nodeType":"YulFunctionCall","src":"9065:14:51"}],"functionName":{"name":"iszero","nativeSrc":"9058:6:51","nodeType":"YulIdentifier","src":"9058:6:51"},"nativeSrc":"9058:22:51","nodeType":"YulFunctionCall","src":"9058:22:51"}],"functionName":{"name":"mul","nativeSrc":"9046:3:51","nodeType":"YulIdentifier","src":"9046:3:51"},"nativeSrc":"9046:35:51","nodeType":"YulFunctionCall","src":"9046:35:51"}],"functionName":{"name":"add","nativeSrc":"9037:3:51","nodeType":"YulIdentifier","src":"9037:3:51"},"nativeSrc":"9037:45:51","nodeType":"YulFunctionCall","src":"9037:45:51"},"variableNames":[{"name":"ret","nativeSrc":"9030:3:51","nodeType":"YulIdentifier","src":"9030:3:51"}]}]},"nativeSrc":"8901:191:51","nodeType":"YulCase","src":"8901:191:51","value":{"kind":"number","nativeSrc":"8906:1:51","nodeType":"YulLiteral","src":"8906:1:51","type":"","value":"0"}},{"body":{"nativeSrc":"9108:351:51","nodeType":"YulBlock","src":"9108:351:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9129:1:51","nodeType":"YulLiteral","src":"9129:1:51","type":"","value":"0"},{"name":"value0","nativeSrc":"9132:6:51","nodeType":"YulIdentifier","src":"9132:6:51"}],"functionName":{"name":"mstore","nativeSrc":"9122:6:51","nodeType":"YulIdentifier","src":"9122:6:51"},"nativeSrc":"9122:17:51","nodeType":"YulFunctionCall","src":"9122:17:51"},"nativeSrc":"9122:17:51","nodeType":"YulExpressionStatement","src":"9122:17:51"},{"nativeSrc":"9152:14:51","nodeType":"YulVariableDeclaration","src":"9152:14:51","value":{"kind":"number","nativeSrc":"9162:4:51","nodeType":"YulLiteral","src":"9162:4:51","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"9156:2:51","nodeType":"YulTypedName","src":"9156:2:51","type":""}]},{"nativeSrc":"9179:33:51","nodeType":"YulVariableDeclaration","src":"9179:33:51","value":{"arguments":[{"kind":"number","nativeSrc":"9204:1:51","nodeType":"YulLiteral","src":"9204:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"9207:4:51","nodeType":"YulLiteral","src":"9207:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"9194:9:51","nodeType":"YulIdentifier","src":"9194:9:51"},"nativeSrc":"9194:18:51","nodeType":"YulFunctionCall","src":"9194:18:51"},"variables":[{"name":"dataPos","nativeSrc":"9183:7:51","nodeType":"YulTypedName","src":"9183:7:51","type":""}]},{"nativeSrc":"9225:10:51","nodeType":"YulVariableDeclaration","src":"9225:10:51","value":{"kind":"number","nativeSrc":"9234:1:51","nodeType":"YulLiteral","src":"9234:1:51","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9229:1:51","nodeType":"YulTypedName","src":"9229:1:51","type":""}]},{"body":{"nativeSrc":"9302:111:51","nodeType":"YulBlock","src":"9302:111:51","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9331:3:51","nodeType":"YulIdentifier","src":"9331:3:51"},{"name":"i","nativeSrc":"9336:1:51","nodeType":"YulIdentifier","src":"9336:1:51"}],"functionName":{"name":"add","nativeSrc":"9327:3:51","nodeType":"YulIdentifier","src":"9327:3:51"},"nativeSrc":"9327:11:51","nodeType":"YulFunctionCall","src":"9327:11:51"},{"arguments":[{"name":"dataPos","nativeSrc":"9346:7:51","nodeType":"YulIdentifier","src":"9346:7:51"}],"functionName":{"name":"sload","nativeSrc":"9340:5:51","nodeType":"YulIdentifier","src":"9340:5:51"},"nativeSrc":"9340:14:51","nodeType":"YulFunctionCall","src":"9340:14:51"}],"functionName":{"name":"mstore","nativeSrc":"9320:6:51","nodeType":"YulIdentifier","src":"9320:6:51"},"nativeSrc":"9320:35:51","nodeType":"YulFunctionCall","src":"9320:35:51"},"nativeSrc":"9320:35:51","nodeType":"YulExpressionStatement","src":"9320:35:51"},{"nativeSrc":"9372:27:51","nodeType":"YulAssignment","src":"9372:27:51","value":{"arguments":[{"name":"dataPos","nativeSrc":"9387:7:51","nodeType":"YulIdentifier","src":"9387:7:51"},{"name":"_1","nativeSrc":"9396:2:51","nodeType":"YulIdentifier","src":"9396:2:51"}],"functionName":{"name":"add","nativeSrc":"9383:3:51","nodeType":"YulIdentifier","src":"9383:3:51"},"nativeSrc":"9383:16:51","nodeType":"YulFunctionCall","src":"9383:16:51"},"variableNames":[{"name":"dataPos","nativeSrc":"9372:7:51","nodeType":"YulIdentifier","src":"9372:7:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9259:1:51","nodeType":"YulIdentifier","src":"9259:1:51"},{"name":"length","nativeSrc":"9262:6:51","nodeType":"YulIdentifier","src":"9262:6:51"}],"functionName":{"name":"lt","nativeSrc":"9256:2:51","nodeType":"YulIdentifier","src":"9256:2:51"},"nativeSrc":"9256:13:51","nodeType":"YulFunctionCall","src":"9256:13:51"},"nativeSrc":"9248:165:51","nodeType":"YulForLoop","post":{"nativeSrc":"9270:19:51","nodeType":"YulBlock","src":"9270:19:51","statements":[{"nativeSrc":"9272:15:51","nodeType":"YulAssignment","src":"9272:15:51","value":{"arguments":[{"name":"i","nativeSrc":"9281:1:51","nodeType":"YulIdentifier","src":"9281:1:51"},{"name":"_2","nativeSrc":"9284:2:51","nodeType":"YulIdentifier","src":"9284:2:51"}],"functionName":{"name":"add","nativeSrc":"9277:3:51","nodeType":"YulIdentifier","src":"9277:3:51"},"nativeSrc":"9277:10:51","nodeType":"YulFunctionCall","src":"9277:10:51"},"variableNames":[{"name":"i","nativeSrc":"9272:1:51","nodeType":"YulIdentifier","src":"9272:1:51"}]}]},"pre":{"nativeSrc":"9252:3:51","nodeType":"YulBlock","src":"9252:3:51","statements":[]},"src":"9248:165:51"},{"nativeSrc":"9426:23:51","nodeType":"YulAssignment","src":"9426:23:51","value":{"arguments":[{"name":"pos","nativeSrc":"9437:3:51","nodeType":"YulIdentifier","src":"9437:3:51"},{"name":"length","nativeSrc":"9442:6:51","nodeType":"YulIdentifier","src":"9442:6:51"}],"functionName":{"name":"add","nativeSrc":"9433:3:51","nodeType":"YulIdentifier","src":"9433:3:51"},"nativeSrc":"9433:16:51","nodeType":"YulFunctionCall","src":"9433:16:51"},"variableNames":[{"name":"ret","nativeSrc":"9426:3:51","nodeType":"YulIdentifier","src":"9426:3:51"}]}]},"nativeSrc":"9101:358:51","nodeType":"YulCase","src":"9101:358:51","value":{"kind":"number","nativeSrc":"9106:1:51","nodeType":"YulLiteral","src":"9106:1:51","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nativeSrc":"8879:9:51","nodeType":"YulIdentifier","src":"8879:9:51"},{"kind":"number","nativeSrc":"8890:1:51","nodeType":"YulLiteral","src":"8890:1:51","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"8875:3:51","nodeType":"YulIdentifier","src":"8875:3:51"},"nativeSrc":"8875:17:51","nodeType":"YulFunctionCall","src":"8875:17:51"},"nativeSrc":"8868:591:51","nodeType":"YulSwitch","src":"8868:591:51"},{"nativeSrc":"9468:10:51","nodeType":"YulAssignment","src":"9468:10:51","value":{"name":"ret","nativeSrc":"9475:3:51","nodeType":"YulIdentifier","src":"9475:3:51"},"variableNames":[{"name":"end","nativeSrc":"9468:3:51","nodeType":"YulIdentifier","src":"9468:3:51"}]}]},"name":"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"8583:901:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8695:3:51","nodeType":"YulTypedName","src":"8695:3:51","type":""},{"name":"value0","nativeSrc":"8700:6:51","nodeType":"YulTypedName","src":"8700:6:51","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8711:3:51","nodeType":"YulTypedName","src":"8711:3:51","type":""}],"src":"8583:901:51"},{"body":{"nativeSrc":"9618:119:51","nodeType":"YulBlock","src":"9618:119:51","statements":[{"nativeSrc":"9628:26:51","nodeType":"YulAssignment","src":"9628:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"9640:9:51","nodeType":"YulIdentifier","src":"9640:9:51"},{"kind":"number","nativeSrc":"9651:2:51","nodeType":"YulLiteral","src":"9651:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9636:3:51","nodeType":"YulIdentifier","src":"9636:3:51"},"nativeSrc":"9636:18:51","nodeType":"YulFunctionCall","src":"9636:18:51"},"variableNames":[{"name":"tail","nativeSrc":"9628:4:51","nodeType":"YulIdentifier","src":"9628:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9670:9:51","nodeType":"YulIdentifier","src":"9670:9:51"},{"name":"value0","nativeSrc":"9681:6:51","nodeType":"YulIdentifier","src":"9681:6:51"}],"functionName":{"name":"mstore","nativeSrc":"9663:6:51","nodeType":"YulIdentifier","src":"9663:6:51"},"nativeSrc":"9663:25:51","nodeType":"YulFunctionCall","src":"9663:25:51"},"nativeSrc":"9663:25:51","nodeType":"YulExpressionStatement","src":"9663:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9708:9:51","nodeType":"YulIdentifier","src":"9708:9:51"},{"kind":"number","nativeSrc":"9719:2:51","nodeType":"YulLiteral","src":"9719:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9704:3:51","nodeType":"YulIdentifier","src":"9704:3:51"},"nativeSrc":"9704:18:51","nodeType":"YulFunctionCall","src":"9704:18:51"},{"name":"value1","nativeSrc":"9724:6:51","nodeType":"YulIdentifier","src":"9724:6:51"}],"functionName":{"name":"mstore","nativeSrc":"9697:6:51","nodeType":"YulIdentifier","src":"9697:6:51"},"nativeSrc":"9697:34:51","nodeType":"YulFunctionCall","src":"9697:34:51"},"nativeSrc":"9697:34:51","nodeType":"YulExpressionStatement","src":"9697:34:51"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"9489:248:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9579:9:51","nodeType":"YulTypedName","src":"9579:9:51","type":""},{"name":"value1","nativeSrc":"9590:6:51","nodeType":"YulTypedName","src":"9590:6:51","type":""},{"name":"value0","nativeSrc":"9598:6:51","nodeType":"YulTypedName","src":"9598:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9609:4:51","nodeType":"YulTypedName","src":"9609:4:51","type":""}],"src":"9489:248:51"},{"body":{"nativeSrc":"9820:167:51","nodeType":"YulBlock","src":"9820:167:51","statements":[{"body":{"nativeSrc":"9866:16:51","nodeType":"YulBlock","src":"9866:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9875:1:51","nodeType":"YulLiteral","src":"9875:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"9878:1:51","nodeType":"YulLiteral","src":"9878:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9868:6:51","nodeType":"YulIdentifier","src":"9868:6:51"},"nativeSrc":"9868:12:51","nodeType":"YulFunctionCall","src":"9868:12:51"},"nativeSrc":"9868:12:51","nodeType":"YulExpressionStatement","src":"9868:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9841:7:51","nodeType":"YulIdentifier","src":"9841:7:51"},{"name":"headStart","nativeSrc":"9850:9:51","nodeType":"YulIdentifier","src":"9850:9:51"}],"functionName":{"name":"sub","nativeSrc":"9837:3:51","nodeType":"YulIdentifier","src":"9837:3:51"},"nativeSrc":"9837:23:51","nodeType":"YulFunctionCall","src":"9837:23:51"},{"kind":"number","nativeSrc":"9862:2:51","nodeType":"YulLiteral","src":"9862:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9833:3:51","nodeType":"YulIdentifier","src":"9833:3:51"},"nativeSrc":"9833:32:51","nodeType":"YulFunctionCall","src":"9833:32:51"},"nativeSrc":"9830:52:51","nodeType":"YulIf","src":"9830:52:51"},{"nativeSrc":"9891:29:51","nodeType":"YulVariableDeclaration","src":"9891:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"9910:9:51","nodeType":"YulIdentifier","src":"9910:9:51"}],"functionName":{"name":"mload","nativeSrc":"9904:5:51","nodeType":"YulIdentifier","src":"9904:5:51"},"nativeSrc":"9904:16:51","nodeType":"YulFunctionCall","src":"9904:16:51"},"variables":[{"name":"value","nativeSrc":"9895:5:51","nodeType":"YulTypedName","src":"9895:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"9951:5:51","nodeType":"YulIdentifier","src":"9951:5:51"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"9929:21:51","nodeType":"YulIdentifier","src":"9929:21:51"},"nativeSrc":"9929:28:51","nodeType":"YulFunctionCall","src":"9929:28:51"},"nativeSrc":"9929:28:51","nodeType":"YulExpressionStatement","src":"9929:28:51"},{"nativeSrc":"9966:15:51","nodeType":"YulAssignment","src":"9966:15:51","value":{"name":"value","nativeSrc":"9976:5:51","nodeType":"YulIdentifier","src":"9976:5:51"},"variableNames":[{"name":"value0","nativeSrc":"9966:6:51","nodeType":"YulIdentifier","src":"9966:6:51"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"9742:245:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9786:9:51","nodeType":"YulTypedName","src":"9786:9:51","type":""},{"name":"dataEnd","nativeSrc":"9797:7:51","nodeType":"YulTypedName","src":"9797:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9809:6:51","nodeType":"YulTypedName","src":"9809:6:51","type":""}],"src":"9742:245:51"},{"body":{"nativeSrc":"10052:141:51","nodeType":"YulBlock","src":"10052:141:51","statements":[{"nativeSrc":"10062:30:51","nodeType":"YulVariableDeclaration","src":"10062:30:51","value":{"arguments":[{"name":"ptr","nativeSrc":"10088:3:51","nodeType":"YulIdentifier","src":"10088:3:51"}],"functionName":{"name":"calldataload","nativeSrc":"10075:12:51","nodeType":"YulIdentifier","src":"10075:12:51"},"nativeSrc":"10075:17:51","nodeType":"YulFunctionCall","src":"10075:17:51"},"variables":[{"name":"value","nativeSrc":"10066:5:51","nodeType":"YulTypedName","src":"10066:5:51","type":""}]},{"body":{"nativeSrc":"10142:16:51","nodeType":"YulBlock","src":"10142:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10151:1:51","nodeType":"YulLiteral","src":"10151:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"10154:1:51","nodeType":"YulLiteral","src":"10154:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10144:6:51","nodeType":"YulIdentifier","src":"10144:6:51"},"nativeSrc":"10144:12:51","nodeType":"YulFunctionCall","src":"10144:12:51"},"nativeSrc":"10144:12:51","nodeType":"YulExpressionStatement","src":"10144:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10114:5:51","nodeType":"YulIdentifier","src":"10114:5:51"},{"arguments":[{"name":"value","nativeSrc":"10125:5:51","nodeType":"YulIdentifier","src":"10125:5:51"},{"kind":"number","nativeSrc":"10132:6:51","nodeType":"YulLiteral","src":"10132:6:51","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"10121:3:51","nodeType":"YulIdentifier","src":"10121:3:51"},"nativeSrc":"10121:18:51","nodeType":"YulFunctionCall","src":"10121:18:51"}],"functionName":{"name":"eq","nativeSrc":"10111:2:51","nodeType":"YulIdentifier","src":"10111:2:51"},"nativeSrc":"10111:29:51","nodeType":"YulFunctionCall","src":"10111:29:51"}],"functionName":{"name":"iszero","nativeSrc":"10104:6:51","nodeType":"YulIdentifier","src":"10104:6:51"},"nativeSrc":"10104:37:51","nodeType":"YulFunctionCall","src":"10104:37:51"},"nativeSrc":"10101:57:51","nodeType":"YulIf","src":"10101:57:51"},{"nativeSrc":"10167:20:51","nodeType":"YulAssignment","src":"10167:20:51","value":{"name":"value","nativeSrc":"10182:5:51","nodeType":"YulIdentifier","src":"10182:5:51"},"variableNames":[{"name":"returnValue","nativeSrc":"10167:11:51","nodeType":"YulIdentifier","src":"10167:11:51"}]}]},"name":"read_from_calldatat_uint16","nativeSrc":"9992:201:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"10028:3:51","nodeType":"YulTypedName","src":"10028:3:51","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"10036:11:51","nodeType":"YulTypedName","src":"10036:11:51","type":""}],"src":"9992:201:51"},{"body":{"nativeSrc":"10258:153:51","nodeType":"YulBlock","src":"10258:153:51","statements":[{"nativeSrc":"10268:30:51","nodeType":"YulVariableDeclaration","src":"10268:30:51","value":{"arguments":[{"name":"ptr","nativeSrc":"10294:3:51","nodeType":"YulIdentifier","src":"10294:3:51"}],"functionName":{"name":"calldataload","nativeSrc":"10281:12:51","nodeType":"YulIdentifier","src":"10281:12:51"},"nativeSrc":"10281:17:51","nodeType":"YulFunctionCall","src":"10281:17:51"},"variables":[{"name":"value","nativeSrc":"10272:5:51","nodeType":"YulTypedName","src":"10272:5:51","type":""}]},{"body":{"nativeSrc":"10360:16:51","nodeType":"YulBlock","src":"10360:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10369:1:51","nodeType":"YulLiteral","src":"10369:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"10372:1:51","nodeType":"YulLiteral","src":"10372:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10362:6:51","nodeType":"YulIdentifier","src":"10362:6:51"},"nativeSrc":"10362:12:51","nodeType":"YulFunctionCall","src":"10362:12:51"},"nativeSrc":"10362:12:51","nodeType":"YulExpressionStatement","src":"10362:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10320:5:51","nodeType":"YulIdentifier","src":"10320:5:51"},{"arguments":[{"name":"value","nativeSrc":"10331:5:51","nodeType":"YulIdentifier","src":"10331:5:51"},{"kind":"number","nativeSrc":"10338:18:51","nodeType":"YulLiteral","src":"10338:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10327:3:51","nodeType":"YulIdentifier","src":"10327:3:51"},"nativeSrc":"10327:30:51","nodeType":"YulFunctionCall","src":"10327:30:51"}],"functionName":{"name":"eq","nativeSrc":"10317:2:51","nodeType":"YulIdentifier","src":"10317:2:51"},"nativeSrc":"10317:41:51","nodeType":"YulFunctionCall","src":"10317:41:51"}],"functionName":{"name":"iszero","nativeSrc":"10310:6:51","nodeType":"YulIdentifier","src":"10310:6:51"},"nativeSrc":"10310:49:51","nodeType":"YulFunctionCall","src":"10310:49:51"},"nativeSrc":"10307:69:51","nodeType":"YulIf","src":"10307:69:51"},{"nativeSrc":"10385:20:51","nodeType":"YulAssignment","src":"10385:20:51","value":{"name":"value","nativeSrc":"10400:5:51","nodeType":"YulIdentifier","src":"10400:5:51"},"variableNames":[{"name":"returnValue","nativeSrc":"10385:11:51","nodeType":"YulIdentifier","src":"10385:11:51"}]}]},"name":"read_from_calldatat_uint64","nativeSrc":"10198:213:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"10234:3:51","nodeType":"YulTypedName","src":"10234:3:51","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"10242:11:51","nodeType":"YulTypedName","src":"10242:11:51","type":""}],"src":"10198:213:51"},{"body":{"nativeSrc":"10488:204:51","nodeType":"YulBlock","src":"10488:204:51","statements":[{"nativeSrc":"10498:21:51","nodeType":"YulVariableDeclaration","src":"10498:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"10514:4:51","nodeType":"YulIdentifier","src":"10514:4:51"}],"functionName":{"name":"sload","nativeSrc":"10508:5:51","nodeType":"YulIdentifier","src":"10508:5:51"},"nativeSrc":"10508:11:51","nodeType":"YulFunctionCall","src":"10508:11:51"},"variables":[{"name":"_1","nativeSrc":"10502:2:51","nodeType":"YulTypedName","src":"10502:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"10535:4:51","nodeType":"YulIdentifier","src":"10535:4:51"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"10548:2:51","nodeType":"YulIdentifier","src":"10548:2:51"},{"kind":"number","nativeSrc":"10552:66:51","nodeType":"YulLiteral","src":"10552:66:51","type":"","value":"0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10544:3:51","nodeType":"YulIdentifier","src":"10544:3:51"},"nativeSrc":"10544:75:51","nodeType":"YulFunctionCall","src":"10544:75:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10629:2:51","nodeType":"YulLiteral","src":"10629:2:51","type":"","value":"96"},{"name":"value","nativeSrc":"10633:5:51","nodeType":"YulIdentifier","src":"10633:5:51"}],"functionName":{"name":"shl","nativeSrc":"10625:3:51","nodeType":"YulIdentifier","src":"10625:3:51"},"nativeSrc":"10625:14:51","nodeType":"YulFunctionCall","src":"10625:14:51"},{"kind":"number","nativeSrc":"10641:42:51","nodeType":"YulLiteral","src":"10641:42:51","type":"","value":"0xffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10621:3:51","nodeType":"YulIdentifier","src":"10621:3:51"},"nativeSrc":"10621:63:51","nodeType":"YulFunctionCall","src":"10621:63:51"}],"functionName":{"name":"or","nativeSrc":"10541:2:51","nodeType":"YulIdentifier","src":"10541:2:51"},"nativeSrc":"10541:144:51","nodeType":"YulFunctionCall","src":"10541:144:51"}],"functionName":{"name":"sstore","nativeSrc":"10528:6:51","nodeType":"YulIdentifier","src":"10528:6:51"},"nativeSrc":"10528:158:51","nodeType":"YulFunctionCall","src":"10528:158:51"},"nativeSrc":"10528:158:51","nodeType":"YulExpressionStatement","src":"10528:158:51"}]},"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"10416:276:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"10471:4:51","nodeType":"YulTypedName","src":"10471:4:51","type":""},{"name":"value","nativeSrc":"10477:5:51","nodeType":"YulTypedName","src":"10477:5:51","type":""}],"src":"10416:276:51"},{"body":{"nativeSrc":"10771:221:51","nodeType":"YulBlock","src":"10771:221:51","statements":[{"nativeSrc":"10781:21:51","nodeType":"YulVariableDeclaration","src":"10781:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"10797:4:51","nodeType":"YulIdentifier","src":"10797:4:51"}],"functionName":{"name":"sload","nativeSrc":"10791:5:51","nodeType":"YulIdentifier","src":"10791:5:51"},"nativeSrc":"10791:11:51","nodeType":"YulFunctionCall","src":"10791:11:51"},"variables":[{"name":"_1","nativeSrc":"10785:2:51","nodeType":"YulTypedName","src":"10785:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"10818:4:51","nodeType":"YulIdentifier","src":"10818:4:51"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"10831:2:51","nodeType":"YulIdentifier","src":"10831:2:51"},{"kind":"number","nativeSrc":"10835:66:51","nodeType":"YulLiteral","src":"10835:66:51","type":"","value":"0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10827:3:51","nodeType":"YulIdentifier","src":"10827:3:51"},"nativeSrc":"10827:75:51","nodeType":"YulFunctionCall","src":"10827:75:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10912:3:51","nodeType":"YulLiteral","src":"10912:3:51","type":"","value":"160"},{"name":"value","nativeSrc":"10917:5:51","nodeType":"YulIdentifier","src":"10917:5:51"}],"functionName":{"name":"shl","nativeSrc":"10908:3:51","nodeType":"YulIdentifier","src":"10908:3:51"},"nativeSrc":"10908:15:51","nodeType":"YulFunctionCall","src":"10908:15:51"},{"kind":"number","nativeSrc":"10925:58:51","nodeType":"YulLiteral","src":"10925:58:51","type":"","value":"0xffffffffffffffff0000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10904:3:51","nodeType":"YulIdentifier","src":"10904:3:51"},"nativeSrc":"10904:80:51","nodeType":"YulFunctionCall","src":"10904:80:51"}],"functionName":{"name":"or","nativeSrc":"10824:2:51","nodeType":"YulIdentifier","src":"10824:2:51"},"nativeSrc":"10824:161:51","nodeType":"YulFunctionCall","src":"10824:161:51"}],"functionName":{"name":"sstore","nativeSrc":"10811:6:51","nodeType":"YulIdentifier","src":"10811:6:51"},"nativeSrc":"10811:175:51","nodeType":"YulFunctionCall","src":"10811:175:51"},"nativeSrc":"10811:175:51","nodeType":"YulExpressionStatement","src":"10811:175:51"}]},"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"10697:295:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"10754:4:51","nodeType":"YulTypedName","src":"10754:4:51","type":""},{"name":"value","nativeSrc":"10760:5:51","nodeType":"YulTypedName","src":"10760:5:51","type":""}],"src":"10697:295:51"},{"body":{"nativeSrc":"11086:486:51","nodeType":"YulBlock","src":"11086:486:51","statements":[{"nativeSrc":"11096:51:51","nodeType":"YulVariableDeclaration","src":"11096:51:51","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"11135:11:51","nodeType":"YulIdentifier","src":"11135:11:51"}],"functionName":{"name":"calldataload","nativeSrc":"11122:12:51","nodeType":"YulIdentifier","src":"11122:12:51"},"nativeSrc":"11122:25:51","nodeType":"YulFunctionCall","src":"11122:25:51"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"11100:18:51","nodeType":"YulTypedName","src":"11100:18:51","type":""}]},{"body":{"nativeSrc":"11295:16:51","nodeType":"YulBlock","src":"11295:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11304:1:51","nodeType":"YulLiteral","src":"11304:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11307:1:51","nodeType":"YulLiteral","src":"11307:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11297:6:51","nodeType":"YulIdentifier","src":"11297:6:51"},"nativeSrc":"11297:12:51","nodeType":"YulFunctionCall","src":"11297:12:51"},"nativeSrc":"11297:12:51","nodeType":"YulExpressionStatement","src":"11297:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"11170:18:51","nodeType":"YulIdentifier","src":"11170:18:51"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"11198:12:51","nodeType":"YulIdentifier","src":"11198:12:51"},"nativeSrc":"11198:14:51","nodeType":"YulFunctionCall","src":"11198:14:51"},{"name":"base_ref","nativeSrc":"11214:8:51","nodeType":"YulIdentifier","src":"11214:8:51"}],"functionName":{"name":"sub","nativeSrc":"11194:3:51","nodeType":"YulIdentifier","src":"11194:3:51"},"nativeSrc":"11194:29:51","nodeType":"YulFunctionCall","src":"11194:29:51"},{"kind":"number","nativeSrc":"11225:66:51","nodeType":"YulLiteral","src":"11225:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"11190:3:51","nodeType":"YulIdentifier","src":"11190:3:51"},"nativeSrc":"11190:102:51","nodeType":"YulFunctionCall","src":"11190:102:51"}],"functionName":{"name":"slt","nativeSrc":"11166:3:51","nodeType":"YulIdentifier","src":"11166:3:51"},"nativeSrc":"11166:127:51","nodeType":"YulFunctionCall","src":"11166:127:51"}],"functionName":{"name":"iszero","nativeSrc":"11159:6:51","nodeType":"YulIdentifier","src":"11159:6:51"},"nativeSrc":"11159:135:51","nodeType":"YulFunctionCall","src":"11159:135:51"},"nativeSrc":"11156:155:51","nodeType":"YulIf","src":"11156:155:51"},{"nativeSrc":"11320:47:51","nodeType":"YulVariableDeclaration","src":"11320:47:51","value":{"arguments":[{"name":"base_ref","nativeSrc":"11338:8:51","nodeType":"YulIdentifier","src":"11338:8:51"},{"name":"rel_offset_of_tail","nativeSrc":"11348:18:51","nodeType":"YulIdentifier","src":"11348:18:51"}],"functionName":{"name":"add","nativeSrc":"11334:3:51","nodeType":"YulIdentifier","src":"11334:3:51"},"nativeSrc":"11334:33:51","nodeType":"YulFunctionCall","src":"11334:33:51"},"variables":[{"name":"addr_1","nativeSrc":"11324:6:51","nodeType":"YulTypedName","src":"11324:6:51","type":""}]},{"nativeSrc":"11376:30:51","nodeType":"YulAssignment","src":"11376:30:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"11399:6:51","nodeType":"YulIdentifier","src":"11399:6:51"}],"functionName":{"name":"calldataload","nativeSrc":"11386:12:51","nodeType":"YulIdentifier","src":"11386:12:51"},"nativeSrc":"11386:20:51","nodeType":"YulFunctionCall","src":"11386:20:51"},"variableNames":[{"name":"length","nativeSrc":"11376:6:51","nodeType":"YulIdentifier","src":"11376:6:51"}]},{"body":{"nativeSrc":"11449:16:51","nodeType":"YulBlock","src":"11449:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11458:1:51","nodeType":"YulLiteral","src":"11458:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11461:1:51","nodeType":"YulLiteral","src":"11461:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11451:6:51","nodeType":"YulIdentifier","src":"11451:6:51"},"nativeSrc":"11451:12:51","nodeType":"YulFunctionCall","src":"11451:12:51"},"nativeSrc":"11451:12:51","nodeType":"YulExpressionStatement","src":"11451:12:51"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"11421:6:51","nodeType":"YulIdentifier","src":"11421:6:51"},{"kind":"number","nativeSrc":"11429:18:51","nodeType":"YulLiteral","src":"11429:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11418:2:51","nodeType":"YulIdentifier","src":"11418:2:51"},"nativeSrc":"11418:30:51","nodeType":"YulFunctionCall","src":"11418:30:51"},"nativeSrc":"11415:50:51","nodeType":"YulIf","src":"11415:50:51"},{"nativeSrc":"11474:25:51","nodeType":"YulAssignment","src":"11474:25:51","value":{"arguments":[{"name":"addr_1","nativeSrc":"11486:6:51","nodeType":"YulIdentifier","src":"11486:6:51"},{"kind":"number","nativeSrc":"11494:4:51","nodeType":"YulLiteral","src":"11494:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11482:3:51","nodeType":"YulIdentifier","src":"11482:3:51"},"nativeSrc":"11482:17:51","nodeType":"YulFunctionCall","src":"11482:17:51"},"variableNames":[{"name":"addr","nativeSrc":"11474:4:51","nodeType":"YulIdentifier","src":"11474:4:51"}]},{"body":{"nativeSrc":"11550:16:51","nodeType":"YulBlock","src":"11550:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11559:1:51","nodeType":"YulLiteral","src":"11559:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11562:1:51","nodeType":"YulLiteral","src":"11562:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11552:6:51","nodeType":"YulIdentifier","src":"11552:6:51"},"nativeSrc":"11552:12:51","nodeType":"YulFunctionCall","src":"11552:12:51"},"nativeSrc":"11552:12:51","nodeType":"YulExpressionStatement","src":"11552:12:51"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"11515:4:51","nodeType":"YulIdentifier","src":"11515:4:51"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"11525:12:51","nodeType":"YulIdentifier","src":"11525:12:51"},"nativeSrc":"11525:14:51","nodeType":"YulFunctionCall","src":"11525:14:51"},{"name":"length","nativeSrc":"11541:6:51","nodeType":"YulIdentifier","src":"11541:6:51"}],"functionName":{"name":"sub","nativeSrc":"11521:3:51","nodeType":"YulIdentifier","src":"11521:3:51"},"nativeSrc":"11521:27:51","nodeType":"YulFunctionCall","src":"11521:27:51"}],"functionName":{"name":"sgt","nativeSrc":"11511:3:51","nodeType":"YulIdentifier","src":"11511:3:51"},"nativeSrc":"11511:38:51","nodeType":"YulFunctionCall","src":"11511:38:51"},"nativeSrc":"11508:58:51","nodeType":"YulIf","src":"11508:58:51"}]},"name":"access_calldata_tail_string_calldata","nativeSrc":"10997:575:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"11043:8:51","nodeType":"YulTypedName","src":"11043:8:51","type":""},{"name":"ptr_to_tail","nativeSrc":"11053:11:51","nodeType":"YulTypedName","src":"11053:11:51","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"11069:4:51","nodeType":"YulTypedName","src":"11069:4:51","type":""},{"name":"length","nativeSrc":"11075:6:51","nodeType":"YulTypedName","src":"11075:6:51","type":""}],"src":"10997:575:51"},{"body":{"nativeSrc":"11609:152:51","nodeType":"YulBlock","src":"11609:152:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11626:1:51","nodeType":"YulLiteral","src":"11626:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11629:77:51","nodeType":"YulLiteral","src":"11629:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11619:6:51","nodeType":"YulIdentifier","src":"11619:6:51"},"nativeSrc":"11619:88:51","nodeType":"YulFunctionCall","src":"11619:88:51"},"nativeSrc":"11619:88:51","nodeType":"YulExpressionStatement","src":"11619:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11723:1:51","nodeType":"YulLiteral","src":"11723:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"11726:4:51","nodeType":"YulLiteral","src":"11726:4:51","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"11716:6:51","nodeType":"YulIdentifier","src":"11716:6:51"},"nativeSrc":"11716:15:51","nodeType":"YulFunctionCall","src":"11716:15:51"},"nativeSrc":"11716:15:51","nodeType":"YulExpressionStatement","src":"11716:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11747:1:51","nodeType":"YulLiteral","src":"11747:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11750:4:51","nodeType":"YulLiteral","src":"11750:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11740:6:51","nodeType":"YulIdentifier","src":"11740:6:51"},"nativeSrc":"11740:15:51","nodeType":"YulFunctionCall","src":"11740:15:51"},"nativeSrc":"11740:15:51","nodeType":"YulExpressionStatement","src":"11740:15:51"}]},"name":"panic_error_0x41","nativeSrc":"11577:184:51","nodeType":"YulFunctionDefinition","src":"11577:184:51"},{"body":{"nativeSrc":"11847:462:51","nodeType":"YulBlock","src":"11847:462:51","statements":[{"body":{"nativeSrc":"11880:423:51","nodeType":"YulBlock","src":"11880:423:51","statements":[{"nativeSrc":"11894:11:51","nodeType":"YulVariableDeclaration","src":"11894:11:51","value":{"kind":"number","nativeSrc":"11904:1:51","nodeType":"YulLiteral","src":"11904:1:51","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"11898:2:51","nodeType":"YulTypedName","src":"11898:2:51","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11925:1:51","nodeType":"YulLiteral","src":"11925:1:51","type":"","value":"0"},{"name":"array","nativeSrc":"11928:5:51","nodeType":"YulIdentifier","src":"11928:5:51"}],"functionName":{"name":"mstore","nativeSrc":"11918:6:51","nodeType":"YulIdentifier","src":"11918:6:51"},"nativeSrc":"11918:16:51","nodeType":"YulFunctionCall","src":"11918:16:51"},"nativeSrc":"11918:16:51","nodeType":"YulExpressionStatement","src":"11918:16:51"},{"nativeSrc":"11947:30:51","nodeType":"YulVariableDeclaration","src":"11947:30:51","value":{"arguments":[{"kind":"number","nativeSrc":"11969:1:51","nodeType":"YulLiteral","src":"11969:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"11972:4:51","nodeType":"YulLiteral","src":"11972:4:51","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"11959:9:51","nodeType":"YulIdentifier","src":"11959:9:51"},"nativeSrc":"11959:18:51","nodeType":"YulFunctionCall","src":"11959:18:51"},"variables":[{"name":"data","nativeSrc":"11951:4:51","nodeType":"YulTypedName","src":"11951:4:51","type":""}]},{"nativeSrc":"11990:57:51","nodeType":"YulVariableDeclaration","src":"11990:57:51","value":{"arguments":[{"name":"data","nativeSrc":"12013:4:51","nodeType":"YulIdentifier","src":"12013:4:51"},{"arguments":[{"kind":"number","nativeSrc":"12023:1:51","nodeType":"YulLiteral","src":"12023:1:51","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"12030:10:51","nodeType":"YulIdentifier","src":"12030:10:51"},{"kind":"number","nativeSrc":"12042:2:51","nodeType":"YulLiteral","src":"12042:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"12026:3:51","nodeType":"YulIdentifier","src":"12026:3:51"},"nativeSrc":"12026:19:51","nodeType":"YulFunctionCall","src":"12026:19:51"}],"functionName":{"name":"shr","nativeSrc":"12019:3:51","nodeType":"YulIdentifier","src":"12019:3:51"},"nativeSrc":"12019:27:51","nodeType":"YulFunctionCall","src":"12019:27:51"}],"functionName":{"name":"add","nativeSrc":"12009:3:51","nodeType":"YulIdentifier","src":"12009:3:51"},"nativeSrc":"12009:38:51","nodeType":"YulFunctionCall","src":"12009:38:51"},"variables":[{"name":"deleteStart","nativeSrc":"11994:11:51","nodeType":"YulTypedName","src":"11994:11:51","type":""}]},{"body":{"nativeSrc":"12084:23:51","nodeType":"YulBlock","src":"12084:23:51","statements":[{"nativeSrc":"12086:19:51","nodeType":"YulAssignment","src":"12086:19:51","value":{"name":"data","nativeSrc":"12101:4:51","nodeType":"YulIdentifier","src":"12101:4:51"},"variableNames":[{"name":"deleteStart","nativeSrc":"12086:11:51","nodeType":"YulIdentifier","src":"12086:11:51"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"12066:10:51","nodeType":"YulIdentifier","src":"12066:10:51"},{"kind":"number","nativeSrc":"12078:4:51","nodeType":"YulLiteral","src":"12078:4:51","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"12063:2:51","nodeType":"YulIdentifier","src":"12063:2:51"},"nativeSrc":"12063:20:51","nodeType":"YulFunctionCall","src":"12063:20:51"},"nativeSrc":"12060:47:51","nodeType":"YulIf","src":"12060:47:51"},{"nativeSrc":"12120:41:51","nodeType":"YulVariableDeclaration","src":"12120:41:51","value":{"arguments":[{"name":"data","nativeSrc":"12134:4:51","nodeType":"YulIdentifier","src":"12134:4:51"},{"arguments":[{"kind":"number","nativeSrc":"12144:1:51","nodeType":"YulLiteral","src":"12144:1:51","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"12151:3:51","nodeType":"YulIdentifier","src":"12151:3:51"},{"kind":"number","nativeSrc":"12156:2:51","nodeType":"YulLiteral","src":"12156:2:51","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"12147:3:51","nodeType":"YulIdentifier","src":"12147:3:51"},"nativeSrc":"12147:12:51","nodeType":"YulFunctionCall","src":"12147:12:51"}],"functionName":{"name":"shr","nativeSrc":"12140:3:51","nodeType":"YulIdentifier","src":"12140:3:51"},"nativeSrc":"12140:20:51","nodeType":"YulFunctionCall","src":"12140:20:51"}],"functionName":{"name":"add","nativeSrc":"12130:3:51","nodeType":"YulIdentifier","src":"12130:3:51"},"nativeSrc":"12130:31:51","nodeType":"YulFunctionCall","src":"12130:31:51"},"variables":[{"name":"_2","nativeSrc":"12124:2:51","nodeType":"YulTypedName","src":"12124:2:51","type":""}]},{"nativeSrc":"12174:24:51","nodeType":"YulVariableDeclaration","src":"12174:24:51","value":{"name":"deleteStart","nativeSrc":"12187:11:51","nodeType":"YulIdentifier","src":"12187:11:51"},"variables":[{"name":"start","nativeSrc":"12178:5:51","nodeType":"YulTypedName","src":"12178:5:51","type":""}]},{"body":{"nativeSrc":"12272:21:51","nodeType":"YulBlock","src":"12272:21:51","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"12281:5:51","nodeType":"YulIdentifier","src":"12281:5:51"},{"name":"_1","nativeSrc":"12288:2:51","nodeType":"YulIdentifier","src":"12288:2:51"}],"functionName":{"name":"sstore","nativeSrc":"12274:6:51","nodeType":"YulIdentifier","src":"12274:6:51"},"nativeSrc":"12274:17:51","nodeType":"YulFunctionCall","src":"12274:17:51"},"nativeSrc":"12274:17:51","nodeType":"YulExpressionStatement","src":"12274:17:51"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"12222:5:51","nodeType":"YulIdentifier","src":"12222:5:51"},{"name":"_2","nativeSrc":"12229:2:51","nodeType":"YulIdentifier","src":"12229:2:51"}],"functionName":{"name":"lt","nativeSrc":"12219:2:51","nodeType":"YulIdentifier","src":"12219:2:51"},"nativeSrc":"12219:13:51","nodeType":"YulFunctionCall","src":"12219:13:51"},"nativeSrc":"12211:82:51","nodeType":"YulForLoop","post":{"nativeSrc":"12233:26:51","nodeType":"YulBlock","src":"12233:26:51","statements":[{"nativeSrc":"12235:22:51","nodeType":"YulAssignment","src":"12235:22:51","value":{"arguments":[{"name":"start","nativeSrc":"12248:5:51","nodeType":"YulIdentifier","src":"12248:5:51"},{"kind":"number","nativeSrc":"12255:1:51","nodeType":"YulLiteral","src":"12255:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12244:3:51","nodeType":"YulIdentifier","src":"12244:3:51"},"nativeSrc":"12244:13:51","nodeType":"YulFunctionCall","src":"12244:13:51"},"variableNames":[{"name":"start","nativeSrc":"12235:5:51","nodeType":"YulIdentifier","src":"12235:5:51"}]}]},"pre":{"nativeSrc":"12215:3:51","nodeType":"YulBlock","src":"12215:3:51","statements":[]},"src":"12211:82:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"11863:3:51","nodeType":"YulIdentifier","src":"11863:3:51"},{"kind":"number","nativeSrc":"11868:2:51","nodeType":"YulLiteral","src":"11868:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"11860:2:51","nodeType":"YulIdentifier","src":"11860:2:51"},"nativeSrc":"11860:11:51","nodeType":"YulFunctionCall","src":"11860:11:51"},"nativeSrc":"11857:446:51","nodeType":"YulIf","src":"11857:446:51"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"11766:543:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"11819:5:51","nodeType":"YulTypedName","src":"11819:5:51","type":""},{"name":"len","nativeSrc":"11826:3:51","nodeType":"YulTypedName","src":"11826:3:51","type":""},{"name":"startIndex","nativeSrc":"11831:10:51","nodeType":"YulTypedName","src":"11831:10:51","type":""}],"src":"11766:543:51"},{"body":{"nativeSrc":"12399:141:51","nodeType":"YulBlock","src":"12399:141:51","statements":[{"nativeSrc":"12409:125:51","nodeType":"YulAssignment","src":"12409:125:51","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"12424:4:51","nodeType":"YulIdentifier","src":"12424:4:51"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"12442:1:51","nodeType":"YulLiteral","src":"12442:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"12445:3:51","nodeType":"YulIdentifier","src":"12445:3:51"}],"functionName":{"name":"shl","nativeSrc":"12438:3:51","nodeType":"YulIdentifier","src":"12438:3:51"},"nativeSrc":"12438:11:51","nodeType":"YulFunctionCall","src":"12438:11:51"},{"kind":"number","nativeSrc":"12451:66:51","nodeType":"YulLiteral","src":"12451:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"12434:3:51","nodeType":"YulIdentifier","src":"12434:3:51"},"nativeSrc":"12434:84:51","nodeType":"YulFunctionCall","src":"12434:84:51"}],"functionName":{"name":"not","nativeSrc":"12430:3:51","nodeType":"YulIdentifier","src":"12430:3:51"},"nativeSrc":"12430:89:51","nodeType":"YulFunctionCall","src":"12430:89:51"}],"functionName":{"name":"and","nativeSrc":"12420:3:51","nodeType":"YulIdentifier","src":"12420:3:51"},"nativeSrc":"12420:100:51","nodeType":"YulFunctionCall","src":"12420:100:51"},{"arguments":[{"kind":"number","nativeSrc":"12526:1:51","nodeType":"YulLiteral","src":"12526:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"12529:3:51","nodeType":"YulIdentifier","src":"12529:3:51"}],"functionName":{"name":"shl","nativeSrc":"12522:3:51","nodeType":"YulIdentifier","src":"12522:3:51"},"nativeSrc":"12522:11:51","nodeType":"YulFunctionCall","src":"12522:11:51"}],"functionName":{"name":"or","nativeSrc":"12417:2:51","nodeType":"YulIdentifier","src":"12417:2:51"},"nativeSrc":"12417:117:51","nodeType":"YulFunctionCall","src":"12417:117:51"},"variableNames":[{"name":"used","nativeSrc":"12409:4:51","nodeType":"YulIdentifier","src":"12409:4:51"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"12314:226:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"12376:4:51","nodeType":"YulTypedName","src":"12376:4:51","type":""},{"name":"len","nativeSrc":"12382:3:51","nodeType":"YulTypedName","src":"12382:3:51","type":""}],"returnVariables":[{"name":"used","nativeSrc":"12390:4:51","nodeType":"YulTypedName","src":"12390:4:51","type":""}],"src":"12314:226:51"},{"body":{"nativeSrc":"12632:1222:51","nodeType":"YulBlock","src":"12632:1222:51","statements":[{"body":{"nativeSrc":"12673:22:51","nodeType":"YulBlock","src":"12673:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"12675:16:51","nodeType":"YulIdentifier","src":"12675:16:51"},"nativeSrc":"12675:18:51","nodeType":"YulFunctionCall","src":"12675:18:51"},"nativeSrc":"12675:18:51","nodeType":"YulExpressionStatement","src":"12675:18:51"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"12648:3:51","nodeType":"YulIdentifier","src":"12648:3:51"},{"kind":"number","nativeSrc":"12653:18:51","nodeType":"YulLiteral","src":"12653:18:51","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"12645:2:51","nodeType":"YulIdentifier","src":"12645:2:51"},"nativeSrc":"12645:27:51","nodeType":"YulFunctionCall","src":"12645:27:51"},"nativeSrc":"12642:53:51","nodeType":"YulIf","src":"12642:53:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"12748:4:51","nodeType":"YulIdentifier","src":"12748:4:51"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"12786:4:51","nodeType":"YulIdentifier","src":"12786:4:51"}],"functionName":{"name":"sload","nativeSrc":"12780:5:51","nodeType":"YulIdentifier","src":"12780:5:51"},"nativeSrc":"12780:11:51","nodeType":"YulFunctionCall","src":"12780:11:51"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"12754:25:51","nodeType":"YulIdentifier","src":"12754:25:51"},"nativeSrc":"12754:38:51","nodeType":"YulFunctionCall","src":"12754:38:51"},{"name":"len","nativeSrc":"12794:3:51","nodeType":"YulIdentifier","src":"12794:3:51"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"12704:43:51","nodeType":"YulIdentifier","src":"12704:43:51"},"nativeSrc":"12704:94:51","nodeType":"YulFunctionCall","src":"12704:94:51"},"nativeSrc":"12704:94:51","nodeType":"YulExpressionStatement","src":"12704:94:51"},{"nativeSrc":"12807:18:51","nodeType":"YulVariableDeclaration","src":"12807:18:51","value":{"kind":"number","nativeSrc":"12824:1:51","nodeType":"YulLiteral","src":"12824:1:51","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"12811:9:51","nodeType":"YulTypedName","src":"12811:9:51","type":""}]},{"cases":[{"body":{"nativeSrc":"12868:728:51","nodeType":"YulBlock","src":"12868:728:51","statements":[{"nativeSrc":"12882:91:51","nodeType":"YulVariableDeclaration","src":"12882:91:51","value":{"arguments":[{"name":"len","nativeSrc":"12901:3:51","nodeType":"YulIdentifier","src":"12901:3:51"},{"kind":"number","nativeSrc":"12906:66:51","nodeType":"YulLiteral","src":"12906:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"12897:3:51","nodeType":"YulIdentifier","src":"12897:3:51"},"nativeSrc":"12897:76:51","nodeType":"YulFunctionCall","src":"12897:76:51"},"variables":[{"name":"loopEnd","nativeSrc":"12886:7:51","nodeType":"YulTypedName","src":"12886:7:51","type":""}]},{"nativeSrc":"12986:49:51","nodeType":"YulVariableDeclaration","src":"12986:49:51","value":{"arguments":[{"name":"slot","nativeSrc":"13030:4:51","nodeType":"YulIdentifier","src":"13030:4:51"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"13000:29:51","nodeType":"YulIdentifier","src":"13000:29:51"},"nativeSrc":"13000:35:51","nodeType":"YulFunctionCall","src":"13000:35:51"},"variables":[{"name":"dstPtr","nativeSrc":"12990:6:51","nodeType":"YulTypedName","src":"12990:6:51","type":""}]},{"nativeSrc":"13048:18:51","nodeType":"YulVariableDeclaration","src":"13048:18:51","value":{"name":"srcOffset","nativeSrc":"13057:9:51","nodeType":"YulIdentifier","src":"13057:9:51"},"variables":[{"name":"i","nativeSrc":"13052:1:51","nodeType":"YulTypedName","src":"13052:1:51","type":""}]},{"body":{"nativeSrc":"13136:172:51","nodeType":"YulBlock","src":"13136:172:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"13161:6:51","nodeType":"YulIdentifier","src":"13161:6:51"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13186:3:51","nodeType":"YulIdentifier","src":"13186:3:51"},{"name":"srcOffset","nativeSrc":"13191:9:51","nodeType":"YulIdentifier","src":"13191:9:51"}],"functionName":{"name":"add","nativeSrc":"13182:3:51","nodeType":"YulIdentifier","src":"13182:3:51"},"nativeSrc":"13182:19:51","nodeType":"YulFunctionCall","src":"13182:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"13169:12:51","nodeType":"YulIdentifier","src":"13169:12:51"},"nativeSrc":"13169:33:51","nodeType":"YulFunctionCall","src":"13169:33:51"}],"functionName":{"name":"sstore","nativeSrc":"13154:6:51","nodeType":"YulIdentifier","src":"13154:6:51"},"nativeSrc":"13154:49:51","nodeType":"YulFunctionCall","src":"13154:49:51"},"nativeSrc":"13154:49:51","nodeType":"YulExpressionStatement","src":"13154:49:51"},{"nativeSrc":"13220:24:51","nodeType":"YulAssignment","src":"13220:24:51","value":{"arguments":[{"name":"dstPtr","nativeSrc":"13234:6:51","nodeType":"YulIdentifier","src":"13234:6:51"},{"kind":"number","nativeSrc":"13242:1:51","nodeType":"YulLiteral","src":"13242:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13230:3:51","nodeType":"YulIdentifier","src":"13230:3:51"},"nativeSrc":"13230:14:51","nodeType":"YulFunctionCall","src":"13230:14:51"},"variableNames":[{"name":"dstPtr","nativeSrc":"13220:6:51","nodeType":"YulIdentifier","src":"13220:6:51"}]},{"nativeSrc":"13261:33:51","nodeType":"YulAssignment","src":"13261:33:51","value":{"arguments":[{"name":"srcOffset","nativeSrc":"13278:9:51","nodeType":"YulIdentifier","src":"13278:9:51"},{"kind":"number","nativeSrc":"13289:4:51","nodeType":"YulLiteral","src":"13289:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13274:3:51","nodeType":"YulIdentifier","src":"13274:3:51"},"nativeSrc":"13274:20:51","nodeType":"YulFunctionCall","src":"13274:20:51"},"variableNames":[{"name":"srcOffset","nativeSrc":"13261:9:51","nodeType":"YulIdentifier","src":"13261:9:51"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"13090:1:51","nodeType":"YulIdentifier","src":"13090:1:51"},{"name":"loopEnd","nativeSrc":"13093:7:51","nodeType":"YulIdentifier","src":"13093:7:51"}],"functionName":{"name":"lt","nativeSrc":"13087:2:51","nodeType":"YulIdentifier","src":"13087:2:51"},"nativeSrc":"13087:14:51","nodeType":"YulFunctionCall","src":"13087:14:51"},"nativeSrc":"13079:229:51","nodeType":"YulForLoop","post":{"nativeSrc":"13102:21:51","nodeType":"YulBlock","src":"13102:21:51","statements":[{"nativeSrc":"13104:17:51","nodeType":"YulAssignment","src":"13104:17:51","value":{"arguments":[{"name":"i","nativeSrc":"13113:1:51","nodeType":"YulIdentifier","src":"13113:1:51"},{"kind":"number","nativeSrc":"13116:4:51","nodeType":"YulLiteral","src":"13116:4:51","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13109:3:51","nodeType":"YulIdentifier","src":"13109:3:51"},"nativeSrc":"13109:12:51","nodeType":"YulFunctionCall","src":"13109:12:51"},"variableNames":[{"name":"i","nativeSrc":"13104:1:51","nodeType":"YulIdentifier","src":"13104:1:51"}]}]},"pre":{"nativeSrc":"13083:3:51","nodeType":"YulBlock","src":"13083:3:51","statements":[]},"src":"13079:229:51"},{"body":{"nativeSrc":"13353:187:51","nodeType":"YulBlock","src":"13353:187:51","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"13378:6:51","nodeType":"YulIdentifier","src":"13378:6:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13407:3:51","nodeType":"YulIdentifier","src":"13407:3:51"},{"name":"srcOffset","nativeSrc":"13412:9:51","nodeType":"YulIdentifier","src":"13412:9:51"}],"functionName":{"name":"add","nativeSrc":"13403:3:51","nodeType":"YulIdentifier","src":"13403:3:51"},"nativeSrc":"13403:19:51","nodeType":"YulFunctionCall","src":"13403:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"13390:12:51","nodeType":"YulIdentifier","src":"13390:12:51"},"nativeSrc":"13390:33:51","nodeType":"YulFunctionCall","src":"13390:33:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"13441:1:51","nodeType":"YulLiteral","src":"13441:1:51","type":"","value":"3"},{"name":"len","nativeSrc":"13444:3:51","nodeType":"YulIdentifier","src":"13444:3:51"}],"functionName":{"name":"shl","nativeSrc":"13437:3:51","nodeType":"YulIdentifier","src":"13437:3:51"},"nativeSrc":"13437:11:51","nodeType":"YulFunctionCall","src":"13437:11:51"},{"kind":"number","nativeSrc":"13450:3:51","nodeType":"YulLiteral","src":"13450:3:51","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"13433:3:51","nodeType":"YulIdentifier","src":"13433:3:51"},"nativeSrc":"13433:21:51","nodeType":"YulFunctionCall","src":"13433:21:51"},{"kind":"number","nativeSrc":"13456:66:51","nodeType":"YulLiteral","src":"13456:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"13429:3:51","nodeType":"YulIdentifier","src":"13429:3:51"},"nativeSrc":"13429:94:51","nodeType":"YulFunctionCall","src":"13429:94:51"}],"functionName":{"name":"not","nativeSrc":"13425:3:51","nodeType":"YulIdentifier","src":"13425:3:51"},"nativeSrc":"13425:99:51","nodeType":"YulFunctionCall","src":"13425:99:51"}],"functionName":{"name":"and","nativeSrc":"13386:3:51","nodeType":"YulIdentifier","src":"13386:3:51"},"nativeSrc":"13386:139:51","nodeType":"YulFunctionCall","src":"13386:139:51"}],"functionName":{"name":"sstore","nativeSrc":"13371:6:51","nodeType":"YulIdentifier","src":"13371:6:51"},"nativeSrc":"13371:155:51","nodeType":"YulFunctionCall","src":"13371:155:51"},"nativeSrc":"13371:155:51","nodeType":"YulExpressionStatement","src":"13371:155:51"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"13327:7:51","nodeType":"YulIdentifier","src":"13327:7:51"},{"name":"len","nativeSrc":"13336:3:51","nodeType":"YulIdentifier","src":"13336:3:51"}],"functionName":{"name":"lt","nativeSrc":"13324:2:51","nodeType":"YulIdentifier","src":"13324:2:51"},"nativeSrc":"13324:16:51","nodeType":"YulFunctionCall","src":"13324:16:51"},"nativeSrc":"13321:219:51","nodeType":"YulIf","src":"13321:219:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"13560:4:51","nodeType":"YulIdentifier","src":"13560:4:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"13574:1:51","nodeType":"YulLiteral","src":"13574:1:51","type":"","value":"1"},{"name":"len","nativeSrc":"13577:3:51","nodeType":"YulIdentifier","src":"13577:3:51"}],"functionName":{"name":"shl","nativeSrc":"13570:3:51","nodeType":"YulIdentifier","src":"13570:3:51"},"nativeSrc":"13570:11:51","nodeType":"YulFunctionCall","src":"13570:11:51"},{"kind":"number","nativeSrc":"13583:1:51","nodeType":"YulLiteral","src":"13583:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13566:3:51","nodeType":"YulIdentifier","src":"13566:3:51"},"nativeSrc":"13566:19:51","nodeType":"YulFunctionCall","src":"13566:19:51"}],"functionName":{"name":"sstore","nativeSrc":"13553:6:51","nodeType":"YulIdentifier","src":"13553:6:51"},"nativeSrc":"13553:33:51","nodeType":"YulFunctionCall","src":"13553:33:51"},"nativeSrc":"13553:33:51","nodeType":"YulExpressionStatement","src":"13553:33:51"}]},"nativeSrc":"12861:735:51","nodeType":"YulCase","src":"12861:735:51","value":{"kind":"number","nativeSrc":"12866:1:51","nodeType":"YulLiteral","src":"12866:1:51","type":"","value":"1"}},{"body":{"nativeSrc":"13613:235:51","nodeType":"YulBlock","src":"13613:235:51","statements":[{"nativeSrc":"13627:14:51","nodeType":"YulVariableDeclaration","src":"13627:14:51","value":{"kind":"number","nativeSrc":"13640:1:51","nodeType":"YulLiteral","src":"13640:1:51","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"13631:5:51","nodeType":"YulTypedName","src":"13631:5:51","type":""}]},{"body":{"nativeSrc":"13673:74:51","nodeType":"YulBlock","src":"13673:74:51","statements":[{"nativeSrc":"13691:42:51","nodeType":"YulAssignment","src":"13691:42:51","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13717:3:51","nodeType":"YulIdentifier","src":"13717:3:51"},{"name":"srcOffset","nativeSrc":"13722:9:51","nodeType":"YulIdentifier","src":"13722:9:51"}],"functionName":{"name":"add","nativeSrc":"13713:3:51","nodeType":"YulIdentifier","src":"13713:3:51"},"nativeSrc":"13713:19:51","nodeType":"YulFunctionCall","src":"13713:19:51"}],"functionName":{"name":"calldataload","nativeSrc":"13700:12:51","nodeType":"YulIdentifier","src":"13700:12:51"},"nativeSrc":"13700:33:51","nodeType":"YulFunctionCall","src":"13700:33:51"},"variableNames":[{"name":"value","nativeSrc":"13691:5:51","nodeType":"YulIdentifier","src":"13691:5:51"}]}]},"condition":{"name":"len","nativeSrc":"13657:3:51","nodeType":"YulIdentifier","src":"13657:3:51"},"nativeSrc":"13654:93:51","nodeType":"YulIf","src":"13654:93:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"13767:4:51","nodeType":"YulIdentifier","src":"13767:4:51"},{"arguments":[{"name":"value","nativeSrc":"13826:5:51","nodeType":"YulIdentifier","src":"13826:5:51"},{"name":"len","nativeSrc":"13833:3:51","nodeType":"YulIdentifier","src":"13833:3:51"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"13773:52:51","nodeType":"YulIdentifier","src":"13773:52:51"},"nativeSrc":"13773:64:51","nodeType":"YulFunctionCall","src":"13773:64:51"}],"functionName":{"name":"sstore","nativeSrc":"13760:6:51","nodeType":"YulIdentifier","src":"13760:6:51"},"nativeSrc":"13760:78:51","nodeType":"YulFunctionCall","src":"13760:78:51"},"nativeSrc":"13760:78:51","nodeType":"YulExpressionStatement","src":"13760:78:51"}]},"nativeSrc":"13605:243:51","nodeType":"YulCase","src":"13605:243:51","value":"default"}],"expression":{"arguments":[{"name":"len","nativeSrc":"12844:3:51","nodeType":"YulIdentifier","src":"12844:3:51"},{"kind":"number","nativeSrc":"12849:2:51","nodeType":"YulLiteral","src":"12849:2:51","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"12841:2:51","nodeType":"YulIdentifier","src":"12841:2:51"},"nativeSrc":"12841:11:51","nodeType":"YulFunctionCall","src":"12841:11:51"},"nativeSrc":"12834:1014:51","nodeType":"YulSwitch","src":"12834:1014:51"}]},"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"12545:1309:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"12612:4:51","nodeType":"YulTypedName","src":"12612:4:51","type":""},{"name":"src","nativeSrc":"12618:3:51","nodeType":"YulTypedName","src":"12618:3:51","type":""},{"name":"len","nativeSrc":"12623:3:51","nodeType":"YulTypedName","src":"12623:3:51","type":""}],"src":"12545:1309:51"},{"body":{"nativeSrc":"13988:1250:51","nodeType":"YulBlock","src":"13988:1250:51","statements":[{"nativeSrc":"13998:56:51","nodeType":"YulVariableDeclaration","src":"13998:56:51","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14039:5:51","nodeType":"YulIdentifier","src":"14039:5:51"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"14012:26:51","nodeType":"YulIdentifier","src":"14012:26:51"},"nativeSrc":"14012:33:51","nodeType":"YulFunctionCall","src":"14012:33:51"},{"kind":"number","nativeSrc":"14047:6:51","nodeType":"YulLiteral","src":"14047:6:51","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"14008:3:51","nodeType":"YulIdentifier","src":"14008:3:51"},"nativeSrc":"14008:46:51","nodeType":"YulFunctionCall","src":"14008:46:51"},"variables":[{"name":"_1","nativeSrc":"14002:2:51","nodeType":"YulTypedName","src":"14002:2:51","type":""}]},{"nativeSrc":"14063:21:51","nodeType":"YulVariableDeclaration","src":"14063:21:51","value":{"arguments":[{"name":"slot","nativeSrc":"14079:4:51","nodeType":"YulIdentifier","src":"14079:4:51"}],"functionName":{"name":"sload","nativeSrc":"14073:5:51","nodeType":"YulIdentifier","src":"14073:5:51"},"nativeSrc":"14073:11:51","nodeType":"YulFunctionCall","src":"14073:11:51"},"variables":[{"name":"_2","nativeSrc":"14067:2:51","nodeType":"YulTypedName","src":"14067:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14100:4:51","nodeType":"YulIdentifier","src":"14100:4:51"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14113:2:51","nodeType":"YulIdentifier","src":"14113:2:51"},{"kind":"number","nativeSrc":"14117:66:51","nodeType":"YulLiteral","src":"14117:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000"}],"functionName":{"name":"and","nativeSrc":"14109:3:51","nodeType":"YulIdentifier","src":"14109:3:51"},"nativeSrc":"14109:75:51","nodeType":"YulFunctionCall","src":"14109:75:51"},{"name":"_1","nativeSrc":"14186:2:51","nodeType":"YulIdentifier","src":"14186:2:51"}],"functionName":{"name":"or","nativeSrc":"14106:2:51","nodeType":"YulIdentifier","src":"14106:2:51"},"nativeSrc":"14106:83:51","nodeType":"YulFunctionCall","src":"14106:83:51"}],"functionName":{"name":"sstore","nativeSrc":"14093:6:51","nodeType":"YulIdentifier","src":"14093:6:51"},"nativeSrc":"14093:97:51","nodeType":"YulFunctionCall","src":"14093:97:51"},"nativeSrc":"14093:97:51","nodeType":"YulExpressionStatement","src":"14093:97:51"},{"nativeSrc":"14199:78:51","nodeType":"YulVariableDeclaration","src":"14199:78:51","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14217:2:51","nodeType":"YulLiteral","src":"14217:2:51","type":"","value":"16"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14252:5:51","nodeType":"YulIdentifier","src":"14252:5:51"},{"kind":"number","nativeSrc":"14259:2:51","nodeType":"YulLiteral","src":"14259:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14248:3:51","nodeType":"YulIdentifier","src":"14248:3:51"},"nativeSrc":"14248:14:51","nodeType":"YulFunctionCall","src":"14248:14:51"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"14221:26:51","nodeType":"YulIdentifier","src":"14221:26:51"},"nativeSrc":"14221:42:51","nodeType":"YulFunctionCall","src":"14221:42:51"}],"functionName":{"name":"shl","nativeSrc":"14213:3:51","nodeType":"YulIdentifier","src":"14213:3:51"},"nativeSrc":"14213:51:51","nodeType":"YulFunctionCall","src":"14213:51:51"},{"kind":"number","nativeSrc":"14266:10:51","nodeType":"YulLiteral","src":"14266:10:51","type":"","value":"0xffff0000"}],"functionName":{"name":"and","nativeSrc":"14209:3:51","nodeType":"YulIdentifier","src":"14209:3:51"},"nativeSrc":"14209:68:51","nodeType":"YulFunctionCall","src":"14209:68:51"},"variables":[{"name":"_3","nativeSrc":"14203:2:51","nodeType":"YulTypedName","src":"14203:2:51","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14293:4:51","nodeType":"YulIdentifier","src":"14293:4:51"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14309:2:51","nodeType":"YulIdentifier","src":"14309:2:51"},{"kind":"number","nativeSrc":"14313:66:51","nodeType":"YulLiteral","src":"14313:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"14305:3:51","nodeType":"YulIdentifier","src":"14305:3:51"},"nativeSrc":"14305:75:51","nodeType":"YulFunctionCall","src":"14305:75:51"},{"name":"_1","nativeSrc":"14382:2:51","nodeType":"YulIdentifier","src":"14382:2:51"}],"functionName":{"name":"or","nativeSrc":"14302:2:51","nodeType":"YulIdentifier","src":"14302:2:51"},"nativeSrc":"14302:83:51","nodeType":"YulFunctionCall","src":"14302:83:51"},{"name":"_3","nativeSrc":"14387:2:51","nodeType":"YulIdentifier","src":"14387:2:51"}],"functionName":{"name":"or","nativeSrc":"14299:2:51","nodeType":"YulIdentifier","src":"14299:2:51"},"nativeSrc":"14299:91:51","nodeType":"YulFunctionCall","src":"14299:91:51"}],"functionName":{"name":"sstore","nativeSrc":"14286:6:51","nodeType":"YulIdentifier","src":"14286:6:51"},"nativeSrc":"14286:105:51","nodeType":"YulFunctionCall","src":"14286:105:51"},"nativeSrc":"14286:105:51","nodeType":"YulExpressionStatement","src":"14286:105:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14407:4:51","nodeType":"YulIdentifier","src":"14407:4:51"},{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"14419:2:51","nodeType":"YulIdentifier","src":"14419:2:51"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14430:2:51","nodeType":"YulIdentifier","src":"14430:2:51"},{"kind":"number","nativeSrc":"14434:66:51","nodeType":"YulLiteral","src":"14434:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"14426:3:51","nodeType":"YulIdentifier","src":"14426:3:51"},"nativeSrc":"14426:75:51","nodeType":"YulFunctionCall","src":"14426:75:51"},{"name":"_1","nativeSrc":"14503:2:51","nodeType":"YulIdentifier","src":"14503:2:51"}],"functionName":{"name":"or","nativeSrc":"14423:2:51","nodeType":"YulIdentifier","src":"14423:2:51"},"nativeSrc":"14423:83:51","nodeType":"YulFunctionCall","src":"14423:83:51"}],"functionName":{"name":"or","nativeSrc":"14416:2:51","nodeType":"YulIdentifier","src":"14416:2:51"},"nativeSrc":"14416:91:51","nodeType":"YulFunctionCall","src":"14416:91:51"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14517:2:51","nodeType":"YulLiteral","src":"14517:2:51","type":"","value":"32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14552:5:51","nodeType":"YulIdentifier","src":"14552:5:51"},{"kind":"number","nativeSrc":"14559:2:51","nodeType":"YulLiteral","src":"14559:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14548:3:51","nodeType":"YulIdentifier","src":"14548:3:51"},"nativeSrc":"14548:14:51","nodeType":"YulFunctionCall","src":"14548:14:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"14521:26:51","nodeType":"YulIdentifier","src":"14521:26:51"},"nativeSrc":"14521:42:51","nodeType":"YulFunctionCall","src":"14521:42:51"}],"functionName":{"name":"shl","nativeSrc":"14513:3:51","nodeType":"YulIdentifier","src":"14513:3:51"},"nativeSrc":"14513:51:51","nodeType":"YulFunctionCall","src":"14513:51:51"},{"kind":"number","nativeSrc":"14566:26:51","nodeType":"YulLiteral","src":"14566:26:51","type":"","value":"0xffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"14509:3:51","nodeType":"YulIdentifier","src":"14509:3:51"},"nativeSrc":"14509:84:51","nodeType":"YulFunctionCall","src":"14509:84:51"}],"functionName":{"name":"or","nativeSrc":"14413:2:51","nodeType":"YulIdentifier","src":"14413:2:51"},"nativeSrc":"14413:181:51","nodeType":"YulFunctionCall","src":"14413:181:51"}],"functionName":{"name":"sstore","nativeSrc":"14400:6:51","nodeType":"YulIdentifier","src":"14400:6:51"},"nativeSrc":"14400:195:51","nodeType":"YulFunctionCall","src":"14400:195:51"},"nativeSrc":"14400:195:51","nodeType":"YulExpressionStatement","src":"14400:195:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14650:4:51","nodeType":"YulIdentifier","src":"14650:4:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14687:5:51","nodeType":"YulIdentifier","src":"14687:5:51"},{"kind":"number","nativeSrc":"14694:2:51","nodeType":"YulLiteral","src":"14694:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14683:3:51","nodeType":"YulIdentifier","src":"14683:3:51"},"nativeSrc":"14683:14:51","nodeType":"YulFunctionCall","src":"14683:14:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"14656:26:51","nodeType":"YulIdentifier","src":"14656:26:51"},"nativeSrc":"14656:42:51","nodeType":"YulFunctionCall","src":"14656:42:51"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"14604:45:51","nodeType":"YulIdentifier","src":"14604:45:51"},"nativeSrc":"14604:95:51","nodeType":"YulFunctionCall","src":"14604:95:51"},"nativeSrc":"14604:95:51","nodeType":"YulExpressionStatement","src":"14604:95:51"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14756:4:51","nodeType":"YulIdentifier","src":"14756:4:51"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"14793:5:51","nodeType":"YulIdentifier","src":"14793:5:51"},{"kind":"number","nativeSrc":"14800:3:51","nodeType":"YulLiteral","src":"14800:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14789:3:51","nodeType":"YulIdentifier","src":"14789:3:51"},"nativeSrc":"14789:15:51","nodeType":"YulFunctionCall","src":"14789:15:51"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"14762:26:51","nodeType":"YulIdentifier","src":"14762:26:51"},"nativeSrc":"14762:43:51","nodeType":"YulFunctionCall","src":"14762:43:51"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"14708:47:51","nodeType":"YulIdentifier","src":"14708:47:51"},"nativeSrc":"14708:98:51","nodeType":"YulFunctionCall","src":"14708:98:51"},"nativeSrc":"14708:98:51","nodeType":"YulExpressionStatement","src":"14708:98:51"},{"nativeSrc":"14815:94:51","nodeType":"YulVariableDeclaration","src":"14815:94:51","value":{"arguments":[{"name":"value","nativeSrc":"14886:5:51","nodeType":"YulIdentifier","src":"14886:5:51"},{"arguments":[{"name":"value","nativeSrc":"14897:5:51","nodeType":"YulIdentifier","src":"14897:5:51"},{"kind":"number","nativeSrc":"14904:3:51","nodeType":"YulLiteral","src":"14904:3:51","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"14893:3:51","nodeType":"YulIdentifier","src":"14893:3:51"},"nativeSrc":"14893:15:51","nodeType":"YulFunctionCall","src":"14893:15:51"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"14849:36:51","nodeType":"YulIdentifier","src":"14849:36:51"},"nativeSrc":"14849:60:51","nodeType":"YulFunctionCall","src":"14849:60:51"},"variables":[{"name":"memberValue","nativeSrc":"14819:11:51","nodeType":"YulTypedName","src":"14819:11:51","type":""},{"name":"memberValue_1","nativeSrc":"14832:13:51","nodeType":"YulTypedName","src":"14832:13:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"14980:4:51","nodeType":"YulIdentifier","src":"14980:4:51"},{"kind":"number","nativeSrc":"14986:1:51","nodeType":"YulLiteral","src":"14986:1:51","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14976:3:51","nodeType":"YulIdentifier","src":"14976:3:51"},"nativeSrc":"14976:12:51","nodeType":"YulFunctionCall","src":"14976:12:51"},{"name":"memberValue","nativeSrc":"14990:11:51","nodeType":"YulIdentifier","src":"14990:11:51"},{"name":"memberValue_1","nativeSrc":"15003:13:51","nodeType":"YulIdentifier","src":"15003:13:51"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"14918:57:51","nodeType":"YulIdentifier","src":"14918:57:51"},"nativeSrc":"14918:99:51","nodeType":"YulFunctionCall","src":"14918:99:51"},"nativeSrc":"14918:99:51","nodeType":"YulExpressionStatement","src":"14918:99:51"},{"nativeSrc":"15026:96:51","nodeType":"YulVariableDeclaration","src":"15026:96:51","value":{"arguments":[{"name":"value","nativeSrc":"15099:5:51","nodeType":"YulIdentifier","src":"15099:5:51"},{"arguments":[{"name":"value","nativeSrc":"15110:5:51","nodeType":"YulIdentifier","src":"15110:5:51"},{"kind":"number","nativeSrc":"15117:3:51","nodeType":"YulLiteral","src":"15117:3:51","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"15106:3:51","nodeType":"YulIdentifier","src":"15106:3:51"},"nativeSrc":"15106:15:51","nodeType":"YulFunctionCall","src":"15106:15:51"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"15062:36:51","nodeType":"YulIdentifier","src":"15062:36:51"},"nativeSrc":"15062:60:51","nodeType":"YulFunctionCall","src":"15062:60:51"},"variables":[{"name":"memberValue_2","nativeSrc":"15030:13:51","nodeType":"YulTypedName","src":"15030:13:51","type":""},{"name":"memberValue_3","nativeSrc":"15045:13:51","nodeType":"YulTypedName","src":"15045:13:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"15193:4:51","nodeType":"YulIdentifier","src":"15193:4:51"},{"kind":"number","nativeSrc":"15199:1:51","nodeType":"YulLiteral","src":"15199:1:51","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"15189:3:51","nodeType":"YulIdentifier","src":"15189:3:51"},"nativeSrc":"15189:12:51","nodeType":"YulFunctionCall","src":"15189:12:51"},{"name":"memberValue_2","nativeSrc":"15203:13:51","nodeType":"YulIdentifier","src":"15203:13:51"},{"name":"memberValue_3","nativeSrc":"15218:13:51","nodeType":"YulIdentifier","src":"15218:13:51"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"15131:57:51","nodeType":"YulIdentifier","src":"15131:57:51"},"nativeSrc":"15131:101:51","nodeType":"YulFunctionCall","src":"15131:101:51"},"nativeSrc":"15131:101:51","nodeType":"YulExpressionStatement","src":"15131:101:51"}]},"name":"update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage","nativeSrc":"13859:1379:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"13971:4:51","nodeType":"YulTypedName","src":"13971:4:51","type":""},{"name":"value","nativeSrc":"13977:5:51","nodeType":"YulTypedName","src":"13977:5:51","type":""}],"src":"13859:1379:51"},{"body":{"nativeSrc":"15292:233:51","nodeType":"YulBlock","src":"15292:233:51","statements":[{"nativeSrc":"15302:17:51","nodeType":"YulAssignment","src":"15302:17:51","value":{"arguments":[{"name":"x","nativeSrc":"15314:1:51","nodeType":"YulIdentifier","src":"15314:1:51"},{"name":"y","nativeSrc":"15317:1:51","nodeType":"YulIdentifier","src":"15317:1:51"}],"functionName":{"name":"sub","nativeSrc":"15310:3:51","nodeType":"YulIdentifier","src":"15310:3:51"},"nativeSrc":"15310:9:51","nodeType":"YulFunctionCall","src":"15310:9:51"},"variableNames":[{"name":"diff","nativeSrc":"15302:4:51","nodeType":"YulIdentifier","src":"15302:4:51"}]},{"body":{"nativeSrc":"15351:168:51","nodeType":"YulBlock","src":"15351:168:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15372:1:51","nodeType":"YulLiteral","src":"15372:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"15375:77:51","nodeType":"YulLiteral","src":"15375:77:51","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15365:6:51","nodeType":"YulIdentifier","src":"15365:6:51"},"nativeSrc":"15365:88:51","nodeType":"YulFunctionCall","src":"15365:88:51"},"nativeSrc":"15365:88:51","nodeType":"YulExpressionStatement","src":"15365:88:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15473:1:51","nodeType":"YulLiteral","src":"15473:1:51","type":"","value":"4"},{"kind":"number","nativeSrc":"15476:4:51","nodeType":"YulLiteral","src":"15476:4:51","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"15466:6:51","nodeType":"YulIdentifier","src":"15466:6:51"},"nativeSrc":"15466:15:51","nodeType":"YulFunctionCall","src":"15466:15:51"},"nativeSrc":"15466:15:51","nodeType":"YulExpressionStatement","src":"15466:15:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15501:1:51","nodeType":"YulLiteral","src":"15501:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"15504:4:51","nodeType":"YulLiteral","src":"15504:4:51","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15494:6:51","nodeType":"YulIdentifier","src":"15494:6:51"},"nativeSrc":"15494:15:51","nodeType":"YulFunctionCall","src":"15494:15:51"},"nativeSrc":"15494:15:51","nodeType":"YulExpressionStatement","src":"15494:15:51"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"15334:4:51","nodeType":"YulIdentifier","src":"15334:4:51"},{"name":"x","nativeSrc":"15340:1:51","nodeType":"YulIdentifier","src":"15340:1:51"}],"functionName":{"name":"gt","nativeSrc":"15331:2:51","nodeType":"YulIdentifier","src":"15331:2:51"},"nativeSrc":"15331:11:51","nodeType":"YulFunctionCall","src":"15331:11:51"},"nativeSrc":"15328:191:51","nodeType":"YulIf","src":"15328:191:51"}]},"name":"checked_sub_t_uint256","nativeSrc":"15243:282:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"15274:1:51","nodeType":"YulTypedName","src":"15274:1:51","type":""},{"name":"y","nativeSrc":"15277:1:51","nodeType":"YulTypedName","src":"15277:1:51","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"15283:4:51","nodeType":"YulTypedName","src":"15283:4:51","type":""}],"src":"15243:282:51"},{"body":{"nativeSrc":"15687:241:51","nodeType":"YulBlock","src":"15687:241:51","statements":[{"nativeSrc":"15697:26:51","nodeType":"YulAssignment","src":"15697:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"15709:9:51","nodeType":"YulIdentifier","src":"15709:9:51"},{"kind":"number","nativeSrc":"15720:2:51","nodeType":"YulLiteral","src":"15720:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15705:3:51","nodeType":"YulIdentifier","src":"15705:3:51"},"nativeSrc":"15705:18:51","nodeType":"YulFunctionCall","src":"15705:18:51"},"variableNames":[{"name":"tail","nativeSrc":"15697:4:51","nodeType":"YulIdentifier","src":"15697:4:51"}]},{"nativeSrc":"15732:52:51","nodeType":"YulVariableDeclaration","src":"15732:52:51","value":{"kind":"number","nativeSrc":"15742:42:51","nodeType":"YulLiteral","src":"15742:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"15736:2:51","nodeType":"YulTypedName","src":"15736:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15800:9:51","nodeType":"YulIdentifier","src":"15800:9:51"},{"arguments":[{"name":"value0","nativeSrc":"15815:6:51","nodeType":"YulIdentifier","src":"15815:6:51"},{"name":"_1","nativeSrc":"15823:2:51","nodeType":"YulIdentifier","src":"15823:2:51"}],"functionName":{"name":"and","nativeSrc":"15811:3:51","nodeType":"YulIdentifier","src":"15811:3:51"},"nativeSrc":"15811:15:51","nodeType":"YulFunctionCall","src":"15811:15:51"}],"functionName":{"name":"mstore","nativeSrc":"15793:6:51","nodeType":"YulIdentifier","src":"15793:6:51"},"nativeSrc":"15793:34:51","nodeType":"YulFunctionCall","src":"15793:34:51"},"nativeSrc":"15793:34:51","nodeType":"YulExpressionStatement","src":"15793:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15847:9:51","nodeType":"YulIdentifier","src":"15847:9:51"},{"kind":"number","nativeSrc":"15858:2:51","nodeType":"YulLiteral","src":"15858:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15843:3:51","nodeType":"YulIdentifier","src":"15843:3:51"},"nativeSrc":"15843:18:51","nodeType":"YulFunctionCall","src":"15843:18:51"},{"arguments":[{"name":"value1","nativeSrc":"15867:6:51","nodeType":"YulIdentifier","src":"15867:6:51"},{"name":"_1","nativeSrc":"15875:2:51","nodeType":"YulIdentifier","src":"15875:2:51"}],"functionName":{"name":"and","nativeSrc":"15863:3:51","nodeType":"YulIdentifier","src":"15863:3:51"},"nativeSrc":"15863:15:51","nodeType":"YulFunctionCall","src":"15863:15:51"}],"functionName":{"name":"mstore","nativeSrc":"15836:6:51","nodeType":"YulIdentifier","src":"15836:6:51"},"nativeSrc":"15836:43:51","nodeType":"YulFunctionCall","src":"15836:43:51"},"nativeSrc":"15836:43:51","nodeType":"YulExpressionStatement","src":"15836:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15899:9:51","nodeType":"YulIdentifier","src":"15899:9:51"},{"kind":"number","nativeSrc":"15910:2:51","nodeType":"YulLiteral","src":"15910:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15895:3:51","nodeType":"YulIdentifier","src":"15895:3:51"},"nativeSrc":"15895:18:51","nodeType":"YulFunctionCall","src":"15895:18:51"},{"name":"value2","nativeSrc":"15915:6:51","nodeType":"YulIdentifier","src":"15915:6:51"}],"functionName":{"name":"mstore","nativeSrc":"15888:6:51","nodeType":"YulIdentifier","src":"15888:6:51"},"nativeSrc":"15888:34:51","nodeType":"YulFunctionCall","src":"15888:34:51"},"nativeSrc":"15888:34:51","nodeType":"YulExpressionStatement","src":"15888:34:51"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"15530:398:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15640:9:51","nodeType":"YulTypedName","src":"15640:9:51","type":""},{"name":"value2","nativeSrc":"15651:6:51","nodeType":"YulTypedName","src":"15651:6:51","type":""},{"name":"value1","nativeSrc":"15659:6:51","nodeType":"YulTypedName","src":"15659:6:51","type":""},{"name":"value0","nativeSrc":"15667:6:51","nodeType":"YulTypedName","src":"15667:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15678:4:51","nodeType":"YulTypedName","src":"15678:4:51","type":""}],"src":"15530:398:51"},{"body":{"nativeSrc":"16062:168:51","nodeType":"YulBlock","src":"16062:168:51","statements":[{"nativeSrc":"16072:26:51","nodeType":"YulAssignment","src":"16072:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16084:9:51","nodeType":"YulIdentifier","src":"16084:9:51"},{"kind":"number","nativeSrc":"16095:2:51","nodeType":"YulLiteral","src":"16095:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16080:3:51","nodeType":"YulIdentifier","src":"16080:3:51"},"nativeSrc":"16080:18:51","nodeType":"YulFunctionCall","src":"16080:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16072:4:51","nodeType":"YulIdentifier","src":"16072:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16114:9:51","nodeType":"YulIdentifier","src":"16114:9:51"},{"name":"value0","nativeSrc":"16125:6:51","nodeType":"YulIdentifier","src":"16125:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16107:6:51","nodeType":"YulIdentifier","src":"16107:6:51"},"nativeSrc":"16107:25:51","nodeType":"YulFunctionCall","src":"16107:25:51"},"nativeSrc":"16107:25:51","nodeType":"YulExpressionStatement","src":"16107:25:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16152:9:51","nodeType":"YulIdentifier","src":"16152:9:51"},{"kind":"number","nativeSrc":"16163:2:51","nodeType":"YulLiteral","src":"16163:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16148:3:51","nodeType":"YulIdentifier","src":"16148:3:51"},"nativeSrc":"16148:18:51","nodeType":"YulFunctionCall","src":"16148:18:51"},{"arguments":[{"name":"value1","nativeSrc":"16172:6:51","nodeType":"YulIdentifier","src":"16172:6:51"},{"kind":"number","nativeSrc":"16180:42:51","nodeType":"YulLiteral","src":"16180:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16168:3:51","nodeType":"YulIdentifier","src":"16168:3:51"},"nativeSrc":"16168:55:51","nodeType":"YulFunctionCall","src":"16168:55:51"}],"functionName":{"name":"mstore","nativeSrc":"16141:6:51","nodeType":"YulIdentifier","src":"16141:6:51"},"nativeSrc":"16141:83:51","nodeType":"YulFunctionCall","src":"16141:83:51"},"nativeSrc":"16141:83:51","nodeType":"YulExpressionStatement","src":"16141:83:51"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"15933:297:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16023:9:51","nodeType":"YulTypedName","src":"16023:9:51","type":""},{"name":"value1","nativeSrc":"16034:6:51","nodeType":"YulTypedName","src":"16034:6:51","type":""},{"name":"value0","nativeSrc":"16042:6:51","nodeType":"YulTypedName","src":"16042:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16053:4:51","nodeType":"YulTypedName","src":"16053:4:51","type":""}],"src":"15933:297:51"},{"body":{"nativeSrc":"16364:168:51","nodeType":"YulBlock","src":"16364:168:51","statements":[{"nativeSrc":"16374:26:51","nodeType":"YulAssignment","src":"16374:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16386:9:51","nodeType":"YulIdentifier","src":"16386:9:51"},{"kind":"number","nativeSrc":"16397:2:51","nodeType":"YulLiteral","src":"16397:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16382:3:51","nodeType":"YulIdentifier","src":"16382:3:51"},"nativeSrc":"16382:18:51","nodeType":"YulFunctionCall","src":"16382:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16374:4:51","nodeType":"YulIdentifier","src":"16374:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16416:9:51","nodeType":"YulIdentifier","src":"16416:9:51"},{"arguments":[{"name":"value0","nativeSrc":"16431:6:51","nodeType":"YulIdentifier","src":"16431:6:51"},{"kind":"number","nativeSrc":"16439:42:51","nodeType":"YulLiteral","src":"16439:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16427:3:51","nodeType":"YulIdentifier","src":"16427:3:51"},"nativeSrc":"16427:55:51","nodeType":"YulFunctionCall","src":"16427:55:51"}],"functionName":{"name":"mstore","nativeSrc":"16409:6:51","nodeType":"YulIdentifier","src":"16409:6:51"},"nativeSrc":"16409:74:51","nodeType":"YulFunctionCall","src":"16409:74:51"},"nativeSrc":"16409:74:51","nodeType":"YulExpressionStatement","src":"16409:74:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16503:9:51","nodeType":"YulIdentifier","src":"16503:9:51"},{"kind":"number","nativeSrc":"16514:2:51","nodeType":"YulLiteral","src":"16514:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16499:3:51","nodeType":"YulIdentifier","src":"16499:3:51"},"nativeSrc":"16499:18:51","nodeType":"YulFunctionCall","src":"16499:18:51"},{"name":"value1","nativeSrc":"16519:6:51","nodeType":"YulIdentifier","src":"16519:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16492:6:51","nodeType":"YulIdentifier","src":"16492:6:51"},"nativeSrc":"16492:34:51","nodeType":"YulFunctionCall","src":"16492:34:51"},"nativeSrc":"16492:34:51","nodeType":"YulExpressionStatement","src":"16492:34:51"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"16235:297:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16325:9:51","nodeType":"YulTypedName","src":"16325:9:51","type":""},{"name":"value1","nativeSrc":"16336:6:51","nodeType":"YulTypedName","src":"16336:6:51","type":""},{"name":"value0","nativeSrc":"16344:6:51","nodeType":"YulTypedName","src":"16344:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16355:4:51","nodeType":"YulTypedName","src":"16355:4:51","type":""}],"src":"16235:297:51"},{"body":{"nativeSrc":"16694:241:51","nodeType":"YulBlock","src":"16694:241:51","statements":[{"nativeSrc":"16704:26:51","nodeType":"YulAssignment","src":"16704:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"16716:9:51","nodeType":"YulIdentifier","src":"16716:9:51"},{"kind":"number","nativeSrc":"16727:2:51","nodeType":"YulLiteral","src":"16727:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16712:3:51","nodeType":"YulIdentifier","src":"16712:3:51"},"nativeSrc":"16712:18:51","nodeType":"YulFunctionCall","src":"16712:18:51"},"variableNames":[{"name":"tail","nativeSrc":"16704:4:51","nodeType":"YulIdentifier","src":"16704:4:51"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16746:9:51","nodeType":"YulIdentifier","src":"16746:9:51"},{"name":"value0","nativeSrc":"16757:6:51","nodeType":"YulIdentifier","src":"16757:6:51"}],"functionName":{"name":"mstore","nativeSrc":"16739:6:51","nodeType":"YulIdentifier","src":"16739:6:51"},"nativeSrc":"16739:25:51","nodeType":"YulFunctionCall","src":"16739:25:51"},"nativeSrc":"16739:25:51","nodeType":"YulExpressionStatement","src":"16739:25:51"},{"nativeSrc":"16773:52:51","nodeType":"YulVariableDeclaration","src":"16773:52:51","value":{"kind":"number","nativeSrc":"16783:42:51","nodeType":"YulLiteral","src":"16783:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16777:2:51","nodeType":"YulTypedName","src":"16777:2:51","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16845:9:51","nodeType":"YulIdentifier","src":"16845:9:51"},{"kind":"number","nativeSrc":"16856:2:51","nodeType":"YulLiteral","src":"16856:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16841:3:51","nodeType":"YulIdentifier","src":"16841:3:51"},"nativeSrc":"16841:18:51","nodeType":"YulFunctionCall","src":"16841:18:51"},{"arguments":[{"name":"value1","nativeSrc":"16865:6:51","nodeType":"YulIdentifier","src":"16865:6:51"},{"name":"_1","nativeSrc":"16873:2:51","nodeType":"YulIdentifier","src":"16873:2:51"}],"functionName":{"name":"and","nativeSrc":"16861:3:51","nodeType":"YulIdentifier","src":"16861:3:51"},"nativeSrc":"16861:15:51","nodeType":"YulFunctionCall","src":"16861:15:51"}],"functionName":{"name":"mstore","nativeSrc":"16834:6:51","nodeType":"YulIdentifier","src":"16834:6:51"},"nativeSrc":"16834:43:51","nodeType":"YulFunctionCall","src":"16834:43:51"},"nativeSrc":"16834:43:51","nodeType":"YulExpressionStatement","src":"16834:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16897:9:51","nodeType":"YulIdentifier","src":"16897:9:51"},{"kind":"number","nativeSrc":"16908:2:51","nodeType":"YulLiteral","src":"16908:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16893:3:51","nodeType":"YulIdentifier","src":"16893:3:51"},"nativeSrc":"16893:18:51","nodeType":"YulFunctionCall","src":"16893:18:51"},{"arguments":[{"name":"value2","nativeSrc":"16917:6:51","nodeType":"YulIdentifier","src":"16917:6:51"},{"name":"_1","nativeSrc":"16925:2:51","nodeType":"YulIdentifier","src":"16925:2:51"}],"functionName":{"name":"and","nativeSrc":"16913:3:51","nodeType":"YulIdentifier","src":"16913:3:51"},"nativeSrc":"16913:15:51","nodeType":"YulFunctionCall","src":"16913:15:51"}],"functionName":{"name":"mstore","nativeSrc":"16886:6:51","nodeType":"YulIdentifier","src":"16886:6:51"},"nativeSrc":"16886:43:51","nodeType":"YulFunctionCall","src":"16886:43:51"},"nativeSrc":"16886:43:51","nodeType":"YulExpressionStatement","src":"16886:43:51"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"16537:398:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16647:9:51","nodeType":"YulTypedName","src":"16647:9:51","type":""},{"name":"value2","nativeSrc":"16658:6:51","nodeType":"YulTypedName","src":"16658:6:51","type":""},{"name":"value1","nativeSrc":"16666:6:51","nodeType":"YulTypedName","src":"16666:6:51","type":""},{"name":"value0","nativeSrc":"16674:6:51","nodeType":"YulTypedName","src":"16674:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16685:4:51","nodeType":"YulTypedName","src":"16685:4:51","type":""}],"src":"16537:398:51"},{"body":{"nativeSrc":"17031:865:51","nodeType":"YulBlock","src":"17031:865:51","statements":[{"body":{"nativeSrc":"17077:16:51","nodeType":"YulBlock","src":"17077:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17086:1:51","nodeType":"YulLiteral","src":"17086:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17089:1:51","nodeType":"YulLiteral","src":"17089:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17079:6:51","nodeType":"YulIdentifier","src":"17079:6:51"},"nativeSrc":"17079:12:51","nodeType":"YulFunctionCall","src":"17079:12:51"},"nativeSrc":"17079:12:51","nodeType":"YulExpressionStatement","src":"17079:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17052:7:51","nodeType":"YulIdentifier","src":"17052:7:51"},{"name":"headStart","nativeSrc":"17061:9:51","nodeType":"YulIdentifier","src":"17061:9:51"}],"functionName":{"name":"sub","nativeSrc":"17048:3:51","nodeType":"YulIdentifier","src":"17048:3:51"},"nativeSrc":"17048:23:51","nodeType":"YulFunctionCall","src":"17048:23:51"},{"kind":"number","nativeSrc":"17073:2:51","nodeType":"YulLiteral","src":"17073:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17044:3:51","nodeType":"YulIdentifier","src":"17044:3:51"},"nativeSrc":"17044:32:51","nodeType":"YulFunctionCall","src":"17044:32:51"},"nativeSrc":"17041:52:51","nodeType":"YulIf","src":"17041:52:51"},{"nativeSrc":"17102:30:51","nodeType":"YulVariableDeclaration","src":"17102:30:51","value":{"arguments":[{"name":"headStart","nativeSrc":"17122:9:51","nodeType":"YulIdentifier","src":"17122:9:51"}],"functionName":{"name":"mload","nativeSrc":"17116:5:51","nodeType":"YulIdentifier","src":"17116:5:51"},"nativeSrc":"17116:16:51","nodeType":"YulFunctionCall","src":"17116:16:51"},"variables":[{"name":"offset","nativeSrc":"17106:6:51","nodeType":"YulTypedName","src":"17106:6:51","type":""}]},{"nativeSrc":"17141:28:51","nodeType":"YulVariableDeclaration","src":"17141:28:51","value":{"kind":"number","nativeSrc":"17151:18:51","nodeType":"YulLiteral","src":"17151:18:51","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17145:2:51","nodeType":"YulTypedName","src":"17145:2:51","type":""}]},{"body":{"nativeSrc":"17196:16:51","nodeType":"YulBlock","src":"17196:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17205:1:51","nodeType":"YulLiteral","src":"17205:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17208:1:51","nodeType":"YulLiteral","src":"17208:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17198:6:51","nodeType":"YulIdentifier","src":"17198:6:51"},"nativeSrc":"17198:12:51","nodeType":"YulFunctionCall","src":"17198:12:51"},"nativeSrc":"17198:12:51","nodeType":"YulExpressionStatement","src":"17198:12:51"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"17184:6:51","nodeType":"YulIdentifier","src":"17184:6:51"},{"name":"_1","nativeSrc":"17192:2:51","nodeType":"YulIdentifier","src":"17192:2:51"}],"functionName":{"name":"gt","nativeSrc":"17181:2:51","nodeType":"YulIdentifier","src":"17181:2:51"},"nativeSrc":"17181:14:51","nodeType":"YulFunctionCall","src":"17181:14:51"},"nativeSrc":"17178:34:51","nodeType":"YulIf","src":"17178:34:51"},{"nativeSrc":"17221:32:51","nodeType":"YulVariableDeclaration","src":"17221:32:51","value":{"arguments":[{"name":"headStart","nativeSrc":"17235:9:51","nodeType":"YulIdentifier","src":"17235:9:51"},{"name":"offset","nativeSrc":"17246:6:51","nodeType":"YulIdentifier","src":"17246:6:51"}],"functionName":{"name":"add","nativeSrc":"17231:3:51","nodeType":"YulIdentifier","src":"17231:3:51"},"nativeSrc":"17231:22:51","nodeType":"YulFunctionCall","src":"17231:22:51"},"variables":[{"name":"_2","nativeSrc":"17225:2:51","nodeType":"YulTypedName","src":"17225:2:51","type":""}]},{"body":{"nativeSrc":"17301:16:51","nodeType":"YulBlock","src":"17301:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17310:1:51","nodeType":"YulLiteral","src":"17310:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17313:1:51","nodeType":"YulLiteral","src":"17313:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17303:6:51","nodeType":"YulIdentifier","src":"17303:6:51"},"nativeSrc":"17303:12:51","nodeType":"YulFunctionCall","src":"17303:12:51"},"nativeSrc":"17303:12:51","nodeType":"YulExpressionStatement","src":"17303:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"17280:2:51","nodeType":"YulIdentifier","src":"17280:2:51"},{"kind":"number","nativeSrc":"17284:4:51","nodeType":"YulLiteral","src":"17284:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"17276:3:51","nodeType":"YulIdentifier","src":"17276:3:51"},"nativeSrc":"17276:13:51","nodeType":"YulFunctionCall","src":"17276:13:51"},{"name":"dataEnd","nativeSrc":"17291:7:51","nodeType":"YulIdentifier","src":"17291:7:51"}],"functionName":{"name":"slt","nativeSrc":"17272:3:51","nodeType":"YulIdentifier","src":"17272:3:51"},"nativeSrc":"17272:27:51","nodeType":"YulFunctionCall","src":"17272:27:51"}],"functionName":{"name":"iszero","nativeSrc":"17265:6:51","nodeType":"YulIdentifier","src":"17265:6:51"},"nativeSrc":"17265:35:51","nodeType":"YulFunctionCall","src":"17265:35:51"},"nativeSrc":"17262:55:51","nodeType":"YulIf","src":"17262:55:51"},{"nativeSrc":"17326:19:51","nodeType":"YulVariableDeclaration","src":"17326:19:51","value":{"arguments":[{"name":"_2","nativeSrc":"17342:2:51","nodeType":"YulIdentifier","src":"17342:2:51"}],"functionName":{"name":"mload","nativeSrc":"17336:5:51","nodeType":"YulIdentifier","src":"17336:5:51"},"nativeSrc":"17336:9:51","nodeType":"YulFunctionCall","src":"17336:9:51"},"variables":[{"name":"_3","nativeSrc":"17330:2:51","nodeType":"YulTypedName","src":"17330:2:51","type":""}]},{"body":{"nativeSrc":"17368:22:51","nodeType":"YulBlock","src":"17368:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"17370:16:51","nodeType":"YulIdentifier","src":"17370:16:51"},"nativeSrc":"17370:18:51","nodeType":"YulFunctionCall","src":"17370:18:51"},"nativeSrc":"17370:18:51","nodeType":"YulExpressionStatement","src":"17370:18:51"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"17360:2:51","nodeType":"YulIdentifier","src":"17360:2:51"},{"name":"_1","nativeSrc":"17364:2:51","nodeType":"YulIdentifier","src":"17364:2:51"}],"functionName":{"name":"gt","nativeSrc":"17357:2:51","nodeType":"YulIdentifier","src":"17357:2:51"},"nativeSrc":"17357:10:51","nodeType":"YulFunctionCall","src":"17357:10:51"},"nativeSrc":"17354:36:51","nodeType":"YulIf","src":"17354:36:51"},{"nativeSrc":"17399:76:51","nodeType":"YulVariableDeclaration","src":"17399:76:51","value":{"kind":"number","nativeSrc":"17409:66:51","nodeType":"YulLiteral","src":"17409:66:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"17403:2:51","nodeType":"YulTypedName","src":"17403:2:51","type":""}]},{"nativeSrc":"17484:23:51","nodeType":"YulVariableDeclaration","src":"17484:23:51","value":{"arguments":[{"kind":"number","nativeSrc":"17504:2:51","nodeType":"YulLiteral","src":"17504:2:51","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"17498:5:51","nodeType":"YulIdentifier","src":"17498:5:51"},"nativeSrc":"17498:9:51","nodeType":"YulFunctionCall","src":"17498:9:51"},"variables":[{"name":"memPtr","nativeSrc":"17488:6:51","nodeType":"YulTypedName","src":"17488:6:51","type":""}]},{"nativeSrc":"17516:71:51","nodeType":"YulVariableDeclaration","src":"17516:71:51","value":{"arguments":[{"name":"memPtr","nativeSrc":"17538:6:51","nodeType":"YulIdentifier","src":"17538:6:51"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"17562:2:51","nodeType":"YulIdentifier","src":"17562:2:51"},{"kind":"number","nativeSrc":"17566:4:51","nodeType":"YulLiteral","src":"17566:4:51","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"17558:3:51","nodeType":"YulIdentifier","src":"17558:3:51"},"nativeSrc":"17558:13:51","nodeType":"YulFunctionCall","src":"17558:13:51"},{"name":"_4","nativeSrc":"17573:2:51","nodeType":"YulIdentifier","src":"17573:2:51"}],"functionName":{"name":"and","nativeSrc":"17554:3:51","nodeType":"YulIdentifier","src":"17554:3:51"},"nativeSrc":"17554:22:51","nodeType":"YulFunctionCall","src":"17554:22:51"},{"kind":"number","nativeSrc":"17578:2:51","nodeType":"YulLiteral","src":"17578:2:51","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"17550:3:51","nodeType":"YulIdentifier","src":"17550:3:51"},"nativeSrc":"17550:31:51","nodeType":"YulFunctionCall","src":"17550:31:51"},{"name":"_4","nativeSrc":"17583:2:51","nodeType":"YulIdentifier","src":"17583:2:51"}],"functionName":{"name":"and","nativeSrc":"17546:3:51","nodeType":"YulIdentifier","src":"17546:3:51"},"nativeSrc":"17546:40:51","nodeType":"YulFunctionCall","src":"17546:40:51"}],"functionName":{"name":"add","nativeSrc":"17534:3:51","nodeType":"YulIdentifier","src":"17534:3:51"},"nativeSrc":"17534:53:51","nodeType":"YulFunctionCall","src":"17534:53:51"},"variables":[{"name":"newFreePtr","nativeSrc":"17520:10:51","nodeType":"YulTypedName","src":"17520:10:51","type":""}]},{"body":{"nativeSrc":"17646:22:51","nodeType":"YulBlock","src":"17646:22:51","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"17648:16:51","nodeType":"YulIdentifier","src":"17648:16:51"},"nativeSrc":"17648:18:51","nodeType":"YulFunctionCall","src":"17648:18:51"},"nativeSrc":"17648:18:51","nodeType":"YulExpressionStatement","src":"17648:18:51"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"17605:10:51","nodeType":"YulIdentifier","src":"17605:10:51"},{"name":"_1","nativeSrc":"17617:2:51","nodeType":"YulIdentifier","src":"17617:2:51"}],"functionName":{"name":"gt","nativeSrc":"17602:2:51","nodeType":"YulIdentifier","src":"17602:2:51"},"nativeSrc":"17602:18:51","nodeType":"YulFunctionCall","src":"17602:18:51"},{"arguments":[{"name":"newFreePtr","nativeSrc":"17625:10:51","nodeType":"YulIdentifier","src":"17625:10:51"},{"name":"memPtr","nativeSrc":"17637:6:51","nodeType":"YulIdentifier","src":"17637:6:51"}],"functionName":{"name":"lt","nativeSrc":"17622:2:51","nodeType":"YulIdentifier","src":"17622:2:51"},"nativeSrc":"17622:22:51","nodeType":"YulFunctionCall","src":"17622:22:51"}],"functionName":{"name":"or","nativeSrc":"17599:2:51","nodeType":"YulIdentifier","src":"17599:2:51"},"nativeSrc":"17599:46:51","nodeType":"YulFunctionCall","src":"17599:46:51"},"nativeSrc":"17596:72:51","nodeType":"YulIf","src":"17596:72:51"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17684:2:51","nodeType":"YulLiteral","src":"17684:2:51","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"17688:10:51","nodeType":"YulIdentifier","src":"17688:10:51"}],"functionName":{"name":"mstore","nativeSrc":"17677:6:51","nodeType":"YulIdentifier","src":"17677:6:51"},"nativeSrc":"17677:22:51","nodeType":"YulFunctionCall","src":"17677:22:51"},"nativeSrc":"17677:22:51","nodeType":"YulExpressionStatement","src":"17677:22:51"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"17715:6:51","nodeType":"YulIdentifier","src":"17715:6:51"},{"name":"_3","nativeSrc":"17723:2:51","nodeType":"YulIdentifier","src":"17723:2:51"}],"functionName":{"name":"mstore","nativeSrc":"17708:6:51","nodeType":"YulIdentifier","src":"17708:6:51"},"nativeSrc":"17708:18:51","nodeType":"YulFunctionCall","src":"17708:18:51"},"nativeSrc":"17708:18:51","nodeType":"YulExpressionStatement","src":"17708:18:51"},{"body":{"nativeSrc":"17772:16:51","nodeType":"YulBlock","src":"17772:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17781:1:51","nodeType":"YulLiteral","src":"17781:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"17784:1:51","nodeType":"YulLiteral","src":"17784:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17774:6:51","nodeType":"YulIdentifier","src":"17774:6:51"},"nativeSrc":"17774:12:51","nodeType":"YulFunctionCall","src":"17774:12:51"},"nativeSrc":"17774:12:51","nodeType":"YulExpressionStatement","src":"17774:12:51"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"17749:2:51","nodeType":"YulIdentifier","src":"17749:2:51"},{"name":"_3","nativeSrc":"17753:2:51","nodeType":"YulIdentifier","src":"17753:2:51"}],"functionName":{"name":"add","nativeSrc":"17745:3:51","nodeType":"YulIdentifier","src":"17745:3:51"},"nativeSrc":"17745:11:51","nodeType":"YulFunctionCall","src":"17745:11:51"},{"kind":"number","nativeSrc":"17758:2:51","nodeType":"YulLiteral","src":"17758:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17741:3:51","nodeType":"YulIdentifier","src":"17741:3:51"},"nativeSrc":"17741:20:51","nodeType":"YulFunctionCall","src":"17741:20:51"},{"name":"dataEnd","nativeSrc":"17763:7:51","nodeType":"YulIdentifier","src":"17763:7:51"}],"functionName":{"name":"gt","nativeSrc":"17738:2:51","nodeType":"YulIdentifier","src":"17738:2:51"},"nativeSrc":"17738:33:51","nodeType":"YulFunctionCall","src":"17738:33:51"},"nativeSrc":"17735:53:51","nodeType":"YulIf","src":"17735:53:51"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"17836:2:51","nodeType":"YulIdentifier","src":"17836:2:51"},{"kind":"number","nativeSrc":"17840:2:51","nodeType":"YulLiteral","src":"17840:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17832:3:51","nodeType":"YulIdentifier","src":"17832:3:51"},"nativeSrc":"17832:11:51","nodeType":"YulFunctionCall","src":"17832:11:51"},{"arguments":[{"name":"memPtr","nativeSrc":"17849:6:51","nodeType":"YulIdentifier","src":"17849:6:51"},{"kind":"number","nativeSrc":"17857:2:51","nodeType":"YulLiteral","src":"17857:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17845:3:51","nodeType":"YulIdentifier","src":"17845:3:51"},"nativeSrc":"17845:15:51","nodeType":"YulFunctionCall","src":"17845:15:51"},{"name":"_3","nativeSrc":"17862:2:51","nodeType":"YulIdentifier","src":"17862:2:51"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"17797:34:51","nodeType":"YulIdentifier","src":"17797:34:51"},"nativeSrc":"17797:68:51","nodeType":"YulFunctionCall","src":"17797:68:51"},"nativeSrc":"17797:68:51","nodeType":"YulExpressionStatement","src":"17797:68:51"},{"nativeSrc":"17874:16:51","nodeType":"YulAssignment","src":"17874:16:51","value":{"name":"memPtr","nativeSrc":"17884:6:51","nodeType":"YulIdentifier","src":"17884:6:51"},"variableNames":[{"name":"value0","nativeSrc":"17874:6:51","nodeType":"YulIdentifier","src":"17874:6:51"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nativeSrc":"16940:956:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16997:9:51","nodeType":"YulTypedName","src":"16997:9:51","type":""},{"name":"dataEnd","nativeSrc":"17008:7:51","nodeType":"YulTypedName","src":"17008:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17020:6:51","nodeType":"YulTypedName","src":"17020:6:51","type":""}],"src":"16940:956:51"},{"body":{"nativeSrc":"18030:198:51","nodeType":"YulBlock","src":"18030:198:51","statements":[{"nativeSrc":"18040:26:51","nodeType":"YulAssignment","src":"18040:26:51","value":{"arguments":[{"name":"headStart","nativeSrc":"18052:9:51","nodeType":"YulIdentifier","src":"18052:9:51"},{"kind":"number","nativeSrc":"18063:2:51","nodeType":"YulLiteral","src":"18063:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18048:3:51","nodeType":"YulIdentifier","src":"18048:3:51"},"nativeSrc":"18048:18:51","nodeType":"YulFunctionCall","src":"18048:18:51"},"variableNames":[{"name":"tail","nativeSrc":"18040:4:51","nodeType":"YulIdentifier","src":"18040:4:51"}]},{"nativeSrc":"18075:52:51","nodeType":"YulVariableDeclaration","src":"18075:52:51","value":{"kind":"number","nativeSrc":"18085:42:51","nodeType":"YulLiteral","src":"18085:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18079:2:51","nodeType":"YulTypedName","src":"18079:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18143:9:51","nodeType":"YulIdentifier","src":"18143:9:51"},{"arguments":[{"name":"value0","nativeSrc":"18158:6:51","nodeType":"YulIdentifier","src":"18158:6:51"},{"name":"_1","nativeSrc":"18166:2:51","nodeType":"YulIdentifier","src":"18166:2:51"}],"functionName":{"name":"and","nativeSrc":"18154:3:51","nodeType":"YulIdentifier","src":"18154:3:51"},"nativeSrc":"18154:15:51","nodeType":"YulFunctionCall","src":"18154:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18136:6:51","nodeType":"YulIdentifier","src":"18136:6:51"},"nativeSrc":"18136:34:51","nodeType":"YulFunctionCall","src":"18136:34:51"},"nativeSrc":"18136:34:51","nodeType":"YulExpressionStatement","src":"18136:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18190:9:51","nodeType":"YulIdentifier","src":"18190:9:51"},{"kind":"number","nativeSrc":"18201:2:51","nodeType":"YulLiteral","src":"18201:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18186:3:51","nodeType":"YulIdentifier","src":"18186:3:51"},"nativeSrc":"18186:18:51","nodeType":"YulFunctionCall","src":"18186:18:51"},{"arguments":[{"name":"value1","nativeSrc":"18210:6:51","nodeType":"YulIdentifier","src":"18210:6:51"},{"name":"_1","nativeSrc":"18218:2:51","nodeType":"YulIdentifier","src":"18218:2:51"}],"functionName":{"name":"and","nativeSrc":"18206:3:51","nodeType":"YulIdentifier","src":"18206:3:51"},"nativeSrc":"18206:15:51","nodeType":"YulFunctionCall","src":"18206:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18179:6:51","nodeType":"YulIdentifier","src":"18179:6:51"},"nativeSrc":"18179:43:51","nodeType":"YulFunctionCall","src":"18179:43:51"},"nativeSrc":"18179:43:51","nodeType":"YulExpressionStatement","src":"18179:43:51"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"17901:327:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17991:9:51","nodeType":"YulTypedName","src":"17991:9:51","type":""},{"name":"value1","nativeSrc":"18002:6:51","nodeType":"YulTypedName","src":"18002:6:51","type":""},{"name":"value0","nativeSrc":"18010:6:51","nodeType":"YulTypedName","src":"18010:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18021:4:51","nodeType":"YulTypedName","src":"18021:4:51","type":""}],"src":"17901:327:51"},{"body":{"nativeSrc":"18436:309:51","nodeType":"YulBlock","src":"18436:309:51","statements":[{"nativeSrc":"18446:52:51","nodeType":"YulVariableDeclaration","src":"18446:52:51","value":{"kind":"number","nativeSrc":"18456:42:51","nodeType":"YulLiteral","src":"18456:42:51","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18450:2:51","nodeType":"YulTypedName","src":"18450:2:51","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18514:9:51","nodeType":"YulIdentifier","src":"18514:9:51"},{"arguments":[{"name":"value0","nativeSrc":"18529:6:51","nodeType":"YulIdentifier","src":"18529:6:51"},{"name":"_1","nativeSrc":"18537:2:51","nodeType":"YulIdentifier","src":"18537:2:51"}],"functionName":{"name":"and","nativeSrc":"18525:3:51","nodeType":"YulIdentifier","src":"18525:3:51"},"nativeSrc":"18525:15:51","nodeType":"YulFunctionCall","src":"18525:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18507:6:51","nodeType":"YulIdentifier","src":"18507:6:51"},"nativeSrc":"18507:34:51","nodeType":"YulFunctionCall","src":"18507:34:51"},"nativeSrc":"18507:34:51","nodeType":"YulExpressionStatement","src":"18507:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18561:9:51","nodeType":"YulIdentifier","src":"18561:9:51"},{"kind":"number","nativeSrc":"18572:2:51","nodeType":"YulLiteral","src":"18572:2:51","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18557:3:51","nodeType":"YulIdentifier","src":"18557:3:51"},"nativeSrc":"18557:18:51","nodeType":"YulFunctionCall","src":"18557:18:51"},{"arguments":[{"name":"value1","nativeSrc":"18581:6:51","nodeType":"YulIdentifier","src":"18581:6:51"},{"name":"_1","nativeSrc":"18589:2:51","nodeType":"YulIdentifier","src":"18589:2:51"}],"functionName":{"name":"and","nativeSrc":"18577:3:51","nodeType":"YulIdentifier","src":"18577:3:51"},"nativeSrc":"18577:15:51","nodeType":"YulFunctionCall","src":"18577:15:51"}],"functionName":{"name":"mstore","nativeSrc":"18550:6:51","nodeType":"YulIdentifier","src":"18550:6:51"},"nativeSrc":"18550:43:51","nodeType":"YulFunctionCall","src":"18550:43:51"},"nativeSrc":"18550:43:51","nodeType":"YulExpressionStatement","src":"18550:43:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18613:9:51","nodeType":"YulIdentifier","src":"18613:9:51"},{"kind":"number","nativeSrc":"18624:2:51","nodeType":"YulLiteral","src":"18624:2:51","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18609:3:51","nodeType":"YulIdentifier","src":"18609:3:51"},"nativeSrc":"18609:18:51","nodeType":"YulFunctionCall","src":"18609:18:51"},{"name":"value2","nativeSrc":"18629:6:51","nodeType":"YulIdentifier","src":"18629:6:51"}],"functionName":{"name":"mstore","nativeSrc":"18602:6:51","nodeType":"YulIdentifier","src":"18602:6:51"},"nativeSrc":"18602:34:51","nodeType":"YulFunctionCall","src":"18602:34:51"},"nativeSrc":"18602:34:51","nodeType":"YulExpressionStatement","src":"18602:34:51"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18656:9:51","nodeType":"YulIdentifier","src":"18656:9:51"},{"kind":"number","nativeSrc":"18667:2:51","nodeType":"YulLiteral","src":"18667:2:51","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18652:3:51","nodeType":"YulIdentifier","src":"18652:3:51"},"nativeSrc":"18652:18:51","nodeType":"YulFunctionCall","src":"18652:18:51"},{"kind":"number","nativeSrc":"18672:3:51","nodeType":"YulLiteral","src":"18672:3:51","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"18645:6:51","nodeType":"YulIdentifier","src":"18645:6:51"},"nativeSrc":"18645:31:51","nodeType":"YulFunctionCall","src":"18645:31:51"},"nativeSrc":"18645:31:51","nodeType":"YulExpressionStatement","src":"18645:31:51"},{"nativeSrc":"18685:54:51","nodeType":"YulAssignment","src":"18685:54:51","value":{"arguments":[{"name":"value3","nativeSrc":"18711:6:51","nodeType":"YulIdentifier","src":"18711:6:51"},{"arguments":[{"name":"headStart","nativeSrc":"18723:9:51","nodeType":"YulIdentifier","src":"18723:9:51"},{"kind":"number","nativeSrc":"18734:3:51","nodeType":"YulLiteral","src":"18734:3:51","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18719:3:51","nodeType":"YulIdentifier","src":"18719:3:51"},"nativeSrc":"18719:19:51","nodeType":"YulFunctionCall","src":"18719:19:51"}],"functionName":{"name":"abi_encode_string","nativeSrc":"18693:17:51","nodeType":"YulIdentifier","src":"18693:17:51"},"nativeSrc":"18693:46:51","nodeType":"YulFunctionCall","src":"18693:46:51"},"variableNames":[{"name":"tail","nativeSrc":"18685:4:51","nodeType":"YulIdentifier","src":"18685:4:51"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"18233:512:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18381:9:51","nodeType":"YulTypedName","src":"18381:9:51","type":""},{"name":"value3","nativeSrc":"18392:6:51","nodeType":"YulTypedName","src":"18392:6:51","type":""},{"name":"value2","nativeSrc":"18400:6:51","nodeType":"YulTypedName","src":"18400:6:51","type":""},{"name":"value1","nativeSrc":"18408:6:51","nodeType":"YulTypedName","src":"18408:6:51","type":""},{"name":"value0","nativeSrc":"18416:6:51","nodeType":"YulTypedName","src":"18416:6:51","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18427:4:51","nodeType":"YulTypedName","src":"18427:4:51","type":""}],"src":"18233:512:51"},{"body":{"nativeSrc":"18830:169:51","nodeType":"YulBlock","src":"18830:169:51","statements":[{"body":{"nativeSrc":"18876:16:51","nodeType":"YulBlock","src":"18876:16:51","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18885:1:51","nodeType":"YulLiteral","src":"18885:1:51","type":"","value":"0"},{"kind":"number","nativeSrc":"18888:1:51","nodeType":"YulLiteral","src":"18888:1:51","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18878:6:51","nodeType":"YulIdentifier","src":"18878:6:51"},"nativeSrc":"18878:12:51","nodeType":"YulFunctionCall","src":"18878:12:51"},"nativeSrc":"18878:12:51","nodeType":"YulExpressionStatement","src":"18878:12:51"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"18851:7:51","nodeType":"YulIdentifier","src":"18851:7:51"},{"name":"headStart","nativeSrc":"18860:9:51","nodeType":"YulIdentifier","src":"18860:9:51"}],"functionName":{"name":"sub","nativeSrc":"18847:3:51","nodeType":"YulIdentifier","src":"18847:3:51"},"nativeSrc":"18847:23:51","nodeType":"YulFunctionCall","src":"18847:23:51"},{"kind":"number","nativeSrc":"18872:2:51","nodeType":"YulLiteral","src":"18872:2:51","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"18843:3:51","nodeType":"YulIdentifier","src":"18843:3:51"},"nativeSrc":"18843:32:51","nodeType":"YulFunctionCall","src":"18843:32:51"},"nativeSrc":"18840:52:51","nodeType":"YulIf","src":"18840:52:51"},{"nativeSrc":"18901:29:51","nodeType":"YulVariableDeclaration","src":"18901:29:51","value":{"arguments":[{"name":"headStart","nativeSrc":"18920:9:51","nodeType":"YulIdentifier","src":"18920:9:51"}],"functionName":{"name":"mload","nativeSrc":"18914:5:51","nodeType":"YulIdentifier","src":"18914:5:51"},"nativeSrc":"18914:16:51","nodeType":"YulFunctionCall","src":"18914:16:51"},"variables":[{"name":"value","nativeSrc":"18905:5:51","nodeType":"YulTypedName","src":"18905:5:51","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"18963:5:51","nodeType":"YulIdentifier","src":"18963:5:51"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"18939:23:51","nodeType":"YulIdentifier","src":"18939:23:51"},"nativeSrc":"18939:30:51","nodeType":"YulFunctionCall","src":"18939:30:51"},"nativeSrc":"18939:30:51","nodeType":"YulExpressionStatement","src":"18939:30:51"},{"nativeSrc":"18978:15:51","nodeType":"YulAssignment","src":"18978:15:51","value":{"name":"value","nativeSrc":"18988:5:51","nodeType":"YulIdentifier","src":"18988:5:51"},"variableNames":[{"name":"value0","nativeSrc":"18978:6:51","nodeType":"YulIdentifier","src":"18978:6:51"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"18750:249:51","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18796:9:51","nodeType":"YulTypedName","src":"18796:9:51","type":""},{"name":"dataEnd","nativeSrc":"18807:7:51","nodeType":"YulTypedName","src":"18807:7:51","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"18819:6:51","nodeType":"YulTypedName","src":"18819:6:51","type":""}],"src":"18750:249:51"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1195__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        let _2 := 0xffffffffffffffff\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), and(value4, _2))\n        mstore(add(headStart, 160), 224)\n        let tail_1 := abi_encode_string(value5, add(headStart, 224))\n        mstore(add(headStart, 192), sub(tail_1, headStart))\n        tail := abi_encode_string(value6, tail_1)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$5017_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 224) { revert(0, 0) }\n        value2 := _1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IRevocationRegistry_$5000(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3536__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, 1)\n        case 0 {\n            mstore(pos, and(slotValue, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, 0x20)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := ret\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function read_from_calldatat_uint16(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function read_from_calldatat_uint64(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function update_storage_value_offsett_uint64_to_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff), and(shl(96, value), 0xffffffffffffffff000000000000000000000000)))\n    }\n    function update_storage_value_offsett_uint64_to_t_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff), and(shl(160, value), 0xffffffffffffffff0000000000000000000000000000000000000000)))\n    }\n    function access_calldata_tail_string_calldata(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function update_storage_value_offset_0t_struct$_MetaData_$5017_calldata_ptr_to_t_struct$_MetaData_$5017_storage(slot, value)\n    {\n        let _1 := and(read_from_calldatat_uint16(value), 0xffff)\n        let _2 := sload(slot)\n        sstore(slot, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000), _1))\n        let _3 := and(shl(16, read_from_calldatat_uint16(add(value, 32))), 0xffff0000)\n        sstore(slot, or(or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000), _1), _3))\n        sstore(slot, or(or(_3, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000), _1)), and(shl(32, read_from_calldatat_uint64(add(value, 64))), 0xffffffffffffffff00000000)))\n        update_storage_value_offsett_uint64_to_uint64(slot, read_from_calldatat_uint64(add(value, 96)))\n        update_storage_value_offsett_uint64_to_t_uint64(slot, read_from_calldatat_uint64(add(value, 128)))\n        let memberValue, memberValue_1 := access_calldata_tail_string_calldata(value, add(value, 160))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 1), memberValue, memberValue_1)\n        let memberValue_2, memberValue_3 := access_calldata_tail_string_calldata(value, add(value, 192))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 2), memberValue_2, memberValue_3)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":51,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1059":[{"length":32,"start":616},{"length":32,"start":782},{"length":32,"start":7870},{"length":32,"start":8006}],"4481":[{"length":32,"start":4339}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101c45760003560e01c80638bb9c5bf116100f9578063b88d4fde11610097578063d547741f11610071578063d547741f14610430578063e985e9c514610443578063f2fde38b14610456578063f5b541a61461046957600080fd5b8063b88d4fde146103e3578063c87b56dd146103f6578063d53913931461040957600080fd5b806395d89b41116100d357806395d89b41146103ad57806395f94bc4146103b5578063a0c76f62146103c8578063a22cb465146103d057600080fd5b80638bb9c5bf1461037f5780638da5cb5b1461039257806391d148541461039a57600080fd5b806342842e0e1161016657806354c7be061161014057806354c7be06146102eb578063572b6c05146102fe5780636352211e1461034b57806370a082311461035e57600080fd5b806342842e0e1461029f57806342966c68146102b25780634bae2be8146102c557600080fd5b8063095ea7b3116101a2578063095ea7b31461023e57806323b872dd146102535780632b4c9f16146102665780632f2ff15d1461028c57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d736600461218b565b610490565b60405190151581526020015b60405180910390f35b6101f96104aa565b6040516101e89190612216565b610219610214366004612229565b6104b9565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e8565b61025161024c366004612264565b6104cd565b005b610251610261366004612290565b6104ee565b7f0000000000000000000000000000000000000000000000000000000000000000610219565b61025161029a3660046122d1565b610522565b6102516102ad366004612290565b61055b565b6102516102c0366004612229565b610589565b6102d86102d3366004612229565b610787565b6040516101e89796959493929190612301565b6102516102f9366004612368565b61090e565b6101dc61030c3660046123c8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b610219610359366004612229565b610977565b61037161036c3660046123c8565b610985565b6040519081526020016101e8565b61025161038d366004612229565b610999565b6102196109b7565b6101dc6103a83660046122d1565b6109de565b6101f9610a29565b6102516103c33660046123c8565b610a33565b610219610a8d565b6102516103de3660046123f3565b610ab7565b6102516103f1366004612421565b610ad4565b6101f9610404366004612229565b610b0e565b6103717f6d696e746572000000000000000000000000000000000000000000000000000081565b61025161043e3660046122d1565b610b31565b6101dc6104513660046124c0565b610b5f565b6102516104643660046123c8565b610bad565b6103717f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104a48261049e610bc8565b90610bf6565b92915050565b60606104b4610cd0565b905090565b60006104a4826104c7610ce2565b90610d10565b6104ea6104d8610dc9565b83836104e2610ce2565b929190610dd3565b5050565b60006104f8610dc9565b9050610504818361104e565b61051c81858585610513610ce2565b9392919061118f565b50505050565b600061052c610dc9565b90506105408161053a61146d565b9061149b565b61055683838361054e611506565b929190611534565b505050565b6000610565610dc9565b9050610571818361104e565b61051c81858585610580610ce2565b9392919061160a565b600081815260016020818152604080842090516105ab93919091019101612541565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a91906125d5565b156107555760006106938361068d610ce2565b90611650565b90507fdead0000000000000000000000000000000000000000000000000000000000006106be610ce2565b600085815260209190915260409020556106d6610ce2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c01000000000000000000000000840482169474010000000000000000000000000000000000000000909404909116926107fd906124ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610829906124ee565b80156108765780601f1061084b57610100808354040283529160200191610876565b820191906000526020600020905b81548152906001019060200180831161085957829003601f168201915b50505050509080600201805461088b906124ee565b80601f01602080910402602001604051908101604052809291908181526020018280546108b7906124ee565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b5050505050905087565b6109427f6d696e74657200000000000000000000000000000000000000000000000000003361093b611506565b91906116b9565b610956838361094f610ce2565b919061173f565b60008281526001602052604090208190610970828261281d565b5050505050565b60006104a48261068d610ce2565b60006104a482610993610ce2565b90611859565b6109b46109a4610dc9565b826109ad611506565b91906118d5565b50565b60006104b46109c461146d565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a2283836109ed611506565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104b4611979565b610a46610a3e610dc9565b61053a61146d565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104b4610a9a61198b565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6104ea610ac2610dc9565b8383610acc610ce2565b9291906119b9565b6000610ade610dc9565b9050610aea818561104e565b610b06818787878787610afb610ce2565b959493929190611ad1565b505050505050565b6060610b1c8261068d610ce2565b506104a43083610b2a61198b565b9190611b47565b6000610b3b610dc9565b9050610b498161053a61146d565b610556838383610b57611506565b929190611c07565b6000610a228383610b6e610ce2565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6109b4610bb8610dc9565b82610bc161146d565b9190611cd1565b6000806104a460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6129c3565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c46575060006104a4565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610c97575060016104a4565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104b4610cdd61198b565b611de5565b6000806104a460017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16129c3565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff8116610d74576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024015b60405180910390fd5b74010000000000000000000000000000000000000000811615610dbf575050600081815260028301602052604090205473ffffffffffffffffffffffffffffffffffffffff166104a4565b60009150506104a4565b60006104b4611e7b565b60008181526020859052604090205473ffffffffffffffffffffffffffffffffffffffff8116610e32576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d6b565b8073ffffffffffffffffffffffffffffffffffffffff80821690851603610e9d576040517fb7fdc01000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d6b565b610ea8868287611fc2565b610f05576040517fc7563a1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528216602482015260448101849052606401610d6b565b73ffffffffffffffffffffffffffffffffffffffff8416610f6a5774010000000000000000000000000000000000000000821615610f6557600083815260208790526040902073ffffffffffffffffffffffffffffffffffffffff821690555b610feb565b740100000000000000000000000000000000000000008217808314610f9b5760008481526020889052604090208190555b506000838152600287016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b828473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000818152600160208181526040808420905161107093919091019101612541565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff85811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906125d5565b610556576105567f6f70657261746f720000000000000000000000000000000000000000000000008461093b611506565b73ffffffffffffffffffffffffffffffffffffffff82166111dc576040517f86c8706700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020869052604090205473ffffffffffffffffffffffffffffffffffffffff811661123b576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101839052602401610d6b565b73ffffffffffffffffffffffffffffffffffffffff84168173ffffffffffffffffffffffffffffffffffffffff16146112bf576040517f14dbb53600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610d6b565b6112ca868587611fc2565b61137957740100000000000000000000000000000000000000008116158061131b5750600082815260028701602052604090205473ffffffffffffffffffffffffffffffffffffffff868116911614155b15611379576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606401610d6b565b600082815260208790526040902073ffffffffffffffffffffffffffffffffffffffff8085169182905585161461140a5773ffffffffffffffffffffffffffffffffffffffff80851660009081526001808901602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190559286168252919020805490910190555b818373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6000806104a460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6129c3565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104ea576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610d6b565b6000806104a460017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236129c3565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661051c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b611617858585858561118f565b73ffffffffffffffffffffffffffffffffffffffff82163b15610970576109708484848460405180602001604052806000815250612037565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116af576040517fdd56047500000000000000000000000000000000000000000000000000000000815260048101849052602401610d6b565b805b949350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610556576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610d6b565b73ffffffffffffffffffffffffffffffffffffffff821661178c576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff16156117eb576040517f753eceac00000000000000000000000000000000000000000000000000000000815260048101829052602401610d6b565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff82166118a8576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b6118e08382846116b9565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104b461198661198b565b61214c565b6000806104a460017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56129c3565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a36576040517fe4215c6a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d6b565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260038701602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b611ade878787878761118f565b73ffffffffffffffffffffffffffffffffffffffff84163b15611b3e57611b3e8686868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203792505050565b50505050505050565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611bc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b191908101906129fd565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561051c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016115fc565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611d3e576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610d6b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611df6906124ee565b80601f0160208091040260200160405190810160405280929190818152602001828054611e22906124ee565b8015611e6f5780601f10611e4457610100808354040283529160200191611e6f565b820191906000526020600020905b815481529060010190602001808311611e5257829003601f168201915b50505050509050919050565b600033321480611e8b5750601836105b15611e9557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611fb157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb191906125d5565b15611fbb57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806116b157505073ffffffffffffffffffffffffffffffffffffffff9182166000908152600393909301602090815260408085209290931684525290205460ff1690565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290612091908990899088908890600401612ac8565b6020604051808303816000875af11580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d49190612b11565b7fffffffff000000000000000000000000000000000000000000000000000000001614610970576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052604401610d6b565b6060816001018054611df6906124ee565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146109b457600080fd5b60006020828403121561219d57600080fd5b8135610a228161215d565b60005b838110156121c35781810151838201526020016121ab565b50506000910152565b600081518084526121e48160208601602086016121a8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a2260208301846121cc565b60006020828403121561223b57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146109b457600080fd5b6000806040838503121561227757600080fd5b823561228281612242565b946020939093013593505050565b6000806000606084860312156122a557600080fd5b83356122b081612242565b925060208401356122c081612242565b929592945050506040919091013590565b600080604083850312156122e457600080fd5b8235915060208301356122f681612242565b809150509250929050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a08201819052600090612348908301856121cc565b82810360c084015261235a81856121cc565b9a9950505050505050505050565b60008060006060848603121561237d57600080fd5b833561238881612242565b925060208401359150604084013567ffffffffffffffff8111156123ab57600080fd5b840160e081870312156123bd57600080fd5b809150509250925092565b6000602082840312156123da57600080fd5b8135610a2281612242565b80151581146109b457600080fd5b6000806040838503121561240657600080fd5b823561241181612242565b915060208301356122f6816123e5565b60008060008060006080868803121561243957600080fd5b853561244481612242565b9450602086013561245481612242565b935060408601359250606086013567ffffffffffffffff8082111561247857600080fd5b818801915088601f83011261248c57600080fd5b81358181111561249b57600080fd5b8960208285010111156124ad57600080fd5b9699959850939650602001949392505050565b600080604083850312156124d357600080fd5b82356124de81612242565b915060208301356122f681612242565b600181811c9082168061250257607f821691505b60208210810361253b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080835461254f816124ee565b60018281168015612567576001811461259a576125c9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506125c9565b8760005260208060002060005b858110156125c05781548a8201529084019082016125a7565b50505082870194505b50929695505050505050565b6000602082840312156125e757600080fd5b8151610a22816123e5565b6000813561ffff811681146104a457600080fd5b6000813567ffffffffffffffff811681146104a457600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261265557600080fd5b83018035915067ffffffffffffffff82111561267057600080fd5b60200191503681900382131561268557600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610556576000816000526020600020601f850160051c810160208610156126e45750805b601f850160051c820191505b81811015610b06578281556001016126f0565b67ffffffffffffffff83111561271b5761271b61268c565b61272f8361272983546124ee565b836126bb565b6000601f841160018114612781576000851561274b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610970565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156127d057868501358255602094850194600190920191016127b0565b508682101561280b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff612829836125f2565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff0000612864602086016125f2565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff000000006128aa60408701612606565b60201b16837fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841617821717845550505061292f6128ea60608401612606565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b61298b61293e60808401612606565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b61299860a0830183612620565b6129a6818360018601612703565b50506129b560c0830183612620565b61051c818360028601612703565b818103818111156104a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215612a0f57600080fd5b815167ffffffffffffffff80821115612a2757600080fd5b818401915084601f830112612a3b57600080fd5b815181811115612a4d57612a4d61268c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612a9357612a9361268c565b81604052828152876020848701011115612aac57600080fd5b612abd8360208301602088016121a8565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612b0760808301846121cc565b9695505050505050565b600060208284031215612b2357600080fd5b8151610a228161215d56fea2646970667358221220968e34f244ade75feba903a7a199bbf20d1927b12fede1bbe006259da8fb272964736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x469 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3B5 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x54C7BE06 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x206 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x218B JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F9 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0x2264 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0x2290 JUMP JUMPDEST PUSH2 0x4EE JUMP JUMPDEST PUSH32 0x0 PUSH2 0x219 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0x522 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x2290 JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x589 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x787 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2301 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x2F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2368 JUMP JUMPDEST PUSH2 0x90E JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x30C CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x977 JUMP JUMPDEST PUSH2 0x371 PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x999 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0xA29 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0xA33 JUMP JUMPDEST PUSH2 0x219 PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x23F3 JUMP JUMPDEST PUSH2 0xAB7 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2421 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0xB0E JUMP JUMPDEST PUSH2 0x371 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x22D1 JUMP JUMPDEST PUSH2 0xB31 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x24C0 JUMP JUMPDEST PUSH2 0xB5F JUMP JUMPDEST PUSH2 0x251 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x371 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x49E PUSH2 0xBC8 JUMP JUMPDEST SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0xCD0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x4C7 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x4EA PUSH2 0x4D8 PUSH2 0xDC9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x4E2 PUSH2 0xCE2 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xDD3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F8 PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x504 DUP2 DUP4 PUSH2 0x104E JUMP JUMPDEST PUSH2 0x51C DUP2 DUP6 DUP6 DUP6 PUSH2 0x513 PUSH2 0xCE2 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x118F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52C PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x540 DUP2 PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH2 0x556 DUP4 DUP4 DUP4 PUSH2 0x54E PUSH2 0x1506 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1534 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x565 PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0x571 DUP2 DUP4 PUSH2 0x104E JUMP JUMPDEST PUSH2 0x51C DUP2 DUP6 DUP6 DUP6 PUSH2 0x580 PUSH2 0xCE2 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x5AB SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x656 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67A SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST ISZERO PUSH2 0x755 JUMPI PUSH1 0x0 PUSH2 0x693 DUP4 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0x1650 JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0x6BE PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x6D6 PUSH2 0xCE2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0x7FD SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x829 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x876 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x84B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x876 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x859 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x88B SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8B7 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x904 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x904 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x942 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x93B PUSH2 0x1506 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x956 DUP4 DUP4 PUSH2 0x94F PUSH2 0xCE2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x173F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x970 DUP3 DUP3 PUSH2 0x281D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A4 DUP3 PUSH2 0x993 PUSH2 0xCE2 JUMP JUMPDEST SWAP1 PUSH2 0x1859 JUMP JUMPDEST PUSH2 0x9B4 PUSH2 0x9A4 PUSH2 0xDC9 JUMP JUMPDEST DUP3 PUSH2 0x9AD PUSH2 0x1506 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x18D5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x9C4 PUSH2 0x146D JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA22 DUP4 DUP4 PUSH2 0x9ED PUSH2 0x1506 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0x1979 JUMP JUMPDEST PUSH2 0xA46 PUSH2 0xA3E PUSH2 0xDC9 JUMP JUMPDEST PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0xA9A PUSH2 0x198B JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4EA PUSH2 0xAC2 PUSH2 0xDC9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xACC PUSH2 0xCE2 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x19B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADE PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0xAEA DUP2 DUP6 PUSH2 0x104E JUMP JUMPDEST PUSH2 0xB06 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xAFB PUSH2 0xCE2 JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB1C DUP3 PUSH2 0x68D PUSH2 0xCE2 JUMP JUMPDEST POP PUSH2 0x4A4 ADDRESS DUP4 PUSH2 0xB2A PUSH2 0x198B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B47 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3B PUSH2 0xDC9 JUMP JUMPDEST SWAP1 POP PUSH2 0xB49 DUP2 PUSH2 0x53A PUSH2 0x146D JUMP JUMPDEST PUSH2 0x556 DUP4 DUP4 DUP4 PUSH2 0xB57 PUSH2 0x1506 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1C07 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA22 DUP4 DUP4 PUSH2 0xB6E PUSH2 0xCE2 JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x9B4 PUSH2 0xBB8 PUSH2 0xDC9 JUMP JUMPDEST DUP3 PUSH2 0xBC1 PUSH2 0x146D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC46 JUMPI POP PUSH1 0x0 PUSH2 0x4A4 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xC97 JUMPI POP PUSH1 0x1 PUSH2 0x4A4 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0xCDD PUSH2 0x198B JUMP JUMPDEST PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xD74 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0xDBF JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B4 PUSH2 0x1E7B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP1 DUP6 AND SUB PUSH2 0xE9D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB7FDC01000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH2 0xEA8 DUP7 DUP3 DUP8 PUSH2 0x1FC2 JUMP JUMPDEST PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7563A1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0xF6A JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP3 AND ISZERO PUSH2 0xF65 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 SSTORE JUMPDEST PUSH2 0xFEB JUMP JUMPDEST PUSH21 0x10000000000000000000000000000000000000000 DUP3 OR DUP1 DUP4 EQ PUSH2 0xF9B JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE JUMPDEST DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x1070 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x2541 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x115E SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH2 0x556 JUMPI PUSH2 0x556 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP5 PUSH2 0x93B PUSH2 0x1506 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x86C8706700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x123B JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH2 0x12CA DUP7 DUP6 DUP8 PUSH2 0x1FC2 JUMP JUMPDEST PUSH2 0x1379 JUMPI PUSH21 0x10000000000000000000000000000000000000000 DUP2 AND ISZERO DUP1 PUSH2 0x131B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1379 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 DUP3 SWAP1 SSTORE DUP6 AND EQ PUSH2 0x140A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP1 DUP10 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x29C3 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x29C3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x51C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x1617 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x118F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x970 JUMPI PUSH2 0x970 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2037 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x178C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x17EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x18A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x18E0 DUP4 DUP3 DUP5 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B4 PUSH2 0x1986 PUSH2 0x198B JUMP JUMPDEST PUSH2 0x214C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4A4 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x29C3 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A36 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4215C6A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x1ADE DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x118F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B3E JUMPI PUSH2 0x1B3E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2037 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16B1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x15FC JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1D3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD6B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x51C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1DF6 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E22 SWAP1 PUSH2 0x24EE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E6F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E44 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E6F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E52 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E95 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1FB1 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FB1 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST ISZERO PUSH2 0x1FBB JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x16B1 JUMPI POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x2091 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AC8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20D4 SWAP2 SWAP1 PUSH2 0x2B11 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1DF6 SWAP1 PUSH2 0x24EE JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA22 DUP2 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21C3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21AB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x21E4 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x21A8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xA22 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2282 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x22A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x22B0 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x22C0 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x2242 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2348 SWAP1 DUP4 ADD DUP6 PUSH2 0x21CC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x235A DUP2 DUP6 PUSH2 0x21CC JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2388 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x23BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA22 DUP2 PUSH2 0x2242 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2411 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2444 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2454 DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x248C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x249B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x24AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24DE DUP2 PUSH2 0x2242 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x22F6 DUP2 PUSH2 0x2242 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2502 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x253B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x254F DUP2 PUSH2 0x24EE JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2567 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x259A JUMPI PUSH2 0x25C9 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x25C9 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x25C0 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x25A7 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA22 DUP2 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2685 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x26E4 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB06 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26F0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x271B JUMPI PUSH2 0x271B PUSH2 0x268C JUMP JUMPDEST PUSH2 0x272F DUP4 PUSH2 0x2729 DUP4 SLOAD PUSH2 0x24EE JUMP JUMPDEST DUP4 PUSH2 0x26BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2781 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x274B JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x970 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27D0 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x27B0 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x280B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x2829 DUP4 PUSH2 0x25F2 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2864 PUSH1 0x20 DUP7 ADD PUSH2 0x25F2 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x28AA PUSH1 0x40 DUP8 ADD PUSH2 0x2606 JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x292F PUSH2 0x28EA PUSH1 0x60 DUP5 ADD PUSH2 0x2606 JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x298B PUSH2 0x293E PUSH1 0x80 DUP5 ADD PUSH2 0x2606 JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2998 PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x29A6 DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x2703 JUMP JUMPDEST POP POP PUSH2 0x29B5 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x51C DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x2703 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4A4 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2A4D JUMPI PUSH2 0x2A4D PUSH2 0x268C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2A93 JUMPI PUSH2 0x2A93 PUSH2 0x268C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ABD DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x21A8 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2B07 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x21CC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA22 DUP2 PUSH2 0x215D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 DUP15 CALLVALUE CALLCODE PREVRANDAO 0xAD 0xE7 PUSH0 0xEB 0xA9 SUB 0xA7 LOG1 SWAP10 0xBB CALLCODE 0xD NOT 0x27 0xB1 0x2F 0xED 0xE1 0xBB 0xE0 MOD 0x25 SWAP14 0xA8 0xFB 0x27 0x29 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1987:6840:47:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;611:14:51;;604:22;586:41;;574:2;559:18;542:165:14;;;;;;;;942:163:26;;;:::i;:::-;;;;;;;:::i;5907:146:47:-;;;;;;:::i;:::-;;:::i;:::-;;;1814:42:51;1802:55;;;1784:74;;1772:2;1757:18;5907:146:47;1638:226:51;5205:129:47;;;;;;:::i;:::-;;:::i;:::-;;7265:238;;;;;;:::i;:::-;;:::i;728:115:18:-;817:19;728:115;;1116:257:3;;;;;;:::i;:::-;;:::i;7681:246:47:-;;;;;;:::i;:::-;;:::i;4518:653::-;;;;;;:::i;:::-;;:::i;2699:67::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;3932:278::-;;;;;;:::i;:::-;;:::i;878:149:18:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;5733:140:47;;;;;;:::i;:::-;;:::i;5562:137::-;;;;;;:::i;:::-;;:::i;:::-;;;5226:25:51;;;5214:2;5199:18;5562:137:47;5080:177:51;1994:124:3;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;2159:162:3:-;;;;;;:::i;:::-;;:::i;1147:169:26:-;;;:::i;3475:217:47:-;;;;;;:::i;:::-;;:::i;1214:177:39:-;;;:::i;5368:160:47:-;;;;;;:::i;:::-;;:::i;8105:273::-;;;;;;:::i;:::-;;:::i;1358:267:26:-;;;;;;:::i;:::-;;:::i;2591:46:47:-;;;;;1694:259:3;;;;;;:::i;:::-;;:::i;6087:183:47:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;2643:50:47:-;;;;;542:165:14;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;942:163:26:-;1032:23;1074:24;:22;:24::i;:::-;1067:31;;942:163;:::o;5907:146:47:-;5968:16;6003:43;6038:7;6003:22;:20;:22::i;:::-;:34;;:43::i;5205:129::-;5270:57;5301:12;:10;:12::i;:::-;5315:2;5319:7;5270:22;:20;:22::i;:::-;:30;:57;;:30;:57::i;:::-;5205:129;;:::o;7265:238::-;7349:14;7366:12;:10;:12::i;:::-;7349:29;;7388:36;7408:6;7416:7;7388:19;:36::i;:::-;7434:62;7470:6;7478:4;7484:2;7488:7;7434:22;:20;:22::i;:::-;:35;:62;;;:35;:62::i;:::-;7339:164;7265:238;;;:::o;1116:257:3:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;7681:246:47:-;7769:14;7786:12;:10;:12::i;:::-;7769:29;;7808:36;7828:6;7836:7;7808:19;:36::i;:::-;7854:66;7894:6;7902:4;7908:2;7912:7;7854:22;:20;:22::i;:::-;:39;:66;;;:39;:66::i;4518:653::-;4568:17;4615:15;;;:6;:15;;;;;;;;4598:43;;;;4615:25;;;;;4598:43;;:::i;:::-;;;;;;;;;;;;;;;4588:54;;4598:43;4588:54;;;;4656:19;;:49;;;;;;9663:25:51;;;9704:18;;;9697:34;;;4588:54:47;;-1:-1:-1;4656:19:47;;;:29;;9636:18:51;;4656:49:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4652:513;;;4721:13;4737:39;4768:7;4737:22;:20;:22::i;:::-;:30;;:39::i;:::-;4721:55;;2379:66:38;4790:22:47;:20;:22::i;:::-;:29;:38;;;;;;;;;;;:78;4996:22;:20;:22::i;:::-;:38;;;;;;;:31;;;;;:38;;;;;;4994:40;;;;;;5067:36;5095:7;;4996:38;;5067:36;;4996:38;;5067:36;4707:407;5205:129;;:::o;4652:513::-;5141:13;;;;;;;;;;;;;;2699:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3932:278::-;4047:69;4092:11;4105:10;4047:29;:27;:29::i;:::-;:44;:69;:44;:69::i;:::-;4127:40;4155:2;4159:7;4127:22;:20;:22::i;:::-;:27;:40;:27;:40::i;:::-;4177:15;;;;:6;:15;;;;;4195:8;;4177:26;4195:8;4177:15;:26;:::i;:::-;-1:-1:-1;;;;;3932:278:47:o;5733:140::-;5790:18;5827:39;5858:7;5827:22;:20;:22::i;5562:137::-;5619:15;5653:39;5686:5;5653:22;:20;:22::i;:::-;:32;;:39::i;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;2159:162:3;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2774:13:12;2806;;;;;;;;;;;:22;;;;;;;;;;;;;;;2685:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;1147:169:26:-;1239:25;1283:26;:24;:26::i;3475:217:47:-;3565:70;3622:12;:10;:12::i;:::-;3565:33;:31;:33::i;:70::-;3645:19;:40;;;;;;;;;;;;;;;3475:217::o;1214:177:39:-;1273:44;1336:48;:29;:27;:29::i;:::-;2991:23:41;;;;;;2861:160;5368::47;5447:74;5488:12;:10;:12::i;:::-;5502:8;5512;5447:22;:20;:22::i;:::-;:40;:74;;:40;:74::i;8105:273::-;8214:14;8231:12;:10;:12::i;:::-;8214:29;;8253:36;8273:6;8281:7;8253:19;:36::i;:::-;8299:72;8339:6;8347:4;8353:2;8357:7;8366:4;;8299:22;:20;:22::i;:::-;:39;:72;;;;;:39;:72::i;:::-;8204:174;8105:273;;;;;:::o;1358:267:26:-;1424:17;1453:39;1484:7;1453:22;:20;:22::i;:39::-;;1548:70;1603:4;1610:7;1548:29;:27;:29::i;:::-;:46;:70;:46;:70::i;1694:259:3:-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;6087:183:47:-;6169:19;6207:56;6247:5;6254:8;6207:22;:20;:22::i;:::-;:39;:56;28679:18:38;;;;28641:19;28679:18;;;:11;;;;;:18;;;;;;;;:28;;;;;;;;;;;;;28541:173;864:152:4;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;706:130:39:-;751:23;793:36;:29;:27;:29::i;:::-;:34;:36::i;29031:174:38:-;29072:16;;1836:61;1896:1;1844:48;1836:61;:::i;27759:360::-;27838:16;27882:17;;;;;;;;;;;30661:19;;;27909:64;;27942:31;;;;;;;;5226:25:51;;;5199:18;;27942:31:38;;;;;;;;27909:64;2185:8;30940:33;;:38;27983:130;;-1:-1:-1;;28034:20:38;;;;:11;;;:20;;;;;;;;28027:27;;27983:130;28100:1;28085:17;;;;;8433:167:47;8526:7;8552:41;:39;:41::i;4625:1052:38:-;4724:13;4740:17;;;;;;;;;;;30661:19;;;4767:64;;4800:31;;;;;;;;5226:25:51;;;5199:18;;4800:31:38;5080:177:51;4767:64:38;4876:5;4896:18;;;;;;;;4892:63;;4923:32;;;;;1814:42:51;1802:55;;4923:32:38;;;1784:74:51;1757:18;;4923:32:38;1638:226:51;4892:63:38;4970:38;4984:1;4987:12;5001:6;4970:13;:38::i;:::-;4965:111;;5017:59;;;;;15742:42:51;15811:15;;;5017:59:38;;;15793:34:51;15863:15;;15843:18;;;15836:43;15895:18;;;15888:34;;;15705:18;;5017:59:38;15530:398:51;4965:111:38;5090:16;;;5086:535;;2185:8;30940:33;;:38;5122:173;;5230:8;:17;;;;;;;;;;5250:30;;;5230:50;;5122:173;5086:535;;;2185:8;5356:33;;5407:29;;;5403:169;;5517:8;:17;;;;;;;;;;:40;;;5403:169;-1:-1:-1;5585:20:38;;;;:11;;;:20;;;;;:25;;;;;;;;;;5086:535;5662:7;5658:2;5635:35;;5644:12;5635:35;;;;;;;;;;;;4714:963;;4625:1052;;;;:::o;6650:441:47:-;6736:17;6783:15;;;:6;:15;;;;;;;;6766:43;;;;6783:25;;;;;6766:43;;:::i;:::-;;;;;;;;;;;;;;;6756:54;;6766:43;6756:54;;;;6952:39;;;;;;16107:25:51;;;6952:20:47;16168:55:51;;;16148:18;;;16141:83;6756:54:47;;-1:-1:-1;6952:12:47;:20;;;;16080:18:51;;6952:39:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6947:138;;7007:67;7052:13;7067:6;7007:29;:27;:29::i;7350:956:38:-;7472:16;;;7468:58;;7497:29;;;;;;;;;;;;;;7468:58;7537:13;7553:17;;;;;;;;;;;30661:19;;;7580:64;;7613:31;;;;;;;;5226:25:51;;;5199:18;;7613:31:38;5080:177:51;7580:64:38;7658:26;;;7670:5;7658:26;;;7654:73;;7693:34;;;;;16439:42:51;16427:55;;7693:34:38;;;16409:74:51;16499:18;;;16492:34;;;16382:18;;7693:34:38;16235:297:51;7654:73:38;7743:30;7757:1;7760:4;7766:6;7743:13;:30::i;:::-;7738:185;;2185:8;30940:33;;:38;;7793:59;;-1:-1:-1;7832:20:38;;;;:11;;;:20;;;;;;;7822:30;;;7832:20;;7822:30;;7793:59;7789:123;;;7861:51;;;;;15742:42:51;15811:15;;;7861:51:38;;;15793:34:51;15863:15;;15843:18;;;15836:43;15895:18;;;15888:34;;;15705:18;;7861:51:38;15530:398:51;7789:123:38;7933:8;:17;;;;;;;;;;7953:20;;;;7933:40;;;;7987:10;;;7983:274;;8120:16;;;;;;;;:10;;;;:16;;;;;;8118:18;;;;;;8218:14;;;;;;;;8216:16;;;;;;;7983:274;8291:7;8287:2;8272:27;;8281:4;8272:27;;;;;;;;;;;;7458:848;7350:956;;;;;:::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1814:42:51;1802:55;;4543:25:13;;;1784:74:51;1757:18;;4543:25:13;1638:226:51;4381:174:12;4422:16;;702:67;768:1;710:54;702:67;:::i;1151:251::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1256:140;;1301:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1326:4;1301:29;;;1349:36;;16739:25:51;;;16841:18;;;16834:43;16913:15;;;16893:18;;;16886:43;;;;1349:36:12;;16727:2:51;16712:18;1349:36:12;;;;;;;;1151:251;;;;:::o;9478:277:38:-;9600:41;:1;9615:6;9623:4;9629:2;9633:7;9600:14;:41::i;:::-;9655:13;;;1702:19:42;:23;9651:98:38;;9686:52;9708:6;9716:4;9722:2;9726:7;9686:52;;;;;;;;;;;;:21;:52::i;27104:254::-;27179:18;27225:17;;;;;;;;;;;30661:19;;;27252:64;;27285:31;;;;;;;;5226:25:51;;;5199:18;;27285:31:38;5080:177:51;27252:64:38;27345:5;27333:18;27326:25;27104:254;-1:-1:-1;;;;27104:254:38:o;3645:170:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;3742:66;;3780:28;;;;;;;;16107:25:51;;;16180:42;16168:55;;16148:18;;;16141:83;16080:18;;3780:28:12;15933:297:51;13998:460:38;14082:16;;;14078:54;;14107:25;;;;;;;;;;;;;;14078:54;14159:8;:17;;;;;;;;;;;30661:19;;;14142:72;;14186:28;;;;;;;;5226:25:51;;;5199:18;;14186:28:38;5080:177:51;14142:72:38;14225:8;:17;;;;;;;;;;;14245:20;;;14225:40;;;;14378:14;;;:10;;;;:14;;;;;;14376:16;;;;;;;;14418:33;14234:7;;14225:8;14418:33;;14225:8;;14418:33;13998:460;;;:::o;26583:203::-;26658:15;26689:19;;;26685:60;;26717:28;;;;;;;;;;;;;;26685:60;-1:-1:-1;26762:17:38;;;;;;:10;;;;;:17;;;;;;;26583:203::o;2288:213:12:-;2377:30;:1;2394:4;2400:6;2377:16;:30::i;:::-;2441:5;2417:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2461:33;;16739:25:51;;;16841:18;;;16834:43;;;16893:18;;16886:43;;;;2461:33:12;;16727:2:51;16712:18;2461:33:12;;;;;;;2288:213;;;:::o;939:136:39:-;986:25;1030:38;:29;:27;:29::i;:::-;:36;:38::i;3441:174:41:-;3482:16;;456:70;525:1;464:57;456:70;:::i;6187:290:38:-;6316:6;6304:18;;:8;:18;;;6300:63;;6331:32;;;;;1814:42:51;1802:55;;6331:32:38;;;1784:74:51;1757:18;;6331:32:38;1638:226:51;6300:63:38;6373:19;;;;;;;;:11;;;:19;;;;;;;;:29;;;;;;;;;;;;;:40;;;;;;;;;;;;;6428:42;;586:41:51;;;6428:42:38;;559:18:51;6428:42:38;;;;;;;6187:290;;;;:::o;11005:300::-;11148:41;:1;11163:6;11171:4;11177:2;11181:7;11148:14;:41::i;:::-;11203:13;;;1702:19:42;:23;11199:100:38;;11234:54;11256:6;11264:4;11270:2;11274:7;11283:4;;11234:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11234:21:38;;-1:-1:-1;;;11234:54:38:i;:::-;11005:300;;;;;;;:::o;3225:210:41:-;3364:23;;;;:64;;;;;:23;16427:55:51;;;3364:64:41;;;16409:74:51;16499:18;;;16492:34;;;3332:13:41;;3364:23;;:40;;16382:18:51;;3364:64:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1780:252:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1886:140;;;1955:5;1930:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1979:36;;16739:25:51;;;16841:18;;;16834:43;16913:15;;;16893:18;;;16886:43;;;;1979:36:12;;16727:2:51;16712:18;1979:36:12;16537:398:51;3060:369:13;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1814:42:51;1802:55;;3243:24:13;;;1784:74:51;1757:18;;3243:24:13;1638:226:51;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3148:281;3060:369;;;:::o;2358:115:41:-;2413:23;2455:1;:11;;2448:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2358:115;;;:::o;784:745:19:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:19;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:19;;784:745::o;1043:95::-;462:23:22;466:14;462:23;449:37;445:2;441:46;1372:19:19;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:19;;;;;:39;18154:15:51;;;1396:59:19;;;18136:34:51;1444:10:19;18186:18:51;;;18179:43;1396:19:19;:39;;;;18048:18:51;;1396:59:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:19:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;30245:185:38:-;30340:15;30384:7;30375:16;;:5;:16;;;30374:49;;;-1:-1:-1;;30396:18:38;;;;;;;;:11;;;;;:18;;;;;;;;:27;;;;;;;;;;;;;30245:185::o;29662:270::-;29793:65;;1948:41;29793:65;;;1948:41;29793:36;;;;1948:41;;29793:65;;29830:6;;29838:4;;29844:7;;29853:4;;29793:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:84;;;29789:136;;29886:39;;;;;16439:42:51;16427:55;;29886:39:38;;;16409:74:51;16499:18;;;16492:34;;;16382:18;;29886:39:38;16235:297:51;2587:121:41;2644:25;2688:1;:13;;2681:20;;;;;:::i;14:177:51:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:51;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:51:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:51;;1453:180;-1:-1:-1;1453:180:51:o;1869:154::-;1955:42;1948:5;1944:54;1937:5;1934:65;1924:93;;2013:1;2010;2003:12;2028:315;2096:6;2104;2157:2;2145:9;2136:7;2132:23;2128:32;2125:52;;;2173:1;2170;2163:12;2125:52;2212:9;2199:23;2231:31;2256:5;2231:31;:::i;:::-;2281:5;2333:2;2318:18;;;;2305:32;;-1:-1:-1;;;2028:315:51:o;2348:456::-;2425:6;2433;2441;2494:2;2482:9;2473:7;2469:23;2465:32;2462:52;;;2510:1;2507;2500:12;2462:52;2549:9;2536:23;2568:31;2593:5;2568:31;:::i;:::-;2618:5;-1:-1:-1;2675:2:51;2660:18;;2647:32;2688:33;2647:32;2688:33;:::i;:::-;2348:456;;2740:7;;-1:-1:-1;;;2794:2:51;2779:18;;;;2766:32;;2348:456::o;3067:315::-;3135:6;3143;3196:2;3184:9;3175:7;3171:23;3167:32;3164:52;;;3212:1;3209;3202:12;3164:52;3248:9;3235:23;3225:33;;3308:2;3297:9;3293:18;3280:32;3321:31;3346:5;3321:31;:::i;:::-;3371:5;3361:15;;;3067:315;;;;;:::o;3387:840::-;3706:6;3739:15;;;3721:34;;3791:15;;3786:2;3771:18;;3764:43;3826:18;3880:15;;;3875:2;3860:18;;3853:43;3932:15;;;3927:2;3912:18;;3905:43;3985:15;;3979:3;3964:19;;3957:44;4038:3;4032;4017:19;;4010:32;;;3677:4;;4065:46;;4091:19;;4083:6;4065:46;:::i;:::-;4160:9;4152:6;4148:22;4142:3;4131:9;4127:19;4120:51;4188:33;4214:6;4206;4188:33;:::i;:::-;4180:41;3387:840;-1:-1:-1;;;;;;;;;;3387:840:51:o;4232:591::-;4337:6;4345;4353;4406:2;4394:9;4385:7;4381:23;4377:32;4374:52;;;4422:1;4419;4412:12;4374:52;4461:9;4448:23;4480:31;4505:5;4480:31;:::i;:::-;4530:5;-1:-1:-1;4582:2:51;4567:18;;4554:32;;-1:-1:-1;4637:2:51;4622:18;;4609:32;4664:18;4653:30;;4650:50;;;4696:1;4693;4686:12;4650:50;4719:22;;4775:3;4757:16;;;4753:26;4750:46;;;4792:1;4789;4782:12;4750:46;4815:2;4805:12;;;4232:591;;;;;:::o;4828:247::-;4887:6;4940:2;4928:9;4919:7;4915:23;4911:32;4908:52;;;4956:1;4953;4946:12;4908:52;4995:9;4982:23;5014:31;5039:5;5014:31;:::i;5989:118::-;6075:5;6068:13;6061:21;6054:5;6051:32;6041:60;;6097:1;6094;6087:12;6112:382;6177:6;6185;6238:2;6226:9;6217:7;6213:23;6209:32;6206:52;;;6254:1;6251;6244:12;6206:52;6293:9;6280:23;6312:31;6337:5;6312:31;:::i;:::-;6362:5;-1:-1:-1;6419:2:51;6404:18;;6391:32;6432:30;6391:32;6432:30;:::i;6499:936::-;6596:6;6604;6612;6620;6628;6681:3;6669:9;6660:7;6656:23;6652:33;6649:53;;;6698:1;6695;6688:12;6649:53;6737:9;6724:23;6756:31;6781:5;6756:31;:::i;:::-;6806:5;-1:-1:-1;6863:2:51;6848:18;;6835:32;6876:33;6835:32;6876:33;:::i;:::-;6928:7;-1:-1:-1;6982:2:51;6967:18;;6954:32;;-1:-1:-1;7037:2:51;7022:18;;7009:32;7060:18;7090:14;;;7087:34;;;7117:1;7114;7107:12;7087:34;7155:6;7144:9;7140:22;7130:32;;7200:7;7193:4;7189:2;7185:13;7181:27;7171:55;;7222:1;7219;7212:12;7171:55;7262:2;7249:16;7288:2;7280:6;7277:14;7274:34;;;7304:1;7301;7294:12;7274:34;7349:7;7344:2;7335:6;7331:2;7327:15;7323:24;7320:37;7317:57;;;7370:1;7367;7360:12;7317:57;6499:936;;;;-1:-1:-1;6499:936:51;;-1:-1:-1;7401:2:51;7393:11;;7423:6;6499:936;-1:-1:-1;;;6499:936:51:o;7622:388::-;7690:6;7698;7751:2;7739:9;7730:7;7726:23;7722:32;7719:52;;;7767:1;7764;7757:12;7719:52;7806:9;7793:23;7825:31;7850:5;7825:31;:::i;:::-;7875:5;-1:-1:-1;7932:2:51;7917:18;;7904:32;7945:33;7904:32;7945:33;:::i;8015:437::-;8094:1;8090:12;;;;8137;;;8158:61;;8212:4;8204:6;8200:17;8190:27;;8158:61;8265:2;8257:6;8254:14;8234:18;8231:38;8228:218;;8302:77;8299:1;8292:88;8403:4;8400:1;8393:15;8431:4;8428:1;8421:15;8228:218;;8015:437;;;:::o;8583:901::-;8711:3;8740:1;8773:6;8767:13;8803:36;8829:9;8803:36;:::i;:::-;8858:1;8875:17;;;8901:191;;;;9106:1;9101:358;;;;8868:591;;8901:191;8949:66;8938:9;8934:82;8929:3;8922:95;9072:6;9065:14;9058:22;9050:6;9046:35;9041:3;9037:45;9030:52;;8901:191;;9101:358;9132:6;9129:1;9122:17;9162:4;9207;9204:1;9194:18;9234:1;9248:165;9262:6;9259:1;9256:13;9248:165;;;9340:14;;9327:11;;;9320:35;9383:16;;;;9277:10;;9248:165;;;9252:3;;;9442:6;9437:3;9433:16;9426:23;;8868:591;-1:-1:-1;9475:3:51;;8583:901;-1:-1:-1;;;;;;8583:901:51:o;9742:245::-;9809:6;9862:2;9850:9;9841:7;9837:23;9833:32;9830:52;;;9878:1;9875;9868:12;9830:52;9910:9;9904:16;9929:28;9951:5;9929:28;:::i;9992:201::-;10036:11;10088:3;10075:17;10132:6;10125:5;10121:18;10114:5;10111:29;10101:57;;10154:1;10151;10144:12;10198:213;10242:11;10294:3;10281:17;10338:18;10331:5;10327:30;10320:5;10317:41;10307:69;;10372:1;10369;10362:12;10997:575;11069:4;11075:6;11135:11;11122:25;11225:66;11214:8;11198:14;11194:29;11190:102;11170:18;11166:127;11156:155;;11307:1;11304;11297:12;11156:155;11334:33;;11386:20;;;-1:-1:-1;11429:18:51;11418:30;;11415:50;;;11461:1;11458;11451:12;11415:50;11494:4;11482:17;;-1:-1:-1;11525:14:51;11521:27;;;11511:38;;11508:58;;;11562:1;11559;11552:12;11508:58;10997:575;;;;;:::o;11577:184::-;11629:77;11626:1;11619:88;11726:4;11723:1;11716:15;11750:4;11747:1;11740:15;11766:543;11868:2;11863:3;11860:11;11857:446;;;11904:1;11928:5;11925:1;11918:16;11972:4;11969:1;11959:18;12042:2;12030:10;12026:19;12023:1;12019:27;12013:4;12009:38;12078:4;12066:10;12063:20;12060:47;;;-1:-1:-1;12101:4:51;12060:47;12156:2;12151:3;12147:12;12144:1;12140:20;12134:4;12130:31;12120:41;;12211:82;12229:2;12222:5;12219:13;12211:82;;;12274:17;;;12255:1;12244:13;12211:82;;12545:1309;12653:18;12648:3;12645:27;12642:53;;;12675:18;;:::i;:::-;12704:94;12794:3;12754:38;12786:4;12780:11;12754:38;:::i;:::-;12748:4;12704:94;:::i;:::-;12824:1;12849:2;12844:3;12841:11;12866:1;12861:735;;;;13640:1;13657:3;13654:93;;;-1:-1:-1;13713:19:51;;;13700:33;13654:93;12451:66;12442:1;12438:11;;;12434:84;12430:89;12420:100;12526:1;12522:11;;;12417:117;13760:78;;12834:1014;;12861:735;8530:1;8523:14;;;8567:4;8554:18;;12906:66;12897:76;;;13057:9;13079:229;13093:7;13090:1;13087:14;13079:229;;;13182:19;;;13169:33;13154:49;;13289:4;13274:20;;;;13242:1;13230:14;;;;13109:12;13079:229;;;13083:3;13336;13327:7;13324:16;13321:219;;;13456:66;13450:3;13444;13441:1;13437:11;13433:21;13429:94;13425:99;13412:9;13407:3;13403:19;13390:33;13386:139;13378:6;13371:155;13321:219;;;13583:1;13577:3;13574:1;13570:11;13566:19;13560:4;13553:33;12834:1014;;12545:1309;;;:::o;13859:1379::-;14047:6;14012:33;14039:5;14012:33;:::i;:::-;14008:46;14079:4;14073:11;14186:2;14117:66;14113:2;14109:75;14106:83;14100:4;14093:97;14266:10;14221:42;14259:2;14252:5;14248:14;14221:42;:::i;:::-;14217:2;14213:51;14209:68;14387:2;14382;14313:66;14309:2;14305:75;14302:83;14299:91;14293:4;14286:105;14566:26;14521:42;14559:2;14552:5;14548:14;14521:42;:::i;:::-;14517:2;14513:51;14509:84;14503:2;14434:66;14430:2;14426:75;14423:83;14419:2;14416:91;14413:181;14407:4;14400:195;;;;14604:95;14656:42;14694:2;14687:5;14683:14;14656:42;:::i;:::-;10508:11;;10552:66;10544:75;10629:2;10625:14;;;;10641:42;10621:63;10541:144;10528:158;;10416:276;14604:95;14708:98;14762:43;14800:3;14793:5;14789:15;14762:43;:::i;:::-;10791:11;;10835:66;10827:75;10912:3;10908:15;;;;10925:58;10904:80;10824:161;10811:175;;10697:295;14708:98;14849:60;14904:3;14897:5;14893:15;14886:5;14849:60;:::i;:::-;14918:99;15003:13;14990:11;14986:1;14980:4;14976:12;14918:99;:::i;:::-;;;15062:60;15117:3;15110:5;15106:15;15099:5;15062:60;:::i;:::-;15131:101;15218:13;15203;15199:1;15193:4;15189:12;15131:101;:::i;15243:282::-;15310:9;;;15331:11;;;15328:191;;;15375:77;15372:1;15365:88;15476:4;15473:1;15466:15;15504:4;15501:1;15494:15;16940:956;17020:6;17073:2;17061:9;17052:7;17048:23;17044:32;17041:52;;;17089:1;17086;17079:12;17041:52;17122:9;17116:16;17151:18;17192:2;17184:6;17181:14;17178:34;;;17208:1;17205;17198:12;17178:34;17246:6;17235:9;17231:22;17221:32;;17291:7;17284:4;17280:2;17276:13;17272:27;17262:55;;17313:1;17310;17303:12;17262:55;17342:2;17336:9;17364:2;17360;17357:10;17354:36;;;17370:18;;:::i;:::-;17504:2;17498:9;17566:4;17558:13;;17409:66;17554:22;;;17578:2;17550:31;17546:40;17534:53;;;17602:18;;;17622:22;;;17599:46;17596:72;;;17648:18;;:::i;:::-;17688:10;17684:2;17677:22;17723:2;17715:6;17708:18;17763:7;17758:2;17753;17749;17745:11;17741:20;17738:33;17735:53;;;17784:1;17781;17774:12;17735:53;17797:68;17862:2;17857;17849:6;17845:15;17840:2;17836;17832:11;17797:68;:::i;:::-;17884:6;16940:956;-1:-1:-1;;;;;;;16940:956:51:o;18233:512::-;18427:4;18456:42;18537:2;18529:6;18525:15;18514:9;18507:34;18589:2;18581:6;18577:15;18572:2;18561:9;18557:18;18550:43;;18629:6;18624:2;18613:9;18609:18;18602:34;18672:3;18667:2;18656:9;18652:18;18645:31;18693:46;18734:3;18723:9;18719:19;18711:6;18693:46;:::i;:::-;18685:54;18233:512;-1:-1:-1;;;;;;18233:512:51:o;18750:249::-;18819:6;18872:2;18860:9;18851:7;18847:23;18843:32;18840:52;;;18888:1;18885;18878:12;18840:52;18920:9;18914:16;18939:30;18963:5;18939:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"2221600","executionCost":"infinite","totalCost":"infinite"},"external":{"MINTER_ROLE()":"284","OPERATOR_ROLE()":"305","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","burn(uint256)":"infinite","forwarderRegistry()":"infinite","getApproved(uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","isTrustedForwarder(address)":"infinite","metadataResolver()":"infinite","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"infinite","name()":"infinite","owner()":"infinite","ownerOf(uint256)":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setRevocationRegistry(address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","vcData(uint256)":"infinite"},"internal":{"_isSenderOperatable(address,uint256)":"infinite","_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"MINTER_ROLE()":"d5391393","OPERATOR_ROLE()":"f5b541a6","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","forwarderRegistry()":"2b4c9f16","getApproved(uint256)":"081812fc","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isTrustedForwarder(address)":"572b6c05","metadataResolver()":"a0c76f62","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"54c7be06","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setRevocationRegistry(address)":"95f94bc4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","vcData(uint256)":"4bae2be8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"metadataResolver\",\"type\":\"address\"},{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ERC721SelfApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"internalType\":\"struct CertificateNFTv1MetaData.MetaData\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"name\":\"setRevocationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vcData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SelfApproval(address)\":[{\"params\":{\"account\":\"The account trying to approve itself.\"}}],\"ERC721SelfApprovalForAll(address)\":[{\"params\":{\"account\":\"The account trying to approveForAll itself.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"burn(uint256)\":{\"details\":\"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.\",\"params\":{\"tokenId\":\"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))\":{\"details\":\"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\",\"params\":{\"metadata\":\"Metadata for `tokenId`\",\"to\":\"The owner of `tokenId`\",\"tokenId\":\"The id of the VC NFT to be minted\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"setRevocationRegistry(address)\":{\"params\":{\"revocationRegistry\":\"The address of the Revocation Registry contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721NonApprovedForApproval(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC721SelfApproval(address)\":[{\"notice\":\"Thrown when trying to approve oneself.\"}],\"ERC721SelfApprovalForAll(address)\":[{\"notice\":\"Thrown when trying to approveForAll oneself.\"}],\"ERC721TransferToAddressZero()\":[{\"notice\":\"Thrown when transferring a token to the zero address.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidBurn()\":[{\"notice\":\"Thrown when burn operation cannot be executed.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateNFTv1.sol\":\"OpenCampusCertificateNFTv1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTv1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// other imports\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// access control imports\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\n// ERC721 imports\\nimport {IERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {Transfer} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\\\";\\nimport {ERC721Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\n// ForwardRegistry imports\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n// local imports\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl, ForwarderRegistryContext {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    IRevocationRegistry internal _revocationRegistry;\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n    bytes32 public constant OPERATOR_ROLE = \\\"operator\\\";\\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\\n\\n    /// @notice Thrown when burn operation cannot be executed.\\n    error InvalidBurn();\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IForwarderRegistry forwarderRegistry,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\\n        ERC721Storage.init();\\n        DID_REGISTRY = didRegistry;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\\n    /// @param to The owner of `tokenId`\\n    /// @param tokenId The id of the VC NFT to be minted\\n    /// @param metadata Metadata for `tokenId`\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\\n\\n        ERC721Storage.layout().mint(to, tokenId);\\n        vcData[tokenId] = metadata;\\n    }\\n\\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\\n    /// @param tokenId The Token Id to be burnt.\\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\\n    function burn(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\\n\\n            unchecked {\\n                // cannot underflow as balance is verified through TOKEN ownership\\n                --ERC721Storage.layout().balances[owner];\\n            }\\n            emit Transfer(owner, address(0), tokenId);\\n        } else {\\n            revert InvalidBurn();\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external {\\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external {\\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        return ERC721Storage.layout().getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice `sender` is operatable if the sender is a valid issuer for `tokenId` or have been granted `operator` role before\\n    /// @dev Reverts with `NotRoleHolder` if `sender` is neither allowed token issuer nor an operator for this contract.\\n    /// @param sender The sender that trigger the contract.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function _isSenderOperatable(address sender, uint256 tokenId) internal view {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, sender);\\n        }\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().transferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId);\\n    }\\n\\n    /// @notice after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\\n        address sender = _msgSender();\\n        _isSenderOperatable(sender, tokenId);\\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId, data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x3a977107737d16e4e5d6e5099991c9f3cbbf1affb199ab71aefcabeca9bd03b9\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"},\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4484,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"_revocationRegistry","offset":0,"slot":"0","type":"t_contract(IRevocationRegistry)5000"},{"astId":4500,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"vcData","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(MetaData)5017_storage)"}],"types":{"t_contract(IRevocationRegistry)5000":{"encoding":"inplace","label":"contract IRevocationRegistry","numberOfBytes":"20"},"t_mapping(t_uint256,t_struct(MetaData)5017_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)","numberOfBytes":"32","value":"t_struct(MetaData)5017_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(MetaData)5017_storage":{"encoding":"inplace","label":"struct CertificateNFTv1MetaData.MetaData","members":[{"astId":5004,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"schemaVersion","offset":0,"slot":"0","type":"t_uint16"},{"astId":5006,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"achievementType","offset":2,"slot":"0","type":"t_uint16"},{"astId":5008,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"awardedDate","offset":4,"slot":"0","type":"t_uint64"},{"astId":5010,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"validFrom","offset":12,"slot":"0","type":"t_uint64"},{"astId":5012,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"validUtil","offset":20,"slot":"0","type":"t_uint64"},{"astId":5014,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"issuerDid","offset":0,"slot":"1","type":"t_string_storage"},{"astId":5016,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"achievementId","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721NonApprovedForApproval(address,address,uint256)":[{"notice":"Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"ERC721SelfApproval(address)":[{"notice":"Thrown when trying to approve oneself."}],"ERC721SelfApprovalForAll(address)":[{"notice":"Thrown when trying to approveForAll oneself."}],"ERC721TransferToAddressZero()":[{"notice":"Thrown when transferring a token to the zero address."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidBurn()":[{"notice":"Thrown when burn operation cannot be executed."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"owner()":{"notice":"Gets the address of the contract owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeTransferFrom(address,address,uint256)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 safeTransferFrom"},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."},"transferFrom(address,address,uint256)":{"notice":"after using `_isSenderOperatable` to validate sender's ability to be a valid operator, perform standard ERC721 transferFrom"},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"IIssuersDIDRegistry":{"abi":[{"inputs":[{"internalType":"string","name":"did","type":"string"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"isIssuerAllowed","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedDid","type":"bytes32"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"issuers","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"IAllowedIssuersRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isIssuerAllowed(string,address)":"6f176f7e","issuers(bytes32,address)":"f9236a39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"isIssuerAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedDid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"issuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"IAllowedIssuersRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for registry to store allowed issuers for VCs to mint NFT VCs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":\"IIssuersDIDRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for registry to store allowed issuers for VCs to mint NFT VCs","version":1}}},"contracts/vc/interfaces/IRevocationRegistry.sol":{"IRevocationRegistry":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchRevokeVCs(bytes32,uint256[],bytes)":"e688c27b","isRevoked(bytes32,uint256)":"a3a2656a","revokeVC(bytes32,uint256,bytes)":"98fc75a2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":\"IRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"CertificateNFTv1MetaData":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201231007eaa5190b8a52803ce79f5b896996161375c29c5354e5291389473069664736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT BALANCE STOP PUSH31 0xAA5190B8A52803CE79F5B896996161375C29C5354E5291389473069664736F PUSH13 0x63430008160033000000000000 ","sourceMap":"58:262:50:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:262:50;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201231007eaa5190b8a52803ce79f5b896996161375c29c5354e5291389473069664736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT BALANCE STOP PUSH31 0xAA5190B8A52803CE79F5B896996161375C29C5354E5291389473069664736F PUSH13 0x63430008160033000000000000 ","sourceMap":"58:262:50:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":\"CertificateNFTv1MetaData\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}
{"id":"c4e107c9ff9a0ee83cc935b995a7ba96","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface INodeKey is IERC721 {}\n"},"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {INodeKey} from \"./INodeKey.sol\";\n\ninterface IReferee {\n    struct BatchInfo {\n        uint256 prevBatchNumber;\n        uint256 l1NodeConfirmedTimestamp;\n        uint256 nrOfSuccessfulAttestations;\n        bytes32 finalL2StateRoot;\n    }\n\n    event LogAttest(\n        uint256 _batchNumber,\n        bytes32 _l2StateRoot,\n        uint256 _nodeKeyId\n    );\n    event LogSetNodeRewards(address _nodeRewards);\n    event LogSetOracle(address _oracle, bool _isOracle);\n    event LogFinalized(\n        uint256 _batchNumber,\n        bytes32 _finalL2StateRoot,\n        uint256 _nrOfSuccessfulAttestations\n    );\n\n    error AttestFailed();\n    error InvalidBatchNumber();\n    error NodeRewardsNotSet();\n    error NoRewardsToClaim();\n    error OnlyOracle();\n\n    function NODE_KEY() external view returns (INodeKey _nodeKey);\n\n    function ATTEST_PERIOD() external view returns (uint256 _attestPeriod);\n\n    function getBatchInfo(\n        uint256 _batchNumber\n    ) external view returns (BatchInfo memory);\n\n    function getAttestedBatchNumbers(\n        uint256 _nodeKeyId\n    ) external view returns (uint256[] memory);\n\n    function getIndexOfUnclaimedBatch(\n        uint256 _nodeKeyId\n    ) external view returns (uint256);\n\n    function getAttestation(\n        uint256 _batchNumber,\n        uint256 _nodeKeyId\n    ) external view returns (bytes32);\n\n    function attest(\n        uint256 _batchNumber,\n        bytes32 _l2StateRoot,\n        uint256 _nodeKeyId\n    ) external;\n\n    function batchAttest(\n        uint256 _batchNumber,\n        bytes32 _l2StateRoot,\n        uint256[] memory _nodeKeyIds\n    ) external;\n\n    function finalize(\n        uint256 _batchNumber,\n        uint256 _l1NodeConfirmedTimestamp,\n        bytes32 _finalL2StateRoot\n    ) external;\n\n    function claimReward(uint256 _nodeKeyId, uint256 _batchesCount) external;\n\n    function batchClaimReward(\n        uint256[] memory _nodeKeyIds,\n        uint256 _batchesCount\n    ) external;\n\n    function getUnattestedNodeKeyIds(\n        uint256 _batchNumber,\n        uint256[] memory _nodeKeyIds\n    ) external view returns (uint256[] memory);\n}\n"},"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {INodeKey} from \"./interfaces/INodeKey.sol\";\nimport {IReferee} from \"./interfaces/IReferee.sol\";\nimport {RewardsHelper} from \"./RewardsHelper.sol\";\n\nabstract contract NodeRewardsBase is RewardsHelper {\n    error OnlyReferee();\n\n    IReferee public immutable REFEREE;\n    INodeKey public immutable NODE_KEY;\n\n    modifier onlyReferee() {\n        if (msg.sender != address(REFEREE)) {\n            revert OnlyReferee();\n        }\n        _;\n    }\n\n    receive() external payable {}\n\n    constructor(\n        address _referee,\n        address _nodeKey,\n        address _rewardToken\n    ) RewardsHelper(_rewardToken) {\n        REFEREE = IReferee(_referee);\n        NODE_KEY = INodeKey(_nodeKey);\n    }\n\n    /**\n     * @notice Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\n     *\n     * @param _batchNumber Batch number of the attestation.\n     * @param _nodeKeyId Id of the node key.\n     */\n    function onAttest(\n        uint256 _batchNumber,\n        uint256 _nodeKeyId\n    ) external onlyReferee {\n        _onAttest(_batchNumber, _nodeKeyId);\n    }\n\n    /**\n     * @notice Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\n     *\n     * @param _batchNumber Batch number of the attestation.\n     * @param _nodeKeyIds Id of the node keys.\n     *\n     * @dev _nodeKeyIds can contain 0 (empty items). We skip over it here.\n     */\n    function onBatchAttest(\n        uint256 _batchNumber,\n        uint256[] calldata _nodeKeyIds\n    ) external onlyReferee {\n        for (uint256 i; i < _nodeKeyIds.length; i++) {\n            if (_nodeKeyIds[i] == 0) continue;\n            _onAttest(_batchNumber, _nodeKeyIds[i]);\n        }\n    }\n\n    /**\n     * @notice Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\n     *\n     * @param _batchNumber Batch number that is being finalized.\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\n     *\n     * @dev _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\n     */\n    function onFinalize(\n        uint256 _batchNumber,\n        uint256 _l1NodeConfirmedTimestamp,\n        uint256 _prevL1NodeConfirmedTimestamp,\n        uint256 _nrOfSuccessfulAttestations\n    ) external onlyReferee {\n        _onFinalize(\n            _batchNumber,\n            _l1NodeConfirmedTimestamp,\n            _prevL1NodeConfirmedTimestamp,\n            _nrOfSuccessfulAttestations\n        );\n    }\n\n    /**\n     * @notice Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\n     *\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\n     *\n     * @dev _batchNumbers can contain 0 (empty items). Make sure to skip over it.\n     */\n    function claimReward(\n        uint256 _nodeKeyId,\n        uint256[] calldata _batchNumbers\n    ) external onlyReferee {\n        _claimReward(_nodeKeyId, _batchNumbers);\n    }\n\n    /**\n     * @dev Override this function if your rewards logic for each\n     * node key varies depending on other factor.\n     *\n     * @param _batchNumber Batch number of the attestation.\n     * @param _nodeKeyId Id of the node key.\n     */\n    function _onAttest(\n        uint256 _batchNumber,\n        uint256 _nodeKeyId\n    ) internal virtual;\n\n    /**\n     * @dev Override this function if your rewards logic takes into\n     * account the timestamps of the attestation and number of attestations.\n     *\n     * @dev IMPORTANT _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\n     *\n     * @param _batchNumber Batch number that is being finalized.\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\n     */\n    function _onFinalize(\n        uint256 _batchNumber,\n        uint256 _l1NodeConfirmedTimestamp,\n        uint256 _prevL1NodeConfirmedTimestamp,\n        uint256 _nrOfSuccessfulAttestations\n    ) internal virtual;\n\n    /**\n     * @dev Override this function to handle the reward payment logic.\n     *\n     * @dev IMPORTANT _batchNumbers can contain 0 (empty items). Make sure to skip over it.\n     *\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\n     */\n    function _claimReward(\n        uint256 _nodeKeyId,\n        uint256[] calldata _batchNumbers\n    ) internal virtual;\n}\n"},"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {\n    SafeERC20,\n    IERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract RewardsHelper {\n    error ETHTransferFailed();\n\n    address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public immutable REWARD_TOKEN;\n\n    constructor(address _rewardToken) {\n        REWARD_TOKEN = _rewardToken;\n    }\n\n    function _payReward(address _to, uint256 _amount) internal {\n        if (REWARD_TOKEN == _ETH) {\n            (bool success, ) = _to.call{value: _amount}(\"\");\n            if (!success) {\n                revert ETHTransferFailed();\n            }\n        } else {\n            SafeERC20.safeTransfer(IERC20(REWARD_TOKEN), _to, _amount);\n        }\n    }\n}\n"},"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {\n    AccessControlUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {\n    EnumerableSet\n} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nabstract contract RewardsKYC is AccessControlUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    error OnlyKycWallet();\n\n    event LogSetKycDisabled(bool _disabled);\n\n    bytes32 public constant ADMIN_KYC_CONTROLLER_ROLE =\n        keccak256(\"ADMIN_KYC_CONTROLLER_ROLE\");\n    bytes32 public constant KYC_CONTROLLER_ROLE =\n        keccak256(\"KYC_CONTROLLER_ROLE\");\n    bool public kycDisabled;\n    EnumerableSet.AddressSet internal _kycWallets;\n\n    function __RewardsKYC_init(\n        address _adminKycController\n    ) internal onlyInitializing {\n        _setRoleAdmin(KYC_CONTROLLER_ROLE, ADMIN_KYC_CONTROLLER_ROLE);\n        _grantRole(ADMIN_KYC_CONTROLLER_ROLE, _adminKycController);\n    }\n\n    function setKycDisabled(\n        bool _disabled\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\n        kycDisabled = _disabled;\n\n        emit LogSetKycDisabled(_disabled);\n    }\n\n    function addKycWallets(\n        address[] calldata _wallets\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\n        for (uint256 i; i < _wallets.length; i++) {\n            _kycWallets.add(_wallets[i]);\n        }\n    }\n\n    function removeKycWallets(\n        address[] calldata _wallets\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\n        for (uint256 i; i < _wallets.length; i++) {\n            _kycWallets.remove(_wallets[i]);\n        }\n    }\n\n    function getKycWallets() external view returns (address[] memory) {\n        return _kycWallets.values();\n    }\n\n    function _isKycWallet(address _wallet) internal view returns (bool) {\n        return _kycWallets.contains(_wallet);\n    }\n\n    function _onlyKycWallet(address _wallet) internal view {\n        if (!kycDisabled && !_isKycWallet(_wallet)) {\n            revert OnlyKycWallet();\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/land/EDULandRewards.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.22;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {NodeRewardsBase} from \"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol\";\nimport {RewardsKYC} from \"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol\";\n\ncontract EDULandRewards is NodeRewardsBase, RewardsKYC {\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant REWARDS_CONTROLLER_ROLE = keccak256(\"REWARDS_CONTROLLER_ROLE\");\n    uint256 public immutable MAX_REWARD_TIME_WINDOW;\n\n    uint256 public rewardPerSecond;\n\n    /// @notice batchNumber => reward per land\n    mapping(uint256 => uint256) public rewardPerLandOfBatch;\n    /// @notice batchNumber => tokenId => recipient\n    mapping(uint256 => mapping(uint256 => address)) public rewardsRecipients;\n\n    /// @notice Emitted when rewardPerSecond is updated.\n    event RewardPerSecondUpdated(uint256 rewardPerSecond);\n\n    /// @notice Emitted when batch is finalized.\n    event BatchFinalized(uint256 indexed batchNumber, uint256 rewardPerLand);\n\n    /// @notice Emitted when reward is claimed.\n    event Claimed(address indexed account, uint256 indexed batchNumber, uint256 indexed tokenId, uint256 amount);\n\n    error NoRewardToClaim();\n\n    /// @notice Constructor\n    /// @dev emits a {RewardPerSecondUpdated} event\n    /// @param maxRewardTimeWindow The maximum reward time window\n    /// @param referee The address of the referee contract\n    /// @param landAddress The address of the land contract\n    /// @param rewardToken The address of the reward token\n    /// @param rewardPerSecond_ The reward per second\n    constructor(\n        uint256 maxRewardTimeWindow,\n        address referee,\n        address landAddress,\n        address rewardToken,\n        uint256 rewardPerSecond_\n    ) NodeRewardsBase(referee, landAddress, rewardToken) {\n        MAX_REWARD_TIME_WINDOW = maxRewardTimeWindow;\n\n        rewardPerSecond = rewardPerSecond_;\n        emit RewardPerSecondUpdated(rewardPerSecond_);\n\n        _setRoleAdmin(REWARDS_CONTROLLER_ROLE, OWNER_ROLE);\n        _setRoleAdmin(KYC_CONTROLLER_ROLE, OWNER_ROLE);\n\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\n        _grantRole(OWNER_ROLE, msg.sender);\n    }\n\n    /// @notice Sets the max token supply\n    /// @dev Reverts with {AccessControlUnauthorizedAccount} if the sender is not the operator.\n    /// @dev Emits a {RewardPerSecondUpdated} event.\n    /// @param newRewardPerSecond The new new reward per second to be set\n    function setRewardPerSecond(uint256 newRewardPerSecond) external onlyRole(REWARDS_CONTROLLER_ROLE) {\n        rewardPerSecond = newRewardPerSecond;\n        emit RewardPerSecondUpdated(newRewardPerSecond);\n    }\n\n    /// @inheritdoc NodeRewardsBase\n    function _onAttest(uint256 batchNumber, uint256 tokenId) internal override {\n        rewardsRecipients[batchNumber][tokenId] = NODE_KEY.ownerOf(tokenId);\n    }\n\n    /// @inheritdoc NodeRewardsBase\n    /// @dev Emits a {BatchFinalized} event.\n    function _onFinalize(\n        uint256 batchNumber,\n        uint256 l1NodeConfirmedTimestamp,\n        uint256 prevL1NodeConfirmedTimestamp,\n        uint256 nrOfSuccessfulAttestations\n    ) internal override {\n        if (nrOfSuccessfulAttestations > 0) {\n            uint256 rewardTimeWindow = Math.min(l1NodeConfirmedTimestamp - prevL1NodeConfirmedTimestamp, MAX_REWARD_TIME_WINDOW);\n            uint256 rewardPerLand = (rewardTimeWindow * rewardPerSecond) / nrOfSuccessfulAttestations;\n            rewardPerLandOfBatch[batchNumber] = rewardPerLand;\n            emit BatchFinalized(batchNumber, rewardPerLand);\n        }\n    }\n\n    /// @inheritdoc NodeRewardsBase\n    /// @dev Reverts if now rewards to claim.\n    /// @dev Emits a {Claimed} event.\n    function _claimReward(uint256 tokenId, uint256[] calldata batchNumbers) internal override {\n        bool hasRewards;\n        for (uint256 i; i < batchNumbers.length; i++) {\n            uint256 batchNumber = batchNumbers[i];\n            if (batchNumber == 0) {\n                continue;\n            }\n\n            address tokenOwner = rewardsRecipients[batchNumber][tokenId];\n            delete rewardsRecipients[batchNumber][tokenId];\n            if (!kycDisabled && !_isKycWallet(tokenOwner)) {\n                continue;\n            }\n\n            uint256 amount = rewardPerLandOfBatch[batchNumber];\n            _payReward(tokenOwner, amount);\n            emit Claimed(tokenOwner, batchNumber, tokenId, amount);\n            hasRewards = true;\n        }\n\n        if (!hasRewards) {\n            revert NoRewardToClaim();\n        }\n    }\n\n    /// @notice Check if the wallet has been KYCed\n    /// @param wallet The wallet to be checked\n    function isKycWallet(address wallet) public view returns (bool) {\n        return _isKycWallet(wallet);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol":{"ast":{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol","exportedSymbols":{"INodeKey":[426],"IReferee":[573],"NodeRewardsBase":[185],"RewardsHelper":[248]},"id":186,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol","file":"./interfaces/INodeKey.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":186,"sourceUnit":427,"src":"58:51:0","symbolAliases":[{"foreign":{"id":2,"name":"INodeKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"66:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol","file":"./interfaces/IReferee.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":186,"sourceUnit":574,"src":"110:51:0","symbolAliases":[{"foreign":{"id":4,"name":"IReferee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"118:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol","file":"./RewardsHelper.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":186,"sourceUnit":249,"src":"162:50:0","symbolAliases":[{"foreign":{"id":6,"name":"RewardsHelper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"170:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"RewardsHelper","nameLocations":["251:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"251:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"251:13:0"}],"canonicalName":"NodeRewardsBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":185,"linearizedBaseContracts":[185,248],"name":"NodeRewardsBase","nameLocation":"232:15:0","nodeType":"ContractDefinition","nodes":[{"errorSelector":"fe1bb40d","id":11,"name":"OnlyReferee","nameLocation":"277:11:0","nodeType":"ErrorDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[],"src":"288:2:0"},"src":"271:20:0"},{"constant":false,"functionSelector":"95126fe6","id":14,"mutability":"immutable","name":"REFEREE","nameLocation":"323:7:0","nodeType":"VariableDeclaration","scope":185,"src":"297:33:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"},"typeName":{"id":13,"nodeType":"UserDefinedTypeName","pathNode":{"id":12,"name":"IReferee","nameLocations":["297:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":573,"src":"297:8:0"},"referencedDeclaration":573,"src":"297:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}},"visibility":"public"},{"constant":false,"functionSelector":"a5f957f9","id":17,"mutability":"immutable","name":"NODE_KEY","nameLocation":"362:8:0","nodeType":"VariableDeclaration","scope":185,"src":"336:34:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"},"typeName":{"id":16,"nodeType":"UserDefinedTypeName","pathNode":{"id":15,"name":"INodeKey","nameLocations":["336:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":426,"src":"336:8:0"},"referencedDeclaration":426,"src":"336:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"visibility":"public"},{"body":{"id":32,"nodeType":"Block","src":"400:108:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":19,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"414:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"418:6:0","memberName":"sender","nodeType":"MemberAccess","src":"414:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":23,"name":"REFEREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"436:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}],"id":22,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"428:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"428:7:0","typeDescriptions":{}}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"428:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"414:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":30,"nodeType":"IfStatement","src":"410:81:0","trueBody":{"id":29,"nodeType":"Block","src":"446:45:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"OnlyReferee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"467:11:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"467:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"RevertStatement","src":"460:20:0"}]}},{"id":31,"nodeType":"PlaceholderStatement","src":"500:1:0"}]},"id":33,"name":"onlyReferee","nameLocation":"386:11:0","nodeType":"ModifierDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"397:2:0"},"src":"377:131:0","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"541:2:0","statements":[]},"id":37,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[],"src":"521:2:0"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[],"src":"541:0:0"},"scope":185,"src":"514:29:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":61,"nodeType":"Block","src":"677:84:0","statements":[{"expression":{"id":53,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":49,"name":"REFEREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"687:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":51,"name":"_referee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"706:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":50,"name":"IReferee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"697:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IReferee_$573_$","typeString":"type(contract IReferee)"}},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"697:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}},"src":"687:28:0","typeDescriptions":{"typeIdentifier":"t_contract$_IReferee_$573","typeString":"contract IReferee"}},"id":54,"nodeType":"ExpressionStatement","src":"687:28:0"},{"expression":{"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":55,"name":"NODE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"725:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":57,"name":"_nodeKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"745:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":56,"name":"INodeKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"736:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_INodeKey_$426_$","typeString":"type(contract INodeKey)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"src":"725:29:0","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"id":60,"nodeType":"ExpressionStatement","src":"725:29:0"}]},"id":62,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":46,"name":"_rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"663:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":47,"kind":"baseConstructorSpecifier","modifierName":{"id":45,"name":"RewardsHelper","nameLocations":["649:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"649:13:0"},"nodeType":"ModifierInvocation","src":"649:27:0"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"_referee","nameLocation":"578:8:0","nodeType":"VariableDeclaration","scope":62,"src":"570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"_nodeKey","nameLocation":"604:8:0","nodeType":"VariableDeclaration","scope":62,"src":"596:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":40,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":43,"mutability":"mutable","name":"_rewardToken","nameLocation":"630:12:0","nodeType":"VariableDeclaration","scope":62,"src":"622:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"560:88:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"677:0:0"},"scope":185,"src":"549:212:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":77,"nodeType":"Block","src":"1094:52:0","statements":[{"expression":{"arguments":[{"id":73,"name":"_batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1114:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":74,"name":"_nodeKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1128:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":72,"name":"_onAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1104:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1104:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":76,"nodeType":"ExpressionStatement","src":"1104:35:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"767:219:0","text":" @notice Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\n @param _batchNumber Batch number of the attestation.\n @param _nodeKeyId Id of the node key."},"functionSelector":"e6ed1180","id":78,"implemented":true,"kind":"function","modifiers":[{"id":70,"kind":"modifierInvocation","modifierName":{"id":69,"name":"onlyReferee","nameLocations":["1082:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"1082:11:0"},"nodeType":"ModifierInvocation","src":"1082:11:0"}],"name":"onAttest","nameLocation":"1000:8:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"_batchNumber","nameLocation":"1026:12:0","nodeType":"VariableDeclaration","scope":78,"src":"1018:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":64,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1056:10:0","nodeType":"VariableDeclaration","scope":78,"src":"1048:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1008:64:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"1094:0:0"},"scope":185,"src":"991:155:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":115,"nodeType":"Block","src":"1593:172:0","statements":[{"body":{"id":113,"nodeType":"Block","src":"1648:111:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":99,"name":"_nodeKeyIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1666:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":101,"indexExpression":{"id":100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1678:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1666:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1684:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1666:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":105,"nodeType":"IfStatement","src":"1662:33:0","trueBody":{"id":104,"nodeType":"Continue","src":"1687:8:0"}},{"expression":{"arguments":[{"id":107,"name":"_batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1719:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":108,"name":"_nodeKeyIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1733:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":110,"indexExpression":{"id":109,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1745:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1733:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":106,"name":"_onAttest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1709:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1709:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"1709:39:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":92,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1619:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":93,"name":"_nodeKeyIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1623:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1635:6:0","memberName":"length","nodeType":"MemberAccess","src":"1623:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1619:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":114,"initializationExpression":{"assignments":[90],"declarations":[{"constant":false,"id":90,"mutability":"mutable","name":"i","nameLocation":"1616:1:0","nodeType":"VariableDeclaration","scope":114,"src":"1608:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"1608:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":91,"nodeType":"VariableDeclarationStatement","src":"1608:9:0"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1643:3:0","subExpression":{"id":96,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1643:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":98,"nodeType":"ExpressionStatement","src":"1643:3:0"},"nodeType":"ForStatement","src":"1603:156:0"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"1152:316:0","text":" @notice Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\n @param _batchNumber Batch number of the attestation.\n @param _nodeKeyIds Id of the node keys.\n @dev _nodeKeyIds can contain 0 (empty items). We skip over it here."},"functionSelector":"b7355fb4","id":116,"implemented":true,"kind":"function","modifiers":[{"id":87,"kind":"modifierInvocation","modifierName":{"id":86,"name":"onlyReferee","nameLocations":["1581:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"1581:11:0"},"nodeType":"ModifierInvocation","src":"1581:11:0"}],"name":"onBatchAttest","nameLocation":"1482:13:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"_batchNumber","nameLocation":"1513:12:0","nodeType":"VariableDeclaration","scope":116,"src":"1505:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80,"name":"uint256","nodeType":"ElementaryTypeName","src":"1505:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"_nodeKeyIds","nameLocation":"1554:11:0","nodeType":"VariableDeclaration","scope":116,"src":"1535:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":83,"nodeType":"ArrayTypeName","src":"1535:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1495:76:0"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"1593:0:0"},"scope":185,"src":"1473:292:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":137,"nodeType":"Block","src":"2599:187:0","statements":[{"expression":{"arguments":[{"id":131,"name":"_batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2634:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":132,"name":"_l1NodeConfirmedTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2660:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":133,"name":"_prevL1NodeConfirmedTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2699:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":134,"name":"_nrOfSuccessfulAttestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2742:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":130,"name":"_onFinalize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"2609:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2609:170:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":136,"nodeType":"ExpressionStatement","src":"2609:170:0"}]},"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"1771:611:0","text":" @notice Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\n @param _batchNumber Batch number that is being finalized.\n @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\n @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\n @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\n @dev _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized."},"functionSelector":"1bcdb77a","id":138,"implemented":true,"kind":"function","modifiers":[{"id":128,"kind":"modifierInvocation","modifierName":{"id":127,"name":"onlyReferee","nameLocations":["2587:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"2587:11:0"},"nodeType":"ModifierInvocation","src":"2587:11:0"}],"name":"onFinalize","nameLocation":"2396:10:0","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"_batchNumber","nameLocation":"2424:12:0","nodeType":"VariableDeclaration","scope":138,"src":"2416:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2416:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"_l1NodeConfirmedTimestamp","nameLocation":"2454:25:0","nodeType":"VariableDeclaration","scope":138,"src":"2446:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2446:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"_prevL1NodeConfirmedTimestamp","nameLocation":"2497:29:0","nodeType":"VariableDeclaration","scope":138,"src":"2489:37:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"_nrOfSuccessfulAttestations","nameLocation":"2544:27:0","nodeType":"VariableDeclaration","scope":138,"src":"2536:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2536:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2406:171:0"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"2599:0:0"},"scope":185,"src":"2387:399:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":154,"nodeType":"Block","src":"3288:56:0","statements":[{"expression":{"arguments":[{"id":150,"name":"_nodeKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3311:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":151,"name":"_batchNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"3323:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":149,"name":"_claimReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"3298:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (uint256,uint256[] calldata)"}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3298:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":153,"nodeType":"ExpressionStatement","src":"3298:39:0"}]},"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2792:373:0","text":" @notice Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\n @param _nodeKeyId Id of the node key which is claiming the reward.\n @param _batchNumbers Batch numbers of successful attestations made by the node key.\n @dev _batchNumbers can contain 0 (empty items). Make sure to skip over it."},"functionSelector":"9b6e0d74","id":155,"implemented":true,"kind":"function","modifiers":[{"id":147,"kind":"modifierInvocation","modifierName":{"id":146,"name":"onlyReferee","nameLocations":["3276:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"3276:11:0"},"nodeType":"ModifierInvocation","src":"3276:11:0"}],"name":"claimReward","nameLocation":"3179:11:0","nodeType":"FunctionDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"3208:10:0","nodeType":"VariableDeclaration","scope":155,"src":"3200:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3200:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":144,"mutability":"mutable","name":"_batchNumbers","nameLocation":"3247:13:0","nodeType":"VariableDeclaration","scope":155,"src":"3228:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"3228:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":143,"nodeType":"ArrayTypeName","src":"3228:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3190:76:0"},"returnParameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3288:0:0"},"scope":185,"src":"3170:174:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"3350:239:0","text":" @dev Override this function if your rewards logic for each\n node key varies depending on other factor.\n @param _batchNumber Batch number of the attestation.\n @param _nodeKeyId Id of the node key."},"id":163,"implemented":false,"kind":"function","modifiers":[],"name":"_onAttest","nameLocation":"3603:9:0","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"_batchNumber","nameLocation":"3630:12:0","nodeType":"VariableDeclaration","scope":163,"src":"3622:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"3660:10:0","nodeType":"VariableDeclaration","scope":163,"src":"3652:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":159,"name":"uint256","nodeType":"ElementaryTypeName","src":"3652:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3612:64:0"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"3693:0:0"},"scope":185,"src":"3594:100:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":164,"nodeType":"StructuredDocumentation","src":"3700:658:0","text":" @dev Override this function if your rewards logic takes into\n account the timestamps of the attestation and number of attestations.\n @dev IMPORTANT _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\n @param _batchNumber Batch number that is being finalized.\n @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\n @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\n @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation."},"id":175,"implemented":false,"kind":"function","modifiers":[],"name":"_onFinalize","nameLocation":"4372:11:0","nodeType":"FunctionDefinition","parameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"_batchNumber","nameLocation":"4401:12:0","nodeType":"VariableDeclaration","scope":175,"src":"4393:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"_l1NodeConfirmedTimestamp","nameLocation":"4431:25:0","nodeType":"VariableDeclaration","scope":175,"src":"4423:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"_prevL1NodeConfirmedTimestamp","nameLocation":"4474:29:0","nodeType":"VariableDeclaration","scope":175,"src":"4466:37:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"4466:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"_nrOfSuccessfulAttestations","nameLocation":"4521:27:0","nodeType":"VariableDeclaration","scope":175,"src":"4513:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"4513:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4383:171:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"4571:0:0"},"scope":185,"src":"4363:209:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"4578:353:0","text":" @dev Override this function to handle the reward payment logic.\n @dev IMPORTANT _batchNumbers can contain 0 (empty items). Make sure to skip over it.\n @param _nodeKeyId Id of the node key which is claiming the reward.\n @param _batchNumbers Batch numbers of successful attestations made by the node key."},"id":184,"implemented":false,"kind":"function","modifiers":[],"name":"_claimReward","nameLocation":"4945:12:0","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"4975:10:0","nodeType":"VariableDeclaration","scope":184,"src":"4967:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"4967:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"_batchNumbers","nameLocation":"5014:13:0","nodeType":"VariableDeclaration","scope":184,"src":"4995:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"4995:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":180,"nodeType":"ArrayTypeName","src":"4995:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4957:76:0"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[],"src":"5050:0:0"},"scope":185,"src":"4936:115:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":186,"src":"214:4839:0","usedErrors":[11,192],"usedEvents":[]}],"src":"32:5022:0"},"id":0},"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol":{"ast":{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol","exportedSymbols":{"IERC20":[2857],"RewardsHelper":[248],"SafeERC20":[3269]},"id":249,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":187,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":249,"sourceUnit":3270,"src":"58:100:1","symbolAliases":[{"foreign":{"id":188,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"71:9:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":189,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"86:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"RewardsHelper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":248,"linearizedBaseContracts":[248],"name":"RewardsHelper","nameLocation":"178:13:1","nodeType":"ContractDefinition","nodes":[{"errorSelector":"b12d13eb","id":192,"name":"ETHTransferFailed","nameLocation":"204:17:1","nodeType":"ErrorDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"221:2:1"},"src":"198:26:1"},{"constant":true,"id":195,"mutability":"constant","name":"_ETH","nameLocation":"255:4:1","nodeType":"VariableDeclaration","scope":248,"src":"230:74:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"230:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307845656565654565656545654565654565456545656545454565656565456565656565656545456545","id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"262:42:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"},"visibility":"private"},{"constant":false,"functionSelector":"99248ea7","id":197,"mutability":"immutable","name":"REWARD_TOKEN","nameLocation":"335:12:1","nodeType":"VariableDeclaration","scope":248,"src":"310:37:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"310:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":206,"nodeType":"Block","src":"388:44:1","statements":[{"expression":{"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":202,"name":"REWARD_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"398:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":203,"name":"_rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"413:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"398:27:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":205,"nodeType":"ExpressionStatement","src":"398:27:1"}]},"id":207,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"_rewardToken","nameLocation":"374:12:1","nodeType":"VariableDeclaration","scope":207,"src":"366:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"366:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"365:22:1"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"388:0:1"},"scope":248,"src":"354:78:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":246,"nodeType":"Block","src":"497:289:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":214,"name":"REWARD_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"511:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":215,"name":"_ETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"527:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"511:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":244,"nodeType":"Block","src":"697:83:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":238,"name":"REWARD_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"741:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":237,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"734:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2857_$","typeString":"type(contract IERC20)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"734:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"id":240,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"756:3:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":241,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"761:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":234,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"711:9:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$3269_$","typeString":"type(library SafeERC20)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"721:12:1","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":2926,"src":"711:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"711:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":243,"nodeType":"ExpressionStatement","src":"711:58:1"}]},"id":245,"nodeType":"IfStatement","src":"507:273:1","trueBody":{"id":233,"nodeType":"Block","src":"533:158:1","statements":[{"assignments":[218,null],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"success","nameLocation":"553:7:1","nodeType":"VariableDeclaration","scope":233,"src":"548:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":217,"name":"bool","nodeType":"ElementaryTypeName","src":"548:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":225,"initialValue":{"arguments":[{"hexValue":"","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"591:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":219,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"566:3:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"570:4:1","memberName":"call","nodeType":"MemberAccess","src":"566:8:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":221,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"582:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"566:24:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"566:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"547:47:1"},{"condition":{"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"612:8:1","subExpression":{"id":226,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"613:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":232,"nodeType":"IfStatement","src":"608:73:1","trueBody":{"id":231,"nodeType":"Block","src":"622:59:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":228,"name":"ETHTransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"647:17:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"647:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":230,"nodeType":"RevertStatement","src":"640:26:1"}]}}]}}]},"id":247,"implemented":true,"kind":"function","modifiers":[],"name":"_payReward","nameLocation":"447:10:1","nodeType":"FunctionDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"_to","nameLocation":"466:3:1","nodeType":"VariableDeclaration","scope":247,"src":"458:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"458:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"_amount","nameLocation":"479:7:1","nodeType":"VariableDeclaration","scope":247,"src":"471:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"457:30:1"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"497:0:1"},"scope":248,"src":"438:348:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":249,"src":"160:628:1","usedErrors":[192],"usedEvents":[]}],"src":"32:757:1"},"id":1},"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol":{"ast":{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol","exportedSymbols":{"AccessControlUpgradeable":[909],"EnumerableSet":[5206],"RewardsKYC":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":250,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":252,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":420,"sourceUnit":910,"src":"58:119:2","symbolAliases":[{"foreign":{"id":251,"name":"AccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"71:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":254,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":420,"sourceUnit":5207,"src":"178:92:2","symbolAliases":[{"foreign":{"id":253,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"191:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":255,"name":"AccessControlUpgradeable","nameLocations":["304:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"304:24:2"},"id":256,"nodeType":"InheritanceSpecifier","src":"304:24:2"}],"canonicalName":"RewardsKYC","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":419,"linearizedBaseContracts":[419,909,1796,1808,982,1523,1151],"name":"RewardsKYC","nameLocation":"290:10:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":260,"libraryName":{"id":257,"name":"EnumerableSet","nameLocations":["341:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":5206,"src":"341:13:2"},"nodeType":"UsingForDirective","src":"335:49:2","typeName":{"id":259,"nodeType":"UserDefinedTypeName","pathNode":{"id":258,"name":"EnumerableSet.AddressSet","nameLocations":["359:13:2","373:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"359:24:2"},"referencedDeclaration":4919,"src":"359:24:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"errorSelector":"0b15b77a","id":262,"name":"OnlyKycWallet","nameLocation":"396:13:2","nodeType":"ErrorDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[],"src":"409:2:2"},"src":"390:22:2"},{"anonymous":false,"eventSelector":"d76c99a8f1eb77feac25a1b5d67950ec13adb34b7d857c57e8d2894aaf3f230d","id":266,"name":"LogSetKycDisabled","nameLocation":"424:17:2","nodeType":"EventDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"indexed":false,"mutability":"mutable","name":"_disabled","nameLocation":"447:9:2","nodeType":"VariableDeclaration","scope":266,"src":"442:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"442:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"441:16:2"},"src":"418:40:2"},{"constant":true,"functionSelector":"dcd50d2e","id":271,"mutability":"constant","name":"ADMIN_KYC_CONTROLLER_ROLE","nameLocation":"488:25:2","nodeType":"VariableDeclaration","scope":419,"src":"464:98:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"464:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f4b59435f434f4e54524f4c4c45525f524f4c45","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"534:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_05e9bce9d0ef4f3ddc258eb9c04459fd66d9887e1079e0b19880fc501a3ddd5f","typeString":"literal_string \"ADMIN_KYC_CONTROLLER_ROLE\""},"value":"ADMIN_KYC_CONTROLLER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_05e9bce9d0ef4f3ddc258eb9c04459fd66d9887e1079e0b19880fc501a3ddd5f","typeString":"literal_string \"ADMIN_KYC_CONTROLLER_ROLE\""}],"id":268,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"524:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"524:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"86f8a03e","id":276,"mutability":"constant","name":"KYC_CONTROLLER_ROLE","nameLocation":"592:19:2","nodeType":"VariableDeclaration","scope":419,"src":"568:86:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"568:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4b59435f434f4e54524f4c4c45525f524f4c45","id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"632:21:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb1","typeString":"literal_string \"KYC_CONTROLLER_ROLE\""},"value":"KYC_CONTROLLER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb1","typeString":"literal_string \"KYC_CONTROLLER_ROLE\""}],"id":273,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"622:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"622:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"5dff0ce9","id":278,"mutability":"mutable","name":"kycDisabled","nameLocation":"672:11:2","nodeType":"VariableDeclaration","scope":419,"src":"660:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":277,"name":"bool","nodeType":"ElementaryTypeName","src":"660:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"id":281,"mutability":"mutable","name":"_kycWallets","nameLocation":"723:11:2","nodeType":"VariableDeclaration","scope":419,"src":"689:45:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":280,"nodeType":"UserDefinedTypeName","pathNode":{"id":279,"name":"EnumerableSet.AddressSet","nameLocations":["689:13:2","703:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"689:24:2"},"referencedDeclaration":4919,"src":"689:24:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"837:146:2","statements":[{"expression":{"arguments":[{"id":289,"name":"KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"861:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"ADMIN_KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"882:25:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":288,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"847:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"847:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":292,"nodeType":"ExpressionStatement","src":"847:61:2"},{"expression":{"arguments":[{"id":294,"name":"ADMIN_KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"929:25:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":295,"name":"_adminKycController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"956:19:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":293,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"918:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"ExpressionStatement","src":"918:58:2"}]},"id":299,"implemented":true,"kind":"function","modifiers":[{"id":286,"kind":"modifierInvocation","modifierName":{"id":285,"name":"onlyInitializing","nameLocations":["820:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"820:16:2"},"nodeType":"ModifierInvocation","src":"820:16:2"}],"name":"__RewardsKYC_init","nameLocation":"750:17:2","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"_adminKycController","nameLocation":"785:19:2","nodeType":"VariableDeclaration","scope":299,"src":"777:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"767:43:2"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[],"src":"837:0:2"},"scope":419,"src":"741:242:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":315,"nodeType":"Block","src":"1082:84:2","statements":[{"expression":{"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":307,"name":"kycDisabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1092:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":308,"name":"_disabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"1106:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1092:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":310,"nodeType":"ExpressionStatement","src":"1092:23:2"},{"eventCall":{"arguments":[{"id":312,"name":"_disabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"1149:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":311,"name":"LogSetKycDisabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1131:17:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1131:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":314,"nodeType":"EmitStatement","src":"1126:33:2"}]},"functionSelector":"cbd73cb2","id":316,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":304,"name":"KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1061:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":305,"kind":"modifierInvocation","modifierName":{"id":303,"name":"onlyRole","nameLocations":["1052:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"1052:8:2"},"nodeType":"ModifierInvocation","src":"1052:29:2"}],"name":"setKycDisabled","nameLocation":"998:14:2","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"_disabled","nameLocation":"1027:9:2","nodeType":"VariableDeclaration","scope":316,"src":"1022:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":300,"name":"bool","nodeType":"ElementaryTypeName","src":"1022:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1012:30:2"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[],"src":"1082:0:2"},"scope":419,"src":"989:177:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":345,"nodeType":"Block","src":"1277:111:2","statements":[{"body":{"id":343,"nodeType":"Block","src":"1329:53:2","statements":[{"expression":{"arguments":[{"baseExpression":{"id":338,"name":"_wallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"1359:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":340,"indexExpression":{"id":339,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"1368:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1359:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":335,"name":"_kycWallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1343:11:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1355:3:2","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4946,"src":"1343:15:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4919_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4919_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1343:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":342,"nodeType":"ExpressionStatement","src":"1343:28:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":328,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"1303:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":329,"name":"_wallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"1307:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1316:6:2","memberName":"length","nodeType":"MemberAccess","src":"1307:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1303:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":344,"initializationExpression":{"assignments":[326],"declarations":[{"constant":false,"id":326,"mutability":"mutable","name":"i","nameLocation":"1300:1:2","nodeType":"VariableDeclaration","scope":344,"src":"1292:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":327,"nodeType":"VariableDeclarationStatement","src":"1292:9:2"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1324:3:2","subExpression":{"id":332,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"1324:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":334,"nodeType":"ExpressionStatement","src":"1324:3:2"},"nodeType":"ForStatement","src":"1287:95:2"}]},"functionSelector":"229d683d","id":346,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":322,"name":"KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1256:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":323,"kind":"modifierInvocation","modifierName":{"id":321,"name":"onlyRole","nameLocations":["1247:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"1247:8:2"},"nodeType":"ModifierInvocation","src":"1247:29:2"}],"name":"addKycWallets","nameLocation":"1181:13:2","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"_wallets","nameLocation":"1223:8:2","nodeType":"VariableDeclaration","scope":346,"src":"1204:27:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"1204:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":318,"nodeType":"ArrayTypeName","src":"1204:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1194:43:2"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[],"src":"1277:0:2"},"scope":419,"src":"1172:216:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":375,"nodeType":"Block","src":"1502:114:2","statements":[{"body":{"id":373,"nodeType":"Block","src":"1554:56:2","statements":[{"expression":{"arguments":[{"baseExpression":{"id":368,"name":"_wallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1587:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":370,"indexExpression":{"id":369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"1596:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1587:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":365,"name":"_kycWallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1568:11:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1580:6:2","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4973,"src":"1568:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4919_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4919_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1568:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":372,"nodeType":"ExpressionStatement","src":"1568:31:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":358,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"1528:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":359,"name":"_wallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1532:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1541:6:2","memberName":"length","nodeType":"MemberAccess","src":"1532:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1528:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":374,"initializationExpression":{"assignments":[356],"declarations":[{"constant":false,"id":356,"mutability":"mutable","name":"i","nameLocation":"1525:1:2","nodeType":"VariableDeclaration","scope":374,"src":"1517:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1517:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":357,"nodeType":"VariableDeclarationStatement","src":"1517:9:2"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1549:3:2","subExpression":{"id":362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"1549:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":364,"nodeType":"ExpressionStatement","src":"1549:3:2"},"nodeType":"ForStatement","src":"1512:98:2"}]},"functionSelector":"7cd727ba","id":376,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":352,"name":"KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1481:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":353,"kind":"modifierInvocation","modifierName":{"id":351,"name":"onlyRole","nameLocations":["1472:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"1472:8:2"},"nodeType":"ModifierInvocation","src":"1472:29:2"}],"name":"removeKycWallets","nameLocation":"1403:16:2","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"_wallets","nameLocation":"1448:8:2","nodeType":"VariableDeclaration","scope":376,"src":"1429:27:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":348,"nodeType":"ArrayTypeName","src":"1429:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1419:43:2"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[],"src":"1502:0:2"},"scope":419,"src":"1394:222:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":386,"nodeType":"Block","src":"1688:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":382,"name":"_kycWallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1705:11:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":383,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1717:6:2","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":5072,"src":"1705:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4919_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$4919_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (address[] memory)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1705:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":381,"id":385,"nodeType":"Return","src":"1698:27:2"}]},"functionSelector":"e2d18be6","id":387,"implemented":true,"kind":"function","modifiers":[],"name":"getKycWallets","nameLocation":"1631:13:2","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[],"src":"1644:2:2"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"1670:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"1670:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":379,"nodeType":"ArrayTypeName","src":"1670:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1669:18:2"},"scope":419,"src":"1622:110:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":399,"nodeType":"Block","src":"1806:53:2","statements":[{"expression":{"arguments":[{"id":396,"name":"_wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"1844:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":394,"name":"_kycWallets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1823:11:2","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1835:8:2","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":5000,"src":"1823:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4919_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$4919_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":393,"id":398,"nodeType":"Return","src":"1816:36:2"}]},"id":400,"implemented":true,"kind":"function","modifiers":[],"name":"_isKycWallet","nameLocation":"1747:12:2","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"_wallet","nameLocation":"1768:7:2","nodeType":"VariableDeclaration","scope":400,"src":"1760:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"1760:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1759:17:2"},"returnParameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1800:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"1800:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1799:6:2"},"scope":419,"src":"1738:121:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":417,"nodeType":"Block","src":"1920:107:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1934:12:2","subExpression":{"id":405,"name":"kycDisabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1935:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1950:22:2","subExpression":{"arguments":[{"id":408,"name":"_wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"1964:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":407,"name":"_isKycWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"1951:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1951:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1934:38:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":416,"nodeType":"IfStatement","src":"1930:91:2","trueBody":{"id":415,"nodeType":"Block","src":"1974:47:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":412,"name":"OnlyKycWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"1995:13:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1995:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":414,"nodeType":"RevertStatement","src":"1988:22:2"}]}}]},"id":418,"implemented":true,"kind":"function","modifiers":[],"name":"_onlyKycWallet","nameLocation":"1874:14:2","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"_wallet","nameLocation":"1897:7:2","nodeType":"VariableDeclaration","scope":418,"src":"1889:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"1889:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1888:17:2"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[],"src":"1920:0:2"},"scope":419,"src":"1865:162:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":420,"src":"272:1757:2","usedErrors":[262],"usedEvents":[266,921,930,939,997]}],"src":"32:1998:2"},"id":2},"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol":{"ast":{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol","exportedSymbols":{"IERC721":[3385],"INodeKey":[426]},"id":427,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":423,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":427,"sourceUnit":3386,"src":"58:73:3","symbolAliases":[{"foreign":{"id":422,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"66:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":424,"name":"IERC721","nameLocations":["155:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":3385,"src":"155:7:3"},"id":425,"nodeType":"InheritanceSpecifier","src":"155:7:3"}],"canonicalName":"INodeKey","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":426,"linearizedBaseContracts":[426,3385,3727],"name":"INodeKey","nameLocation":"143:8:3","nodeType":"ContractDefinition","nodes":[],"scope":427,"src":"133:32:3","usedErrors":[],"usedEvents":[3284,3293,3302]}],"src":"32:134:3"},"id":3},"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol":{"ast":{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol","exportedSymbols":{"INodeKey":[426],"IReferee":[573]},"id":574,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":428,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol","file":"./INodeKey.sol","id":430,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":574,"sourceUnit":427,"src":"58:40:4","symbolAliases":[{"foreign":{"id":429,"name":"INodeKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"66:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IReferee","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":573,"linearizedBaseContracts":[573],"name":"IReferee","nameLocation":"110:8:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IReferee.BatchInfo","id":439,"members":[{"constant":false,"id":432,"mutability":"mutable","name":"prevBatchNumber","nameLocation":"160:15:4","nodeType":"VariableDeclaration","scope":439,"src":"152:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":431,"name":"uint256","nodeType":"ElementaryTypeName","src":"152:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"l1NodeConfirmedTimestamp","nameLocation":"193:24:4","nodeType":"VariableDeclaration","scope":439,"src":"185:32:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":433,"name":"uint256","nodeType":"ElementaryTypeName","src":"185:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":436,"mutability":"mutable","name":"nrOfSuccessfulAttestations","nameLocation":"235:26:4","nodeType":"VariableDeclaration","scope":439,"src":"227:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":435,"name":"uint256","nodeType":"ElementaryTypeName","src":"227:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"finalL2StateRoot","nameLocation":"279:16:4","nodeType":"VariableDeclaration","scope":439,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"271:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"BatchInfo","nameLocation":"132:9:4","nodeType":"StructDefinition","scope":573,"src":"125:177:4","visibility":"public"},{"anonymous":false,"eventSelector":"51d77c4ae43368e755e7632f02917f33bc2309331294a8e578aeb22267d2ad26","id":447,"name":"LogAttest","nameLocation":"314:9:4","nodeType":"EventDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"indexed":false,"mutability":"mutable","name":"_batchNumber","nameLocation":"341:12:4","nodeType":"VariableDeclaration","scope":447,"src":"333:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint256","nodeType":"ElementaryTypeName","src":"333:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":443,"indexed":false,"mutability":"mutable","name":"_l2StateRoot","nameLocation":"371:12:4","nodeType":"VariableDeclaration","scope":447,"src":"363:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"363:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":445,"indexed":false,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"401:10:4","nodeType":"VariableDeclaration","scope":447,"src":"393:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":444,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"323:94:4"},"src":"308:110:4"},{"anonymous":false,"eventSelector":"8661cd873577b27915726e78117cf877feefa0c2496b183affd70298f9fe6183","id":451,"name":"LogSetNodeRewards","nameLocation":"429:17:4","nodeType":"EventDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"indexed":false,"mutability":"mutable","name":"_nodeRewards","nameLocation":"455:12:4","nodeType":"VariableDeclaration","scope":451,"src":"447:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"446:22:4"},"src":"423:46:4"},{"anonymous":false,"eventSelector":"f939090b22c6f2171f08a249c0bb9d86978934db8b3b9f46abc160f560805ece","id":457,"name":"LogSetOracle","nameLocation":"480:12:4","nodeType":"EventDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"indexed":false,"mutability":"mutable","name":"_oracle","nameLocation":"501:7:4","nodeType":"VariableDeclaration","scope":457,"src":"493:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"indexed":false,"mutability":"mutable","name":"_isOracle","nameLocation":"515:9:4","nodeType":"VariableDeclaration","scope":457,"src":"510:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":454,"name":"bool","nodeType":"ElementaryTypeName","src":"510:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"492:33:4"},"src":"474:52:4"},{"anonymous":false,"eventSelector":"bd414f2b875a79371916d64b687a41738105ba94bea36bc27ff4420f2439abae","id":465,"name":"LogFinalized","nameLocation":"537:12:4","nodeType":"EventDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"indexed":false,"mutability":"mutable","name":"_batchNumber","nameLocation":"567:12:4","nodeType":"VariableDeclaration","scope":465,"src":"559:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":458,"name":"uint256","nodeType":"ElementaryTypeName","src":"559:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":461,"indexed":false,"mutability":"mutable","name":"_finalL2StateRoot","nameLocation":"597:17:4","nodeType":"VariableDeclaration","scope":465,"src":"589:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"589:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":463,"indexed":false,"mutability":"mutable","name":"_nrOfSuccessfulAttestations","nameLocation":"632:27:4","nodeType":"VariableDeclaration","scope":465,"src":"624:35:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":462,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"549:116:4"},"src":"531:135:4"},{"errorSelector":"135d7c40","id":467,"name":"AttestFailed","nameLocation":"678:12:4","nodeType":"ErrorDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"690:2:4"},"src":"672:21:4"},{"errorSelector":"c3d445a5","id":469,"name":"InvalidBatchNumber","nameLocation":"704:18:4","nodeType":"ErrorDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"722:2:4"},"src":"698:27:4"},{"errorSelector":"efad5f73","id":471,"name":"NodeRewardsNotSet","nameLocation":"736:17:4","nodeType":"ErrorDefinition","parameters":{"id":470,"nodeType":"ParameterList","parameters":[],"src":"753:2:4"},"src":"730:26:4"},{"errorSelector":"73380d99","id":473,"name":"NoRewardsToClaim","nameLocation":"767:16:4","nodeType":"ErrorDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[],"src":"783:2:4"},"src":"761:25:4"},{"errorSelector":"80fee105","id":475,"name":"OnlyOracle","nameLocation":"797:10:4","nodeType":"ErrorDefinition","parameters":{"id":474,"nodeType":"ParameterList","parameters":[],"src":"807:2:4"},"src":"791:19:4"},{"functionSelector":"a5f957f9","id":481,"implemented":false,"kind":"function","modifiers":[],"name":"NODE_KEY","nameLocation":"825:8:4","nodeType":"FunctionDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[],"src":"833:2:4"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"_nodeKey","nameLocation":"868:8:4","nodeType":"VariableDeclaration","scope":481,"src":"859:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"},"typeName":{"id":478,"nodeType":"UserDefinedTypeName","pathNode":{"id":477,"name":"INodeKey","nameLocations":["859:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":426,"src":"859:8:4"},"referencedDeclaration":426,"src":"859:8:4","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"visibility":"internal"}],"src":"858:19:4"},"scope":573,"src":"816:62:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95ed640e","id":486,"implemented":false,"kind":"function","modifiers":[],"name":"ATTEST_PERIOD","nameLocation":"893:13:4","nodeType":"FunctionDefinition","parameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"906:2:4"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"_attestPeriod","nameLocation":"940:13:4","nodeType":"VariableDeclaration","scope":486,"src":"932:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":483,"name":"uint256","nodeType":"ElementaryTypeName","src":"932:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"931:23:4"},"scope":573,"src":"884:71:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1a0058f5","id":494,"implemented":false,"kind":"function","modifiers":[],"name":"getBatchInfo","nameLocation":"970:12:4","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"_batchNumber","nameLocation":"1000:12:4","nodeType":"VariableDeclaration","scope":494,"src":"992:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":487,"name":"uint256","nodeType":"ElementaryTypeName","src":"992:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"982:36:4"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":494,"src":"1042:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BatchInfo_$439_memory_ptr","typeString":"struct IReferee.BatchInfo"},"typeName":{"id":491,"nodeType":"UserDefinedTypeName","pathNode":{"id":490,"name":"BatchInfo","nameLocations":["1042:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":439,"src":"1042:9:4"},"referencedDeclaration":439,"src":"1042:9:4","typeDescriptions":{"typeIdentifier":"t_struct$_BatchInfo_$439_storage_ptr","typeString":"struct IReferee.BatchInfo"}},"visibility":"internal"}],"src":"1041:18:4"},"scope":573,"src":"961:99:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"596c9928","id":502,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestedBatchNumbers","nameLocation":"1075:23:4","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1116:10:4","nodeType":"VariableDeclaration","scope":502,"src":"1108:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint256","nodeType":"ElementaryTypeName","src":"1108:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1098:34:4"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":502,"src":"1156:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":499,"nodeType":"ArrayTypeName","src":"1156:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1155:18:4"},"scope":573,"src":"1066:108:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf440998","id":509,"implemented":false,"kind":"function","modifiers":[],"name":"getIndexOfUnclaimedBatch","nameLocation":"1189:24:4","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1231:10:4","nodeType":"VariableDeclaration","scope":509,"src":"1223:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1213:34:4"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":509,"src":"1271:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1270:9:4"},"scope":573,"src":"1180:100:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"fc711133","id":518,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"1295:14:4","nodeType":"FunctionDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"_batchNumber","nameLocation":"1327:12:4","nodeType":"VariableDeclaration","scope":518,"src":"1319:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1357:10:4","nodeType":"VariableDeclaration","scope":518,"src":"1349:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1349:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1309:64:4"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":518,"src":"1397:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1397:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1396:9:4"},"scope":573,"src":"1286:120:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70508141","id":527,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"1421:6:4","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"_batchNumber","nameLocation":"1445:12:4","nodeType":"VariableDeclaration","scope":527,"src":"1437:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":519,"name":"uint256","nodeType":"ElementaryTypeName","src":"1437:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"_l2StateRoot","nameLocation":"1475:12:4","nodeType":"VariableDeclaration","scope":527,"src":"1467:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1467:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1505:10:4","nodeType":"VariableDeclaration","scope":527,"src":"1497:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"1497:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1427:94:4"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[],"src":"1530:0:4"},"scope":573,"src":"1412:119:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"569861a3","id":537,"implemented":false,"kind":"function","modifiers":[],"name":"batchAttest","nameLocation":"1546:11:4","nodeType":"FunctionDefinition","parameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"_batchNumber","nameLocation":"1575:12:4","nodeType":"VariableDeclaration","scope":537,"src":"1567:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"1567:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"_l2StateRoot","nameLocation":"1605:12:4","nodeType":"VariableDeclaration","scope":537,"src":"1597:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1597:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"_nodeKeyIds","nameLocation":"1644:11:4","nodeType":"VariableDeclaration","scope":537,"src":"1627:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"1627:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":533,"nodeType":"ArrayTypeName","src":"1627:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1557:104:4"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"1670:0:4"},"scope":573,"src":"1537:134:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fde34dc4","id":546,"implemented":false,"kind":"function","modifiers":[],"name":"finalize","nameLocation":"1686:8:4","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"_batchNumber","nameLocation":"1712:12:4","nodeType":"VariableDeclaration","scope":546,"src":"1704:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"_l1NodeConfirmedTimestamp","nameLocation":"1742:25:4","nodeType":"VariableDeclaration","scope":546,"src":"1734:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"1734:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"_finalL2StateRoot","nameLocation":"1785:17:4","nodeType":"VariableDeclaration","scope":546,"src":"1777:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1777:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1694:114:4"},"returnParameters":{"id":545,"nodeType":"ParameterList","parameters":[],"src":"1817:0:4"},"scope":573,"src":"1677:141:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"86bb8f37","id":553,"implemented":false,"kind":"function","modifiers":[],"name":"claimReward","nameLocation":"1833:11:4","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"_nodeKeyId","nameLocation":"1853:10:4","nodeType":"VariableDeclaration","scope":553,"src":"1845:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":550,"mutability":"mutable","name":"_batchesCount","nameLocation":"1873:13:4","nodeType":"VariableDeclaration","scope":553,"src":"1865:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"1865:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1844:43:4"},"returnParameters":{"id":552,"nodeType":"ParameterList","parameters":[],"src":"1896:0:4"},"scope":573,"src":"1824:73:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"615668e0","id":561,"implemented":false,"kind":"function","modifiers":[],"name":"batchClaimReward","nameLocation":"1912:16:4","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"_nodeKeyIds","nameLocation":"1955:11:4","nodeType":"VariableDeclaration","scope":561,"src":"1938:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"1938:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":555,"nodeType":"ArrayTypeName","src":"1938:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"_batchesCount","nameLocation":"1984:13:4","nodeType":"VariableDeclaration","scope":561,"src":"1976:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"1976:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1928:75:4"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"2012:0:4"},"scope":573,"src":"1903:110:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"18fa2fcc","id":572,"implemented":false,"kind":"function","modifiers":[],"name":"getUnattestedNodeKeyIds","nameLocation":"2028:23:4","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"_batchNumber","nameLocation":"2069:12:4","nodeType":"VariableDeclaration","scope":572,"src":"2061:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"2061:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"_nodeKeyIds","nameLocation":"2108:11:4","nodeType":"VariableDeclaration","scope":572,"src":"2091:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":564,"name":"uint256","nodeType":"ElementaryTypeName","src":"2091:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":565,"nodeType":"ArrayTypeName","src":"2091:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2051:74:4"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":572,"src":"2149:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":568,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":569,"nodeType":"ArrayTypeName","src":"2149:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2148:18:4"},"scope":573,"src":"2019:148:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":574,"src":"100:2069:4","usedErrors":[467,469,471,473,475],"usedEvents":[447,451,457,465]}],"src":"32:2138:4"},"id":4},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[909],"AddressUpgradeable":[1481],"ContextUpgradeable":[1523],"ERC165Upgradeable":[1796],"IAccessControlUpgradeable":[982],"IERC165Upgradeable":[1808],"Initializable":[1151],"MathUpgradeable":[2674],"SignedMathUpgradeable":[2779],"StringsUpgradeable":[1752]},"id":910,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":575,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":983,"src":"133:41:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":577,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1524,"src":"175:41:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1753,"src":"217:41:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":579,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1797,"src":"259:54:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":910,"sourceUnit":1152,"src":"314:42:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":582,"name":"Initializable","nameLocations":["2065:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":1151,"src":"2065:13:5"},"id":583,"nodeType":"InheritanceSpecifier","src":"2065:13:5"},{"baseName":{"id":584,"name":"ContextUpgradeable","nameLocations":["2080:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1523,"src":"2080:18:5"},"id":585,"nodeType":"InheritanceSpecifier","src":"2080:18:5"},{"baseName":{"id":586,"name":"IAccessControlUpgradeable","nameLocations":["2100:25:5"],"nodeType":"IdentifierPath","referencedDeclaration":982,"src":"2100:25:5"},"id":587,"nodeType":"InheritanceSpecifier","src":"2100:25:5"},{"baseName":{"id":588,"name":"ERC165Upgradeable","nameLocations":["2127:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1796,"src":"2127:17:5"},"id":589,"nodeType":"InheritanceSpecifier","src":"2127:17:5"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"358:1660:5","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":909,"linearizedBaseContracts":[909,1796,1808,982,1523,1151],"name":"AccessControlUpgradeable","nameLocation":"2037:24:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":594,"nodeType":"Block","src":"2209:7:5","statements":[]},"id":595,"implemented":true,"kind":"function","modifiers":[{"id":592,"kind":"modifierInvocation","modifierName":{"id":591,"name":"onlyInitializing","nameLocations":["2192:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"2192:16:5"},"nodeType":"ModifierInvocation","src":"2192:16:5"}],"name":"__AccessControl_init","nameLocation":"2160:20:5","nodeType":"FunctionDefinition","parameters":{"id":590,"nodeType":"ParameterList","parameters":[],"src":"2180:2:5"},"returnParameters":{"id":593,"nodeType":"ParameterList","parameters":[],"src":"2209:0:5"},"scope":909,"src":"2151:65:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"2290:7:5","statements":[]},"id":601,"implemented":true,"kind":"function","modifiers":[{"id":598,"kind":"modifierInvocation","modifierName":{"id":597,"name":"onlyInitializing","nameLocations":["2273:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"2273:16:5"},"nodeType":"ModifierInvocation","src":"2273:16:5"}],"name":"__AccessControl_init_unchained","nameLocation":"2231:30:5","nodeType":"FunctionDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"2261:2:5"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"2290:0:5"},"scope":909,"src":"2222:75:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":608,"members":[{"constant":false,"id":605,"mutability":"mutable","name":"members","nameLocation":"2353:7:5","nodeType":"VariableDeclaration","scope":608,"src":"2328:32:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":604,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2328:24:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":603,"name":"bool","nodeType":"ElementaryTypeName","src":"2347:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"adminRole","nameLocation":"2378:9:5","nodeType":"VariableDeclaration","scope":608,"src":"2370:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2370:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2309:8:5","nodeType":"StructDefinition","scope":909,"src":"2302:92:5","visibility":"public"},{"constant":false,"id":613,"mutability":"mutable","name":"_roles","nameLocation":"2437:6:5","nodeType":"VariableDeclaration","scope":909,"src":"2400:43:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":612,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2408:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2400:28:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":611,"nodeType":"UserDefinedTypeName","pathNode":{"id":610,"name":"RoleData","nameLocations":["2419:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":608,"src":"2419:8:5"},"referencedDeclaration":608,"src":"2419:8:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":616,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2474:18:5","nodeType":"VariableDeclaration","scope":909,"src":"2450:49:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2450:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:4:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":626,"nodeType":"Block","src":"2918:44:5","statements":[{"expression":{"arguments":[{"id":622,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"2939:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":621,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[681,720],"referencedDeclaration":681,"src":"2928:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2928:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":624,"nodeType":"ExpressionStatement","src":"2928:16:5"},{"id":625,"nodeType":"PlaceholderStatement","src":"2954:1:5"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"2506:375:5","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":627,"name":"onlyRole","nameLocation":"2895:8:5","nodeType":"ModifierDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"role","nameLocation":"2912:4:5","nodeType":"VariableDeclaration","scope":627,"src":"2904:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:14:5"},"src":"2886:76:5","virtual":false,"visibility":"internal"},{"baseFunctions":[1790],"body":{"id":648,"nodeType":"Block","src":"3120:122:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":636,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"3137:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":638,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"3157:25:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$982_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$982_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":637,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3152:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$982","typeString":"type(contract IAccessControlUpgradeable)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3184:11:5","memberName":"interfaceId","nodeType":"MemberAccess","src":"3152:43:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3137:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":644,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"3223:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":642,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3199:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$909_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3205:17:5","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1790,"src":"3199:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3137:98:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":635,"id":647,"nodeType":"Return","src":"3130:105:5"}]},"documentation":{"id":628,"nodeType":"StructuredDocumentation","src":"2968:56:5","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":649,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3038:17:5","nodeType":"FunctionDefinition","overrides":{"id":632,"nodeType":"OverrideSpecifier","overrides":[],"src":"3096:8:5"},"parameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":630,"mutability":"mutable","name":"interfaceId","nameLocation":"3063:11:5","nodeType":"VariableDeclaration","scope":649,"src":"3056:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":629,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3056:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3055:20:5"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":649,"src":"3114:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":633,"name":"bool","nodeType":"ElementaryTypeName","src":"3114:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3113:6:5"},"scope":909,"src":"3029:213:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[949],"body":{"id":667,"nodeType":"Block","src":"3421:53:5","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":660,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"3438:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":662,"indexExpression":{"id":661,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"3445:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3451:7:5","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":605,"src":"3438:20:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":665,"indexExpression":{"id":664,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"3459:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":659,"id":666,"nodeType":"Return","src":"3431:36:5"}]},"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"3248:76:5","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":668,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3338:7:5","nodeType":"FunctionDefinition","overrides":{"id":656,"nodeType":"OverrideSpecifier","overrides":[],"src":"3397:8:5"},"parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"role","nameLocation":"3354:4:5","nodeType":"VariableDeclaration","scope":668,"src":"3346:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3346:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"account","nameLocation":"3368:7:5","nodeType":"VariableDeclaration","scope":668,"src":"3360:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"3360:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3345:31:5"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":668,"src":"3415:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":657,"name":"bool","nodeType":"ElementaryTypeName","src":"3415:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3414:6:5"},"scope":909,"src":"3329:145:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":680,"nodeType":"Block","src":"3824:47:5","statements":[{"expression":{"arguments":[{"id":675,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"3845:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":676,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3851:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":674,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[681,720],"referencedDeclaration":720,"src":"3834:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"3834:30:5"}]},"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"3480:283:5","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3777:10:5","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"role","nameLocation":"3796:4:5","nodeType":"VariableDeclaration","scope":681,"src":"3788:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3788:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3787:14:5"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[],"src":"3824:0:5"},"scope":909,"src":"3768:103:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":719,"nodeType":"Block","src":"4225:428:5","statements":[{"condition":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4239:23:5","subExpression":{"arguments":[{"id":690,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"4248:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":691,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"4254:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":689,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"4240:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4240:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":718,"nodeType":"IfStatement","src":"4235:412:5","trueBody":{"id":717,"nodeType":"Block","src":"4264:383:5","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4372:25:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":702,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"4454:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":700,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"4423:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1752_$","typeString":"type(library StringsUpgradeable)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4442:11:5","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1726,"src":"4423:30:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4423:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4488:19:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":709,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"4572:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4564:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"4564:7:5","typeDescriptions":{}}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4564:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4579:2:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":705,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"4533:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1752_$","typeString":"type(library StringsUpgradeable)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4552:11:5","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"4533:30:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4533:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":697,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4330:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4334:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"4330:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:274:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":695,"name":"string","nodeType":"ElementaryTypeName","src":"4302:6:5","typeDescriptions":{}}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:320:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":694,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4278:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4278:358:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"4278:358:5"}]}}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"3877:270:5","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":720,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4161:10:5","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"role","nameLocation":"4180:4:5","nodeType":"VariableDeclaration","scope":720,"src":"4172:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4172:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"account","nameLocation":"4194:7:5","nodeType":"VariableDeclaration","scope":720,"src":"4186:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"4186:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4171:31:5"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"4225:0:5"},"scope":909,"src":"4152:501:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[957],"body":{"id":734,"nodeType":"Block","src":"4917:46:5","statements":[{"expression":{"expression":{"baseExpression":{"id":729,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"4934:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":731,"indexExpression":{"id":730,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"4941:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4934:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4947:9:5","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":607,"src":"4934:22:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":728,"id":733,"nodeType":"Return","src":"4927:29:5"}]},"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"4659:170:5","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":735,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4843:12:5","nodeType":"FunctionDefinition","overrides":{"id":725,"nodeType":"OverrideSpecifier","overrides":[],"src":"4890:8:5"},"parameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"role","nameLocation":"4864:4:5","nodeType":"VariableDeclaration","scope":735,"src":"4856:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4856:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4855:14:5"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":735,"src":"4908:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4908:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4907:9:5"},"scope":909,"src":"4834:129:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[965],"body":{"id":754,"nodeType":"Block","src":"5362:42:5","statements":[{"expression":{"arguments":[{"id":750,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5383:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":751,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5389:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":749,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"5372:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5372:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":753,"nodeType":"ExpressionStatement","src":"5372:25:5"}]},"documentation":{"id":736,"nodeType":"StructuredDocumentation","src":"4969:285:5","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":755,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":745,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5355:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":744,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"5342:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":747,"kind":"modifierInvocation","modifierName":{"id":743,"name":"onlyRole","nameLocations":["5333:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"5333:8:5"},"nodeType":"ModifierInvocation","src":"5333:28:5"}],"name":"grantRole","nameLocation":"5268:9:5","nodeType":"FunctionDefinition","overrides":{"id":742,"nodeType":"OverrideSpecifier","overrides":[],"src":"5324:8:5"},"parameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"role","nameLocation":"5286:4:5","nodeType":"VariableDeclaration","scope":755,"src":"5278:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5278:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"account","nameLocation":"5300:7:5","nodeType":"VariableDeclaration","scope":755,"src":"5292:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"5292:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5277:31:5"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[],"src":"5362:0:5"},"scope":909,"src":"5259:145:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[973],"body":{"id":774,"nodeType":"Block","src":"5788:43:5","statements":[{"expression":{"arguments":[{"id":770,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"5810:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":771,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"5816:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":769,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"5798:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5798:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":773,"nodeType":"ExpressionStatement","src":"5798:26:5"}]},"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"5410:269:5","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":775,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":765,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"5781:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":764,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"5768:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5768:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":767,"kind":"modifierInvocation","modifierName":{"id":763,"name":"onlyRole","nameLocations":["5759:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"5759:8:5"},"nodeType":"ModifierInvocation","src":"5759:28:5"}],"name":"revokeRole","nameLocation":"5693:10:5","nodeType":"FunctionDefinition","overrides":{"id":762,"nodeType":"OverrideSpecifier","overrides":[],"src":"5750:8:5"},"parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"role","nameLocation":"5712:4:5","nodeType":"VariableDeclaration","scope":775,"src":"5704:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5704:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"account","nameLocation":"5726:7:5","nodeType":"VariableDeclaration","scope":775,"src":"5718:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"5718:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5703:31:5"},"returnParameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"5788:0:5"},"scope":909,"src":"5684:147:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[981],"body":{"id":797,"nodeType":"Block","src":"6445:137:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":785,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"6463:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":786,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"6474:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6474:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6463:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6488:49:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":784,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6455:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:83:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":791,"nodeType":"ExpressionStatement","src":"6455:83:5"},{"expression":{"arguments":[{"id":793,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"6561:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":794,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"6567:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":792,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"6549:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":796,"nodeType":"ExpressionStatement","src":"6549:26:5"}]},"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"5837:526:5","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":798,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6377:12:5","nodeType":"FunctionDefinition","overrides":{"id":782,"nodeType":"OverrideSpecifier","overrides":[],"src":"6436:8:5"},"parameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"role","nameLocation":"6398:4:5","nodeType":"VariableDeclaration","scope":798,"src":"6390:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6390:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"account","nameLocation":"6412:7:5","nodeType":"VariableDeclaration","scope":798,"src":"6404:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":779,"name":"address","nodeType":"ElementaryTypeName","src":"6404:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6389:31:5"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"6445:0:5"},"scope":909,"src":"6368:214:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":811,"nodeType":"Block","src":"7335:42:5","statements":[{"expression":{"arguments":[{"id":807,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"7356:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":808,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"7362:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":806,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"7345:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7345:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":810,"nodeType":"ExpressionStatement","src":"7345:25:5"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"6588:674:5","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":812,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7276:10:5","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"role","nameLocation":"7295:4:5","nodeType":"VariableDeclaration","scope":812,"src":"7287:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7287:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"account","nameLocation":"7309:7:5","nodeType":"VariableDeclaration","scope":812,"src":"7301:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"7301:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7286:31:5"},"returnParameters":{"id":805,"nodeType":"ParameterList","parameters":[],"src":"7335:0:5"},"scope":909,"src":"7267:110:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":839,"nodeType":"Block","src":"7575:174:5","statements":[{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7593:17:5","nodeType":"VariableDeclaration","scope":839,"src":"7585:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7585:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":825,"initialValue":{"arguments":[{"id":823,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"7626:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":822,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"7613:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7585:46:5"},{"expression":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":826,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"7641:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":828,"indexExpression":{"id":827,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"7648:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7641:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7654:9:5","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":607,"src":"7641:22:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":830,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"7666:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7641:34:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":832,"nodeType":"ExpressionStatement","src":"7641:34:5"},{"eventCall":{"arguments":[{"id":834,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"7707:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":835,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"7713:17:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":836,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"7732:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":833,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"7690:16:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7690:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":838,"nodeType":"EmitStatement","src":"7685:57:5"}]},"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"7383:114:5","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":840,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7511:13:5","nodeType":"FunctionDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"role","nameLocation":"7533:4:5","nodeType":"VariableDeclaration","scope":840,"src":"7525:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7525:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"adminRole","nameLocation":"7547:9:5","nodeType":"VariableDeclaration","scope":840,"src":"7539:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7539:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7524:33:5"},"returnParameters":{"id":819,"nodeType":"ParameterList","parameters":[],"src":"7575:0:5"},"scope":909,"src":"7502:247:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":871,"nodeType":"Block","src":"7985:165:5","statements":[{"condition":{"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7999:23:5","subExpression":{"arguments":[{"id":849,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8008:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":850,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"8014:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":848,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"8000:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8000:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":870,"nodeType":"IfStatement","src":"7995:149:5","trueBody":{"id":869,"nodeType":"Block","src":"8024:120:5","statements":[{"expression":{"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":853,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"8038:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":855,"indexExpression":{"id":854,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8045:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8038:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8051:7:5","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":605,"src":"8038:20:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":858,"indexExpression":{"id":857,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"8059:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8038:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8070:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8038:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":861,"nodeType":"ExpressionStatement","src":"8038:36:5"},{"eventCall":{"arguments":[{"id":863,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8105:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":864,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"8111:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":865,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8120:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8120:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":862,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"8093:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8093:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"EmitStatement","src":"8088:45:5"}]}}]},"documentation":{"id":841,"nodeType":"StructuredDocumentation","src":"7755:157:5","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":872,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7926:10:5","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"role","nameLocation":"7945:4:5","nodeType":"VariableDeclaration","scope":872,"src":"7937:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":842,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7937:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"account","nameLocation":"7959:7:5","nodeType":"VariableDeclaration","scope":872,"src":"7951:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"7951:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7936:31:5"},"returnParameters":{"id":847,"nodeType":"ParameterList","parameters":[],"src":"7985:0:5"},"scope":909,"src":"7917:233:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":902,"nodeType":"Block","src":"8390:165:5","statements":[{"condition":{"arguments":[{"id":881,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"8412:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":882,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8418:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":880,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"8404:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8404:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":901,"nodeType":"IfStatement","src":"8400:149:5","trueBody":{"id":900,"nodeType":"Block","src":"8428:121:5","statements":[{"expression":{"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":884,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"8442:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$608_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":886,"indexExpression":{"id":885,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"8449:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8442:12:5","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$608_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":887,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8455:7:5","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":605,"src":"8442:20:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":889,"indexExpression":{"id":888,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8463:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8442:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8474:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8442:37:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":892,"nodeType":"ExpressionStatement","src":"8442:37:5"},{"eventCall":{"arguments":[{"id":894,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"8510:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":895,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8516:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":896,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"8525:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8525:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":893,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"8498:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8498:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":899,"nodeType":"EmitStatement","src":"8493:45:5"}]}}]},"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"8156:160:5","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":903,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8330:11:5","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":875,"mutability":"mutable","name":"role","nameLocation":"8350:4:5","nodeType":"VariableDeclaration","scope":903,"src":"8342:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8342:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"account","nameLocation":"8364:7:5","nodeType":"VariableDeclaration","scope":903,"src":"8356:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"8356:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8341:31:5"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"8390:0:5"},"scope":909,"src":"8321:234:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"8561:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":908,"mutability":"mutable","name":"__gap","nameLocation":"8840:5:5","nodeType":"VariableDeclaration","scope":909,"src":"8820:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":907,"length":{"hexValue":"3439","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8828:2:5","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8820:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":910,"src":"2019:6829:5","usedErrors":[],"usedEvents":[921,930,939,997]}],"src":"108:8741:5"},"id":5},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[982]},"id":983,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":911,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"119:89:6","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":982,"linearizedBaseContracts":[982],"name":"IAccessControlUpgradeable","nameLocation":"219:25:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"251:292:6","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":921,"name":"RoleAdminChanged","nameLocation":"554:16:6","nodeType":"EventDefinition","parameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":915,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:6","nodeType":"VariableDeclaration","scope":921,"src":"571:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":914,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":917,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:6","nodeType":"VariableDeclaration","scope":921,"src":"593:33:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":919,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:6","nodeType":"VariableDeclaration","scope":921,"src":"628:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:6"},"src":"548:110:6"},{"anonymous":false,"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"664:212:6","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":930,"name":"RoleGranted","nameLocation":"887:11:6","nodeType":"EventDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:6","nodeType":"VariableDeclaration","scope":930,"src":"899:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":923,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":926,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:6","nodeType":"VariableDeclaration","scope":930,"src":"921:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":928,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:6","nodeType":"VariableDeclaration","scope":930,"src":"946:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:6"},"src":"881:89:6"},{"anonymous":false,"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"976:275:6","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":939,"name":"RoleRevoked","nameLocation":"1262:11:6","nodeType":"EventDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:6","nodeType":"VariableDeclaration","scope":939,"src":"1274:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":932,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":935,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:6","nodeType":"VariableDeclaration","scope":939,"src":"1296:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:6","nodeType":"VariableDeclaration","scope":939,"src":"1321:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:6"},"src":"1256:89:6"},{"documentation":{"id":940,"nodeType":"StructuredDocumentation","src":"1351:76:6","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":949,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:6","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"role","nameLocation":"1457:4:6","nodeType":"VariableDeclaration","scope":949,"src":"1449:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"account","nameLocation":"1471:7:6","nodeType":"VariableDeclaration","scope":949,"src":"1463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:6"},"returnParameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":949,"src":"1503:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":946,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:6"},"scope":982,"src":"1432:77:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":950,"nodeType":"StructuredDocumentation","src":"1515:184:6","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":957,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:6","nodeType":"FunctionDefinition","parameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"role","nameLocation":"1734:4:6","nodeType":"VariableDeclaration","scope":957,"src":"1726:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:6"},"returnParameters":{"id":956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":957,"src":"1763:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:6"},"scope":982,"src":"1704:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":958,"nodeType":"StructuredDocumentation","src":"1778:239:6","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":965,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:6","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"role","nameLocation":"2049:4:6","nodeType":"VariableDeclaration","scope":965,"src":"2041:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"account","nameLocation":"2063:7:6","nodeType":"VariableDeclaration","scope":965,"src":"2055:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:6"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"2080:0:6"},"scope":982,"src":"2022:59:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"2087:223:6","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":973,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:6","nodeType":"FunctionDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"role","nameLocation":"2343:4:6","nodeType":"VariableDeclaration","scope":973,"src":"2335:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"account","nameLocation":"2357:7:6","nodeType":"VariableDeclaration","scope":973,"src":"2349:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:6"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[],"src":"2374:0:6"},"scope":982,"src":"2315:60:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":974,"nodeType":"StructuredDocumentation","src":"2381:480:6","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":981,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:6","nodeType":"FunctionDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"role","nameLocation":"2896:4:6","nodeType":"VariableDeclaration","scope":981,"src":"2888:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":975,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":978,"mutability":"mutable","name":"account","nameLocation":"2910:7:6","nodeType":"VariableDeclaration","scope":981,"src":"2902:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:6"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"2927:0:6"},"scope":982,"src":"2866:62:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":983,"src":"209:2721:6","usedErrors":[],"usedEvents":[921,930,939]}],"src":"94:2837:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1481],"Initializable":[1151]},"id":1152,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":984,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":985,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1152,"sourceUnit":1482,"src":"138:44:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":986,"nodeType":"StructuredDocumentation","src":"184:2209:7","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1151,"linearizedBaseContracts":[1151],"name":"Initializable","nameLocation":"2412:13:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"2432:109:7","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":989,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:7","nodeType":"VariableDeclaration","scope":1151,"src":"2546:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":988,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"2579:91:7","text":" @dev Indicates that the contract is in the process of being initialized."},"id":992,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:7","nodeType":"VariableDeclaration","scope":1151,"src":"2675:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":991,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":993,"nodeType":"StructuredDocumentation","src":"2708:90:7","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":997,"name":"Initialized","nameLocation":"2809:11:7","nodeType":"EventDefinition","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:7","nodeType":"VariableDeclaration","scope":997,"src":"2821:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":994,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:7"},"src":"2803:33:7"},{"body":{"id":1052,"nodeType":"Block","src":"3269:483:7","statements":[{"assignments":[1001],"declarations":[{"constant":false,"id":1001,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:7","nodeType":"VariableDeclaration","scope":1052,"src":"3279:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1000,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1004,"initialValue":{"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:7","subExpression":{"id":1002,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"3302:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"3347:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1007,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3365:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1011,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:7","subExpression":{"arguments":[{"arguments":[{"id":1016,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1151","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1151","typeString":"contract Initializable"}],"id":1015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:7","typeDescriptions":{}}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1012,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"3388:18:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1481_$","typeString":"type(library AddressUpgradeable)"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"3388:29:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1020,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3436:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1028,"nodeType":"ExpressionStatement","src":"3325:201:7"},{"expression":{"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1029,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3536:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1032,"nodeType":"ExpressionStatement","src":"3536:16:7"},{"condition":{"id":1033,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"3566:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1039,"nodeType":"IfStatement","src":"3562:65:7","trueBody":{"id":1038,"nodeType":"Block","src":"3582:45:7","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1034,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"3596:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1037,"nodeType":"ExpressionStatement","src":"3596:20:7"}]}},{"id":1040,"nodeType":"PlaceholderStatement","src":"3636:1:7"},{"condition":{"id":1041,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"3651:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1051,"nodeType":"IfStatement","src":"3647:99:7","trueBody":{"id":1050,"nodeType":"Block","src":"3667:79:7","statements":[{"expression":{"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1042,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"3681:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1045,"nodeType":"ExpressionStatement","src":"3681:21:7"},{"eventCall":{"arguments":[{"hexValue":"31","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1046,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"3721:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1049,"nodeType":"EmitStatement","src":"3716:19:7"}]}}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"2842:399:7","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1053,"name":"initializer","nameLocation":"3255:11:7","nodeType":"ModifierDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[],"src":"3266:2:7"},"src":"3246:506:7","virtual":false,"visibility":"internal"},{"body":{"id":1085,"nodeType":"Block","src":"4863:255:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:7","subExpression":{"id":1059,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4882:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4899:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1062,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"4914:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1058,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"ExpressionStatement","src":"4873:99:7"},{"expression":{"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1068,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4982:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1069,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"4997:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1071,"nodeType":"ExpressionStatement","src":"4982:22:7"},{"expression":{"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1072,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5014:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1075,"nodeType":"ExpressionStatement","src":"5014:20:7"},{"id":1076,"nodeType":"PlaceholderStatement","src":"5044:1:7"},{"expression":{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1077,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5055:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1080,"nodeType":"ExpressionStatement","src":"5055:21:7"},{"eventCall":{"arguments":[{"id":1082,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"5103:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1081,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"5091:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1084,"nodeType":"EmitStatement","src":"5086:25:7"}]},"documentation":{"id":1054,"nodeType":"StructuredDocumentation","src":"3758:1062:7","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1086,"name":"reinitializer","nameLocation":"4834:13:7","nodeType":"ModifierDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"version","nameLocation":"4854:7:7","nodeType":"VariableDeclaration","scope":1086,"src":"4848:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1055,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:7"},"src":"4825:293:7","virtual":false,"visibility":"internal"},{"body":{"id":1095,"nodeType":"Block","src":"5356:97:7","statements":[{"expression":{"arguments":[{"id":1090,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5374:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1089,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1093,"nodeType":"ExpressionStatement","src":"5366:69:7"},{"id":1094,"nodeType":"PlaceholderStatement","src":"5445:1:7"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"5124:199:7","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1096,"name":"onlyInitializing","nameLocation":"5337:16:7","nodeType":"ModifierDefinition","parameters":{"id":1088,"nodeType":"ParameterList","parameters":[],"src":"5353:2:7"},"src":"5328:125:7","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"5988:231:7","statements":[{"expression":{"arguments":[{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:7","subExpression":{"id":1101,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"6007:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1105,"nodeType":"ExpressionStatement","src":"5998:66:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1106,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6078:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1108,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1107,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:7","memberName":"max","nodeType":"MemberAccess","src":"6094:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1130,"nodeType":"IfStatement","src":"6074:139:7","trueBody":{"id":1129,"nodeType":"Block","src":"6111:102:7","statements":[{"expression":{"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1113,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6125:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1115,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1114,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:7","memberName":"max","nodeType":"MemberAccess","src":"6140:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1120,"nodeType":"ExpressionStatement","src":"6125:30:7"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1123,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1122,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:7","memberName":"max","nodeType":"MemberAccess","src":"6186:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1121,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"6174:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"EmitStatement","src":"6169:33:7"}]}}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"5459:475:7","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:7","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[],"src":"5968:2:7"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"5988:0:7"},"scope":1151,"src":"5939:280:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1140,"nodeType":"Block","src":"6393:36:7","statements":[{"expression":{"id":1138,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"6410:12:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1137,"id":1139,"nodeType":"Return","src":"6403:19:7"}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"6225:99:7","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1141,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:7","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"6360:2:7"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"6386:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1135,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:7"},"scope":1151,"src":"6329:100:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1149,"nodeType":"Block","src":"6601:37:7","statements":[{"expression":{"id":1147,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"6618:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1146,"id":1148,"nodeType":"Return","src":"6611:20:7"}]},"documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"6435:105:7","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1150,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:7","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[],"src":"6569:2:7"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1150,"src":"6595:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1144,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:7"},"scope":1151,"src":"6545:93:7","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1152,"src":"2394:4246:7","usedErrors":[],"usedEvents":[997]}],"src":"113:6528:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1481]},"id":1482,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1153,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1154,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1481,"linearizedBaseContracts":[1481],"name":"AddressUpgradeable","nameLocation":"202:18:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1168,"nodeType":"Block","src":"1489:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"1713:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:8","memberName":"code","nodeType":"MemberAccess","src":"1713:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"length","nodeType":"MemberAccess","src":"1713:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1161,"id":1167,"nodeType":"Return","src":"1706:30:8"}]},"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"227:1191:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1169,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:8","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"account","nameLocation":"1451:7:8","nodeType":"VariableDeclaration","scope":1169,"src":"1443:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1156,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:8"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1169,"src":"1483:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1159,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:8"},"scope":1481,"src":"1423:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1202,"nodeType":"Block","src":"2729:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1180,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1481","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1481","typeString":"library AddressUpgradeable"}],"id":1179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:8","typeDescriptions":{}}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2772:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1177,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"ExpressionStatement","src":"2739:73:8"},{"assignments":[1189,null],"declarations":[{"constant":false,"id":1189,"mutability":"mutable","name":"success","nameLocation":"2829:7:8","nodeType":"VariableDeclaration","scope":1202,"src":"2824:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1188,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1196,"initialValue":{"arguments":[{"hexValue":"","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1190,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"2842:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:8","memberName":"call","nodeType":"MemberAccess","src":"2842:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1192,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2864:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:8"},{"expression":{"arguments":[{"id":1198,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"2893:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1197,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1201,"nodeType":"ExpressionStatement","src":"2885:78:8"}]},"documentation":{"id":1170,"nodeType":"StructuredDocumentation","src":"1749:904:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1203,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:8","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1172,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:8","nodeType":"VariableDeclaration","scope":1203,"src":"2677:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1171,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"amount","nameLocation":"2712:6:8","nodeType":"VariableDeclaration","scope":1203,"src":"2704:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:8"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[],"src":"2729:0:8"},"scope":1481,"src":"2658:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1220,"nodeType":"Block","src":"3801:96:8","statements":[{"expression":{"arguments":[{"id":1214,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3840:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1215,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"3848:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1213,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1261,1305],"referencedDeclaration":1305,"src":"3818:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1212,"id":1219,"nodeType":"Return","src":"3811:79:8"}]},"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"2976:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1221,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:8","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"target","nameLocation":"3742:6:8","nodeType":"VariableDeclaration","scope":1221,"src":"3734:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"data","nameLocation":"3763:4:8","nodeType":"VariableDeclaration","scope":1221,"src":"3750:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1207,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:8"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1221,"src":"3787:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1210,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:8"},"scope":1481,"src":"3712:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1240,"nodeType":"Block","src":"4266:76:8","statements":[{"expression":{"arguments":[{"id":1234,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"4305:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1235,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"4313:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1237,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"4322:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1233,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1261,1305],"referencedDeclaration":1305,"src":"4283:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1232,"id":1239,"nodeType":"Return","src":"4276:59:8"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"3903:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1241,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:8","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"target","nameLocation":"4158:6:8","nodeType":"VariableDeclaration","scope":1241,"src":"4150:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"data","nameLocation":"4187:4:8","nodeType":"VariableDeclaration","scope":1241,"src":"4174:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1225,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:8","nodeType":"VariableDeclaration","scope":1241,"src":"4201:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1227,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:8"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1241,"src":"4252:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1230,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:8"},"scope":1481,"src":"4119:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"4817:111:8","statements":[{"expression":{"arguments":[{"id":1254,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"4856:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1255,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"4864:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"4870:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1253,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1261,1305],"referencedDeclaration":1305,"src":"4834:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1252,"id":1259,"nodeType":"Return","src":"4827:94:8"}]},"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"4348:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:8","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"target","nameLocation":"4743:6:8","nodeType":"VariableDeclaration","scope":1261,"src":"4735:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"data","nameLocation":"4764:4:8","nodeType":"VariableDeclaration","scope":1261,"src":"4751:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1245,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"value","nameLocation":"4778:5:8","nodeType":"VariableDeclaration","scope":1261,"src":"4770:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:8"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1261,"src":"4803:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1250,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:8"},"scope":1481,"src":"4704:224:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1304,"nodeType":"Block","src":"5355:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1278,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1481","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1481","typeString":"library AddressUpgradeable"}],"id":1277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1276,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:8","typeDescriptions":{}}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"5398:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1275,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1285,"nodeType":"ExpressionStatement","src":"5365:81:8"},{"assignments":[1287,1289],"declarations":[{"constant":false,"id":1287,"mutability":"mutable","name":"success","nameLocation":"5462:7:8","nodeType":"VariableDeclaration","scope":1304,"src":"5457:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1286,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:8","nodeType":"VariableDeclaration","scope":1304,"src":"5471:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1288,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1296,"initialValue":{"arguments":[{"id":1294,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"5524:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1290,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"5498:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:8","memberName":"call","nodeType":"MemberAccess","src":"5498:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"5517:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:8"},{"expression":{"arguments":[{"id":1298,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"5573:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1299,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"5581:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1300,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"5590:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1301,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"5602:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1297,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"5546:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1274,"id":1303,"nodeType":"Return","src":"5539:76:8"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"4934:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:8","nodeType":"FunctionDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"target","nameLocation":"5224:6:8","nodeType":"VariableDeclaration","scope":1305,"src":"5216:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"data","nameLocation":"5253:4:8","nodeType":"VariableDeclaration","scope":1305,"src":"5240:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1265,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"value","nameLocation":"5275:5:8","nodeType":"VariableDeclaration","scope":1305,"src":"5267:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:8","nodeType":"VariableDeclaration","scope":1305,"src":"5290:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1269,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:8"},"returnParameters":{"id":1274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"5341:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1272,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:8"},"scope":1481,"src":"5176:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1321,"nodeType":"Block","src":"5899:97:8","statements":[{"expression":{"arguments":[{"id":1316,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"5935:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1317,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"5943:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1315,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1322,1351],"referencedDeclaration":1351,"src":"5916:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1314,"id":1320,"nodeType":"Return","src":"5909:80:8"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"5628:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1322,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:8","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"target","nameLocation":"5835:6:8","nodeType":"VariableDeclaration","scope":1322,"src":"5827:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1307,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"data","nameLocation":"5856:4:8","nodeType":"VariableDeclaration","scope":1322,"src":"5843:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1309,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:8"},"returnParameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1322,"src":"5885:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1312,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:8"},"scope":1481,"src":"5799:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1350,"nodeType":"Block","src":"6338:168:8","statements":[{"assignments":[1335,1337],"declarations":[{"constant":false,"id":1335,"mutability":"mutable","name":"success","nameLocation":"6354:7:8","nodeType":"VariableDeclaration","scope":1350,"src":"6349:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1334,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:8","nodeType":"VariableDeclaration","scope":1350,"src":"6363:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1336,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1342,"initialValue":{"arguments":[{"id":1340,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"6408:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1338,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6390:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:8"},{"expression":{"arguments":[{"id":1344,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6457:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1345,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"6465:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1346,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"6474:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1347,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6486:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1343,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"6430:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1333,"id":1349,"nodeType":"Return","src":"6423:76:8"}]},"documentation":{"id":1323,"nodeType":"StructuredDocumentation","src":"6002:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1351,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:8","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"target","nameLocation":"6225:6:8","nodeType":"VariableDeclaration","scope":1351,"src":"6217:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1324,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1327,"mutability":"mutable","name":"data","nameLocation":"6254:4:8","nodeType":"VariableDeclaration","scope":1351,"src":"6241:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1326,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1329,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:8","nodeType":"VariableDeclaration","scope":1351,"src":"6268:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1328,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:8"},"returnParameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1351,"src":"6324:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1331,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:8"},"scope":1481,"src":"6180:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1367,"nodeType":"Block","src":"6782:101:8","statements":[{"expression":{"arguments":[{"id":1362,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"6820:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"6828:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1361,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1368,1397],"referencedDeclaration":1397,"src":"6799:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1360,"id":1366,"nodeType":"Return","src":"6792:84:8"}]},"documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"6512:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1368,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:8","nodeType":"FunctionDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"target","nameLocation":"6723:6:8","nodeType":"VariableDeclaration","scope":1368,"src":"6715:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"data","nameLocation":"6744:4:8","nodeType":"VariableDeclaration","scope":1368,"src":"6731:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:8"},"returnParameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1368,"src":"6768:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1358,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:8"},"scope":1481,"src":"6685:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1396,"nodeType":"Block","src":"7224:170:8","statements":[{"assignments":[1381,1383],"declarations":[{"constant":false,"id":1381,"mutability":"mutable","name":"success","nameLocation":"7240:7:8","nodeType":"VariableDeclaration","scope":1396,"src":"7235:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1380,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:8","nodeType":"VariableDeclaration","scope":1396,"src":"7249:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1382,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1388,"initialValue":{"arguments":[{"id":1386,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"7296:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1384,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"7276:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:8"},{"expression":{"arguments":[{"id":1390,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"7345:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1391,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"7353:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1392,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"7362:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1393,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"7374:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1389,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"7318:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1379,"id":1395,"nodeType":"Return","src":"7311:76:8"}]},"documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"6889:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:8","nodeType":"FunctionDefinition","parameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"target","nameLocation":"7116:6:8","nodeType":"VariableDeclaration","scope":1397,"src":"7108:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"data","nameLocation":"7145:4:8","nodeType":"VariableDeclaration","scope":1397,"src":"7132:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1372,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1375,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:8","nodeType":"VariableDeclaration","scope":1397,"src":"7159:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1374,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:8"},"returnParameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"7210:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1377,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:8"},"scope":1481,"src":"7069:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1435,"nodeType":"Block","src":"7876:434:8","statements":[{"condition":{"id":1411,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"7890:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1433,"nodeType":"Block","src":"8246:58:8","statements":[{"expression":{"arguments":[{"id":1429,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"8268:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1430,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"8280:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1428,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"8260:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1432,"nodeType":"ExpressionStatement","src":"8260:33:8"}]},"id":1434,"nodeType":"IfStatement","src":"7886:418:8","trueBody":{"id":1427,"nodeType":"Block","src":"7899:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1412,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"7917:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:8","memberName":"length","nodeType":"MemberAccess","src":"7917:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1424,"nodeType":"IfStatement","src":"7913:286:8","trueBody":{"id":1423,"nodeType":"Block","src":"7941:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1418,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"8143:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1417,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"8132:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1422,"nodeType":"ExpressionStatement","src":"8124:60:8"}]}},{"expression":{"id":1425,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"8219:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1410,"id":1426,"nodeType":"Return","src":"8212:17:8"}]}}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"7400:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1436,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:8","nodeType":"FunctionDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"target","nameLocation":"7735:6:8","nodeType":"VariableDeclaration","scope":1436,"src":"7727:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"success","nameLocation":"7756:7:8","nodeType":"VariableDeclaration","scope":1436,"src":"7751:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1401,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:8","nodeType":"VariableDeclaration","scope":1436,"src":"7773:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1403,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:8","nodeType":"VariableDeclaration","scope":1436,"src":"7806:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1405,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:8"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1436,"src":"7862:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1408,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:8"},"scope":1481,"src":"7682:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1459,"nodeType":"Block","src":"8691:135:8","statements":[{"condition":{"id":1448,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"8705:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1457,"nodeType":"Block","src":"8762:58:8","statements":[{"expression":{"arguments":[{"id":1453,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"8784:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1454,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"8796:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1452,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"8776:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1456,"nodeType":"ExpressionStatement","src":"8776:33:8"}]},"id":1458,"nodeType":"IfStatement","src":"8701:119:8","trueBody":{"id":1451,"nodeType":"Block","src":"8714:42:8","statements":[{"expression":{"id":1449,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"8735:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1447,"id":1450,"nodeType":"Return","src":"8728:17:8"}]}}]},"documentation":{"id":1437,"nodeType":"StructuredDocumentation","src":"8316:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1460,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:8","nodeType":"FunctionDefinition","parameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"success","nameLocation":"8571:7:8","nodeType":"VariableDeclaration","scope":1460,"src":"8566:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1438,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:8","nodeType":"VariableDeclaration","scope":1460,"src":"8588:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1440,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:8","nodeType":"VariableDeclaration","scope":1460,"src":"8621:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1442,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:8"},"returnParameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1460,"src":"8677:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1445,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:8"},"scope":1481,"src":"8531:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1479,"nodeType":"Block","src":"8915:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1467,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"8991:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:8","memberName":"length","nodeType":"MemberAccess","src":"8991:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1477,"nodeType":"Block","src":"9321:45:8","statements":[{"expression":{"arguments":[{"id":1474,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"9342:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1473,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1476,"nodeType":"ExpressionStatement","src":"9335:20:8"}]},"id":1478,"nodeType":"IfStatement","src":"8987:379:8","trueBody":{"id":1472,"nodeType":"Block","src":"9014:301:8","statements":[{"AST":{"nativeSrc":"9172:133:8","nodeType":"YulBlock","src":"9172:133:8","statements":[{"nativeSrc":"9190:40:8","nodeType":"YulVariableDeclaration","src":"9190:40:8","value":{"arguments":[{"name":"returndata","nativeSrc":"9219:10:8","nodeType":"YulIdentifier","src":"9219:10:8"}],"functionName":{"name":"mload","nativeSrc":"9213:5:8","nodeType":"YulIdentifier","src":"9213:5:8"},"nativeSrc":"9213:17:8","nodeType":"YulFunctionCall","src":"9213:17:8"},"variables":[{"name":"returndata_size","nativeSrc":"9194:15:8","nodeType":"YulTypedName","src":"9194:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9258:2:8","nodeType":"YulLiteral","src":"9258:2:8","type":"","value":"32"},{"name":"returndata","nativeSrc":"9262:10:8","nodeType":"YulIdentifier","src":"9262:10:8"}],"functionName":{"name":"add","nativeSrc":"9254:3:8","nodeType":"YulIdentifier","src":"9254:3:8"},"nativeSrc":"9254:19:8","nodeType":"YulFunctionCall","src":"9254:19:8"},{"name":"returndata_size","nativeSrc":"9275:15:8","nodeType":"YulIdentifier","src":"9275:15:8"}],"functionName":{"name":"revert","nativeSrc":"9247:6:8","nodeType":"YulIdentifier","src":"9247:6:8"},"nativeSrc":"9247:44:8","nodeType":"YulFunctionCall","src":"9247:44:8"},"nativeSrc":"9247:44:8","nodeType":"YulExpressionStatement","src":"9247:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1462,"isOffset":false,"isSlot":false,"src":"9219:10:8","valueSize":1},{"declaration":1462,"isOffset":false,"isSlot":false,"src":"9262:10:8","valueSize":1}],"id":1471,"nodeType":"InlineAssembly","src":"9163:142:8"}]}}]},"id":1480,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:8","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:8","nodeType":"VariableDeclaration","scope":1480,"src":"8849:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1461,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:8","nodeType":"VariableDeclaration","scope":1480,"src":"8874:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1463,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:8"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"8915:0:8"},"scope":1481,"src":"8832:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1482,"src":"194:9180:8","usedErrors":[],"usedEvents":[]}],"src":"101:9274:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1481],"ContextUpgradeable":[1523],"Initializable":[1151]},"id":1524,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1483,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1484,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1524,"sourceUnit":1152,"src":"110:42:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1486,"name":"Initializable","nameLocations":["691:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1151,"src":"691:13:9"},"id":1487,"nodeType":"InheritanceSpecifier","src":"691:13:9"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1485,"nodeType":"StructuredDocumentation","src":"154:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1523,"linearizedBaseContracts":[1523,1151],"name":"ContextUpgradeable","nameLocation":"669:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1492,"nodeType":"Block","src":"763:7:9","statements":[]},"id":1493,"implemented":true,"kind":"function","modifiers":[{"id":1490,"kind":"modifierInvocation","modifierName":{"id":1489,"name":"onlyInitializing","nameLocations":["746:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"746:16:9"},"nodeType":"ModifierInvocation","src":"746:16:9"}],"name":"__Context_init","nameLocation":"720:14:9","nodeType":"FunctionDefinition","parameters":{"id":1488,"nodeType":"ParameterList","parameters":[],"src":"734:2:9"},"returnParameters":{"id":1491,"nodeType":"ParameterList","parameters":[],"src":"763:0:9"},"scope":1523,"src":"711:59:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1498,"nodeType":"Block","src":"838:7:9","statements":[]},"id":1499,"implemented":true,"kind":"function","modifiers":[{"id":1496,"kind":"modifierInvocation","modifierName":{"id":1495,"name":"onlyInitializing","nameLocations":["821:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"821:16:9"},"nodeType":"ModifierInvocation","src":"821:16:9"}],"name":"__Context_init_unchained","nameLocation":"785:24:9","nodeType":"FunctionDefinition","parameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"809:2:9"},"returnParameters":{"id":1497,"nodeType":"ParameterList","parameters":[],"src":"838:0:9"},"scope":1523,"src":"776:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1507,"nodeType":"Block","src":"912:34:9","statements":[{"expression":{"expression":{"id":1504,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:9","memberName":"sender","nodeType":"MemberAccess","src":"929:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1503,"id":1506,"nodeType":"Return","src":"922:17:9"}]},"id":1508,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:9","nodeType":"FunctionDefinition","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[],"src":"869:2:9"},"returnParameters":{"id":1503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1508,"src":"903:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:9"},"scope":1523,"src":"850:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1516,"nodeType":"Block","src":"1019:32:9","statements":[{"expression":{"expression":{"id":1513,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:9","memberName":"data","nodeType":"MemberAccess","src":"1036:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1512,"id":1515,"nodeType":"Return","src":"1029:15:9"}]},"id":1517,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:9","nodeType":"FunctionDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[],"src":"969:2:9"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1517,"src":"1003:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1510,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:9"},"scope":1523,"src":"952:99:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"1057:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1522,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:9","nodeType":"VariableDeclaration","scope":1523,"src":"1316:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1521,"length":{"hexValue":"3530","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:9","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1524,"src":"651:693:9","usedErrors":[],"usedEvents":[997]}],"src":"86:1259:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2674],"SignedMathUpgradeable":[2779],"StringsUpgradeable":[1752]},"id":1753,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1525,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1526,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1753,"sourceUnit":2675,"src":"126:36:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1753,"sourceUnit":2780,"src":"163:42:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"207:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":1752,"linearizedBaseContracts":[1752],"name":"StringsUpgradeable","nameLocation":"250:18:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1531,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:10","nodeType":"VariableDeclaration","scope":1752,"src":"275:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1529,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1534,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:10","nodeType":"VariableDeclaration","scope":1752,"src":"335:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1532,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1581,"nodeType":"Block","src":"551:636:10","statements":[{"id":1580,"nodeType":"UncheckedBlock","src":"561:620:10","statements":[{"assignments":[1543],"declarations":[{"constant":false,"id":1543,"mutability":"mutable","name":"length","nameLocation":"593:6:10","nodeType":"VariableDeclaration","scope":1580,"src":"585:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1550,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"624:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1544,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"602:15:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2674_$","typeString":"type(library MathUpgradeable)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:10","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2511,"src":"602:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:10"},{"assignments":[1552],"declarations":[{"constant":false,"id":1552,"mutability":"mutable","name":"buffer","nameLocation":"662:6:10","nodeType":"VariableDeclaration","scope":1580,"src":"648:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1551,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1557,"initialValue":{"arguments":[{"id":1555,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1553,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:10"},{"assignments":[1559],"declarations":[{"constant":false,"id":1559,"mutability":"mutable","name":"ptr","nameLocation":"711:3:10","nodeType":"VariableDeclaration","scope":1580,"src":"703:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1558,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1560,"nodeType":"VariableDeclarationStatement","src":"703:11:10"},{"AST":{"nativeSrc":"784:67:10","nodeType":"YulBlock","src":"784:67:10","statements":[{"nativeSrc":"802:35:10","nodeType":"YulAssignment","src":"802:35:10","value":{"arguments":[{"name":"buffer","nativeSrc":"813:6:10","nodeType":"YulIdentifier","src":"813:6:10"},{"arguments":[{"kind":"number","nativeSrc":"825:2:10","nodeType":"YulLiteral","src":"825:2:10","type":"","value":"32"},{"name":"length","nativeSrc":"829:6:10","nodeType":"YulIdentifier","src":"829:6:10"}],"functionName":{"name":"add","nativeSrc":"821:3:10","nodeType":"YulIdentifier","src":"821:3:10"},"nativeSrc":"821:15:10","nodeType":"YulFunctionCall","src":"821:15:10"}],"functionName":{"name":"add","nativeSrc":"809:3:10","nodeType":"YulIdentifier","src":"809:3:10"},"nativeSrc":"809:28:10","nodeType":"YulFunctionCall","src":"809:28:10"},"variableNames":[{"name":"ptr","nativeSrc":"802:3:10","nodeType":"YulIdentifier","src":"802:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1552,"isOffset":false,"isSlot":false,"src":"813:6:10","valueSize":1},{"declaration":1543,"isOffset":false,"isSlot":false,"src":"829:6:10","valueSize":1},{"declaration":1559,"isOffset":false,"isSlot":false,"src":"802:3:10","valueSize":1}],"id":1561,"nodeType":"InlineAssembly","src":"775:76:10"},{"body":{"id":1576,"nodeType":"Block","src":"877:267:10","statements":[{"expression":{"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:10","subExpression":{"id":1563,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"895:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1565,"nodeType":"ExpressionStatement","src":"895:5:10"},{"AST":{"nativeSrc":"978:84:10","nodeType":"YulBlock","src":"978:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1008:3:10","nodeType":"YulIdentifier","src":"1008:3:10"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1022:5:10","nodeType":"YulIdentifier","src":"1022:5:10"},{"kind":"number","nativeSrc":"1029:2:10","nodeType":"YulLiteral","src":"1029:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1018:3:10","nodeType":"YulIdentifier","src":"1018:3:10"},"nativeSrc":"1018:14:10","nodeType":"YulFunctionCall","src":"1018:14:10"},{"name":"_SYMBOLS","nativeSrc":"1034:8:10","nodeType":"YulIdentifier","src":"1034:8:10"}],"functionName":{"name":"byte","nativeSrc":"1013:4:10","nodeType":"YulIdentifier","src":"1013:4:10"},"nativeSrc":"1013:30:10","nodeType":"YulFunctionCall","src":"1013:30:10"}],"functionName":{"name":"mstore8","nativeSrc":"1000:7:10","nodeType":"YulIdentifier","src":"1000:7:10"},"nativeSrc":"1000:44:10","nodeType":"YulFunctionCall","src":"1000:44:10"},"nativeSrc":"1000:44:10","nodeType":"YulExpressionStatement","src":"1000:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1531,"isOffset":false,"isSlot":false,"src":"1034:8:10","valueSize":1},{"declaration":1559,"isOffset":false,"isSlot":false,"src":"1008:3:10","valueSize":1},{"declaration":1537,"isOffset":false,"isSlot":false,"src":"1022:5:10","valueSize":1}],"id":1566,"nodeType":"InlineAssembly","src":"969:93:10"},{"expression":{"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1079:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1570,"nodeType":"ExpressionStatement","src":"1079:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1112:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1575,"nodeType":"IfStatement","src":"1108:21:10","trueBody":{"id":1574,"nodeType":"Break","src":"1124:5:10"}}]},"condition":{"hexValue":"74727565","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1577,"nodeType":"WhileStatement","src":"864:280:10"},{"expression":{"id":1578,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1164:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1541,"id":1579,"nodeType":"Return","src":"1157:13:10"}]}]},"documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"385:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1582,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:10","nodeType":"FunctionDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"value","nameLocation":"506:5:10","nodeType":"VariableDeclaration","scope":1582,"src":"498:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:10"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1582,"src":"536:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1539,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:10"},"scope":1752,"src":"480:707:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1609,"nodeType":"Block","src":"1357:114:10","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"1398:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:10","trueExpression":{"hexValue":"2d","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"1455:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1601,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"1429:21:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2779_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:10","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2778,"src":"1429:25:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1600,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1582,1610],"referencedDeclaration":1582,"src":"1420:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1592,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1590,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:10","typeDescriptions":{}}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1589,"id":1608,"nodeType":"Return","src":"1367:97:10"}]},"documentation":{"id":1583,"nodeType":"StructuredDocumentation","src":"1193:89:10","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:10","nodeType":"FunctionDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"mutability":"mutable","name":"value","nameLocation":"1312:5:10","nodeType":"VariableDeclaration","scope":1610,"src":"1305:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1584,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:10"},"returnParameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"1342:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1587,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:10"},"scope":1752,"src":"1287:184:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"1650:111:10","statements":[{"id":1628,"nodeType":"UncheckedBlock","src":"1660:95:10","statements":[{"expression":{"arguments":[{"id":1619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1703:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1733:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1620,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"1710:15:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2674_$","typeString":"type(library MathUpgradeable)"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:10","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2634,"src":"1710:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1618,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1630,1706,1726],"referencedDeclaration":1706,"src":"1691:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1617,"id":1627,"nodeType":"Return","src":"1684:60:10"}]}]},"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"1477:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:10","nodeType":"FunctionDefinition","parameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"value","nameLocation":"1605:5:10","nodeType":"VariableDeclaration","scope":1630,"src":"1597:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:10"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1630,"src":"1635:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1615,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:10"},"scope":1752,"src":"1576:185:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1705,"nodeType":"Block","src":"1974:347:10","statements":[{"assignments":[1641],"declarations":[{"constant":false,"id":1641,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:10","nodeType":"VariableDeclaration","scope":1705,"src":"1984:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1640,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1650,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1645,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2020:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1642,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:10"},{"expression":{"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1651,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2041:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1653,"indexExpression":{"hexValue":"30","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1656,"nodeType":"ExpressionStatement","src":"2041:15:10"},{"expression":{"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1657,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2066:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1659,"indexExpression":{"hexValue":"31","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1662,"nodeType":"ExpressionStatement","src":"2066:15:10"},{"body":{"id":1691,"nodeType":"Block","src":"2136:83:10","statements":[{"expression":{"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1677,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2150:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1679,"indexExpression":{"id":1678,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"2157:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1680,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"2162:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1684,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"2171:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1686,"nodeType":"ExpressionStatement","src":"2150:33:10"},{"expression":{"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"2197:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1690,"nodeType":"ExpressionStatement","src":"2197:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1671,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"2124:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1692,"initializationExpression":{"assignments":[1664],"declarations":[{"constant":false,"id":1664,"mutability":"mutable","name":"i","nameLocation":"2104:1:10","nodeType":"VariableDeclaration","scope":1692,"src":"2096:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1663,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1670,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1666,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2112:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:10"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:10","subExpression":{"id":1674,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"2133:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1676,"nodeType":"ExpressionStatement","src":"2131:3:10"},"nodeType":"ForStatement","src":"2091:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"2236:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1699,"nodeType":"ExpressionStatement","src":"2228:55:10"},{"expression":{"arguments":[{"id":1702,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2307:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1700,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:10","typeDescriptions":{}}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1639,"id":1704,"nodeType":"Return","src":"2293:21:10"}]},"documentation":{"id":1631,"nodeType":"StructuredDocumentation","src":"1767:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1706,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:10","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1633,"mutability":"mutable","name":"value","nameLocation":"1913:5:10","nodeType":"VariableDeclaration","scope":1706,"src":"1905:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"length","nameLocation":"1928:6:10","nodeType":"VariableDeclaration","scope":1706,"src":"1920:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:10"},"returnParameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1706,"src":"1959:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1637,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:10"},"scope":1752,"src":"1884:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1725,"nodeType":"Block","src":"2546:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1719,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"2591:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1717,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:10","typeDescriptions":{}}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:10","typeDescriptions":{}}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1722,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"2599:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1714,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1630,1706,1726],"referencedDeclaration":1706,"src":"2563:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1713,"id":1724,"nodeType":"Return","src":"2556:59:10"}]},"documentation":{"id":1707,"nodeType":"StructuredDocumentation","src":"2327:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1726,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:10","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1709,"mutability":"mutable","name":"addr","nameLocation":"2502:4:10","nodeType":"VariableDeclaration","scope":1726,"src":"2494:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1708,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:10"},"returnParameters":{"id":1713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1726,"src":"2531:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1711,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:10"},"scope":1752,"src":"2473:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1750,"nodeType":"Block","src":"2777:66:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1739,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"2810:1:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1737,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:10","typeDescriptions":{}}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1736,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1745,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"2833:1:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1743,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:10","typeDescriptions":{}}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1742,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1735,"id":1749,"nodeType":"Return","src":"2787:49:10"}]},"documentation":{"id":1727,"nodeType":"StructuredDocumentation","src":"2628:66:10","text":" @dev Returns true if the two strings are equal."},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:10","nodeType":"FunctionDefinition","parameters":{"id":1732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"a","nameLocation":"2728:1:10","nodeType":"VariableDeclaration","scope":1751,"src":"2714:15:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1728,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1731,"mutability":"mutable","name":"b","nameLocation":"2745:1:10","nodeType":"VariableDeclaration","scope":1751,"src":"2731:15:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1730,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:10"},"returnParameters":{"id":1735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"2771:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1733,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:10"},"scope":1752,"src":"2699:144:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1753,"src":"242:2603:10","usedErrors":[],"usedEvents":[]}],"src":"101:2745:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1481],"ERC165Upgradeable":[1796],"IERC165Upgradeable":[1808],"Initializable":[1151]},"id":1797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1754,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1755,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1797,"sourceUnit":1809,"src":"124:34:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1797,"sourceUnit":1152,"src":"159:45:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1758,"name":"Initializable","nameLocations":["822:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1151,"src":"822:13:11"},"id":1759,"nodeType":"InheritanceSpecifier","src":"822:13:11"},{"baseName":{"id":1760,"name":"IERC165Upgradeable","nameLocations":["837:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":1808,"src":"837:18:11"},"id":1761,"nodeType":"InheritanceSpecifier","src":"837:18:11"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"206:576:11","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1796,"linearizedBaseContracts":[1796,1808,1151],"name":"ERC165Upgradeable","nameLocation":"801:17:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1766,"nodeType":"Block","src":"913:7:11","statements":[]},"id":1767,"implemented":true,"kind":"function","modifiers":[{"id":1764,"kind":"modifierInvocation","modifierName":{"id":1763,"name":"onlyInitializing","nameLocations":["896:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"896:16:11"},"nodeType":"ModifierInvocation","src":"896:16:11"}],"name":"__ERC165_init","nameLocation":"871:13:11","nodeType":"FunctionDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"884:2:11"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[],"src":"913:0:11"},"scope":1796,"src":"862:58:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1772,"nodeType":"Block","src":"987:7:11","statements":[]},"id":1773,"implemented":true,"kind":"function","modifiers":[{"id":1770,"kind":"modifierInvocation","modifierName":{"id":1769,"name":"onlyInitializing","nameLocations":["970:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1096,"src":"970:16:11"},"nodeType":"ModifierInvocation","src":"970:16:11"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:11","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"958:2:11"},"returnParameters":{"id":1771,"nodeType":"ParameterList","parameters":[],"src":"987:0:11"},"scope":1796,"src":"926:68:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1807],"body":{"id":1789,"nodeType":"Block","src":"1151:75:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1782,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"1168:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1784,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"1188:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1808_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1808_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1783,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1808","typeString":"type(contract IERC165Upgradeable)"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1781,"id":1788,"nodeType":"Return","src":"1161:58:11"}]},"documentation":{"id":1774,"nodeType":"StructuredDocumentation","src":"999:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1790,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:11","nodeType":"FunctionDefinition","overrides":{"id":1778,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:11"},"parameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:11","nodeType":"VariableDeclaration","scope":1790,"src":"1087:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1775,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:11"},"returnParameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1790,"src":"1145:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1779,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:11"},"scope":1796,"src":"1060:166:11","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"1232:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1795,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:11","nodeType":"VariableDeclaration","scope":1796,"src":"1491:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1794,"length":{"hexValue":"3530","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1797,"src":"783:736:11","usedErrors":[],"usedEvents":[997]}],"src":"99:1421:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1808]},"id":1809,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1798,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"125:279:12","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1808,"linearizedBaseContracts":[1808],"name":"IERC165Upgradeable","nameLocation":"415:18:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"440:340:12","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1807,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:12","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:12","nodeType":"VariableDeclaration","scope":1807,"src":"812:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1801,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:12"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"855:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1804,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:12"},"scope":1808,"src":"785:76:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1809,"src":"405:458:12","usedErrors":[],"usedEvents":[]}],"src":"100:764:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2674]},"id":2675,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1810,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1811,"nodeType":"StructuredDocumentation","src":"128:73:13","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2674,"linearizedBaseContracts":[2674],"name":"MathUpgradeable","nameLocation":"210:15:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1815,"members":[{"id":1812,"name":"Down","nameLocation":"256:4:13","nodeType":"EnumValue","src":"256:4:13"},{"id":1813,"name":"Up","nameLocation":"298:2:13","nodeType":"EnumValue","src":"298:2:13"},{"id":1814,"name":"Zero","nameLocation":"329:4:13","nodeType":"EnumValue","src":"329:4:13"}],"name":"Rounding","nameLocation":"237:8:13","nodeType":"EnumDefinition","src":"232:122:13"},{"body":{"id":1832,"nodeType":"Block","src":"491:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"508:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1826,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"512:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1829,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"520:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:13","trueExpression":{"id":1828,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"516:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1824,"id":1831,"nodeType":"Return","src":"501:20:13"}]},"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"360:59:13","text":" @dev Returns the largest of two numbers."},"id":1833,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:13","nodeType":"FunctionDefinition","parameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"a","nameLocation":"445:1:13","nodeType":"VariableDeclaration","scope":1833,"src":"437:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1817,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"b","nameLocation":"456:1:13","nodeType":"VariableDeclaration","scope":1833,"src":"448:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:13"},"returnParameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1833,"src":"482:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1822,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:13"},"scope":2674,"src":"424:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1850,"nodeType":"Block","src":"666:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1843,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"683:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1844,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"687:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"695:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:13","trueExpression":{"id":1846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"691:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1842,"id":1849,"nodeType":"Return","src":"676:20:13"}]},"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"534:60:13","text":" @dev Returns the smallest of two numbers."},"id":1851,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:13","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"a","nameLocation":"620:1:13","nodeType":"VariableDeclaration","scope":1851,"src":"612:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"b","nameLocation":"631:1:13","nodeType":"VariableDeclaration","scope":1851,"src":"623:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:13"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"657:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:13"},"scope":2674,"src":"599:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1873,"nodeType":"Block","src":"887:82:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"942:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1862,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"946:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"952:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"956:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1868,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1860,"id":1872,"nodeType":"Return","src":"934:28:13"}]},"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"709:102:13","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1874,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:13","nodeType":"FunctionDefinition","parameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"a","nameLocation":"841:1:13","nodeType":"VariableDeclaration","scope":1874,"src":"833:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1853,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"b","nameLocation":"852:1:13","nodeType":"VariableDeclaration","scope":1874,"src":"844:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:13"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1874,"src":"878:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1858,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:13"},"scope":2674,"src":"816:153:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1898,"nodeType":"Block","src":"1239:123:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1884,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1327:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1888,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1341:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1892,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"1350:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:13","trueExpression":{"hexValue":"30","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1883,"id":1897,"nodeType":"Return","src":"1320:35:13"}]},"documentation":{"id":1875,"nodeType":"StructuredDocumentation","src":"975:188:13","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:13","nodeType":"FunctionDefinition","parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"a","nameLocation":"1193:1:13","nodeType":"VariableDeclaration","scope":1899,"src":"1185:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1876,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"b","nameLocation":"1204:1:13","nodeType":"VariableDeclaration","scope":1899,"src":"1196:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:13"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1899,"src":"1230:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:13"},"scope":2674,"src":"1168:194:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2021,"nodeType":"Block","src":"1776:4115:13","statements":[{"id":2020,"nodeType":"UncheckedBlock","src":"1786:4099:13","statements":[{"assignments":[1912],"declarations":[{"constant":false,"id":1912,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:13","nodeType":"VariableDeclaration","scope":2020,"src":"2107:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1911,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1913,"nodeType":"VariableDeclarationStatement","src":"2107:13:13"},{"assignments":[1915],"declarations":[{"constant":false,"id":1915,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:13","nodeType":"VariableDeclaration","scope":2020,"src":"2179:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1916,"nodeType":"VariableDeclarationStatement","src":"2179:13:13"},{"AST":{"nativeSrc":"2259:157:13","nodeType":"YulBlock","src":"2259:157:13","statements":[{"nativeSrc":"2277:30:13","nodeType":"YulVariableDeclaration","src":"2277:30:13","value":{"arguments":[{"name":"x","nativeSrc":"2294:1:13","nodeType":"YulIdentifier","src":"2294:1:13"},{"name":"y","nativeSrc":"2297:1:13","nodeType":"YulIdentifier","src":"2297:1:13"},{"arguments":[{"kind":"number","nativeSrc":"2304:1:13","nodeType":"YulLiteral","src":"2304:1:13","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2300:3:13","nodeType":"YulIdentifier","src":"2300:3:13"},"nativeSrc":"2300:6:13","nodeType":"YulFunctionCall","src":"2300:6:13"}],"functionName":{"name":"mulmod","nativeSrc":"2287:6:13","nodeType":"YulIdentifier","src":"2287:6:13"},"nativeSrc":"2287:20:13","nodeType":"YulFunctionCall","src":"2287:20:13"},"variables":[{"name":"mm","nativeSrc":"2281:2:13","nodeType":"YulTypedName","src":"2281:2:13","type":""}]},{"nativeSrc":"2324:18:13","nodeType":"YulAssignment","src":"2324:18:13","value":{"arguments":[{"name":"x","nativeSrc":"2337:1:13","nodeType":"YulIdentifier","src":"2337:1:13"},{"name":"y","nativeSrc":"2340:1:13","nodeType":"YulIdentifier","src":"2340:1:13"}],"functionName":{"name":"mul","nativeSrc":"2333:3:13","nodeType":"YulIdentifier","src":"2333:3:13"},"nativeSrc":"2333:9:13","nodeType":"YulFunctionCall","src":"2333:9:13"},"variableNames":[{"name":"prod0","nativeSrc":"2324:5:13","nodeType":"YulIdentifier","src":"2324:5:13"}]},{"nativeSrc":"2359:43:13","nodeType":"YulAssignment","src":"2359:43:13","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2376:2:13","nodeType":"YulIdentifier","src":"2376:2:13"},{"name":"prod0","nativeSrc":"2380:5:13","nodeType":"YulIdentifier","src":"2380:5:13"}],"functionName":{"name":"sub","nativeSrc":"2372:3:13","nodeType":"YulIdentifier","src":"2372:3:13"},"nativeSrc":"2372:14:13","nodeType":"YulFunctionCall","src":"2372:14:13"},{"arguments":[{"name":"mm","nativeSrc":"2391:2:13","nodeType":"YulIdentifier","src":"2391:2:13"},{"name":"prod0","nativeSrc":"2395:5:13","nodeType":"YulIdentifier","src":"2395:5:13"}],"functionName":{"name":"lt","nativeSrc":"2388:2:13","nodeType":"YulIdentifier","src":"2388:2:13"},"nativeSrc":"2388:13:13","nodeType":"YulFunctionCall","src":"2388:13:13"}],"functionName":{"name":"sub","nativeSrc":"2368:3:13","nodeType":"YulIdentifier","src":"2368:3:13"},"nativeSrc":"2368:34:13","nodeType":"YulFunctionCall","src":"2368:34:13"},"variableNames":[{"name":"prod1","nativeSrc":"2359:5:13","nodeType":"YulIdentifier","src":"2359:5:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1912,"isOffset":false,"isSlot":false,"src":"2324:5:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"2380:5:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"2395:5:13","valueSize":1},{"declaration":1915,"isOffset":false,"isSlot":false,"src":"2359:5:13","valueSize":1},{"declaration":1902,"isOffset":false,"isSlot":false,"src":"2294:1:13","valueSize":1},{"declaration":1902,"isOffset":false,"isSlot":false,"src":"2337:1:13","valueSize":1},{"declaration":1904,"isOffset":false,"isSlot":false,"src":"2297:1:13","valueSize":1},{"declaration":1904,"isOffset":false,"isSlot":false,"src":"2340:1:13","valueSize":1}],"id":1917,"nodeType":"InlineAssembly","src":"2250:166:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1918,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2497:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1926,"nodeType":"IfStatement","src":"2493:368:13","trueBody":{"id":1925,"nodeType":"Block","src":"2509:352:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"2827:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1922,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"2835:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1910,"id":1924,"nodeType":"Return","src":"2820:26:13"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1928,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"2971:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1929,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2985:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1933,"nodeType":"ExpressionStatement","src":"2963:53:13"},{"assignments":[1935],"declarations":[{"constant":false,"id":1935,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:13","nodeType":"VariableDeclaration","scope":2020,"src":"3272:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1936,"nodeType":"VariableDeclarationStatement","src":"3272:17:13"},{"AST":{"nativeSrc":"3312:291:13","nodeType":"YulBlock","src":"3312:291:13","statements":[{"nativeSrc":"3381:38:13","nodeType":"YulAssignment","src":"3381:38:13","value":{"arguments":[{"name":"x","nativeSrc":"3401:1:13","nodeType":"YulIdentifier","src":"3401:1:13"},{"name":"y","nativeSrc":"3404:1:13","nodeType":"YulIdentifier","src":"3404:1:13"},{"name":"denominator","nativeSrc":"3407:11:13","nodeType":"YulIdentifier","src":"3407:11:13"}],"functionName":{"name":"mulmod","nativeSrc":"3394:6:13","nodeType":"YulIdentifier","src":"3394:6:13"},"nativeSrc":"3394:25:13","nodeType":"YulFunctionCall","src":"3394:25:13"},"variableNames":[{"name":"remainder","nativeSrc":"3381:9:13","nodeType":"YulIdentifier","src":"3381:9:13"}]},{"nativeSrc":"3501:41:13","nodeType":"YulAssignment","src":"3501:41:13","value":{"arguments":[{"name":"prod1","nativeSrc":"3514:5:13","nodeType":"YulIdentifier","src":"3514:5:13"},{"arguments":[{"name":"remainder","nativeSrc":"3524:9:13","nodeType":"YulIdentifier","src":"3524:9:13"},{"name":"prod0","nativeSrc":"3535:5:13","nodeType":"YulIdentifier","src":"3535:5:13"}],"functionName":{"name":"gt","nativeSrc":"3521:2:13","nodeType":"YulIdentifier","src":"3521:2:13"},"nativeSrc":"3521:20:13","nodeType":"YulFunctionCall","src":"3521:20:13"}],"functionName":{"name":"sub","nativeSrc":"3510:3:13","nodeType":"YulIdentifier","src":"3510:3:13"},"nativeSrc":"3510:32:13","nodeType":"YulFunctionCall","src":"3510:32:13"},"variableNames":[{"name":"prod1","nativeSrc":"3501:5:13","nodeType":"YulIdentifier","src":"3501:5:13"}]},{"nativeSrc":"3559:30:13","nodeType":"YulAssignment","src":"3559:30:13","value":{"arguments":[{"name":"prod0","nativeSrc":"3572:5:13","nodeType":"YulIdentifier","src":"3572:5:13"},{"name":"remainder","nativeSrc":"3579:9:13","nodeType":"YulIdentifier","src":"3579:9:13"}],"functionName":{"name":"sub","nativeSrc":"3568:3:13","nodeType":"YulIdentifier","src":"3568:3:13"},"nativeSrc":"3568:21:13","nodeType":"YulFunctionCall","src":"3568:21:13"},"variableNames":[{"name":"prod0","nativeSrc":"3559:5:13","nodeType":"YulIdentifier","src":"3559:5:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1906,"isOffset":false,"isSlot":false,"src":"3407:11:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"3535:5:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"3559:5:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"3572:5:13","valueSize":1},{"declaration":1915,"isOffset":false,"isSlot":false,"src":"3501:5:13","valueSize":1},{"declaration":1915,"isOffset":false,"isSlot":false,"src":"3514:5:13","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"3381:9:13","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"3524:9:13","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"3579:9:13","valueSize":1},{"declaration":1902,"isOffset":false,"isSlot":false,"src":"3401:1:13","valueSize":1},{"declaration":1904,"isOffset":false,"isSlot":false,"src":"3404:1:13","valueSize":1}],"id":1937,"nodeType":"InlineAssembly","src":"3303:300:13"},{"assignments":[1939],"declarations":[{"constant":false,"id":1939,"mutability":"mutable","name":"twos","nameLocation":"3918:4:13","nodeType":"VariableDeclaration","scope":2020,"src":"3910:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1947,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1940,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"3925:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:13","subExpression":{"id":1941,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"3941:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1945,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:13"},{"AST":{"nativeSrc":"3980:362:13","nodeType":"YulBlock","src":"3980:362:13","statements":[{"nativeSrc":"4045:37:13","nodeType":"YulAssignment","src":"4045:37:13","value":{"arguments":[{"name":"denominator","nativeSrc":"4064:11:13","nodeType":"YulIdentifier","src":"4064:11:13"},{"name":"twos","nativeSrc":"4077:4:13","nodeType":"YulIdentifier","src":"4077:4:13"}],"functionName":{"name":"div","nativeSrc":"4060:3:13","nodeType":"YulIdentifier","src":"4060:3:13"},"nativeSrc":"4060:22:13","nodeType":"YulFunctionCall","src":"4060:22:13"},"variableNames":[{"name":"denominator","nativeSrc":"4045:11:13","nodeType":"YulIdentifier","src":"4045:11:13"}]},{"nativeSrc":"4149:25:13","nodeType":"YulAssignment","src":"4149:25:13","value":{"arguments":[{"name":"prod0","nativeSrc":"4162:5:13","nodeType":"YulIdentifier","src":"4162:5:13"},{"name":"twos","nativeSrc":"4169:4:13","nodeType":"YulIdentifier","src":"4169:4:13"}],"functionName":{"name":"div","nativeSrc":"4158:3:13","nodeType":"YulIdentifier","src":"4158:3:13"},"nativeSrc":"4158:16:13","nodeType":"YulFunctionCall","src":"4158:16:13"},"variableNames":[{"name":"prod0","nativeSrc":"4149:5:13","nodeType":"YulIdentifier","src":"4149:5:13"}]},{"nativeSrc":"4289:39:13","nodeType":"YulAssignment","src":"4289:39:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4309:1:13","nodeType":"YulLiteral","src":"4309:1:13","type":"","value":"0"},{"name":"twos","nativeSrc":"4312:4:13","nodeType":"YulIdentifier","src":"4312:4:13"}],"functionName":{"name":"sub","nativeSrc":"4305:3:13","nodeType":"YulIdentifier","src":"4305:3:13"},"nativeSrc":"4305:12:13","nodeType":"YulFunctionCall","src":"4305:12:13"},{"name":"twos","nativeSrc":"4319:4:13","nodeType":"YulIdentifier","src":"4319:4:13"}],"functionName":{"name":"div","nativeSrc":"4301:3:13","nodeType":"YulIdentifier","src":"4301:3:13"},"nativeSrc":"4301:23:13","nodeType":"YulFunctionCall","src":"4301:23:13"},{"kind":"number","nativeSrc":"4326:1:13","nodeType":"YulLiteral","src":"4326:1:13","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4297:3:13","nodeType":"YulIdentifier","src":"4297:3:13"},"nativeSrc":"4297:31:13","nodeType":"YulFunctionCall","src":"4297:31:13"},"variableNames":[{"name":"twos","nativeSrc":"4289:4:13","nodeType":"YulIdentifier","src":"4289:4:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1906,"isOffset":false,"isSlot":false,"src":"4045:11:13","valueSize":1},{"declaration":1906,"isOffset":false,"isSlot":false,"src":"4064:11:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"4149:5:13","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"4162:5:13","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4077:4:13","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4169:4:13","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4289:4:13","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4312:4:13","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4319:4:13","valueSize":1}],"id":1948,"nodeType":"InlineAssembly","src":"3971:371:13"},{"expression":{"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1949,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"4408:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1950,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"4417:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1951,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"4425:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1954,"nodeType":"ExpressionStatement","src":"4408:21:13"},{"assignments":[1956],"declarations":[{"constant":false,"id":1956,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:13","nodeType":"VariableDeclaration","scope":2020,"src":"4747:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1955,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1963,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1958,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"4770:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:13"},{"expression":{"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1964,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5003:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1966,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5018:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1967,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5032:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1971,"nodeType":"ExpressionStatement","src":"5003:36:13"},{"expression":{"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1972,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5072:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5087:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1975,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5101:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1979,"nodeType":"ExpressionStatement","src":"5072:36:13"},{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1980,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5142:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1982,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5157:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1983,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5171:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"nodeType":"ExpressionStatement","src":"5142:36:13"},{"expression":{"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1988,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5212:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1990,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5227:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1991,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5241:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1995,"nodeType":"ExpressionStatement","src":"5212:36:13"},{"expression":{"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1996,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5282:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1998,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5297:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1999,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5311:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2003,"nodeType":"ExpressionStatement","src":"5282:36:13"},{"expression":{"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2004,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5353:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5368:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2007,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5382:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2011,"nodeType":"ExpressionStatement","src":"5353:36:13"},{"expression":{"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"5823:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2013,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"5832:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2014,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"5840:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2017,"nodeType":"ExpressionStatement","src":"5823:24:13"},{"expression":{"id":2018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"5868:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1910,"id":2019,"nodeType":"Return","src":"5861:13:13"}]}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"1368:305:13","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2022,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:13","nodeType":"FunctionDefinition","parameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"x","nameLocation":"1702:1:13","nodeType":"VariableDeclaration","scope":2022,"src":"1694:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1901,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1904,"mutability":"mutable","name":"y","nameLocation":"1713:1:13","nodeType":"VariableDeclaration","scope":2022,"src":"1705:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:13","nodeType":"VariableDeclaration","scope":2022,"src":"1716:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:13"},"returnParameters":{"id":1910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"result","nameLocation":"1768:6:13","nodeType":"VariableDeclaration","scope":2022,"src":"1760:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1908,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:13"},"scope":2674,"src":"1678:4213:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2065,"nodeType":"Block","src":"6133:189:13","statements":[{"assignments":[2038],"declarations":[{"constant":false,"id":2038,"mutability":"mutable","name":"result","nameLocation":"6151:6:13","nodeType":"VariableDeclaration","scope":2065,"src":"6143:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2044,"initialValue":{"arguments":[{"id":2040,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"6167:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2041,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"6170:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2042,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"6173:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2039,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2022,2066],"referencedDeclaration":2022,"src":"6160:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:13"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2045,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"6199:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2046,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"6211:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1815_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1813,"src":"6211:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2050,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"6233:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2051,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"6236:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2052,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"6239:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2049,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:13","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2062,"nodeType":"IfStatement","src":"6195:98:13","trueBody":{"id":2061,"nodeType":"Block","src":"6257:36:13","statements":[{"expression":{"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2057,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6271:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2060,"nodeType":"ExpressionStatement","src":"6271:11:13"}]}},{"expression":{"id":2063,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6309:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2036,"id":2064,"nodeType":"Return","src":"6302:13:13"}]},"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"5897:121:13","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2066,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:13","nodeType":"FunctionDefinition","parameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"mutability":"mutable","name":"x","nameLocation":"6047:1:13","nodeType":"VariableDeclaration","scope":2066,"src":"6039:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2027,"mutability":"mutable","name":"y","nameLocation":"6058:1:13","nodeType":"VariableDeclaration","scope":2066,"src":"6050:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:13","nodeType":"VariableDeclaration","scope":2066,"src":"6061:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:13","nodeType":"VariableDeclaration","scope":2066,"src":"6082:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2031,"nodeType":"UserDefinedTypeName","pathNode":{"id":2030,"name":"Rounding","nameLocations":["6082:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1815,"src":"6082:8:13"},"referencedDeclaration":1815,"src":"6082:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:13"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"6124:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2034,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:13"},"scope":2674,"src":"6023:299:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2177,"nodeType":"Block","src":"6598:1585:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2074,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"6612:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2080,"nodeType":"IfStatement","src":"6608:45:13","trueBody":{"id":2079,"nodeType":"Block","src":"6620:33:13","statements":[{"expression":{"hexValue":"30","id":2077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2073,"id":2078,"nodeType":"Return","src":"6634:8:13"}]}},{"assignments":[2082],"declarations":[{"constant":false,"id":2082,"mutability":"mutable","name":"result","nameLocation":"7340:6:13","nodeType":"VariableDeclaration","scope":2177,"src":"7332:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2091,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2085,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"7360:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2084,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2346,2382],"referencedDeclaration":2346,"src":"7355:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2089,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:13"},{"id":2176,"nodeType":"UncheckedBlock","src":"7769:408:13","statements":[{"expression":{"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2092,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7793:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7803:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2094,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"7812:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7816:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2098,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2102,"nodeType":"ExpressionStatement","src":"7793:35:13"},{"expression":{"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2103,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7842:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2104,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7852:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2105,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"7861:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7865:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2109,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2113,"nodeType":"ExpressionStatement","src":"7842:35:13"},{"expression":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7891:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2115,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7901:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2116,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"7910:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2117,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7914:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2120,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2124,"nodeType":"ExpressionStatement","src":"7891:35:13"},{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7940:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7950:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"7959:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7963:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"7940:35:13"},{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7989:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7999:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2138,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"8008:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8012:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2146,"nodeType":"ExpressionStatement","src":"7989:35:13"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8038:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8048:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"8057:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8061:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"8038:35:13"},{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8087:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8097:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"8106:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8110:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2164,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"8087:35:13"},{"expression":{"arguments":[{"id":2170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8147:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"8155:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8159:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2169,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"8143:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2073,"id":2175,"nodeType":"Return","src":"8136:30:13"}]}]},"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"6328:208:13","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2178,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:13","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"a","nameLocation":"6563:1:13","nodeType":"VariableDeclaration","scope":2178,"src":"6555:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2068,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:13"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2178,"src":"6589:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2071,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:13"},"scope":2674,"src":"6541:1642:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2213,"nodeType":"Block","src":"8359:161:13","statements":[{"id":2212,"nodeType":"UncheckedBlock","src":"8369:145:13","statements":[{"assignments":[2190],"declarations":[{"constant":false,"id":2190,"mutability":"mutable","name":"result","nameLocation":"8401:6:13","nodeType":"VariableDeclaration","scope":2212,"src":"8393:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2189,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2194,"initialValue":{"arguments":[{"id":2192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"8415:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2191,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2178,2214],"referencedDeclaration":2178,"src":"8410:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"8438:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2196,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2184,"src":"8448:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2197,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"8460:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1815_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1813,"src":"8460:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"8475:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"8484:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"8493:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:13","trueExpression":{"hexValue":"31","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2188,"id":2211,"nodeType":"Return","src":"8431:72:13"}]}]},"documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"8189:89:13","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2214,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:13","nodeType":"FunctionDefinition","parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"a","nameLocation":"8305:1:13","nodeType":"VariableDeclaration","scope":2214,"src":"8297:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2184,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:13","nodeType":"VariableDeclaration","scope":2214,"src":"8308:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2183,"nodeType":"UserDefinedTypeName","pathNode":{"id":2182,"name":"Rounding","nameLocations":["8308:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1815,"src":"8308:8:13"},"referencedDeclaration":1815,"src":"8308:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:13"},"returnParameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2214,"src":"8350:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2186,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:13"},"scope":2674,"src":"8283:237:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2345,"nodeType":"Block","src":"8705:922:13","statements":[{"assignments":[2223],"declarations":[{"constant":false,"id":2223,"mutability":"mutable","name":"result","nameLocation":"8723:6:13","nodeType":"VariableDeclaration","scope":2345,"src":"8715:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2222,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2225,"initialValue":{"hexValue":"30","id":2224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:13"},{"id":2342,"nodeType":"UncheckedBlock","src":"8743:855:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8771:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2240,"nodeType":"IfStatement","src":"8767:99:13","trueBody":{"id":2239,"nodeType":"Block","src":"8789:77:13","statements":[{"expression":{"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8807:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ExpressionStatement","src":"8807:13:13"},{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8838:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2238,"nodeType":"ExpressionStatement","src":"8838:13:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8883:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2255,"nodeType":"IfStatement","src":"8879:96:13","trueBody":{"id":2254,"nodeType":"Block","src":"8900:75:13","statements":[{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8918:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2249,"nodeType":"ExpressionStatement","src":"8918:12:13"},{"expression":{"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8948:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2253,"nodeType":"ExpressionStatement","src":"8948:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8992:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"nodeType":"IfStatement","src":"8988:96:13","trueBody":{"id":2269,"nodeType":"Block","src":"9009:75:13","statements":[{"expression":{"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9027:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2264,"nodeType":"ExpressionStatement","src":"9027:12:13"},{"expression":{"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2265,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9057:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2268,"nodeType":"ExpressionStatement","src":"9057:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9101:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2285,"nodeType":"IfStatement","src":"9097:96:13","trueBody":{"id":2284,"nodeType":"Block","src":"9118:75:13","statements":[{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9136:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"9136:12:13"},{"expression":{"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2280,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9166:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2283,"nodeType":"ExpressionStatement","src":"9166:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9210:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2300,"nodeType":"IfStatement","src":"9206:93:13","trueBody":{"id":2299,"nodeType":"Block","src":"9226:73:13","statements":[{"expression":{"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9244:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2294,"nodeType":"ExpressionStatement","src":"9244:11:13"},{"expression":{"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9273:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2298,"nodeType":"ExpressionStatement","src":"9273:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9316:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2315,"nodeType":"IfStatement","src":"9312:93:13","trueBody":{"id":2314,"nodeType":"Block","src":"9332:73:13","statements":[{"expression":{"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9350:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2309,"nodeType":"ExpressionStatement","src":"9350:11:13"},{"expression":{"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9379:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2313,"nodeType":"ExpressionStatement","src":"9379:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9422:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2330,"nodeType":"IfStatement","src":"9418:93:13","trueBody":{"id":2329,"nodeType":"Block","src":"9438:73:13","statements":[{"expression":{"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9456:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2324,"nodeType":"ExpressionStatement","src":"9456:11:13"},{"expression":{"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9485:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2328,"nodeType":"ExpressionStatement","src":"9485:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"9528:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2341,"nodeType":"IfStatement","src":"9524:64:13","trueBody":{"id":2340,"nodeType":"Block","src":"9544:44:13","statements":[{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2336,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9562:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ExpressionStatement","src":"9562:11:13"}]}}]},{"expression":{"id":2343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"9614:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2221,"id":2344,"nodeType":"Return","src":"9607:13:13"}]},"documentation":{"id":2215,"nodeType":"StructuredDocumentation","src":"8526:113:13","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2346,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:13","nodeType":"FunctionDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"value","nameLocation":"8666:5:13","nodeType":"VariableDeclaration","scope":2346,"src":"8658:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2216,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:13"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2346,"src":"8696:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:13"},"scope":2674,"src":"8644:983:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2381,"nodeType":"Block","src":"9860:165:13","statements":[{"id":2380,"nodeType":"UncheckedBlock","src":"9870:149:13","statements":[{"assignments":[2358],"declarations":[{"constant":false,"id":2358,"mutability":"mutable","name":"result","nameLocation":"9902:6:13","nodeType":"VariableDeclaration","scope":2380,"src":"9894:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2362,"initialValue":{"arguments":[{"id":2360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"9916:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2359,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2346,2382],"referencedDeclaration":2346,"src":"9911:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"9943:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2364,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"9953:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2365,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"9965:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1815_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1813,"src":"9965:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"9985:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"9994:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:13","trueExpression":{"hexValue":"31","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2377,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2356,"id":2379,"nodeType":"Return","src":"9936:72:13"}]}]},"documentation":{"id":2347,"nodeType":"StructuredDocumentation","src":"9633:142:13","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2382,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:13","nodeType":"FunctionDefinition","parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2349,"mutability":"mutable","name":"value","nameLocation":"9802:5:13","nodeType":"VariableDeclaration","scope":2382,"src":"9794:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2348,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:13","nodeType":"VariableDeclaration","scope":2382,"src":"9809:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2351,"nodeType":"UserDefinedTypeName","pathNode":{"id":2350,"name":"Rounding","nameLocations":["9809:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1815,"src":"9809:8:13"},"referencedDeclaration":1815,"src":"9809:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:13"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2382,"src":"9851:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2354,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:13"},"scope":2674,"src":"9780:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2510,"nodeType":"Block","src":"10212:854:13","statements":[{"assignments":[2391],"declarations":[{"constant":false,"id":2391,"mutability":"mutable","name":"result","nameLocation":"10230:6:13","nodeType":"VariableDeclaration","scope":2510,"src":"10222:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2393,"initialValue":{"hexValue":"30","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:13"},{"id":2507,"nodeType":"UncheckedBlock","src":"10250:787:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10278:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2410,"nodeType":"IfStatement","src":"10274:103:13","trueBody":{"id":2409,"nodeType":"Block","src":"10297:80:13","statements":[{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10315:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"10315:17:13"},{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10350:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"10350:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10394:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"10390:103:13","trueBody":{"id":2426,"nodeType":"Block","src":"10413:80:13","statements":[{"expression":{"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10431:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2421,"nodeType":"ExpressionStatement","src":"10431:17:13"},{"expression":{"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2422,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10466:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2425,"nodeType":"ExpressionStatement","src":"10466:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10510:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2444,"nodeType":"IfStatement","src":"10506:103:13","trueBody":{"id":2443,"nodeType":"Block","src":"10529:80:13","statements":[{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10547:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"10547:17:13"},{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10582:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"10582:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10626:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2461,"nodeType":"IfStatement","src":"10622:100:13","trueBody":{"id":2460,"nodeType":"Block","src":"10644:78:13","statements":[{"expression":{"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10662:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2455,"nodeType":"ExpressionStatement","src":"10662:16:13"},{"expression":{"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10696:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2459,"nodeType":"ExpressionStatement","src":"10696:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10739:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2478,"nodeType":"IfStatement","src":"10735:100:13","trueBody":{"id":2477,"nodeType":"Block","src":"10757:78:13","statements":[{"expression":{"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10775:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2472,"nodeType":"ExpressionStatement","src":"10775:16:13"},{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10809:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"10809:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10852:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2495,"nodeType":"IfStatement","src":"10848:100:13","trueBody":{"id":2494,"nodeType":"Block","src":"10870:78:13","statements":[{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10888:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"10888:16:13"},{"expression":{"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10922:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2493,"nodeType":"ExpressionStatement","src":"10922:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"10965:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2506,"nodeType":"IfStatement","src":"10961:66:13","trueBody":{"id":2505,"nodeType":"Block","src":"10983:44:13","statements":[{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"11001:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2504,"nodeType":"ExpressionStatement","src":"11001:11:13"}]}}]},{"expression":{"id":2508,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"11053:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2389,"id":2509,"nodeType":"Return","src":"11046:13:13"}]},"documentation":{"id":2383,"nodeType":"StructuredDocumentation","src":"10031:114:13","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2511,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:13","nodeType":"FunctionDefinition","parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"value","nameLocation":"10173:5:13","nodeType":"VariableDeclaration","scope":2511,"src":"10165:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:13"},"returnParameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2511,"src":"10203:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:13"},"scope":2674,"src":"10150:916:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2546,"nodeType":"Block","src":"11301:167:13","statements":[{"id":2545,"nodeType":"UncheckedBlock","src":"11311:151:13","statements":[{"assignments":[2523],"declarations":[{"constant":false,"id":2523,"mutability":"mutable","name":"result","nameLocation":"11343:6:13","nodeType":"VariableDeclaration","scope":2545,"src":"11335:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2527,"initialValue":{"arguments":[{"id":2525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11358:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2524,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2511,2547],"referencedDeclaration":2511,"src":"11352:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2528,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"11385:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"11395:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2530,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"11407:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1815_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1813,"src":"11407:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"11428:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11437:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:13","trueExpression":{"hexValue":"31","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2521,"id":2544,"nodeType":"Return","src":"11378:73:13"}]}]},"documentation":{"id":2512,"nodeType":"StructuredDocumentation","src":"11072:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2547,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:13","nodeType":"FunctionDefinition","parameters":{"id":2518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"value","nameLocation":"11243:5:13","nodeType":"VariableDeclaration","scope":2547,"src":"11235:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:13","nodeType":"VariableDeclaration","scope":2547,"src":"11250:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2516,"nodeType":"UserDefinedTypeName","pathNode":{"id":2515,"name":"Rounding","nameLocations":["11250:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1815,"src":"11250:8:13"},"referencedDeclaration":1815,"src":"11250:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:13"},"returnParameters":{"id":2521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2547,"src":"11292:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2519,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:13"},"scope":2674,"src":"11220:248:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"11782:600:13","statements":[{"assignments":[2556],"declarations":[{"constant":false,"id":2556,"mutability":"mutable","name":"result","nameLocation":"11800:6:13","nodeType":"VariableDeclaration","scope":2633,"src":"11792:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2558,"initialValue":{"hexValue":"30","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:13"},{"id":2630,"nodeType":"UncheckedBlock","src":"11820:533:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11848:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2573,"nodeType":"IfStatement","src":"11844:98:13","trueBody":{"id":2572,"nodeType":"Block","src":"11866:76:13","statements":[{"expression":{"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11884:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2567,"nodeType":"ExpressionStatement","src":"11884:13:13"},{"expression":{"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"11915:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2571,"nodeType":"ExpressionStatement","src":"11915:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11959:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2588,"nodeType":"IfStatement","src":"11955:95:13","trueBody":{"id":2587,"nodeType":"Block","src":"11976:74:13","statements":[{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11994:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2582,"nodeType":"ExpressionStatement","src":"11994:12:13"},{"expression":{"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"12024:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2586,"nodeType":"ExpressionStatement","src":"12024:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"12067:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2603,"nodeType":"IfStatement","src":"12063:95:13","trueBody":{"id":2602,"nodeType":"Block","src":"12084:74:13","statements":[{"expression":{"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"12102:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2597,"nodeType":"ExpressionStatement","src":"12102:12:13"},{"expression":{"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"12132:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2601,"nodeType":"ExpressionStatement","src":"12132:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"12175:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2618,"nodeType":"IfStatement","src":"12171:95:13","trueBody":{"id":2617,"nodeType":"Block","src":"12192:74:13","statements":[{"expression":{"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"12210:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2612,"nodeType":"ExpressionStatement","src":"12210:12:13"},{"expression":{"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"12240:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2616,"nodeType":"ExpressionStatement","src":"12240:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"12283:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2629,"nodeType":"IfStatement","src":"12279:64:13","trueBody":{"id":2628,"nodeType":"Block","src":"12299:44:13","statements":[{"expression":{"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"12317:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2627,"nodeType":"ExpressionStatement","src":"12317:11:13"}]}}]},{"expression":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"12369:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2554,"id":2632,"nodeType":"Return","src":"12362:13:13"}]},"documentation":{"id":2548,"nodeType":"StructuredDocumentation","src":"11474:240:13","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:13","nodeType":"FunctionDefinition","parameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"value","nameLocation":"11743:5:13","nodeType":"VariableDeclaration","scope":2634,"src":"11735:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:13"},"returnParameters":{"id":2554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"11773:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2552,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:13"},"scope":2674,"src":"11719:663:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2672,"nodeType":"Block","src":"12619:174:13","statements":[{"id":2671,"nodeType":"UncheckedBlock","src":"12629:158:13","statements":[{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"result","nameLocation":"12661:6:13","nodeType":"VariableDeclaration","scope":2671,"src":"12653:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2650,"initialValue":{"arguments":[{"id":2648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12677:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2647,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2634,2673],"referencedDeclaration":2634,"src":"12670:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2651,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"12704:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2652,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"12714:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2653,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"12726:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1815_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1813,"src":"12726:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"12747:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2660,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12762:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:13","trueExpression":{"hexValue":"31","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2668,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2644,"id":2670,"nodeType":"Return","src":"12697:79:13"}]}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"12388:144:13","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2673,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:13","nodeType":"FunctionDefinition","parameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"value","nameLocation":"12561:5:13","nodeType":"VariableDeclaration","scope":2673,"src":"12553:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2640,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:13","nodeType":"VariableDeclaration","scope":2673,"src":"12568:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2639,"nodeType":"UserDefinedTypeName","pathNode":{"id":2638,"name":"Rounding","nameLocations":["12568:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1815,"src":"12568:8:13"},"referencedDeclaration":1815,"src":"12568:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1815","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:13"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2673,"src":"12610:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:13"},"scope":2674,"src":"12537:256:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2675,"src":"202:12593:13","usedErrors":[],"usedEvents":[]}],"src":"103:12693:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2779]},"id":2780,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2676,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2677,"nodeType":"StructuredDocumentation","src":"134:80:14","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2779,"linearizedBaseContracts":[2779],"name":"SignedMathUpgradeable","nameLocation":"223:21:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2694,"nodeType":"Block","src":"386:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2680,"src":"403:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2688,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"407:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2691,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"415:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:14","trueExpression":{"id":2690,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2680,"src":"411:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2686,"id":2693,"nodeType":"Return","src":"396:20:14"}]},"documentation":{"id":2678,"nodeType":"StructuredDocumentation","src":"251:66:14","text":" @dev Returns the largest of two signed numbers."},"id":2695,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:14","nodeType":"FunctionDefinition","parameters":{"id":2683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"a","nameLocation":"342:1:14","nodeType":"VariableDeclaration","scope":2695,"src":"335:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2679,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2682,"mutability":"mutable","name":"b","nameLocation":"352:1:14","nodeType":"VariableDeclaration","scope":2695,"src":"345:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2681,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:14"},"returnParameters":{"id":2686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2695,"src":"378:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2684,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:14"},"scope":2779,"src":"322:101:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2712,"nodeType":"Block","src":"565:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"582:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2706,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"586:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2709,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"594:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:14","trueExpression":{"id":2708,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"590:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2704,"id":2711,"nodeType":"Return","src":"575:20:14"}]},"documentation":{"id":2696,"nodeType":"StructuredDocumentation","src":"429:67:14","text":" @dev Returns the smallest of two signed numbers."},"id":2713,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:14","nodeType":"FunctionDefinition","parameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"a","nameLocation":"521:1:14","nodeType":"VariableDeclaration","scope":2713,"src":"514:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2697,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2700,"mutability":"mutable","name":"b","nameLocation":"531:1:14","nodeType":"VariableDeclaration","scope":2713,"src":"524:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2699,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:14"},"returnParameters":{"id":2704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2713,"src":"557:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2702,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:14"},"scope":2779,"src":"501:101:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2756,"nodeType":"Block","src":"807:162:14","statements":[{"assignments":[2724],"declarations":[{"constant":false,"id":2724,"mutability":"mutable","name":"x","nameLocation":"876:1:14","nodeType":"VariableDeclaration","scope":2756,"src":"869:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2723,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2737,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2725,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"881:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2726,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"885:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2729,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"892:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2730,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"896:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2732,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2735,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:14"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"921:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2743,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"941:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:14","typeDescriptions":{}}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2739,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:14","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"955:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2749,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"959:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2751,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2753,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2722,"id":2755,"nodeType":"Return","src":"914:48:14"}]},"documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"608:126:14","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2757,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:14","nodeType":"FunctionDefinition","parameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2716,"mutability":"mutable","name":"a","nameLocation":"763:1:14","nodeType":"VariableDeclaration","scope":2757,"src":"756:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2715,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2718,"mutability":"mutable","name":"b","nameLocation":"773:1:14","nodeType":"VariableDeclaration","scope":2757,"src":"766:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2717,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:14"},"returnParameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2757,"src":"799:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2720,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:14"},"scope":2779,"src":"739:230:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2777,"nodeType":"Block","src":"1113:158:14","statements":[{"id":2776,"nodeType":"UncheckedBlock","src":"1123:142:14","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1238:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:14","subExpression":{"id":2771,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1252:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:14","trueExpression":{"id":2770,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1247:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:14","typeDescriptions":{}}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2764,"id":2775,"nodeType":"Return","src":"1223:31:14"}]}]},"documentation":{"id":2758,"nodeType":"StructuredDocumentation","src":"975:78:14","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2778,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:14","nodeType":"FunctionDefinition","parameters":{"id":2761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2760,"mutability":"mutable","name":"n","nameLocation":"1078:1:14","nodeType":"VariableDeclaration","scope":2778,"src":"1071:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2759,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:14"},"returnParameters":{"id":2764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2778,"src":"1104:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:14"},"scope":2779,"src":"1058:213:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2780,"src":"215:1058:14","usedErrors":[],"usedEvents":[]}],"src":"109:1165:14"},"id":14},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2857]},"id":2858,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2781,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"131:70:15","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2857,"linearizedBaseContracts":[2857],"name":"IERC20","nameLocation":"212:6:15","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"225:158:15","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2791,"name":"Transfer","nameLocation":"394:8:15","nodeType":"EventDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:15","nodeType":"VariableDeclaration","scope":2791,"src":"403:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2784,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2787,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:15","nodeType":"VariableDeclaration","scope":2791,"src":"425:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2786,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2789,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:15","nodeType":"VariableDeclaration","scope":2791,"src":"445:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:15"},"src":"388:72:15"},{"anonymous":false,"documentation":{"id":2792,"nodeType":"StructuredDocumentation","src":"466:148:15","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2800,"name":"Approval","nameLocation":"625:8:15","nodeType":"EventDefinition","parameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:15","nodeType":"VariableDeclaration","scope":2800,"src":"634:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2793,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2796,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:15","nodeType":"VariableDeclaration","scope":2800,"src":"657:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2798,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:15","nodeType":"VariableDeclaration","scope":2800,"src":"682:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:15"},"src":"619:78:15"},{"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"703:66:15","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2806,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:15","nodeType":"FunctionDefinition","parameters":{"id":2802,"nodeType":"ParameterList","parameters":[],"src":"794:2:15"},"returnParameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2806,"src":"820:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:15"},"scope":2857,"src":"774:55:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2807,"nodeType":"StructuredDocumentation","src":"835:72:15","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2814,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:15","nodeType":"FunctionDefinition","parameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"account","nameLocation":"939:7:15","nodeType":"VariableDeclaration","scope":2814,"src":"931:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2808,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:15"},"returnParameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2814,"src":"971:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:15"},"scope":2857,"src":"912:68:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"986:202:15","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2824,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:15","nodeType":"FunctionDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2817,"mutability":"mutable","name":"to","nameLocation":"1219:2:15","nodeType":"VariableDeclaration","scope":2824,"src":"1211:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2816,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2819,"mutability":"mutable","name":"amount","nameLocation":"1231:6:15","nodeType":"VariableDeclaration","scope":2824,"src":"1223:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:15"},"returnParameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2824,"src":"1257:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2821,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:15"},"scope":2857,"src":"1193:70:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"1269:264:15","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2834,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:15","nodeType":"FunctionDefinition","parameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"owner","nameLocation":"1565:5:15","nodeType":"VariableDeclaration","scope":2834,"src":"1557:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2829,"mutability":"mutable","name":"spender","nameLocation":"1580:7:15","nodeType":"VariableDeclaration","scope":2834,"src":"1572:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2828,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:15"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2834,"src":"1612:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:15"},"scope":2857,"src":"1538:83:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2835,"nodeType":"StructuredDocumentation","src":"1627:642:15","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2844,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:15","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"spender","nameLocation":"2299:7:15","nodeType":"VariableDeclaration","scope":2844,"src":"2291:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2836,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2839,"mutability":"mutable","name":"amount","nameLocation":"2316:6:15","nodeType":"VariableDeclaration","scope":2844,"src":"2308:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:15"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2844,"src":"2342:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2841,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:15"},"scope":2857,"src":"2274:74:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"2354:287:15","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2856,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:15","nodeType":"FunctionDefinition","parameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"from","nameLocation":"2676:4:15","nodeType":"VariableDeclaration","scope":2856,"src":"2668:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2846,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"to","nameLocation":"2690:2:15","nodeType":"VariableDeclaration","scope":2856,"src":"2682:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2848,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2851,"mutability":"mutable","name":"amount","nameLocation":"2702:6:15","nodeType":"VariableDeclaration","scope":2856,"src":"2694:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2850,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:15"},"returnParameters":{"id":2855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2856,"src":"2728:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2853,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:15"},"scope":2857,"src":"2646:88:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2858,"src":"202:2534:15","usedErrors":[],"usedEvents":[2791,2800]}],"src":"106:2631:15"},"id":15},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[2893]},"id":2894,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2859,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":2860,"nodeType":"StructuredDocumentation","src":"148:480:16","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":2893,"linearizedBaseContracts":[2893],"name":"IERC20Permit","nameLocation":"639:12:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2861,"nodeType":"StructuredDocumentation","src":"658:792:16","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":2878,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:16","nodeType":"FunctionDefinition","parameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"owner","nameLocation":"1488:5:16","nodeType":"VariableDeclaration","scope":2878,"src":"1480:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2862,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"spender","nameLocation":"1511:7:16","nodeType":"VariableDeclaration","scope":2878,"src":"1503:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2867,"mutability":"mutable","name":"value","nameLocation":"1536:5:16","nodeType":"VariableDeclaration","scope":2878,"src":"1528:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:16","nodeType":"VariableDeclaration","scope":2878,"src":"1551:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"v","nameLocation":"1583:1:16","nodeType":"VariableDeclaration","scope":2878,"src":"1577:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2870,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"r","nameLocation":"1602:1:16","nodeType":"VariableDeclaration","scope":2878,"src":"1594:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"s","nameLocation":"1621:1:16","nodeType":"VariableDeclaration","scope":2878,"src":"1613:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:16"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[],"src":"1637:0:16"},"scope":2893,"src":"1455:183:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2879,"nodeType":"StructuredDocumentation","src":"1644:294:16","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2886,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:16","nodeType":"FunctionDefinition","parameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"owner","nameLocation":"1967:5:16","nodeType":"VariableDeclaration","scope":2886,"src":"1959:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2880,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:16"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1997:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:16"},"scope":2893,"src":"1943:63:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"2012:128:16","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2892,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:16","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[],"src":"2223:2:16"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2892,"src":"2249:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:16"},"scope":2893,"src":"2198:60:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2894,"src":"629:1631:16","usedErrors":[],"usedEvents":[]}],"src":"123:2138:16"},"id":16},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[3715],"IERC20":[2857],"IERC20Permit":[2893],"SafeERC20":[3269]},"id":3270,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2895,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:17"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3270,"sourceUnit":2858,"src":"140:23:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":2897,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3270,"sourceUnit":2894,"src":"164:40:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":2898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3270,"sourceUnit":3716,"src":"205:36:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2899,"nodeType":"StructuredDocumentation","src":"243:457:17","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3269,"linearizedBaseContracts":[3269],"name":"SafeERC20","nameLocation":"709:9:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2902,"libraryName":{"id":2900,"name":"Address","nameLocations":["731:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3715,"src":"731:7:17"},"nodeType":"UsingForDirective","src":"725:26:17","typeName":{"id":2901,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2925,"nodeType":"Block","src":"1013:103:17","statements":[{"expression":{"arguments":[{"id":2914,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"1043:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2917,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"1073:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:17","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2824,"src":"1073:14:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:17","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"1098:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"1102:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2915,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2913,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"1023:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2924,"nodeType":"ExpressionStatement","src":"1023:86:17"}]},"documentation":{"id":2903,"nodeType":"StructuredDocumentation","src":"757:179:17","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2926,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:17","nodeType":"FunctionDefinition","parameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"token","nameLocation":"970:5:17","nodeType":"VariableDeclaration","scope":2926,"src":"963:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":2905,"nodeType":"UserDefinedTypeName","pathNode":{"id":2904,"name":"IERC20","nameLocations":["963:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"963:6:17"},"referencedDeclaration":2857,"src":"963:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2908,"mutability":"mutable","name":"to","nameLocation":"985:2:17","nodeType":"VariableDeclaration","scope":2926,"src":"977:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2907,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2910,"mutability":"mutable","name":"value","nameLocation":"997:5:17","nodeType":"VariableDeclaration","scope":2926,"src":"989:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:17"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[],"src":"1013:0:17"},"scope":3269,"src":"941:175:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2952,"nodeType":"Block","src":"1445:113:17","statements":[{"expression":{"arguments":[{"id":2940,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"1475:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2943,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"1505:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:17","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2856,"src":"1505:18:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:17","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2946,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"1534:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2947,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"1540:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"1544:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2941,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2939,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"1455:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2951,"nodeType":"ExpressionStatement","src":"1455:96:17"}]},"documentation":{"id":2927,"nodeType":"StructuredDocumentation","src":"1122:228:17","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":2953,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:17","nodeType":"FunctionDefinition","parameters":{"id":2937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2930,"mutability":"mutable","name":"token","nameLocation":"1388:5:17","nodeType":"VariableDeclaration","scope":2953,"src":"1381:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":2929,"nodeType":"UserDefinedTypeName","pathNode":{"id":2928,"name":"IERC20","nameLocations":["1381:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"1381:6:17"},"referencedDeclaration":2857,"src":"1381:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"from","nameLocation":"1403:4:17","nodeType":"VariableDeclaration","scope":2953,"src":"1395:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2931,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"to","nameLocation":"1417:2:17","nodeType":"VariableDeclaration","scope":2953,"src":"1409:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2933,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"value","nameLocation":"1429:5:17","nodeType":"VariableDeclaration","scope":2953,"src":"1421:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2935,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:17"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[],"src":"1445:0:17"},"scope":3269,"src":"1355:203:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2996,"nodeType":"Block","src":"1894:497:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2143:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2968,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2973,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}],"id":2972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2971,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:17","typeDescriptions":{}}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2975,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"2190:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2969,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2159:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:17","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2834,"src":"2159:15:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2979,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":2964,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2983,"nodeType":"ExpressionStatement","src":"2121:163:17"},{"expression":{"arguments":[{"id":2985,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2314:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2988,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2344:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2844,"src":"2344:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:17","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2991,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"2368:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2377:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2986,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2984,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"2294:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"ExpressionStatement","src":"2294:90:17"}]},"documentation":{"id":2954,"nodeType":"StructuredDocumentation","src":"1564:249:17","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:17","nodeType":"FunctionDefinition","parameters":{"id":2962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"token","nameLocation":"1846:5:17","nodeType":"VariableDeclaration","scope":2997,"src":"1839:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":2956,"nodeType":"UserDefinedTypeName","pathNode":{"id":2955,"name":"IERC20","nameLocations":["1839:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"1839:6:17"},"referencedDeclaration":2857,"src":"1839:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2959,"mutability":"mutable","name":"spender","nameLocation":"1861:7:17","nodeType":"VariableDeclaration","scope":2997,"src":"1853:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2958,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2961,"mutability":"mutable","name":"value","nameLocation":"1878:5:17","nodeType":"VariableDeclaration","scope":2997,"src":"1870:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2960,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:17"},"returnParameters":{"id":2963,"nodeType":"ParameterList","parameters":[],"src":"1894:0:17"},"scope":3269,"src":"1818:573:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"2668:194:17","statements":[{"assignments":[3009],"declarations":[{"constant":false,"id":3009,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:17","nodeType":"VariableDeclaration","scope":3033,"src":"2678:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3018,"initialValue":{"arguments":[{"arguments":[{"id":3014,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}],"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3012,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:17","typeDescriptions":{}}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3016,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"2732:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3010,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"2701:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:17","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2834,"src":"2701:15:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:17"},{"expression":{"arguments":[{"id":3020,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"2770:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3023,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"2800:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2844,"src":"2800:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:17","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3026,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"2824:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2833:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2848:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3019,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"2750:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3032,"nodeType":"ExpressionStatement","src":"2750:105:17"}]},"documentation":{"id":2998,"nodeType":"StructuredDocumentation","src":"2397:180:17","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:17","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"token","nameLocation":"2620:5:17","nodeType":"VariableDeclaration","scope":3034,"src":"2613:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":3000,"nodeType":"UserDefinedTypeName","pathNode":{"id":2999,"name":"IERC20","nameLocations":["2613:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"2613:6:17"},"referencedDeclaration":2857,"src":"2613:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"spender","nameLocation":"2635:7:17","nodeType":"VariableDeclaration","scope":3034,"src":"2627:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3002,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3005,"mutability":"mutable","name":"value","nameLocation":"2652:5:17","nodeType":"VariableDeclaration","scope":3034,"src":"2644:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:17"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[],"src":"2668:0:17"},"scope":3269,"src":"2582:280:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3078,"nodeType":"Block","src":"3139:321:17","statements":[{"id":3077,"nodeType":"UncheckedBlock","src":"3149:305:17","statements":[{"assignments":[3046],"declarations":[{"constant":false,"id":3046,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:17","nodeType":"VariableDeclaration","scope":3077,"src":"3173:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3055,"initialValue":{"arguments":[{"arguments":[{"id":3051,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3269","typeString":"library SafeERC20"}],"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:17","typeDescriptions":{}}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3053,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"3227:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3047,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"3196:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:17","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2834,"src":"3196:15:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3057,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"3257:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3273:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3056,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3062,"nodeType":"ExpressionStatement","src":"3249:75:17"},{"expression":{"arguments":[{"id":3064,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"3358:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"3388:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2844,"src":"3388:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:17","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3070,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"3412:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3071,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"3421:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3436:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3065,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3063,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"3338:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3076,"nodeType":"ExpressionStatement","src":"3338:105:17"}]}]},"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"2868:180:17","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3079,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:17","nodeType":"FunctionDefinition","parameters":{"id":3043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"mutability":"mutable","name":"token","nameLocation":"3091:5:17","nodeType":"VariableDeclaration","scope":3079,"src":"3084:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":3037,"nodeType":"UserDefinedTypeName","pathNode":{"id":3036,"name":"IERC20","nameLocations":["3084:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"3084:6:17"},"referencedDeclaration":2857,"src":"3084:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3040,"mutability":"mutable","name":"spender","nameLocation":"3106:7:17","nodeType":"VariableDeclaration","scope":3079,"src":"3098:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3039,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3042,"mutability":"mutable","name":"value","nameLocation":"3123:5:17","nodeType":"VariableDeclaration","scope":3079,"src":"3115:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3041,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:17"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[],"src":"3139:0:17"},"scope":3269,"src":"3053:407:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3125,"nodeType":"Block","src":"3856:333:17","statements":[{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:17","nodeType":"VariableDeclaration","scope":3125,"src":"3866:25:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3090,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3100,"initialValue":{"arguments":[{"expression":{"expression":{"id":3094,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"3917:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2844,"src":"3917:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:17","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3097,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"3941:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"3950:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3092,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:17"},{"condition":{"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:17","subExpression":{"arguments":[{"id":3102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"3996:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"id":3103,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"4003:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3101,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"3972:23:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3124,"nodeType":"IfStatement","src":"3967:216:17","trueBody":{"id":3123,"nodeType":"Block","src":"4018:165:17","statements":[{"expression":{"arguments":[{"id":3107,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"4052:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3110,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"4082:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:17","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2844,"src":"4082:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:17","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3113,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"4106:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3108,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:17","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3106,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"4032:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3117,"nodeType":"ExpressionStatement","src":"4032:86:17"},{"expression":{"arguments":[{"id":3119,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"4152:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},{"id":3120,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"4159:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3118,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"4132:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2857_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3122,"nodeType":"ExpressionStatement","src":"4132:40:17"}]}}]},"documentation":{"id":3080,"nodeType":"StructuredDocumentation","src":"3466:308:17","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":3126,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:17","nodeType":"FunctionDefinition","parameters":{"id":3088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3083,"mutability":"mutable","name":"token","nameLocation":"3808:5:17","nodeType":"VariableDeclaration","scope":3126,"src":"3801:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":3082,"nodeType":"UserDefinedTypeName","pathNode":{"id":3081,"name":"IERC20","nameLocations":["3801:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"3801:6:17"},"referencedDeclaration":2857,"src":"3801:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"spender","nameLocation":"3823:7:17","nodeType":"VariableDeclaration","scope":3126,"src":"3815:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3084,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3087,"mutability":"mutable","name":"value","nameLocation":"3840:5:17","nodeType":"VariableDeclaration","scope":3126,"src":"3832:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3086,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:17"},"returnParameters":{"id":3089,"nodeType":"ParameterList","parameters":[],"src":"3856:0:17"},"scope":3269,"src":"3779:410:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3182,"nodeType":"Block","src":"4556:257:17","statements":[{"assignments":[3148],"declarations":[{"constant":false,"id":3148,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:17","nodeType":"VariableDeclaration","scope":3182,"src":"4566:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3153,"initialValue":{"arguments":[{"id":3151,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4601:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3149,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4588:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2893","typeString":"contract IERC20Permit"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:17","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2886,"src":"4588:12:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:17"},{"expression":{"arguments":[{"id":3157,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4630:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3158,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"4637:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"4646:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3160,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4653:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3161,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"4663:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3162,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"4666:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3163,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3144,"src":"4669:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3154,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4617:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2893","typeString":"contract IERC20Permit"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:17","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2878,"src":"4617:12:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3165,"nodeType":"ExpressionStatement","src":"4617:54:17"},{"assignments":[3167],"declarations":[{"constant":false,"id":3167,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:17","nodeType":"VariableDeclaration","scope":3182,"src":"4681:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3172,"initialValue":{"arguments":[{"id":3170,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4715:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3168,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4702:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2893","typeString":"contract IERC20Permit"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:17","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2886,"src":"4702:12:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3174,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"4739:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"4753:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":3179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":3173,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3181,"nodeType":"ExpressionStatement","src":"4731:75:17"}]},"documentation":{"id":3127,"nodeType":"StructuredDocumentation","src":"4195:141:17","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":3183,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:17","nodeType":"FunctionDefinition","parameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3130,"mutability":"mutable","name":"token","nameLocation":"4383:5:17","nodeType":"VariableDeclaration","scope":3183,"src":"4370:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2893","typeString":"contract IERC20Permit"},"typeName":{"id":3129,"nodeType":"UserDefinedTypeName","pathNode":{"id":3128,"name":"IERC20Permit","nameLocations":["4370:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"4370:12:17"},"referencedDeclaration":2893,"src":"4370:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2893","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"owner","nameLocation":"4406:5:17","nodeType":"VariableDeclaration","scope":3183,"src":"4398:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3131,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3134,"mutability":"mutable","name":"spender","nameLocation":"4429:7:17","nodeType":"VariableDeclaration","scope":3183,"src":"4421:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3133,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3136,"mutability":"mutable","name":"value","nameLocation":"4454:5:17","nodeType":"VariableDeclaration","scope":3183,"src":"4446:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3135,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:17","nodeType":"VariableDeclaration","scope":3183,"src":"4469:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"v","nameLocation":"4501:1:17","nodeType":"VariableDeclaration","scope":3183,"src":"4495:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3139,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"r","nameLocation":"4520:1:17","nodeType":"VariableDeclaration","scope":3183,"src":"4512:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3144,"mutability":"mutable","name":"s","nameLocation":"4539:1:17","nodeType":"VariableDeclaration","scope":3183,"src":"4531:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:17"},"returnParameters":{"id":3146,"nodeType":"ParameterList","parameters":[],"src":"4556:0:17"},"scope":3269,"src":"4341:472:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3219,"nodeType":"Block","src":"5266:572:17","statements":[{"assignments":[3193],"declarations":[{"constant":false,"id":3193,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:17","nodeType":"VariableDeclaration","scope":3219,"src":"5615:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3192,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3202,"initialValue":{"arguments":[{"id":3199,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"5669:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3196,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"5649:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}],"id":3195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3194,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:17","typeDescriptions":{}}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:17","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3475,"src":"5641:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3204,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5728:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:17","memberName":"length","nodeType":"MemberAccess","src":"5728:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3210,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5765:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3211,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:17","typeDescriptions":{}}}],"id":3213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3208,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:17","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:17","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3203,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3218,"nodeType":"ExpressionStatement","src":"5720:111:17"}]},"documentation":{"id":3184,"nodeType":"StructuredDocumentation","src":"4819:372:17","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3220,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:17","nodeType":"FunctionDefinition","parameters":{"id":3190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3187,"mutability":"mutable","name":"token","nameLocation":"5232:5:17","nodeType":"VariableDeclaration","scope":3220,"src":"5225:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":3186,"nodeType":"UserDefinedTypeName","pathNode":{"id":3185,"name":"IERC20","nameLocations":["5225:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"5225:6:17"},"referencedDeclaration":2857,"src":"5225:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3189,"mutability":"mutable","name":"data","nameLocation":"5252:4:17","nodeType":"VariableDeclaration","scope":3220,"src":"5239:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3188,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:17"},"returnParameters":{"id":3191,"nodeType":"ParameterList","parameters":[],"src":"5266:0:17"},"scope":3269,"src":"5196:642:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3267,"nodeType":"Block","src":"6428:505:17","statements":[{"assignments":[3232,3234],"declarations":[{"constant":false,"id":3232,"mutability":"mutable","name":"success","nameLocation":"6729:7:17","nodeType":"VariableDeclaration","scope":3267,"src":"6724:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3231,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3234,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:17","nodeType":"VariableDeclaration","scope":3267,"src":"6738:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3233,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3242,"initialValue":{"arguments":[{"id":3240,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"6785:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3237,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"6773:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}],"id":3236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3235,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:17","typeDescriptions":{}}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:17","memberName":"call","nodeType":"MemberAccess","src":"6765:19:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:17"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3243,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"6819:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3244,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"6831:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:17","memberName":"length","nodeType":"MemberAccess","src":"6831:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3250,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"6868:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3251,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:17","typeDescriptions":{}}}],"id":3253,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3248,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:17","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:17","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3256,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":3262,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"6919:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}],"id":3261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3260,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:17","typeDescriptions":{}}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3258,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"6892:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3715_$","typeString":"type(library Address)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:17","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3403,"src":"6892:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3230,"id":3266,"nodeType":"Return","src":"6800:126:17"}]},"documentation":{"id":3221,"nodeType":"StructuredDocumentation","src":"5844:490:17","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":3268,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:17","nodeType":"FunctionDefinition","parameters":{"id":3227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"token","nameLocation":"6379:5:17","nodeType":"VariableDeclaration","scope":3268,"src":"6372:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"},"typeName":{"id":3223,"nodeType":"UserDefinedTypeName","pathNode":{"id":3222,"name":"IERC20","nameLocations":["6372:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":2857,"src":"6372:6:17"},"referencedDeclaration":2857,"src":"6372:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2857","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3226,"mutability":"mutable","name":"data","nameLocation":"6399:4:17","nodeType":"VariableDeclaration","scope":3268,"src":"6386:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3225,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:17"},"returnParameters":{"id":3230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3268,"src":"6422:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3228,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:17"},"scope":3269,"src":"6339:594:17","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3270,"src":"701:6234:17","usedErrors":[],"usedEvents":[]}],"src":"115:6821:17"},"id":17},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3727],"IERC721":[3385]},"id":3386,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3271,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":3272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3386,"sourceUnit":3728,"src":"133:47:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3274,"name":"IERC165","nameLocations":["271:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3727,"src":"271:7:18"},"id":3275,"nodeType":"InheritanceSpecifier","src":"271:7:18"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":3273,"nodeType":"StructuredDocumentation","src":"182:67:18","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":3385,"linearizedBaseContracts":[3385,3727],"name":"IERC721","nameLocation":"260:7:18","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3276,"nodeType":"StructuredDocumentation","src":"285:88:18","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3284,"name":"Transfer","nameLocation":"384:8:18","nodeType":"EventDefinition","parameters":{"id":3283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:18","nodeType":"VariableDeclaration","scope":3284,"src":"393:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3280,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:18","nodeType":"VariableDeclaration","scope":3284,"src":"415:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3279,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3282,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:18","nodeType":"VariableDeclaration","scope":3284,"src":"435:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3281,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:18"},"src":"378:82:18"},{"anonymous":false,"documentation":{"id":3285,"nodeType":"StructuredDocumentation","src":"466:94:18","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3293,"name":"Approval","nameLocation":"571:8:18","nodeType":"EventDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:18","nodeType":"VariableDeclaration","scope":3293,"src":"580:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3286,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3289,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:18","nodeType":"VariableDeclaration","scope":3293,"src":"603:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3288,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3291,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:18","nodeType":"VariableDeclaration","scope":3293,"src":"629:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3290,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:18"},"src":"565:89:18"},{"anonymous":false,"documentation":{"id":3294,"nodeType":"StructuredDocumentation","src":"660:117:18","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3302,"name":"ApprovalForAll","nameLocation":"788:14:18","nodeType":"EventDefinition","parameters":{"id":3301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:18","nodeType":"VariableDeclaration","scope":3302,"src":"803:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3295,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3298,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:18","nodeType":"VariableDeclaration","scope":3302,"src":"826:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3297,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3300,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:18","nodeType":"VariableDeclaration","scope":3302,"src":"852:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3299,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:18"},"src":"782:85:18"},{"documentation":{"id":3303,"nodeType":"StructuredDocumentation","src":"873:76:18","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":3310,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:18","nodeType":"FunctionDefinition","parameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"owner","nameLocation":"981:5:18","nodeType":"VariableDeclaration","scope":3310,"src":"973:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:18"},"returnParameters":{"id":3309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"balance","nameLocation":"1019:7:18","nodeType":"VariableDeclaration","scope":3310,"src":"1011:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:18"},"scope":3385,"src":"954:74:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3311,"nodeType":"StructuredDocumentation","src":"1034:131:18","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":3318,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:18","nodeType":"FunctionDefinition","parameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:18","nodeType":"VariableDeclaration","scope":3318,"src":"1187:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3312,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:18"},"returnParameters":{"id":3317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3316,"mutability":"mutable","name":"owner","nameLocation":"1235:5:18","nodeType":"VariableDeclaration","scope":3318,"src":"1227:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3315,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:18"},"scope":3385,"src":"1170:72:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3319,"nodeType":"StructuredDocumentation","src":"1248:556:18","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":3330,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:18","nodeType":"FunctionDefinition","parameters":{"id":3328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"from","nameLocation":"1843:4:18","nodeType":"VariableDeclaration","scope":3330,"src":"1835:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3323,"mutability":"mutable","name":"to","nameLocation":"1857:2:18","nodeType":"VariableDeclaration","scope":3330,"src":"1849:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3322,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3325,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:18","nodeType":"VariableDeclaration","scope":3330,"src":"1861:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3324,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3327,"mutability":"mutable","name":"data","nameLocation":"1893:4:18","nodeType":"VariableDeclaration","scope":3330,"src":"1878:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3326,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:18"},"returnParameters":{"id":3329,"nodeType":"ParameterList","parameters":[],"src":"1907:0:18"},"scope":3385,"src":"1809:99:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3331,"nodeType":"StructuredDocumentation","src":"1914:687:18","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":3340,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:18","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"from","nameLocation":"2640:4:18","nodeType":"VariableDeclaration","scope":3340,"src":"2632:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3332,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"to","nameLocation":"2654:2:18","nodeType":"VariableDeclaration","scope":3340,"src":"2646:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3334,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:18","nodeType":"VariableDeclaration","scope":3340,"src":"2658:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:18"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[],"src":"2683:0:18"},"scope":3385,"src":"2606:78:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3341,"nodeType":"StructuredDocumentation","src":"2690:732:18","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3350,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:18","nodeType":"FunctionDefinition","parameters":{"id":3348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"from","nameLocation":"3457:4:18","nodeType":"VariableDeclaration","scope":3350,"src":"3449:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3342,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3345,"mutability":"mutable","name":"to","nameLocation":"3471:2:18","nodeType":"VariableDeclaration","scope":3350,"src":"3463:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:18","nodeType":"VariableDeclaration","scope":3350,"src":"3475:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3346,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:18"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[],"src":"3500:0:18"},"scope":3385,"src":"3427:74:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3351,"nodeType":"StructuredDocumentation","src":"3507:452:18","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3358,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:18","nodeType":"FunctionDefinition","parameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"to","nameLocation":"3989:2:18","nodeType":"VariableDeclaration","scope":3358,"src":"3981:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3352,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3355,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:18","nodeType":"VariableDeclaration","scope":3358,"src":"3993:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3354,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:18"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[],"src":"4018:0:18"},"scope":3385,"src":"3964:55:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3359,"nodeType":"StructuredDocumentation","src":"4025:309:18","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":3366,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:18","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"operator","nameLocation":"4374:8:18","nodeType":"VariableDeclaration","scope":3366,"src":"4366:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3360,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"approved","nameLocation":"4389:8:18","nodeType":"VariableDeclaration","scope":3366,"src":"4384:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3362,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:18"},"returnParameters":{"id":3365,"nodeType":"ParameterList","parameters":[],"src":"4407:0:18"},"scope":3385,"src":"4339:69:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3367,"nodeType":"StructuredDocumentation","src":"4414:139:18","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":3374,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:18","nodeType":"FunctionDefinition","parameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:18","nodeType":"VariableDeclaration","scope":3374,"src":"4579:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:18"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"operator","nameLocation":"4627:8:18","nodeType":"VariableDeclaration","scope":3374,"src":"4619:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3371,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:18"},"scope":3385,"src":"4558:79:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3375,"nodeType":"StructuredDocumentation","src":"4643:138:18","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":3384,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:18","nodeType":"FunctionDefinition","parameters":{"id":3380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"owner","nameLocation":"4820:5:18","nodeType":"VariableDeclaration","scope":3384,"src":"4812:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3379,"mutability":"mutable","name":"operator","nameLocation":"4835:8:18","nodeType":"VariableDeclaration","scope":3384,"src":"4827:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3378,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:18"},"returnParameters":{"id":3383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3384,"src":"4868:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3381,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:18"},"scope":3385,"src":"4786:88:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3386,"src":"250:4626:18","usedErrors":[],"usedEvents":[3284,3293,3302]}],"src":"108:4769:18"},"id":18},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3715]},"id":3716,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3387,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3388,"nodeType":"StructuredDocumentation","src":"126:67:19","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3715,"linearizedBaseContracts":[3715],"name":"Address","nameLocation":"202:7:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3402,"nodeType":"Block","src":"1478:254:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3396,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"1702:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:19","memberName":"code","nodeType":"MemberAccess","src":"1702:12:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:19","memberName":"length","nodeType":"MemberAccess","src":"1702:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3395,"id":3401,"nodeType":"Return","src":"1695:30:19"}]},"documentation":{"id":3389,"nodeType":"StructuredDocumentation","src":"216:1191:19","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3403,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:19","nodeType":"FunctionDefinition","parameters":{"id":3392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3391,"mutability":"mutable","name":"account","nameLocation":"1440:7:19","nodeType":"VariableDeclaration","scope":3403,"src":"1432:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3390,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:19"},"returnParameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3403,"src":"1472:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3393,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:19"},"scope":3715,"src":"1412:320:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3436,"nodeType":"Block","src":"2718:241:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3414,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3715","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3715","typeString":"library Address"}],"id":3413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3412,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:19","typeDescriptions":{}}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:19","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3417,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"2761:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3421,"nodeType":"ExpressionStatement","src":"2728:73:19"},{"assignments":[3423,null],"declarations":[{"constant":false,"id":3423,"mutability":"mutable","name":"success","nameLocation":"2818:7:19","nodeType":"VariableDeclaration","scope":3436,"src":"2813:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3422,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3430,"initialValue":{"arguments":[{"hexValue":"","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3424,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"2831:9:19","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:19","memberName":"call","nodeType":"MemberAccess","src":"2831:14:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3426,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"2853:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:19"},{"expression":{"arguments":[{"id":3432,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"2882:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3431,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3435,"nodeType":"ExpressionStatement","src":"2874:78:19"}]},"documentation":{"id":3404,"nodeType":"StructuredDocumentation","src":"1738:904:19","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3437,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:19","nodeType":"FunctionDefinition","parameters":{"id":3409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3406,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:19","nodeType":"VariableDeclaration","scope":3437,"src":"2666:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3405,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:19","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3408,"mutability":"mutable","name":"amount","nameLocation":"2701:6:19","nodeType":"VariableDeclaration","scope":3437,"src":"2693:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:19"},"returnParameters":{"id":3410,"nodeType":"ParameterList","parameters":[],"src":"2718:0:19"},"scope":3715,"src":"2647:312:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3454,"nodeType":"Block","src":"3790:96:19","statements":[{"expression":{"arguments":[{"id":3448,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"3829:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3449,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"3837:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3447,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3495,3539],"referencedDeclaration":3539,"src":"3807:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3446,"id":3453,"nodeType":"Return","src":"3800:79:19"}]},"documentation":{"id":3438,"nodeType":"StructuredDocumentation","src":"2965:731:19","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3455,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:19","nodeType":"FunctionDefinition","parameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"target","nameLocation":"3731:6:19","nodeType":"VariableDeclaration","scope":3455,"src":"3723:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3439,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3442,"mutability":"mutable","name":"data","nameLocation":"3752:4:19","nodeType":"VariableDeclaration","scope":3455,"src":"3739:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3441,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:19"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3455,"src":"3776:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3444,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:19"},"scope":3715,"src":"3701:185:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3474,"nodeType":"Block","src":"4255:76:19","statements":[{"expression":{"arguments":[{"id":3468,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"4294:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3469,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4302:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3471,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"4311:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3467,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3495,3539],"referencedDeclaration":3539,"src":"4272:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3466,"id":3473,"nodeType":"Return","src":"4265:59:19"}]},"documentation":{"id":3456,"nodeType":"StructuredDocumentation","src":"3892:211:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3475,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:19","nodeType":"FunctionDefinition","parameters":{"id":3463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"target","nameLocation":"4147:6:19","nodeType":"VariableDeclaration","scope":3475,"src":"4139:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"data","nameLocation":"4176:4:19","nodeType":"VariableDeclaration","scope":3475,"src":"4163:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3459,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3462,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:19","nodeType":"VariableDeclaration","scope":3475,"src":"4190:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3461,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:19"},"returnParameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3475,"src":"4241:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3464,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:19"},"scope":3715,"src":"4108:223:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3494,"nodeType":"Block","src":"4806:111:19","statements":[{"expression":{"arguments":[{"id":3488,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"4845:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3489,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"4853:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"4859:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3487,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3495,3539],"referencedDeclaration":3539,"src":"4823:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3486,"id":3493,"nodeType":"Return","src":"4816:94:19"}]},"documentation":{"id":3476,"nodeType":"StructuredDocumentation","src":"4337:351:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3495,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:19","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"mutability":"mutable","name":"target","nameLocation":"4732:6:19","nodeType":"VariableDeclaration","scope":3495,"src":"4724:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3477,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3480,"mutability":"mutable","name":"data","nameLocation":"4753:4:19","nodeType":"VariableDeclaration","scope":3495,"src":"4740:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3479,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"value","nameLocation":"4767:5:19","nodeType":"VariableDeclaration","scope":3495,"src":"4759:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3481,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:19"},"returnParameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3495,"src":"4792:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3484,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:19"},"scope":3715,"src":"4693:224:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3538,"nodeType":"Block","src":"5344:267:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3512,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3715","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3715","typeString":"library Address"}],"id":3511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3510,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:19","typeDescriptions":{}}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:19","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"5387:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3509,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3519,"nodeType":"ExpressionStatement","src":"5354:81:19"},{"assignments":[3521,3523],"declarations":[{"constant":false,"id":3521,"mutability":"mutable","name":"success","nameLocation":"5451:7:19","nodeType":"VariableDeclaration","scope":3538,"src":"5446:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3520,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3523,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:19","nodeType":"VariableDeclaration","scope":3538,"src":"5460:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3522,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3530,"initialValue":{"arguments":[{"id":3528,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"5513:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3524,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"5487:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:19","memberName":"call","nodeType":"MemberAccess","src":"5487:11:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"5506:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:19"},{"expression":{"arguments":[{"id":3532,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"5562:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3533,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"5570:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3534,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"5579:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3535,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"5591:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3531,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"5535:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3508,"id":3537,"nodeType":"Return","src":"5528:76:19"}]},"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"4923:237:19","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3539,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:19","nodeType":"FunctionDefinition","parameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"target","nameLocation":"5213:6:19","nodeType":"VariableDeclaration","scope":3539,"src":"5205:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3497,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3500,"mutability":"mutable","name":"data","nameLocation":"5242:4:19","nodeType":"VariableDeclaration","scope":3539,"src":"5229:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3499,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3502,"mutability":"mutable","name":"value","nameLocation":"5264:5:19","nodeType":"VariableDeclaration","scope":3539,"src":"5256:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3504,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:19","nodeType":"VariableDeclaration","scope":3539,"src":"5279:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3503,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:19"},"returnParameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3539,"src":"5330:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3506,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:19"},"scope":3715,"src":"5165:446:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3555,"nodeType":"Block","src":"5888:97:19","statements":[{"expression":{"arguments":[{"id":3550,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"5924:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3551,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"5932:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3549,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3556,3585],"referencedDeclaration":3585,"src":"5905:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3548,"id":3554,"nodeType":"Return","src":"5898:80:19"}]},"documentation":{"id":3540,"nodeType":"StructuredDocumentation","src":"5617:166:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3556,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:19","nodeType":"FunctionDefinition","parameters":{"id":3545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3542,"mutability":"mutable","name":"target","nameLocation":"5824:6:19","nodeType":"VariableDeclaration","scope":3556,"src":"5816:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3541,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"data","nameLocation":"5845:4:19","nodeType":"VariableDeclaration","scope":3556,"src":"5832:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3543,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:19"},"returnParameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3556,"src":"5874:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3546,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:19"},"scope":3715,"src":"5788:197:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3584,"nodeType":"Block","src":"6327:168:19","statements":[{"assignments":[3569,3571],"declarations":[{"constant":false,"id":3569,"mutability":"mutable","name":"success","nameLocation":"6343:7:19","nodeType":"VariableDeclaration","scope":3584,"src":"6338:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3568,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3571,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:19","nodeType":"VariableDeclaration","scope":3584,"src":"6352:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3570,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3576,"initialValue":{"arguments":[{"id":3574,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"6397:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3572,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6379:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:19","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:19","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:19"},{"expression":{"arguments":[{"id":3578,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6446:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3579,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"6454:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3580,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"6463:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3581,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"6475:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3577,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"6419:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3567,"id":3583,"nodeType":"Return","src":"6412:76:19"}]},"documentation":{"id":3557,"nodeType":"StructuredDocumentation","src":"5991:173:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3585,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:19","nodeType":"FunctionDefinition","parameters":{"id":3564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"target","nameLocation":"6214:6:19","nodeType":"VariableDeclaration","scope":3585,"src":"6206:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3558,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3561,"mutability":"mutable","name":"data","nameLocation":"6243:4:19","nodeType":"VariableDeclaration","scope":3585,"src":"6230:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3560,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3563,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:19","nodeType":"VariableDeclaration","scope":3585,"src":"6257:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3562,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:19"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3585,"src":"6313:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3565,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:19"},"scope":3715,"src":"6169:326:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3601,"nodeType":"Block","src":"6771:101:19","statements":[{"expression":{"arguments":[{"id":3596,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"6809:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3597,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"6817:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3595,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3602,3631],"referencedDeclaration":3631,"src":"6788:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3594,"id":3600,"nodeType":"Return","src":"6781:84:19"}]},"documentation":{"id":3586,"nodeType":"StructuredDocumentation","src":"6501:168:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3602,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:19","nodeType":"FunctionDefinition","parameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"target","nameLocation":"6712:6:19","nodeType":"VariableDeclaration","scope":3602,"src":"6704:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3590,"mutability":"mutable","name":"data","nameLocation":"6733:4:19","nodeType":"VariableDeclaration","scope":3602,"src":"6720:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3589,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:19"},"returnParameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3602,"src":"6757:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3592,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:19"},"scope":3715,"src":"6674:198:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3630,"nodeType":"Block","src":"7213:170:19","statements":[{"assignments":[3615,3617],"declarations":[{"constant":false,"id":3615,"mutability":"mutable","name":"success","nameLocation":"7229:7:19","nodeType":"VariableDeclaration","scope":3630,"src":"7224:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3614,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3617,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:19","nodeType":"VariableDeclaration","scope":3630,"src":"7238:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3616,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3622,"initialValue":{"arguments":[{"id":3620,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"7285:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3618,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"7265:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:19","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:19","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:19"},{"expression":{"arguments":[{"id":3624,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"7334:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3625,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"7342:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3626,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"7351:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3627,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"7363:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3623,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"7307:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3613,"id":3629,"nodeType":"Return","src":"7300:76:19"}]},"documentation":{"id":3603,"nodeType":"StructuredDocumentation","src":"6878:175:19","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3631,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:19","nodeType":"FunctionDefinition","parameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3605,"mutability":"mutable","name":"target","nameLocation":"7105:6:19","nodeType":"VariableDeclaration","scope":3631,"src":"7097:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3604,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3607,"mutability":"mutable","name":"data","nameLocation":"7134:4:19","nodeType":"VariableDeclaration","scope":3631,"src":"7121:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3606,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3609,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:19","nodeType":"VariableDeclaration","scope":3631,"src":"7148:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3608,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:19"},"returnParameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3631,"src":"7199:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3611,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:19"},"scope":3715,"src":"7058:325:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3669,"nodeType":"Block","src":"7865:434:19","statements":[{"condition":{"id":3645,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"7879:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3667,"nodeType":"Block","src":"8235:58:19","statements":[{"expression":{"arguments":[{"id":3663,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"8257:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3664,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"8269:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3662,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"8249:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3666,"nodeType":"ExpressionStatement","src":"8249:33:19"}]},"id":3668,"nodeType":"IfStatement","src":"7875:418:19","trueBody":{"id":3661,"nodeType":"Block","src":"7888:341:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3646,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"7906:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:19","memberName":"length","nodeType":"MemberAccess","src":"7906:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3658,"nodeType":"IfStatement","src":"7902:286:19","trueBody":{"id":3657,"nodeType":"Block","src":"7930:258:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":3652,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"8132:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3651,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"8121:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3656,"nodeType":"ExpressionStatement","src":"8113:60:19"}]}},{"expression":{"id":3659,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"8208:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3644,"id":3660,"nodeType":"Return","src":"8201:17:19"}]}}]},"documentation":{"id":3632,"nodeType":"StructuredDocumentation","src":"7389:277:19","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3670,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:19","nodeType":"FunctionDefinition","parameters":{"id":3641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3634,"mutability":"mutable","name":"target","nameLocation":"7724:6:19","nodeType":"VariableDeclaration","scope":3670,"src":"7716:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3633,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3636,"mutability":"mutable","name":"success","nameLocation":"7745:7:19","nodeType":"VariableDeclaration","scope":3670,"src":"7740:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3635,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:19","nodeType":"VariableDeclaration","scope":3670,"src":"7762:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3637,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3640,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:19","nodeType":"VariableDeclaration","scope":3670,"src":"7795:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3639,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:19"},"returnParameters":{"id":3644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3670,"src":"7851:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3642,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:19"},"scope":3715,"src":"7671:628:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3693,"nodeType":"Block","src":"8680:135:19","statements":[{"condition":{"id":3682,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"8694:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3691,"nodeType":"Block","src":"8751:58:19","statements":[{"expression":{"arguments":[{"id":3687,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"8773:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3688,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"8785:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3686,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"8765:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3690,"nodeType":"ExpressionStatement","src":"8765:33:19"}]},"id":3692,"nodeType":"IfStatement","src":"8690:119:19","trueBody":{"id":3685,"nodeType":"Block","src":"8703:42:19","statements":[{"expression":{"id":3683,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"8724:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3681,"id":3684,"nodeType":"Return","src":"8717:17:19"}]}}]},"documentation":{"id":3671,"nodeType":"StructuredDocumentation","src":"8305:210:19","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3694,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:19","nodeType":"FunctionDefinition","parameters":{"id":3678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"success","nameLocation":"8560:7:19","nodeType":"VariableDeclaration","scope":3694,"src":"8555:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3672,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3675,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:19","nodeType":"VariableDeclaration","scope":3694,"src":"8577:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3674,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3677,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:19","nodeType":"VariableDeclaration","scope":3694,"src":"8610:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3676,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:19"},"returnParameters":{"id":3681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3694,"src":"8666:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3679,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:19"},"scope":3715,"src":"8520:295:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3713,"nodeType":"Block","src":"8904:457:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3701,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"8980:10:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:19","memberName":"length","nodeType":"MemberAccess","src":"8980:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3711,"nodeType":"Block","src":"9310:45:19","statements":[{"expression":{"arguments":[{"id":3708,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"9331:12:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3707,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3710,"nodeType":"ExpressionStatement","src":"9324:20:19"}]},"id":3712,"nodeType":"IfStatement","src":"8976:379:19","trueBody":{"id":3706,"nodeType":"Block","src":"9003:301:19","statements":[{"AST":{"nativeSrc":"9161:133:19","nodeType":"YulBlock","src":"9161:133:19","statements":[{"nativeSrc":"9179:40:19","nodeType":"YulVariableDeclaration","src":"9179:40:19","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:19","nodeType":"YulIdentifier","src":"9208:10:19"}],"functionName":{"name":"mload","nativeSrc":"9202:5:19","nodeType":"YulIdentifier","src":"9202:5:19"},"nativeSrc":"9202:17:19","nodeType":"YulFunctionCall","src":"9202:17:19"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:19","nodeType":"YulTypedName","src":"9183:15:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:19","nodeType":"YulLiteral","src":"9247:2:19","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:19","nodeType":"YulIdentifier","src":"9251:10:19"}],"functionName":{"name":"add","nativeSrc":"9243:3:19","nodeType":"YulIdentifier","src":"9243:3:19"},"nativeSrc":"9243:19:19","nodeType":"YulFunctionCall","src":"9243:19:19"},{"name":"returndata_size","nativeSrc":"9264:15:19","nodeType":"YulIdentifier","src":"9264:15:19"}],"functionName":{"name":"revert","nativeSrc":"9236:6:19","nodeType":"YulIdentifier","src":"9236:6:19"},"nativeSrc":"9236:44:19","nodeType":"YulFunctionCall","src":"9236:44:19"},"nativeSrc":"9236:44:19","nodeType":"YulExpressionStatement","src":"9236:44:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3696,"isOffset":false,"isSlot":false,"src":"9208:10:19","valueSize":1},{"declaration":3696,"isOffset":false,"isSlot":false,"src":"9251:10:19","valueSize":1}],"id":3705,"nodeType":"InlineAssembly","src":"9152:142:19"}]}}]},"id":3714,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:19","nodeType":"FunctionDefinition","parameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3696,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:19","nodeType":"VariableDeclaration","scope":3714,"src":"8838:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3695,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3698,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:19","nodeType":"VariableDeclaration","scope":3714,"src":"8863:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3697,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:19"},"returnParameters":{"id":3700,"nodeType":"ParameterList","parameters":[],"src":"8904:0:19"},"scope":3715,"src":"8821:540:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3716,"src":"194:9169:19","usedErrors":[],"usedEvents":[]}],"src":"101:9263:19"},"id":19},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3727]},"id":3728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3717,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3718,"nodeType":"StructuredDocumentation","src":"125:279:20","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3727,"linearizedBaseContracts":[3727],"name":"IERC165","nameLocation":"415:7:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3719,"nodeType":"StructuredDocumentation","src":"429:340:20","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3726,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:20","nodeType":"FunctionDefinition","parameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:20","nodeType":"VariableDeclaration","scope":3726,"src":"801:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3720,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:20"},"returnParameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3726,"src":"844:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3723,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:20"},"scope":3727,"src":"774:76:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3728,"src":"405:447:20","usedErrors":[],"usedEvents":[]}],"src":"100:753:20"},"id":20},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4593]},"id":4594,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3729,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3730,"nodeType":"StructuredDocumentation","src":"128:73:21","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4593,"linearizedBaseContracts":[4593],"name":"Math","nameLocation":"210:4:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3734,"members":[{"id":3731,"name":"Down","nameLocation":"245:4:21","nodeType":"EnumValue","src":"245:4:21"},{"id":3732,"name":"Up","nameLocation":"287:2:21","nodeType":"EnumValue","src":"287:2:21"},{"id":3733,"name":"Zero","nameLocation":"318:4:21","nodeType":"EnumValue","src":"318:4:21"}],"name":"Rounding","nameLocation":"226:8:21","nodeType":"EnumDefinition","src":"221:122:21"},{"body":{"id":3751,"nodeType":"Block","src":"480:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3744,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"497:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3745,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"501:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3748,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"509:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:21","trueExpression":{"id":3747,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"505:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3743,"id":3750,"nodeType":"Return","src":"490:20:21"}]},"documentation":{"id":3735,"nodeType":"StructuredDocumentation","src":"349:59:21","text":" @dev Returns the largest of two numbers."},"id":3752,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:21","nodeType":"FunctionDefinition","parameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3737,"mutability":"mutable","name":"a","nameLocation":"434:1:21","nodeType":"VariableDeclaration","scope":3752,"src":"426:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3736,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"b","nameLocation":"445:1:21","nodeType":"VariableDeclaration","scope":3752,"src":"437:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3738,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:21"},"returnParameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3752,"src":"471:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3741,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:21"},"scope":4593,"src":"413:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3769,"nodeType":"Block","src":"655:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"672:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3763,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"676:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3766,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"684:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:21","trueExpression":{"id":3765,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"680:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3761,"id":3768,"nodeType":"Return","src":"665:20:21"}]},"documentation":{"id":3753,"nodeType":"StructuredDocumentation","src":"523:60:21","text":" @dev Returns the smallest of two numbers."},"id":3770,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:21","nodeType":"FunctionDefinition","parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"a","nameLocation":"609:1:21","nodeType":"VariableDeclaration","scope":3770,"src":"601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3757,"mutability":"mutable","name":"b","nameLocation":"620:1:21","nodeType":"VariableDeclaration","scope":3770,"src":"612:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3756,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:21"},"returnParameters":{"id":3761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3770,"src":"646:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3759,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:21"},"scope":4593,"src":"588:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3792,"nodeType":"Block","src":"876:82:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3780,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"931:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3781,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"935:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3783,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3784,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"941:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3785,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"945:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3787,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3779,"id":3791,"nodeType":"Return","src":"923:28:21"}]},"documentation":{"id":3771,"nodeType":"StructuredDocumentation","src":"698:102:21","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3793,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:21","nodeType":"FunctionDefinition","parameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3773,"mutability":"mutable","name":"a","nameLocation":"830:1:21","nodeType":"VariableDeclaration","scope":3793,"src":"822:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3772,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3775,"mutability":"mutable","name":"b","nameLocation":"841:1:21","nodeType":"VariableDeclaration","scope":3793,"src":"833:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3774,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:21"},"returnParameters":{"id":3779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"867:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3777,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:21"},"scope":4593,"src":"805:153:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3817,"nodeType":"Block","src":"1228:123:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3803,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"1316:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"1330:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3811,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"1339:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:21","trueExpression":{"hexValue":"30","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3802,"id":3816,"nodeType":"Return","src":"1309:35:21"}]},"documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"964:188:21","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3818,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:21","nodeType":"FunctionDefinition","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"mutability":"mutable","name":"a","nameLocation":"1182:1:21","nodeType":"VariableDeclaration","scope":3818,"src":"1174:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3798,"mutability":"mutable","name":"b","nameLocation":"1193:1:21","nodeType":"VariableDeclaration","scope":3818,"src":"1185:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3797,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:21"},"returnParameters":{"id":3802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3818,"src":"1219:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:21"},"scope":4593,"src":"1157:194:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3940,"nodeType":"Block","src":"1765:4115:21","statements":[{"id":3939,"nodeType":"UncheckedBlock","src":"1775:4099:21","statements":[{"assignments":[3831],"declarations":[{"constant":false,"id":3831,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:21","nodeType":"VariableDeclaration","scope":3939,"src":"2096:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3832,"nodeType":"VariableDeclarationStatement","src":"2096:13:21"},{"assignments":[3834],"declarations":[{"constant":false,"id":3834,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:21","nodeType":"VariableDeclaration","scope":3939,"src":"2168:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3835,"nodeType":"VariableDeclarationStatement","src":"2168:13:21"},{"AST":{"nativeSrc":"2248:157:21","nodeType":"YulBlock","src":"2248:157:21","statements":[{"nativeSrc":"2266:30:21","nodeType":"YulVariableDeclaration","src":"2266:30:21","value":{"arguments":[{"name":"x","nativeSrc":"2283:1:21","nodeType":"YulIdentifier","src":"2283:1:21"},{"name":"y","nativeSrc":"2286:1:21","nodeType":"YulIdentifier","src":"2286:1:21"},{"arguments":[{"kind":"number","nativeSrc":"2293:1:21","nodeType":"YulLiteral","src":"2293:1:21","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2289:3:21","nodeType":"YulIdentifier","src":"2289:3:21"},"nativeSrc":"2289:6:21","nodeType":"YulFunctionCall","src":"2289:6:21"}],"functionName":{"name":"mulmod","nativeSrc":"2276:6:21","nodeType":"YulIdentifier","src":"2276:6:21"},"nativeSrc":"2276:20:21","nodeType":"YulFunctionCall","src":"2276:20:21"},"variables":[{"name":"mm","nativeSrc":"2270:2:21","nodeType":"YulTypedName","src":"2270:2:21","type":""}]},{"nativeSrc":"2313:18:21","nodeType":"YulAssignment","src":"2313:18:21","value":{"arguments":[{"name":"x","nativeSrc":"2326:1:21","nodeType":"YulIdentifier","src":"2326:1:21"},{"name":"y","nativeSrc":"2329:1:21","nodeType":"YulIdentifier","src":"2329:1:21"}],"functionName":{"name":"mul","nativeSrc":"2322:3:21","nodeType":"YulIdentifier","src":"2322:3:21"},"nativeSrc":"2322:9:21","nodeType":"YulFunctionCall","src":"2322:9:21"},"variableNames":[{"name":"prod0","nativeSrc":"2313:5:21","nodeType":"YulIdentifier","src":"2313:5:21"}]},{"nativeSrc":"2348:43:21","nodeType":"YulAssignment","src":"2348:43:21","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2365:2:21","nodeType":"YulIdentifier","src":"2365:2:21"},{"name":"prod0","nativeSrc":"2369:5:21","nodeType":"YulIdentifier","src":"2369:5:21"}],"functionName":{"name":"sub","nativeSrc":"2361:3:21","nodeType":"YulIdentifier","src":"2361:3:21"},"nativeSrc":"2361:14:21","nodeType":"YulFunctionCall","src":"2361:14:21"},{"arguments":[{"name":"mm","nativeSrc":"2380:2:21","nodeType":"YulIdentifier","src":"2380:2:21"},{"name":"prod0","nativeSrc":"2384:5:21","nodeType":"YulIdentifier","src":"2384:5:21"}],"functionName":{"name":"lt","nativeSrc":"2377:2:21","nodeType":"YulIdentifier","src":"2377:2:21"},"nativeSrc":"2377:13:21","nodeType":"YulFunctionCall","src":"2377:13:21"}],"functionName":{"name":"sub","nativeSrc":"2357:3:21","nodeType":"YulIdentifier","src":"2357:3:21"},"nativeSrc":"2357:34:21","nodeType":"YulFunctionCall","src":"2357:34:21"},"variableNames":[{"name":"prod1","nativeSrc":"2348:5:21","nodeType":"YulIdentifier","src":"2348:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3831,"isOffset":false,"isSlot":false,"src":"2313:5:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"2369:5:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"2384:5:21","valueSize":1},{"declaration":3834,"isOffset":false,"isSlot":false,"src":"2348:5:21","valueSize":1},{"declaration":3821,"isOffset":false,"isSlot":false,"src":"2283:1:21","valueSize":1},{"declaration":3821,"isOffset":false,"isSlot":false,"src":"2326:1:21","valueSize":1},{"declaration":3823,"isOffset":false,"isSlot":false,"src":"2286:1:21","valueSize":1},{"declaration":3823,"isOffset":false,"isSlot":false,"src":"2329:1:21","valueSize":1}],"id":3836,"nodeType":"InlineAssembly","src":"2239:166:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3837,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"2486:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3845,"nodeType":"IfStatement","src":"2482:368:21","trueBody":{"id":3844,"nodeType":"Block","src":"2498:352:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3840,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"2816:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3841,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"2824:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3829,"id":3843,"nodeType":"Return","src":"2809:26:21"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3847,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"2960:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3848,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"2974:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":3846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"2952:53:21"},{"assignments":[3854],"declarations":[{"constant":false,"id":3854,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:21","nodeType":"VariableDeclaration","scope":3939,"src":"3261:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3853,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3855,"nodeType":"VariableDeclarationStatement","src":"3261:17:21"},{"AST":{"nativeSrc":"3301:291:21","nodeType":"YulBlock","src":"3301:291:21","statements":[{"nativeSrc":"3370:38:21","nodeType":"YulAssignment","src":"3370:38:21","value":{"arguments":[{"name":"x","nativeSrc":"3390:1:21","nodeType":"YulIdentifier","src":"3390:1:21"},{"name":"y","nativeSrc":"3393:1:21","nodeType":"YulIdentifier","src":"3393:1:21"},{"name":"denominator","nativeSrc":"3396:11:21","nodeType":"YulIdentifier","src":"3396:11:21"}],"functionName":{"name":"mulmod","nativeSrc":"3383:6:21","nodeType":"YulIdentifier","src":"3383:6:21"},"nativeSrc":"3383:25:21","nodeType":"YulFunctionCall","src":"3383:25:21"},"variableNames":[{"name":"remainder","nativeSrc":"3370:9:21","nodeType":"YulIdentifier","src":"3370:9:21"}]},{"nativeSrc":"3490:41:21","nodeType":"YulAssignment","src":"3490:41:21","value":{"arguments":[{"name":"prod1","nativeSrc":"3503:5:21","nodeType":"YulIdentifier","src":"3503:5:21"},{"arguments":[{"name":"remainder","nativeSrc":"3513:9:21","nodeType":"YulIdentifier","src":"3513:9:21"},{"name":"prod0","nativeSrc":"3524:5:21","nodeType":"YulIdentifier","src":"3524:5:21"}],"functionName":{"name":"gt","nativeSrc":"3510:2:21","nodeType":"YulIdentifier","src":"3510:2:21"},"nativeSrc":"3510:20:21","nodeType":"YulFunctionCall","src":"3510:20:21"}],"functionName":{"name":"sub","nativeSrc":"3499:3:21","nodeType":"YulIdentifier","src":"3499:3:21"},"nativeSrc":"3499:32:21","nodeType":"YulFunctionCall","src":"3499:32:21"},"variableNames":[{"name":"prod1","nativeSrc":"3490:5:21","nodeType":"YulIdentifier","src":"3490:5:21"}]},{"nativeSrc":"3548:30:21","nodeType":"YulAssignment","src":"3548:30:21","value":{"arguments":[{"name":"prod0","nativeSrc":"3561:5:21","nodeType":"YulIdentifier","src":"3561:5:21"},{"name":"remainder","nativeSrc":"3568:9:21","nodeType":"YulIdentifier","src":"3568:9:21"}],"functionName":{"name":"sub","nativeSrc":"3557:3:21","nodeType":"YulIdentifier","src":"3557:3:21"},"nativeSrc":"3557:21:21","nodeType":"YulFunctionCall","src":"3557:21:21"},"variableNames":[{"name":"prod0","nativeSrc":"3548:5:21","nodeType":"YulIdentifier","src":"3548:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3825,"isOffset":false,"isSlot":false,"src":"3396:11:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"3524:5:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"3548:5:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"3561:5:21","valueSize":1},{"declaration":3834,"isOffset":false,"isSlot":false,"src":"3490:5:21","valueSize":1},{"declaration":3834,"isOffset":false,"isSlot":false,"src":"3503:5:21","valueSize":1},{"declaration":3854,"isOffset":false,"isSlot":false,"src":"3370:9:21","valueSize":1},{"declaration":3854,"isOffset":false,"isSlot":false,"src":"3513:9:21","valueSize":1},{"declaration":3854,"isOffset":false,"isSlot":false,"src":"3568:9:21","valueSize":1},{"declaration":3821,"isOffset":false,"isSlot":false,"src":"3390:1:21","valueSize":1},{"declaration":3823,"isOffset":false,"isSlot":false,"src":"3393:1:21","valueSize":1}],"id":3856,"nodeType":"InlineAssembly","src":"3292:300:21"},{"assignments":[3858],"declarations":[{"constant":false,"id":3858,"mutability":"mutable","name":"twos","nameLocation":"3907:4:21","nodeType":"VariableDeclaration","scope":3939,"src":"3899:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3857,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3866,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3859,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"3914:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:21","subExpression":{"id":3860,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"3930:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:21"},{"AST":{"nativeSrc":"3969:362:21","nodeType":"YulBlock","src":"3969:362:21","statements":[{"nativeSrc":"4034:37:21","nodeType":"YulAssignment","src":"4034:37:21","value":{"arguments":[{"name":"denominator","nativeSrc":"4053:11:21","nodeType":"YulIdentifier","src":"4053:11:21"},{"name":"twos","nativeSrc":"4066:4:21","nodeType":"YulIdentifier","src":"4066:4:21"}],"functionName":{"name":"div","nativeSrc":"4049:3:21","nodeType":"YulIdentifier","src":"4049:3:21"},"nativeSrc":"4049:22:21","nodeType":"YulFunctionCall","src":"4049:22:21"},"variableNames":[{"name":"denominator","nativeSrc":"4034:11:21","nodeType":"YulIdentifier","src":"4034:11:21"}]},{"nativeSrc":"4138:25:21","nodeType":"YulAssignment","src":"4138:25:21","value":{"arguments":[{"name":"prod0","nativeSrc":"4151:5:21","nodeType":"YulIdentifier","src":"4151:5:21"},{"name":"twos","nativeSrc":"4158:4:21","nodeType":"YulIdentifier","src":"4158:4:21"}],"functionName":{"name":"div","nativeSrc":"4147:3:21","nodeType":"YulIdentifier","src":"4147:3:21"},"nativeSrc":"4147:16:21","nodeType":"YulFunctionCall","src":"4147:16:21"},"variableNames":[{"name":"prod0","nativeSrc":"4138:5:21","nodeType":"YulIdentifier","src":"4138:5:21"}]},{"nativeSrc":"4278:39:21","nodeType":"YulAssignment","src":"4278:39:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4298:1:21","nodeType":"YulLiteral","src":"4298:1:21","type":"","value":"0"},{"name":"twos","nativeSrc":"4301:4:21","nodeType":"YulIdentifier","src":"4301:4:21"}],"functionName":{"name":"sub","nativeSrc":"4294:3:21","nodeType":"YulIdentifier","src":"4294:3:21"},"nativeSrc":"4294:12:21","nodeType":"YulFunctionCall","src":"4294:12:21"},{"name":"twos","nativeSrc":"4308:4:21","nodeType":"YulIdentifier","src":"4308:4:21"}],"functionName":{"name":"div","nativeSrc":"4290:3:21","nodeType":"YulIdentifier","src":"4290:3:21"},"nativeSrc":"4290:23:21","nodeType":"YulFunctionCall","src":"4290:23:21"},{"kind":"number","nativeSrc":"4315:1:21","nodeType":"YulLiteral","src":"4315:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4286:3:21","nodeType":"YulIdentifier","src":"4286:3:21"},"nativeSrc":"4286:31:21","nodeType":"YulFunctionCall","src":"4286:31:21"},"variableNames":[{"name":"twos","nativeSrc":"4278:4:21","nodeType":"YulIdentifier","src":"4278:4:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3825,"isOffset":false,"isSlot":false,"src":"4034:11:21","valueSize":1},{"declaration":3825,"isOffset":false,"isSlot":false,"src":"4053:11:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"4138:5:21","valueSize":1},{"declaration":3831,"isOffset":false,"isSlot":false,"src":"4151:5:21","valueSize":1},{"declaration":3858,"isOffset":false,"isSlot":false,"src":"4066:4:21","valueSize":1},{"declaration":3858,"isOffset":false,"isSlot":false,"src":"4158:4:21","valueSize":1},{"declaration":3858,"isOffset":false,"isSlot":false,"src":"4278:4:21","valueSize":1},{"declaration":3858,"isOffset":false,"isSlot":false,"src":"4301:4:21","valueSize":1},{"declaration":3858,"isOffset":false,"isSlot":false,"src":"4308:4:21","valueSize":1}],"id":3867,"nodeType":"InlineAssembly","src":"3960:371:21"},{"expression":{"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3868,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4397:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3869,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"4406:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3870,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"4414:4:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3873,"nodeType":"ExpressionStatement","src":"4397:21:21"},{"assignments":[3875],"declarations":[{"constant":false,"id":3875,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:21","nodeType":"VariableDeclaration","scope":3939,"src":"4736:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3874,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3882,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3877,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"4759:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:21"},{"expression":{"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3883,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"4992:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3885,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5007:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3886,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5021:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3890,"nodeType":"ExpressionStatement","src":"4992:36:21"},{"expression":{"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3891,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5061:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3893,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5076:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3894,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5090:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3898,"nodeType":"ExpressionStatement","src":"5061:36:21"},{"expression":{"id":3905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3899,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5131:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3901,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5146:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3902,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5160:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3906,"nodeType":"ExpressionStatement","src":"5131:36:21"},{"expression":{"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3907,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5201:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3909,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5216:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3910,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5230:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3914,"nodeType":"ExpressionStatement","src":"5201:36:21"},{"expression":{"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3915,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5271:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5286:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3918,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5300:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3922,"nodeType":"ExpressionStatement","src":"5271:36:21"},{"expression":{"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3923,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5342:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3925,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"5357:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3926,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5371:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3930,"nodeType":"ExpressionStatement","src":"5342:36:21"},{"expression":{"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"5812:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3932,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"5821:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3933,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"5829:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3936,"nodeType":"ExpressionStatement","src":"5812:24:21"},{"expression":{"id":3937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"5857:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3829,"id":3938,"nodeType":"Return","src":"5850:13:21"}]}]},"documentation":{"id":3819,"nodeType":"StructuredDocumentation","src":"1357:305:21","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3941,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:21","nodeType":"FunctionDefinition","parameters":{"id":3826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3821,"mutability":"mutable","name":"x","nameLocation":"1691:1:21","nodeType":"VariableDeclaration","scope":3941,"src":"1683:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3820,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3823,"mutability":"mutable","name":"y","nameLocation":"1702:1:21","nodeType":"VariableDeclaration","scope":3941,"src":"1694:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3825,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:21","nodeType":"VariableDeclaration","scope":3941,"src":"1705:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3824,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:21"},"returnParameters":{"id":3829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3828,"mutability":"mutable","name":"result","nameLocation":"1757:6:21","nodeType":"VariableDeclaration","scope":3941,"src":"1749:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:21"},"scope":4593,"src":"1667:4213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3984,"nodeType":"Block","src":"6122:189:21","statements":[{"assignments":[3957],"declarations":[{"constant":false,"id":3957,"mutability":"mutable","name":"result","nameLocation":"6140:6:21","nodeType":"VariableDeclaration","scope":3984,"src":"6132:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3956,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3963,"initialValue":{"arguments":[{"id":3959,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"6156:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3960,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"6159:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3961,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"6162:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3958,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3941,3985],"referencedDeclaration":3941,"src":"6149:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3964,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"6188:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3965,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"6200:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3734_$","typeString":"type(enum Math.Rounding)"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3732,"src":"6200:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"src":"6188:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3969,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"6222:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3970,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"6225:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3971,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"6228:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3968,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:21","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3981,"nodeType":"IfStatement","src":"6184:98:21","trueBody":{"id":3980,"nodeType":"Block","src":"6246:36:21","statements":[{"expression":{"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3976,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"6260:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3979,"nodeType":"ExpressionStatement","src":"6260:11:21"}]}},{"expression":{"id":3982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"6298:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3955,"id":3983,"nodeType":"Return","src":"6291:13:21"}]},"documentation":{"id":3942,"nodeType":"StructuredDocumentation","src":"5886:121:21","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3985,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:21","nodeType":"FunctionDefinition","parameters":{"id":3952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"x","nameLocation":"6036:1:21","nodeType":"VariableDeclaration","scope":3985,"src":"6028:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3943,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"y","nameLocation":"6047:1:21","nodeType":"VariableDeclaration","scope":3985,"src":"6039:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3945,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:21","nodeType":"VariableDeclaration","scope":3985,"src":"6050:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3951,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:21","nodeType":"VariableDeclaration","scope":3985,"src":"6071:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"typeName":{"id":3950,"nodeType":"UserDefinedTypeName","pathNode":{"id":3949,"name":"Rounding","nameLocations":["6071:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3734,"src":"6071:8:21"},"referencedDeclaration":3734,"src":"6071:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:21"},"returnParameters":{"id":3955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3985,"src":"6113:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3953,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:21"},"scope":4593,"src":"6012:299:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4096,"nodeType":"Block","src":"6587:1585:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3993,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"6601:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3999,"nodeType":"IfStatement","src":"6597:45:21","trueBody":{"id":3998,"nodeType":"Block","src":"6609:33:21","statements":[{"expression":{"hexValue":"30","id":3996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3992,"id":3997,"nodeType":"Return","src":"6623:8:21"}]}},{"assignments":[4001],"declarations":[{"constant":false,"id":4001,"mutability":"mutable","name":"result","nameLocation":"7329:6:21","nodeType":"VariableDeclaration","scope":4096,"src":"7321:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4000,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4010,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4004,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7349:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4003,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4265,4301],"referencedDeclaration":4265,"src":"7344:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4008,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:21"},{"id":4095,"nodeType":"UncheckedBlock","src":"7758:408:21","statements":[{"expression":{"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7782:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7792:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4013,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7801:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4014,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7805:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4017,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4021,"nodeType":"ExpressionStatement","src":"7782:35:21"},{"expression":{"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4022,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7831:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4023,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7841:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7850:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7854:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4028,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4032,"nodeType":"ExpressionStatement","src":"7831:35:21"},{"expression":{"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4033,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7880:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4034,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7890:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7899:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7903:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4039,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4043,"nodeType":"ExpressionStatement","src":"7880:35:21"},{"expression":{"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7929:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7939:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4046,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7948:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7952:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4054,"nodeType":"ExpressionStatement","src":"7929:35:21"},{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7978:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4056,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"7988:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4057,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"7997:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8001:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4061,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"nodeType":"ExpressionStatement","src":"7978:35:21"},{"expression":{"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8027:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4067,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8037:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4068,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"8046:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4069,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8050:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4072,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4076,"nodeType":"ExpressionStatement","src":"8027:35:21"},{"expression":{"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4077,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8076:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8086:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4079,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"8095:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4080,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8099:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4087,"nodeType":"ExpressionStatement","src":"8076:35:21"},{"expression":{"arguments":[{"id":4089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8136:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4090,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"8144:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4091,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"8148:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4088,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"8132:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3992,"id":4094,"nodeType":"Return","src":"8125:30:21"}]}]},"documentation":{"id":3986,"nodeType":"StructuredDocumentation","src":"6317:208:21","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4097,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:21","nodeType":"FunctionDefinition","parameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3988,"mutability":"mutable","name":"a","nameLocation":"6552:1:21","nodeType":"VariableDeclaration","scope":4097,"src":"6544:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3987,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:21"},"returnParameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4097,"src":"6578:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3990,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:21"},"scope":4593,"src":"6530:1642:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4132,"nodeType":"Block","src":"8348:161:21","statements":[{"id":4131,"nodeType":"UncheckedBlock","src":"8358:145:21","statements":[{"assignments":[4109],"declarations":[{"constant":false,"id":4109,"mutability":"mutable","name":"result","nameLocation":"8390:6:21","nodeType":"VariableDeclaration","scope":4131,"src":"8382:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4108,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4113,"initialValue":{"arguments":[{"id":4111,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"8404:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4110,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4097,4133],"referencedDeclaration":4097,"src":"8399:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"8427:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4115,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"8437:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4116,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"8449:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3734_$","typeString":"type(enum Math.Rounding)"}},"id":4117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3732,"src":"8449:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"src":"8437:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"8464:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4120,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"8473:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4122,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"8482:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:21","trueExpression":{"hexValue":"31","id":4125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4107,"id":4130,"nodeType":"Return","src":"8420:72:21"}]}]},"documentation":{"id":4098,"nodeType":"StructuredDocumentation","src":"8178:89:21","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4133,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:21","nodeType":"FunctionDefinition","parameters":{"id":4104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4100,"mutability":"mutable","name":"a","nameLocation":"8294:1:21","nodeType":"VariableDeclaration","scope":4133,"src":"8286:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4099,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4103,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:21","nodeType":"VariableDeclaration","scope":4133,"src":"8297:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"typeName":{"id":4102,"nodeType":"UserDefinedTypeName","pathNode":{"id":4101,"name":"Rounding","nameLocations":["8297:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3734,"src":"8297:8:21"},"referencedDeclaration":3734,"src":"8297:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:21"},"returnParameters":{"id":4107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4133,"src":"8339:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4105,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:21"},"scope":4593,"src":"8272:237:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4264,"nodeType":"Block","src":"8694:922:21","statements":[{"assignments":[4142],"declarations":[{"constant":false,"id":4142,"mutability":"mutable","name":"result","nameLocation":"8712:6:21","nodeType":"VariableDeclaration","scope":4264,"src":"8704:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4141,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4144,"initialValue":{"hexValue":"30","id":4143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:21"},{"id":4261,"nodeType":"UncheckedBlock","src":"8732:855:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"8760:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4159,"nodeType":"IfStatement","src":"8756:99:21","trueBody":{"id":4158,"nodeType":"Block","src":"8778:77:21","statements":[{"expression":{"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"8796:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4153,"nodeType":"ExpressionStatement","src":"8796:13:21"},{"expression":{"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4154,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"8827:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4157,"nodeType":"ExpressionStatement","src":"8827:13:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4160,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"8872:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4174,"nodeType":"IfStatement","src":"8868:96:21","trueBody":{"id":4173,"nodeType":"Block","src":"8889:75:21","statements":[{"expression":{"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"8907:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4168,"nodeType":"ExpressionStatement","src":"8907:12:21"},{"expression":{"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"8937:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4172,"nodeType":"ExpressionStatement","src":"8937:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"8981:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4189,"nodeType":"IfStatement","src":"8977:96:21","trueBody":{"id":4188,"nodeType":"Block","src":"8998:75:21","statements":[{"expression":{"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9016:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4183,"nodeType":"ExpressionStatement","src":"9016:12:21"},{"expression":{"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9046:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4187,"nodeType":"ExpressionStatement","src":"9046:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9090:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4204,"nodeType":"IfStatement","src":"9086:96:21","trueBody":{"id":4203,"nodeType":"Block","src":"9107:75:21","statements":[{"expression":{"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9125:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4198,"nodeType":"ExpressionStatement","src":"9125:12:21"},{"expression":{"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9155:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4202,"nodeType":"ExpressionStatement","src":"9155:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9199:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4219,"nodeType":"IfStatement","src":"9195:93:21","trueBody":{"id":4218,"nodeType":"Block","src":"9215:73:21","statements":[{"expression":{"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9233:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4213,"nodeType":"ExpressionStatement","src":"9233:11:21"},{"expression":{"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9262:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4217,"nodeType":"ExpressionStatement","src":"9262:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9305:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4234,"nodeType":"IfStatement","src":"9301:93:21","trueBody":{"id":4233,"nodeType":"Block","src":"9321:73:21","statements":[{"expression":{"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9339:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4228,"nodeType":"ExpressionStatement","src":"9339:11:21"},{"expression":{"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9368:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4232,"nodeType":"ExpressionStatement","src":"9368:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9411:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4249,"nodeType":"IfStatement","src":"9407:93:21","trueBody":{"id":4248,"nodeType":"Block","src":"9427:73:21","statements":[{"expression":{"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9445:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4243,"nodeType":"ExpressionStatement","src":"9445:11:21"},{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9474:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4247,"nodeType":"ExpressionStatement","src":"9474:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9517:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"9513:64:21","trueBody":{"id":4259,"nodeType":"Block","src":"9533:44:21","statements":[{"expression":{"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9551:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4258,"nodeType":"ExpressionStatement","src":"9551:11:21"}]}}]},{"expression":{"id":4262,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4142,"src":"9603:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4140,"id":4263,"nodeType":"Return","src":"9596:13:21"}]},"documentation":{"id":4134,"nodeType":"StructuredDocumentation","src":"8515:113:21","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4265,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:21","nodeType":"FunctionDefinition","parameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4136,"mutability":"mutable","name":"value","nameLocation":"8655:5:21","nodeType":"VariableDeclaration","scope":4265,"src":"8647:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4135,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:21"},"returnParameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4265,"src":"8685:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4138,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:21"},"scope":4593,"src":"8633:983:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4300,"nodeType":"Block","src":"9849:165:21","statements":[{"id":4299,"nodeType":"UncheckedBlock","src":"9859:149:21","statements":[{"assignments":[4277],"declarations":[{"constant":false,"id":4277,"mutability":"mutable","name":"result","nameLocation":"9891:6:21","nodeType":"VariableDeclaration","scope":4299,"src":"9883:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4276,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4281,"initialValue":{"arguments":[{"id":4279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"9905:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4278,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4265,4301],"referencedDeclaration":4265,"src":"9900:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"9932:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4283,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"9942:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4284,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"9954:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3734_$","typeString":"type(enum Math.Rounding)"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3732,"src":"9954:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"src":"9942:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"9974:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"9983:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:21","trueExpression":{"hexValue":"31","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4275,"id":4298,"nodeType":"Return","src":"9925:72:21"}]}]},"documentation":{"id":4266,"nodeType":"StructuredDocumentation","src":"9622:142:21","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4301,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:21","nodeType":"FunctionDefinition","parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"value","nameLocation":"9791:5:21","nodeType":"VariableDeclaration","scope":4301,"src":"9783:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4267,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4271,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:21","nodeType":"VariableDeclaration","scope":4301,"src":"9798:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"typeName":{"id":4270,"nodeType":"UserDefinedTypeName","pathNode":{"id":4269,"name":"Rounding","nameLocations":["9798:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3734,"src":"9798:8:21"},"referencedDeclaration":3734,"src":"9798:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:21"},"returnParameters":{"id":4275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4301,"src":"9840:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4273,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:21"},"scope":4593,"src":"9769:245:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4429,"nodeType":"Block","src":"10201:854:21","statements":[{"assignments":[4310],"declarations":[{"constant":false,"id":4310,"mutability":"mutable","name":"result","nameLocation":"10219:6:21","nodeType":"VariableDeclaration","scope":4429,"src":"10211:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4309,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4312,"initialValue":{"hexValue":"30","id":4311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:21"},{"id":4426,"nodeType":"UncheckedBlock","src":"10239:787:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10267:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4329,"nodeType":"IfStatement","src":"10263:103:21","trueBody":{"id":4328,"nodeType":"Block","src":"10286:80:21","statements":[{"expression":{"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10304:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4323,"nodeType":"ExpressionStatement","src":"10304:17:21"},{"expression":{"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10339:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4327,"nodeType":"ExpressionStatement","src":"10339:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10383:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4346,"nodeType":"IfStatement","src":"10379:103:21","trueBody":{"id":4345,"nodeType":"Block","src":"10402:80:21","statements":[{"expression":{"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10420:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4340,"nodeType":"ExpressionStatement","src":"10420:17:21"},{"expression":{"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10455:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4344,"nodeType":"ExpressionStatement","src":"10455:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10499:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4363,"nodeType":"IfStatement","src":"10495:103:21","trueBody":{"id":4362,"nodeType":"Block","src":"10518:80:21","statements":[{"expression":{"id":4356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10536:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4357,"nodeType":"ExpressionStatement","src":"10536:17:21"},{"expression":{"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10571:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4361,"nodeType":"ExpressionStatement","src":"10571:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10615:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4380,"nodeType":"IfStatement","src":"10611:100:21","trueBody":{"id":4379,"nodeType":"Block","src":"10633:78:21","statements":[{"expression":{"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10651:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4374,"nodeType":"ExpressionStatement","src":"10651:16:21"},{"expression":{"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4375,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10685:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4378,"nodeType":"ExpressionStatement","src":"10685:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10728:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4397,"nodeType":"IfStatement","src":"10724:100:21","trueBody":{"id":4396,"nodeType":"Block","src":"10746:78:21","statements":[{"expression":{"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10764:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4391,"nodeType":"ExpressionStatement","src":"10764:16:21"},{"expression":{"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10798:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4395,"nodeType":"ExpressionStatement","src":"10798:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10841:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4414,"nodeType":"IfStatement","src":"10837:100:21","trueBody":{"id":4413,"nodeType":"Block","src":"10859:78:21","statements":[{"expression":{"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10877:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4408,"nodeType":"ExpressionStatement","src":"10877:16:21"},{"expression":{"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10911:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4412,"nodeType":"ExpressionStatement","src":"10911:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"10954:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4425,"nodeType":"IfStatement","src":"10950:66:21","trueBody":{"id":4424,"nodeType":"Block","src":"10972:44:21","statements":[{"expression":{"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"10990:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4423,"nodeType":"ExpressionStatement","src":"10990:11:21"}]}}]},{"expression":{"id":4427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"11042:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4308,"id":4428,"nodeType":"Return","src":"11035:13:21"}]},"documentation":{"id":4302,"nodeType":"StructuredDocumentation","src":"10020:114:21","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4430,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:21","nodeType":"FunctionDefinition","parameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"value","nameLocation":"10162:5:21","nodeType":"VariableDeclaration","scope":4430,"src":"10154:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:21"},"returnParameters":{"id":4308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4430,"src":"10192:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:21"},"scope":4593,"src":"10139:916:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4465,"nodeType":"Block","src":"11290:167:21","statements":[{"id":4464,"nodeType":"UncheckedBlock","src":"11300:151:21","statements":[{"assignments":[4442],"declarations":[{"constant":false,"id":4442,"mutability":"mutable","name":"result","nameLocation":"11332:6:21","nodeType":"VariableDeclaration","scope":4464,"src":"11324:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4441,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4446,"initialValue":{"arguments":[{"id":4444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11347:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4443,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4430,4466],"referencedDeclaration":4430,"src":"11341:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"11374:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4448,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4436,"src":"11384:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4449,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"11396:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3734_$","typeString":"type(enum Math.Rounding)"}},"id":4450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3732,"src":"11396:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"src":"11384:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4453,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"11417:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11426:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:21","trueExpression":{"hexValue":"31","id":4458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4440,"id":4463,"nodeType":"Return","src":"11367:73:21"}]}]},"documentation":{"id":4431,"nodeType":"StructuredDocumentation","src":"11061:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4466,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:21","nodeType":"FunctionDefinition","parameters":{"id":4437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4433,"mutability":"mutable","name":"value","nameLocation":"11232:5:21","nodeType":"VariableDeclaration","scope":4466,"src":"11224:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4432,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4436,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:21","nodeType":"VariableDeclaration","scope":4466,"src":"11239:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"typeName":{"id":4435,"nodeType":"UserDefinedTypeName","pathNode":{"id":4434,"name":"Rounding","nameLocations":["11239:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3734,"src":"11239:8:21"},"referencedDeclaration":3734,"src":"11239:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:21"},"returnParameters":{"id":4440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4466,"src":"11281:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4438,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:21"},"scope":4593,"src":"11209:248:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4552,"nodeType":"Block","src":"11771:600:21","statements":[{"assignments":[4475],"declarations":[{"constant":false,"id":4475,"mutability":"mutable","name":"result","nameLocation":"11789:6:21","nodeType":"VariableDeclaration","scope":4552,"src":"11781:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4474,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4477,"initialValue":{"hexValue":"30","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:21"},{"id":4549,"nodeType":"UncheckedBlock","src":"11809:533:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"11837:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4492,"nodeType":"IfStatement","src":"11833:98:21","trueBody":{"id":4491,"nodeType":"Block","src":"11855:76:21","statements":[{"expression":{"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"11873:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4486,"nodeType":"ExpressionStatement","src":"11873:13:21"},{"expression":{"id":4489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"11904:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4490,"nodeType":"ExpressionStatement","src":"11904:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"11948:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4507,"nodeType":"IfStatement","src":"11944:95:21","trueBody":{"id":4506,"nodeType":"Block","src":"11965:74:21","statements":[{"expression":{"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"11983:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4501,"nodeType":"ExpressionStatement","src":"11983:12:21"},{"expression":{"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"12013:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4505,"nodeType":"ExpressionStatement","src":"12013:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"12056:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4522,"nodeType":"IfStatement","src":"12052:95:21","trueBody":{"id":4521,"nodeType":"Block","src":"12073:74:21","statements":[{"expression":{"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"12091:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4516,"nodeType":"ExpressionStatement","src":"12091:12:21"},{"expression":{"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4517,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"12121:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4520,"nodeType":"ExpressionStatement","src":"12121:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"12164:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4537,"nodeType":"IfStatement","src":"12160:95:21","trueBody":{"id":4536,"nodeType":"Block","src":"12181:74:21","statements":[{"expression":{"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"12199:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4531,"nodeType":"ExpressionStatement","src":"12199:12:21"},{"expression":{"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"12229:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4535,"nodeType":"ExpressionStatement","src":"12229:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"12272:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4548,"nodeType":"IfStatement","src":"12268:64:21","trueBody":{"id":4547,"nodeType":"Block","src":"12288:44:21","statements":[{"expression":{"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"12306:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4546,"nodeType":"ExpressionStatement","src":"12306:11:21"}]}}]},{"expression":{"id":4550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"12358:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4473,"id":4551,"nodeType":"Return","src":"12351:13:21"}]},"documentation":{"id":4467,"nodeType":"StructuredDocumentation","src":"11463:240:21","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4553,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:21","nodeType":"FunctionDefinition","parameters":{"id":4470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4469,"mutability":"mutable","name":"value","nameLocation":"11732:5:21","nodeType":"VariableDeclaration","scope":4553,"src":"11724:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4468,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:21"},"returnParameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4553,"src":"11762:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4471,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:21"},"scope":4593,"src":"11708:663:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4591,"nodeType":"Block","src":"12608:174:21","statements":[{"id":4590,"nodeType":"UncheckedBlock","src":"12618:158:21","statements":[{"assignments":[4565],"declarations":[{"constant":false,"id":4565,"mutability":"mutable","name":"result","nameLocation":"12650:6:21","nodeType":"VariableDeclaration","scope":4590,"src":"12642:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4564,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4569,"initialValue":{"arguments":[{"id":4567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"12666:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4566,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4553,4592],"referencedDeclaration":4553,"src":"12659:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"12693:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4571,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"12703:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4572,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"12715:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3734_$","typeString":"type(enum Math.Rounding)"}},"id":4573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3732,"src":"12715:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"src":"12703:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4576,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"12736:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4579,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"12751:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:21","trueExpression":{"hexValue":"31","id":4584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4563,"id":4589,"nodeType":"Return","src":"12686:79:21"}]}]},"documentation":{"id":4554,"nodeType":"StructuredDocumentation","src":"12377:144:21","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4592,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:21","nodeType":"FunctionDefinition","parameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"mutability":"mutable","name":"value","nameLocation":"12550:5:21","nodeType":"VariableDeclaration","scope":4592,"src":"12542:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4555,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4559,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:21","nodeType":"VariableDeclaration","scope":4592,"src":"12557:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"},"typeName":{"id":4558,"nodeType":"UserDefinedTypeName","pathNode":{"id":4557,"name":"Rounding","nameLocations":["12557:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3734,"src":"12557:8:21"},"referencedDeclaration":3734,"src":"12557:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3734","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:21"},"returnParameters":{"id":4563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4592,"src":"12599:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4561,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:21"},"scope":4593,"src":"12526:256:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4594,"src":"202:12582:21","usedErrors":[],"usedEvents":[]}],"src":"103:12682:21"},"id":21},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[5206]},"id":5207,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4595,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":4596,"nodeType":"StructuredDocumentation","src":"230:1098:22","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":5206,"linearizedBaseContracts":[5206],"name":"EnumerableSet","nameLocation":"1337:13:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":4604,"members":[{"constant":false,"id":4599,"mutability":"mutable","name":"_values","nameLocation":"1861:7:22","nodeType":"VariableDeclaration","scope":4604,"src":"1851:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1851:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4598,"nodeType":"ArrayTypeName","src":"1851:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4603,"mutability":"mutable","name":"_indexes","nameLocation":"2029:8:22","nodeType":"VariableDeclaration","scope":4604,"src":"2001:36:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":4602,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2001:27:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4601,"name":"uint256","nodeType":"ElementaryTypeName","src":"2020:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1804:3:22","nodeType":"StructDefinition","scope":5206,"src":"1797:247:22","visibility":"public"},{"body":{"id":4645,"nodeType":"Block","src":"2283:335:22","statements":[{"condition":{"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2297:22:22","subExpression":{"arguments":[{"id":4616,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"2308:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":4617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"2313:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4615,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"2298:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4643,"nodeType":"Block","src":"2575:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":4641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2596:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4614,"id":4642,"nodeType":"Return","src":"2589:12:22"}]},"id":4644,"nodeType":"IfStatement","src":"2293:319:22","trueBody":{"id":4640,"nodeType":"Block","src":"2321:248:22","statements":[{"expression":{"arguments":[{"id":4625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"2352:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":4620,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"2335:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4623,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2339:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"2335:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2347:4:22","memberName":"push","nodeType":"MemberAccess","src":"2335:16:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4627,"nodeType":"ExpressionStatement","src":"2335:23:22"},{"expression":{"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4628,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"2493:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4631,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2497:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"2493:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4632,"indexExpression":{"id":4630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"2506:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2493:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4633,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"2515:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2519:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"2515:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2527:6:22","memberName":"length","nodeType":"MemberAccess","src":"2515:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2493:40:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4637,"nodeType":"ExpressionStatement","src":"2493:40:22"},{"expression":{"hexValue":"74727565","id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2554:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4614,"id":4639,"nodeType":"Return","src":"2547:11:22"}]}}]},"documentation":{"id":4605,"nodeType":"StructuredDocumentation","src":"2050:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4646,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2223:4:22","nodeType":"FunctionDefinition","parameters":{"id":4611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4608,"mutability":"mutable","name":"set","nameLocation":"2240:3:22","nodeType":"VariableDeclaration","scope":4646,"src":"2228:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4607,"nodeType":"UserDefinedTypeName","pathNode":{"id":4606,"name":"Set","nameLocations":["2228:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"2228:3:22"},"referencedDeclaration":4604,"src":"2228:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4610,"mutability":"mutable","name":"value","nameLocation":"2253:5:22","nodeType":"VariableDeclaration","scope":4646,"src":"2245:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2245:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2227:32:22"},"returnParameters":{"id":4614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4646,"src":"2277:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4612,"name":"bool","nodeType":"ElementaryTypeName","src":"2277:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2276:6:22"},"scope":5206,"src":"2214:404:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4729,"nodeType":"Block","src":"2858:1316:22","statements":[{"assignments":[4658],"declarations":[{"constant":false,"id":4658,"mutability":"mutable","name":"valueIndex","nameLocation":"2976:10:22","nodeType":"VariableDeclaration","scope":4729,"src":"2968:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4663,"initialValue":{"baseExpression":{"expression":{"id":4659,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"2989:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"2989:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4662,"indexExpression":{"id":4661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"3002:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2989:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2968:40:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4664,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"3023:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3023:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4727,"nodeType":"Block","src":"4131:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4152:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4656,"id":4726,"nodeType":"Return","src":"4145:12:22"}]},"id":4728,"nodeType":"IfStatement","src":"3019:1149:22","trueBody":{"id":4724,"nodeType":"Block","src":"3040:1085:22","statements":[{"assignments":[4668],"declarations":[{"constant":false,"id":4668,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3400:13:22","nodeType":"VariableDeclaration","scope":4724,"src":"3392:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4667,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4672,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4669,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"3416:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3416:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3392:38:22"},{"assignments":[4674],"declarations":[{"constant":false,"id":4674,"mutability":"mutable","name":"lastIndex","nameLocation":"3452:9:22","nodeType":"VariableDeclaration","scope":4724,"src":"3444:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4673,"name":"uint256","nodeType":"ElementaryTypeName","src":"3444:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4680,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4675,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3464:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3468:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"3464:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3476:6:22","memberName":"length","nodeType":"MemberAccess","src":"3464:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3485:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3464:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3444:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4681,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"3505:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4682,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3518:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3505:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4708,"nodeType":"IfStatement","src":"3501:398:22","trueBody":{"id":4707,"nodeType":"Block","src":"3533:366:22","statements":[{"assignments":[4685],"declarations":[{"constant":false,"id":4685,"mutability":"mutable","name":"lastValue","nameLocation":"3559:9:22","nodeType":"VariableDeclaration","scope":4707,"src":"3551:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3551:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4690,"initialValue":{"baseExpression":{"expression":{"id":4686,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3571:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4687,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3575:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"3571:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4689,"indexExpression":{"id":4688,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"3583:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:22:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3551:42:22"},{"expression":{"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4691,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3693:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3697:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"3693:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4695,"indexExpression":{"id":4693,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3705:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3693:26:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4696,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"3722:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3693:38:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4698,"nodeType":"ExpressionStatement","src":"3693:38:22"},{"expression":{"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4699,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3805:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3809:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"3805:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4703,"indexExpression":{"id":4701,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"3818:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3805:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4704,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"3831:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3805:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4706,"nodeType":"ExpressionStatement","src":"3805:36:22"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4709,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3977:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3981:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"3977:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3989:3:22","memberName":"pop","nodeType":"MemberAccess","src":"3977:15:22","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3977:17:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4715,"nodeType":"ExpressionStatement","src":"3977:17:22"},{"expression":{"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4062:26:22","subExpression":{"baseExpression":{"expression":{"id":4716,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"4069:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4073:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"4069:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4719,"indexExpression":{"id":4718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"4082:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4069:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4721,"nodeType":"ExpressionStatement","src":"4062:26:22"},{"expression":{"hexValue":"74727565","id":4722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4656,"id":4723,"nodeType":"Return","src":"4103:11:22"}]}}]},"documentation":{"id":4647,"nodeType":"StructuredDocumentation","src":"2624:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4730,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2795:7:22","nodeType":"FunctionDefinition","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4650,"mutability":"mutable","name":"set","nameLocation":"2815:3:22","nodeType":"VariableDeclaration","scope":4730,"src":"2803:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4649,"nodeType":"UserDefinedTypeName","pathNode":{"id":4648,"name":"Set","nameLocations":["2803:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"2803:3:22"},"referencedDeclaration":4604,"src":"2803:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4652,"mutability":"mutable","name":"value","nameLocation":"2828:5:22","nodeType":"VariableDeclaration","scope":4730,"src":"2820:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2820:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2802:32:22"},"returnParameters":{"id":4656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4730,"src":"2852:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4654,"name":"bool","nodeType":"ElementaryTypeName","src":"2852:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2851:6:22"},"scope":5206,"src":"2786:1388:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4748,"nodeType":"Block","src":"4334:48:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4741,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4734,"src":"4351:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4355:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"4351:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4744,"indexExpression":{"id":4743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"4364:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4351:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4374:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4351:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4740,"id":4747,"nodeType":"Return","src":"4344:31:22"}]},"documentation":{"id":4731,"nodeType":"StructuredDocumentation","src":"4180:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":4749,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4264:9:22","nodeType":"FunctionDefinition","parameters":{"id":4737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4734,"mutability":"mutable","name":"set","nameLocation":"4286:3:22","nodeType":"VariableDeclaration","scope":4749,"src":"4274:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4733,"nodeType":"UserDefinedTypeName","pathNode":{"id":4732,"name":"Set","nameLocations":["4274:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"4274:3:22"},"referencedDeclaration":4604,"src":"4274:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4736,"mutability":"mutable","name":"value","nameLocation":"4299:5:22","nodeType":"VariableDeclaration","scope":4749,"src":"4291:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4291:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4273:32:22"},"returnParameters":{"id":4740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4749,"src":"4328:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4738,"name":"bool","nodeType":"ElementaryTypeName","src":"4328:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4327:6:22"},"scope":5206,"src":"4255:127:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4762,"nodeType":"Block","src":"4528:42:22","statements":[{"expression":{"expression":{"expression":{"id":4758,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4753,"src":"4545:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4549:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"4545:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4557:6:22","memberName":"length","nodeType":"MemberAccess","src":"4545:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4757,"id":4761,"nodeType":"Return","src":"4538:25:22"}]},"documentation":{"id":4750,"nodeType":"StructuredDocumentation","src":"4388:70:22","text":" @dev Returns the number of values on the set. O(1)."},"id":4763,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4472:7:22","nodeType":"FunctionDefinition","parameters":{"id":4754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4753,"mutability":"mutable","name":"set","nameLocation":"4492:3:22","nodeType":"VariableDeclaration","scope":4763,"src":"4480:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4752,"nodeType":"UserDefinedTypeName","pathNode":{"id":4751,"name":"Set","nameLocations":["4480:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"4480:3:22"},"referencedDeclaration":4604,"src":"4480:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4479:17:22"},"returnParameters":{"id":4757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4763,"src":"4519:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4755,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:9:22"},"scope":5206,"src":"4463:107:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4779,"nodeType":"Block","src":"4988:42:22","statements":[{"expression":{"baseExpression":{"expression":{"id":4774,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4767,"src":"5005:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5009:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"5005:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4777,"indexExpression":{"id":4776,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"5017:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5005:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4773,"id":4778,"nodeType":"Return","src":"4998:25:22"}]},"documentation":{"id":4764,"nodeType":"StructuredDocumentation","src":"4576:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4780,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4921:3:22","nodeType":"FunctionDefinition","parameters":{"id":4770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4767,"mutability":"mutable","name":"set","nameLocation":"4937:3:22","nodeType":"VariableDeclaration","scope":4780,"src":"4925:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4766,"nodeType":"UserDefinedTypeName","pathNode":{"id":4765,"name":"Set","nameLocations":["4925:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"4925:3:22"},"referencedDeclaration":4604,"src":"4925:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":4769,"mutability":"mutable","name":"index","nameLocation":"4950:5:22","nodeType":"VariableDeclaration","scope":4780,"src":"4942:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4768,"name":"uint256","nodeType":"ElementaryTypeName","src":"4942:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:32:22"},"returnParameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4780,"src":"4979:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4771,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4979:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4978:9:22"},"scope":5206,"src":"4912:118:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4793,"nodeType":"Block","src":"5644:35:22","statements":[{"expression":{"expression":{"id":4790,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"5661:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":4791,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5665:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4599,"src":"5661:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":4789,"id":4792,"nodeType":"Return","src":"5654:18:22"}]},"documentation":{"id":4781,"nodeType":"StructuredDocumentation","src":"5036:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4794,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5579:7:22","nodeType":"FunctionDefinition","parameters":{"id":4785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"mutability":"mutable","name":"set","nameLocation":"5599:3:22","nodeType":"VariableDeclaration","scope":4794,"src":"5587:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4783,"nodeType":"UserDefinedTypeName","pathNode":{"id":4782,"name":"Set","nameLocations":["5587:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"5587:3:22"},"referencedDeclaration":4604,"src":"5587:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5586:17:22"},"returnParameters":{"id":4789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4794,"src":"5626:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4786,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5626:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4787,"nodeType":"ArrayTypeName","src":"5626:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5625:18:22"},"scope":5206,"src":"5570:109:22","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":4798,"members":[{"constant":false,"id":4797,"mutability":"mutable","name":"_inner","nameLocation":"5736:6:22","nodeType":"VariableDeclaration","scope":4798,"src":"5732:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4796,"nodeType":"UserDefinedTypeName","pathNode":{"id":4795,"name":"Set","nameLocations":["5732:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"5732:3:22"},"referencedDeclaration":4604,"src":"5732:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5711:10:22","nodeType":"StructDefinition","scope":5206,"src":"5704:45:22","visibility":"public"},{"body":{"id":4815,"nodeType":"Block","src":"5995:47:22","statements":[{"expression":{"arguments":[{"expression":{"id":4810,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"6017:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"6017:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"6029:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4809,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4646,"src":"6012:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6012:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4808,"id":4814,"nodeType":"Return","src":"6005:30:22"}]},"documentation":{"id":4799,"nodeType":"StructuredDocumentation","src":"5755:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4816,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5928:3:22","nodeType":"FunctionDefinition","parameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4802,"mutability":"mutable","name":"set","nameLocation":"5951:3:22","nodeType":"VariableDeclaration","scope":4816,"src":"5932:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4801,"nodeType":"UserDefinedTypeName","pathNode":{"id":4800,"name":"Bytes32Set","nameLocations":["5932:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"5932:10:22"},"referencedDeclaration":4798,"src":"5932:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4804,"mutability":"mutable","name":"value","nameLocation":"5964:5:22","nodeType":"VariableDeclaration","scope":4816,"src":"5956:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5956:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5931:39:22"},"returnParameters":{"id":4808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4816,"src":"5989:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4806,"name":"bool","nodeType":"ElementaryTypeName","src":"5989:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5988:6:22"},"scope":5206,"src":"5919:123:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4833,"nodeType":"Block","src":"6289:50:22","statements":[{"expression":{"arguments":[{"expression":{"id":4828,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"6314:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6318:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"6314:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"6326:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4827,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"6306:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6306:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4826,"id":4832,"nodeType":"Return","src":"6299:33:22"}]},"documentation":{"id":4817,"nodeType":"StructuredDocumentation","src":"6048:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4834,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6219:6:22","nodeType":"FunctionDefinition","parameters":{"id":4823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4820,"mutability":"mutable","name":"set","nameLocation":"6245:3:22","nodeType":"VariableDeclaration","scope":4834,"src":"6226:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4819,"nodeType":"UserDefinedTypeName","pathNode":{"id":4818,"name":"Bytes32Set","nameLocations":["6226:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"6226:10:22"},"referencedDeclaration":4798,"src":"6226:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4822,"mutability":"mutable","name":"value","nameLocation":"6258:5:22","nodeType":"VariableDeclaration","scope":4834,"src":"6250:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6225:39:22"},"returnParameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4834,"src":"6283:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4824,"name":"bool","nodeType":"ElementaryTypeName","src":"6283:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6282:6:22"},"scope":5206,"src":"6210:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4851,"nodeType":"Block","src":"6506:52:22","statements":[{"expression":{"arguments":[{"expression":{"id":4846,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4838,"src":"6533:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6537:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"6533:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"6545:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4845,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"6523:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6523:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4844,"id":4850,"nodeType":"Return","src":"6516:35:22"}]},"documentation":{"id":4835,"nodeType":"StructuredDocumentation","src":"6345:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":4852,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6429:8:22","nodeType":"FunctionDefinition","parameters":{"id":4841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4838,"mutability":"mutable","name":"set","nameLocation":"6457:3:22","nodeType":"VariableDeclaration","scope":4852,"src":"6438:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4837,"nodeType":"UserDefinedTypeName","pathNode":{"id":4836,"name":"Bytes32Set","nameLocations":["6438:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"6438:10:22"},"referencedDeclaration":4798,"src":"6438:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4840,"mutability":"mutable","name":"value","nameLocation":"6470:5:22","nodeType":"VariableDeclaration","scope":4852,"src":"6462:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4839,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6437:39:22"},"returnParameters":{"id":4844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4852,"src":"6500:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4842,"name":"bool","nodeType":"ElementaryTypeName","src":"6500:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6499:6:22"},"scope":5206,"src":"6420:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4866,"nodeType":"Block","src":"6711:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":4862,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4856,"src":"6736:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4863,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"6736:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4861,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"6728:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6728:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4860,"id":4865,"nodeType":"Return","src":"6721:26:22"}]},"documentation":{"id":4853,"nodeType":"StructuredDocumentation","src":"6564:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":4867,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6648:6:22","nodeType":"FunctionDefinition","parameters":{"id":4857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4856,"mutability":"mutable","name":"set","nameLocation":"6674:3:22","nodeType":"VariableDeclaration","scope":4867,"src":"6655:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4855,"nodeType":"UserDefinedTypeName","pathNode":{"id":4854,"name":"Bytes32Set","nameLocations":["6655:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"6655:10:22"},"referencedDeclaration":4798,"src":"6655:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6654:24:22"},"returnParameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4867,"src":"6702:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4858,"name":"uint256","nodeType":"ElementaryTypeName","src":"6702:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6701:9:22"},"scope":5206,"src":"6639:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4884,"nodeType":"Block","src":"7179:46:22","statements":[{"expression":{"arguments":[{"expression":{"id":4879,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"7200:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7204:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"7200:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":4881,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"7212:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4878,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"7196:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4877,"id":4883,"nodeType":"Return","src":"7189:29:22"}]},"documentation":{"id":4868,"nodeType":"StructuredDocumentation","src":"6760:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4885,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7105:2:22","nodeType":"FunctionDefinition","parameters":{"id":4874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4871,"mutability":"mutable","name":"set","nameLocation":"7127:3:22","nodeType":"VariableDeclaration","scope":4885,"src":"7108:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4870,"nodeType":"UserDefinedTypeName","pathNode":{"id":4869,"name":"Bytes32Set","nameLocations":["7108:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"7108:10:22"},"referencedDeclaration":4798,"src":"7108:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4873,"mutability":"mutable","name":"index","nameLocation":"7140:5:22","nodeType":"VariableDeclaration","scope":4885,"src":"7132:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4872,"name":"uint256","nodeType":"ElementaryTypeName","src":"7132:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:39:22"},"returnParameters":{"id":4877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4885,"src":"7170:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7170:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7169:9:22"},"scope":5206,"src":"7096:129:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4914,"nodeType":"Block","src":"7846:219:22","statements":[{"assignments":[4899],"declarations":[{"constant":false,"id":4899,"mutability":"mutable","name":"store","nameLocation":"7873:5:22","nodeType":"VariableDeclaration","scope":4914,"src":"7856:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7856:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4898,"nodeType":"ArrayTypeName","src":"7856:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4904,"initialValue":{"arguments":[{"expression":{"id":4901,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"7889:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":4902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7893:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4797,"src":"7889:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":4900,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"7881:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7881:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7856:44:22"},{"assignments":[4909],"declarations":[{"constant":false,"id":4909,"mutability":"mutable","name":"result","nameLocation":"7927:6:22","nodeType":"VariableDeclaration","scope":4914,"src":"7910:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7910:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4908,"nodeType":"ArrayTypeName","src":"7910:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4910,"nodeType":"VariableDeclarationStatement","src":"7910:23:22"},{"AST":{"nativeSrc":"7996:39:22","nodeType":"YulBlock","src":"7996:39:22","statements":[{"nativeSrc":"8010:15:22","nodeType":"YulAssignment","src":"8010:15:22","value":{"name":"store","nativeSrc":"8020:5:22","nodeType":"YulIdentifier","src":"8020:5:22"},"variableNames":[{"name":"result","nativeSrc":"8010:6:22","nodeType":"YulIdentifier","src":"8010:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4909,"isOffset":false,"isSlot":false,"src":"8010:6:22","valueSize":1},{"declaration":4899,"isOffset":false,"isSlot":false,"src":"8020:5:22","valueSize":1}],"id":4911,"nodeType":"InlineAssembly","src":"7987:48:22"},{"expression":{"id":4912,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"8052:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4894,"id":4913,"nodeType":"Return","src":"8045:13:22"}]},"documentation":{"id":4886,"nodeType":"StructuredDocumentation","src":"7231:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4915,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7774:6:22","nodeType":"FunctionDefinition","parameters":{"id":4890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4889,"mutability":"mutable","name":"set","nameLocation":"7800:3:22","nodeType":"VariableDeclaration","scope":4915,"src":"7781:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":4888,"nodeType":"UserDefinedTypeName","pathNode":{"id":4887,"name":"Bytes32Set","nameLocations":["7781:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4798,"src":"7781:10:22"},"referencedDeclaration":4798,"src":"7781:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4798_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7780:24:22"},"returnParameters":{"id":4894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4915,"src":"7828:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7828:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4892,"nodeType":"ArrayTypeName","src":"7828:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7827:18:22"},"scope":5206,"src":"7765:300:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":4919,"members":[{"constant":false,"id":4918,"mutability":"mutable","name":"_inner","nameLocation":"8122:6:22","nodeType":"VariableDeclaration","scope":4919,"src":"8118:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":4917,"nodeType":"UserDefinedTypeName","pathNode":{"id":4916,"name":"Set","nameLocations":["8118:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"8118:3:22"},"referencedDeclaration":4604,"src":"8118:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8097:10:22","nodeType":"StructDefinition","scope":5206,"src":"8090:45:22","visibility":"public"},{"body":{"id":4945,"nodeType":"Block","src":"8381:74:22","statements":[{"expression":{"arguments":[{"expression":{"id":4931,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"8403:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4932,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8407:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"8403:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"8439:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8431:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4937,"name":"uint160","nodeType":"ElementaryTypeName","src":"8431:7:22","typeDescriptions":{}}},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8431:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8423:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4935,"name":"uint256","nodeType":"ElementaryTypeName","src":"8423:7:22","typeDescriptions":{}}},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8423:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8415:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4933,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8415:7:22","typeDescriptions":{}}},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4930,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4646,"src":"8398:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8398:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4929,"id":4944,"nodeType":"Return","src":"8391:57:22"}]},"documentation":{"id":4920,"nodeType":"StructuredDocumentation","src":"8141:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4946,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8314:3:22","nodeType":"FunctionDefinition","parameters":{"id":4926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4923,"mutability":"mutable","name":"set","nameLocation":"8337:3:22","nodeType":"VariableDeclaration","scope":4946,"src":"8318:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4922,"nodeType":"UserDefinedTypeName","pathNode":{"id":4921,"name":"AddressSet","nameLocations":["8318:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"8318:10:22"},"referencedDeclaration":4919,"src":"8318:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4925,"mutability":"mutable","name":"value","nameLocation":"8350:5:22","nodeType":"VariableDeclaration","scope":4946,"src":"8342:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4924,"name":"address","nodeType":"ElementaryTypeName","src":"8342:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8317:39:22"},"returnParameters":{"id":4929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4946,"src":"8375:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4927,"name":"bool","nodeType":"ElementaryTypeName","src":"8375:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8374:6:22"},"scope":5206,"src":"8305:150:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4972,"nodeType":"Block","src":"8702:77:22","statements":[{"expression":{"arguments":[{"expression":{"id":4958,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"8727:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8731:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"8727:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"8763:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8755:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4964,"name":"uint160","nodeType":"ElementaryTypeName","src":"8755:7:22","typeDescriptions":{}}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8755:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8747:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4962,"name":"uint256","nodeType":"ElementaryTypeName","src":"8747:7:22","typeDescriptions":{}}},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8747:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8739:7:22","typeDescriptions":{}}},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4957,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"8719:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":4970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8719:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4956,"id":4971,"nodeType":"Return","src":"8712:60:22"}]},"documentation":{"id":4947,"nodeType":"StructuredDocumentation","src":"8461:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4973,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8632:6:22","nodeType":"FunctionDefinition","parameters":{"id":4953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4950,"mutability":"mutable","name":"set","nameLocation":"8658:3:22","nodeType":"VariableDeclaration","scope":4973,"src":"8639:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4949,"nodeType":"UserDefinedTypeName","pathNode":{"id":4948,"name":"AddressSet","nameLocations":["8639:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"8639:10:22"},"referencedDeclaration":4919,"src":"8639:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4952,"mutability":"mutable","name":"value","nameLocation":"8671:5:22","nodeType":"VariableDeclaration","scope":4973,"src":"8663:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4951,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8638:39:22"},"returnParameters":{"id":4956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4973,"src":"8696:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4954,"name":"bool","nodeType":"ElementaryTypeName","src":"8696:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8695:6:22"},"scope":5206,"src":"8623:156:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4999,"nodeType":"Block","src":"8946:79:22","statements":[{"expression":{"arguments":[{"expression":{"id":4985,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"8973:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":4986,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8977:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"8973:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4993,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4979,"src":"9009:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9001:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4991,"name":"uint160","nodeType":"ElementaryTypeName","src":"9001:7:22","typeDescriptions":{}}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9001:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8993:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4989,"name":"uint256","nodeType":"ElementaryTypeName","src":"8993:7:22","typeDescriptions":{}}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8993:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8985:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4987,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8985:7:22","typeDescriptions":{}}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8985:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4984,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"8963:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8963:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4983,"id":4998,"nodeType":"Return","src":"8956:62:22"}]},"documentation":{"id":4974,"nodeType":"StructuredDocumentation","src":"8785:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5000,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8869:8:22","nodeType":"FunctionDefinition","parameters":{"id":4980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4977,"mutability":"mutable","name":"set","nameLocation":"8897:3:22","nodeType":"VariableDeclaration","scope":5000,"src":"8878:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":4976,"nodeType":"UserDefinedTypeName","pathNode":{"id":4975,"name":"AddressSet","nameLocations":["8878:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"8878:10:22"},"referencedDeclaration":4919,"src":"8878:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4979,"mutability":"mutable","name":"value","nameLocation":"8910:5:22","nodeType":"VariableDeclaration","scope":5000,"src":"8902:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4978,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8877:39:22"},"returnParameters":{"id":4983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5000,"src":"8940:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4981,"name":"bool","nodeType":"ElementaryTypeName","src":"8940:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8939:6:22"},"scope":5206,"src":"8860:165:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5014,"nodeType":"Block","src":"9178:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5010,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"9203:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9207:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"9203:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5009,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"9195:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5008,"id":5013,"nodeType":"Return","src":"9188:26:22"}]},"documentation":{"id":5001,"nodeType":"StructuredDocumentation","src":"9031:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":5015,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9115:6:22","nodeType":"FunctionDefinition","parameters":{"id":5005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5004,"mutability":"mutable","name":"set","nameLocation":"9141:3:22","nodeType":"VariableDeclaration","scope":5015,"src":"9122:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5003,"nodeType":"UserDefinedTypeName","pathNode":{"id":5002,"name":"AddressSet","nameLocations":["9122:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"9122:10:22"},"referencedDeclaration":4919,"src":"9122:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9121:24:22"},"returnParameters":{"id":5008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5015,"src":"9169:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5006,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9168:9:22"},"scope":5206,"src":"9106:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5041,"nodeType":"Block","src":"9646:73:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":5033,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"9691:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"9691:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5035,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"9703:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5032,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"9687:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9687:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9679:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5030,"name":"uint256","nodeType":"ElementaryTypeName","src":"9679:7:22","typeDescriptions":{}}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9679:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9671:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5028,"name":"uint160","nodeType":"ElementaryTypeName","src":"9671:7:22","typeDescriptions":{}}},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9671:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9663:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5026,"name":"address","nodeType":"ElementaryTypeName","src":"9663:7:22","typeDescriptions":{}}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:49:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5025,"id":5040,"nodeType":"Return","src":"9656:56:22"}]},"documentation":{"id":5016,"nodeType":"StructuredDocumentation","src":"9227:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5042,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9572:2:22","nodeType":"FunctionDefinition","parameters":{"id":5022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5019,"mutability":"mutable","name":"set","nameLocation":"9594:3:22","nodeType":"VariableDeclaration","scope":5042,"src":"9575:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5018,"nodeType":"UserDefinedTypeName","pathNode":{"id":5017,"name":"AddressSet","nameLocations":["9575:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"9575:10:22"},"referencedDeclaration":4919,"src":"9575:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":5021,"mutability":"mutable","name":"index","nameLocation":"9607:5:22","nodeType":"VariableDeclaration","scope":5042,"src":"9599:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5020,"name":"uint256","nodeType":"ElementaryTypeName","src":"9599:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9574:39:22"},"returnParameters":{"id":5025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5042,"src":"9637:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5023,"name":"address","nodeType":"ElementaryTypeName","src":"9637:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9636:9:22"},"scope":5206,"src":"9563:156:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5071,"nodeType":"Block","src":"10340:219:22","statements":[{"assignments":[5056],"declarations":[{"constant":false,"id":5056,"mutability":"mutable","name":"store","nameLocation":"10367:5:22","nodeType":"VariableDeclaration","scope":5071,"src":"10350:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10350:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5055,"nodeType":"ArrayTypeName","src":"10350:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5061,"initialValue":{"arguments":[{"expression":{"id":5058,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"10383:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":5059,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10387:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4918,"src":"10383:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5057,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"10375:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10375:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10350:44:22"},{"assignments":[5066],"declarations":[{"constant":false,"id":5066,"mutability":"mutable","name":"result","nameLocation":"10421:6:22","nodeType":"VariableDeclaration","scope":5071,"src":"10404:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5064,"name":"address","nodeType":"ElementaryTypeName","src":"10404:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5065,"nodeType":"ArrayTypeName","src":"10404:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":5067,"nodeType":"VariableDeclarationStatement","src":"10404:23:22"},{"AST":{"nativeSrc":"10490:39:22","nodeType":"YulBlock","src":"10490:39:22","statements":[{"nativeSrc":"10504:15:22","nodeType":"YulAssignment","src":"10504:15:22","value":{"name":"store","nativeSrc":"10514:5:22","nodeType":"YulIdentifier","src":"10514:5:22"},"variableNames":[{"name":"result","nativeSrc":"10504:6:22","nodeType":"YulIdentifier","src":"10504:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5066,"isOffset":false,"isSlot":false,"src":"10504:6:22","valueSize":1},{"declaration":5056,"isOffset":false,"isSlot":false,"src":"10514:5:22","valueSize":1}],"id":5068,"nodeType":"InlineAssembly","src":"10481:48:22"},{"expression":{"id":5069,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"10546:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":5051,"id":5070,"nodeType":"Return","src":"10539:13:22"}]},"documentation":{"id":5043,"nodeType":"StructuredDocumentation","src":"9725:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5072,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10268:6:22","nodeType":"FunctionDefinition","parameters":{"id":5047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5046,"mutability":"mutable","name":"set","nameLocation":"10294:3:22","nodeType":"VariableDeclaration","scope":5072,"src":"10275:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":5045,"nodeType":"UserDefinedTypeName","pathNode":{"id":5044,"name":"AddressSet","nameLocations":["10275:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4919,"src":"10275:10:22"},"referencedDeclaration":4919,"src":"10275:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4919_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10274:24:22"},"returnParameters":{"id":5051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5072,"src":"10322:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5048,"name":"address","nodeType":"ElementaryTypeName","src":"10322:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5049,"nodeType":"ArrayTypeName","src":"10322:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10321:18:22"},"scope":5206,"src":"10259:300:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":5076,"members":[{"constant":false,"id":5075,"mutability":"mutable","name":"_inner","nameLocation":"10610:6:22","nodeType":"VariableDeclaration","scope":5076,"src":"10606:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":5074,"nodeType":"UserDefinedTypeName","pathNode":{"id":5073,"name":"Set","nameLocations":["10606:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"10606:3:22"},"referencedDeclaration":4604,"src":"10606:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10588:7:22","nodeType":"StructDefinition","scope":5206,"src":"10581:42:22","visibility":"public"},{"body":{"id":5096,"nodeType":"Block","src":"10866:56:22","statements":[{"expression":{"arguments":[{"expression":{"id":5088,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"10888:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5089,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10892:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"10888:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"10908:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10900:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5090,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10900:7:22","typeDescriptions":{}}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10900:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5087,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4646,"src":"10883:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10883:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5086,"id":5095,"nodeType":"Return","src":"10876:39:22"}]},"documentation":{"id":5077,"nodeType":"StructuredDocumentation","src":"10629:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":5097,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10802:3:22","nodeType":"FunctionDefinition","parameters":{"id":5083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5080,"mutability":"mutable","name":"set","nameLocation":"10822:3:22","nodeType":"VariableDeclaration","scope":5097,"src":"10806:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5079,"nodeType":"UserDefinedTypeName","pathNode":{"id":5078,"name":"UintSet","nameLocations":["10806:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"10806:7:22"},"referencedDeclaration":5076,"src":"10806:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5082,"mutability":"mutable","name":"value","nameLocation":"10835:5:22","nodeType":"VariableDeclaration","scope":5097,"src":"10827:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5081,"name":"uint256","nodeType":"ElementaryTypeName","src":"10827:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10805:36:22"},"returnParameters":{"id":5086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5097,"src":"10860:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5084,"name":"bool","nodeType":"ElementaryTypeName","src":"10860:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10859:6:22"},"scope":5206,"src":"10793:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5117,"nodeType":"Block","src":"11166:59:22","statements":[{"expression":{"arguments":[{"expression":{"id":5109,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"11191:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11195:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"11191:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"11211:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11203:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:22","typeDescriptions":{}}},"id":5114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5108,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"11183:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11183:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5107,"id":5116,"nodeType":"Return","src":"11176:42:22"}]},"documentation":{"id":5098,"nodeType":"StructuredDocumentation","src":"10928:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":5118,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11099:6:22","nodeType":"FunctionDefinition","parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5101,"mutability":"mutable","name":"set","nameLocation":"11122:3:22","nodeType":"VariableDeclaration","scope":5118,"src":"11106:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5100,"nodeType":"UserDefinedTypeName","pathNode":{"id":5099,"name":"UintSet","nameLocations":["11106:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"11106:7:22"},"referencedDeclaration":5076,"src":"11106:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5103,"mutability":"mutable","name":"value","nameLocation":"11135:5:22","nodeType":"VariableDeclaration","scope":5118,"src":"11127:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5102,"name":"uint256","nodeType":"ElementaryTypeName","src":"11127:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11105:36:22"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5118,"src":"11160:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5105,"name":"bool","nodeType":"ElementaryTypeName","src":"11160:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11159:6:22"},"scope":5206,"src":"11090:135:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5138,"nodeType":"Block","src":"11389:61:22","statements":[{"expression":{"arguments":[{"expression":{"id":5130,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"11416:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11420:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"11416:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":5134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"11436:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11428:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11428:7:22","typeDescriptions":{}}},"id":5135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11428:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5129,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4749,"src":"11406:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11406:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5128,"id":5137,"nodeType":"Return","src":"11399:44:22"}]},"documentation":{"id":5119,"nodeType":"StructuredDocumentation","src":"11231:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":5139,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11315:8:22","nodeType":"FunctionDefinition","parameters":{"id":5125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5122,"mutability":"mutable","name":"set","nameLocation":"11340:3:22","nodeType":"VariableDeclaration","scope":5139,"src":"11324:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5121,"nodeType":"UserDefinedTypeName","pathNode":{"id":5120,"name":"UintSet","nameLocations":["11324:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"11324:7:22"},"referencedDeclaration":5076,"src":"11324:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5124,"mutability":"mutable","name":"value","nameLocation":"11353:5:22","nodeType":"VariableDeclaration","scope":5139,"src":"11345:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5123,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11323:36:22"},"returnParameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5139,"src":"11383:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5126,"name":"bool","nodeType":"ElementaryTypeName","src":"11383:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11382:6:22"},"scope":5206,"src":"11306:144:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5153,"nodeType":"Block","src":"11600:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":5149,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"11625:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11629:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"11625:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5148,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"11617:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11617:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5147,"id":5152,"nodeType":"Return","src":"11610:26:22"}]},"documentation":{"id":5140,"nodeType":"StructuredDocumentation","src":"11456:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":5154,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11540:6:22","nodeType":"FunctionDefinition","parameters":{"id":5144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5143,"mutability":"mutable","name":"set","nameLocation":"11563:3:22","nodeType":"VariableDeclaration","scope":5154,"src":"11547:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5142,"nodeType":"UserDefinedTypeName","pathNode":{"id":5141,"name":"UintSet","nameLocations":["11547:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"11547:7:22"},"referencedDeclaration":5076,"src":"11547:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11546:21:22"},"returnParameters":{"id":5147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5154,"src":"11591:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5145,"name":"uint256","nodeType":"ElementaryTypeName","src":"11591:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11590:9:22"},"scope":5206,"src":"11531:112:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5174,"nodeType":"Block","src":"12065:55:22","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5168,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"12094:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12098:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"12094:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":5170,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"12106:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5167,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"12090:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":5171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12090:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12082:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5165,"name":"uint256","nodeType":"ElementaryTypeName","src":"12082:7:22","typeDescriptions":{}}},"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12082:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5164,"id":5173,"nodeType":"Return","src":"12075:38:22"}]},"documentation":{"id":5155,"nodeType":"StructuredDocumentation","src":"11649:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":5175,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11994:2:22","nodeType":"FunctionDefinition","parameters":{"id":5161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5158,"mutability":"mutable","name":"set","nameLocation":"12013:3:22","nodeType":"VariableDeclaration","scope":5175,"src":"11997:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5157,"nodeType":"UserDefinedTypeName","pathNode":{"id":5156,"name":"UintSet","nameLocations":["11997:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"11997:7:22"},"referencedDeclaration":5076,"src":"11997:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":5160,"mutability":"mutable","name":"index","nameLocation":"12026:5:22","nodeType":"VariableDeclaration","scope":5175,"src":"12018:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5159,"name":"uint256","nodeType":"ElementaryTypeName","src":"12018:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11996:36:22"},"returnParameters":{"id":5164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5175,"src":"12056:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5162,"name":"uint256","nodeType":"ElementaryTypeName","src":"12056:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12055:9:22"},"scope":5206,"src":"11985:135:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5204,"nodeType":"Block","src":"12738:219:22","statements":[{"assignments":[5189],"declarations":[{"constant":false,"id":5189,"mutability":"mutable","name":"store","nameLocation":"12765:5:22","nodeType":"VariableDeclaration","scope":5204,"src":"12748:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12748:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5188,"nodeType":"ArrayTypeName","src":"12748:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":5194,"initialValue":{"arguments":[{"expression":{"id":5191,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"12781:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":5192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12785:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":5075,"src":"12781:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4604_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":5190,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"12773:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4604_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12773:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12748:44:22"},{"assignments":[5199],"declarations":[{"constant":false,"id":5199,"mutability":"mutable","name":"result","nameLocation":"12819:6:22","nodeType":"VariableDeclaration","scope":5204,"src":"12802:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5197,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5198,"nodeType":"ArrayTypeName","src":"12802:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5200,"nodeType":"VariableDeclarationStatement","src":"12802:23:22"},{"AST":{"nativeSrc":"12888:39:22","nodeType":"YulBlock","src":"12888:39:22","statements":[{"nativeSrc":"12902:15:22","nodeType":"YulAssignment","src":"12902:15:22","value":{"name":"store","nativeSrc":"12912:5:22","nodeType":"YulIdentifier","src":"12912:5:22"},"variableNames":[{"name":"result","nativeSrc":"12902:6:22","nodeType":"YulIdentifier","src":"12902:6:22"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":5199,"isOffset":false,"isSlot":false,"src":"12902:6:22","valueSize":1},{"declaration":5189,"isOffset":false,"isSlot":false,"src":"12912:5:22","valueSize":1}],"id":5201,"nodeType":"InlineAssembly","src":"12879:48:22"},{"expression":{"id":5202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"12944:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5184,"id":5203,"nodeType":"Return","src":"12937:13:22"}]},"documentation":{"id":5176,"nodeType":"StructuredDocumentation","src":"12126:529:22","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":5205,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12669:6:22","nodeType":"FunctionDefinition","parameters":{"id":5180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5179,"mutability":"mutable","name":"set","nameLocation":"12692:3:22","nodeType":"VariableDeclaration","scope":5205,"src":"12676:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":5178,"nodeType":"UserDefinedTypeName","pathNode":{"id":5177,"name":"UintSet","nameLocations":["12676:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":5076,"src":"12676:7:22"},"referencedDeclaration":5076,"src":"12676:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$5076_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12675:21:22"},"returnParameters":{"id":5184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5205,"src":"12720:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5181,"name":"uint256","nodeType":"ElementaryTypeName","src":"12720:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5182,"nodeType":"ArrayTypeName","src":"12720:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12719:18:22"},"scope":5206,"src":"12660:297:22","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5207,"src":"1329:11630:22","usedErrors":[],"usedEvents":[]}],"src":"205:12755:22"},"id":22},"contracts/land/EDULandRewards.sol":{"ast":{"absolutePath":"contracts/land/EDULandRewards.sol","exportedSymbols":{"EDULandRewards":[5516],"Math":[4593],"NodeRewardsBase":[185],"RewardsKYC":[419]},"id":5517,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5208,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"39:23:23"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"@openzeppelin/contracts/utils/math/Math.sol","id":5210,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5517,"sourceUnit":4594,"src":"64:65:23","symbolAliases":[{"foreign":{"id":5209,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"72:4:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol","file":"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol","id":5212,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5517,"sourceUnit":186,"src":"130:95:23","symbolAliases":[{"foreign":{"id":5211,"name":"NodeRewardsBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"138:15:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol","file":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol","id":5214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5517,"sourceUnit":420,"src":"226:85:23","symbolAliases":[{"foreign":{"id":5213,"name":"RewardsKYC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"234:10:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5215,"name":"NodeRewardsBase","nameLocations":["340:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":185,"src":"340:15:23"},"id":5216,"nodeType":"InheritanceSpecifier","src":"340:15:23"},{"baseName":{"id":5217,"name":"RewardsKYC","nameLocations":["357:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":419,"src":"357:10:23"},"id":5218,"nodeType":"InheritanceSpecifier","src":"357:10:23"}],"canonicalName":"EDULandRewards","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5516,"linearizedBaseContracts":[5516,419,909,1796,1808,982,1523,1151,185,248],"name":"EDULandRewards","nameLocation":"322:14:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"e58378bb","id":5223,"mutability":"constant","name":"OWNER_ROLE","nameLocation":"398:10:23","nodeType":"VariableDeclaration","scope":5516,"src":"374:60:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f574e45525f524f4c45","id":5221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"421:12:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""},"value":"OWNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""}],"id":5220,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"411:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"411:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"8ad9c511","id":5228,"mutability":"constant","name":"REWARDS_CONTROLLER_ROLE","nameLocation":"464:23:23","nodeType":"VariableDeclaration","scope":5516,"src":"440:86:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"440:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"524557415244535f434f4e54524f4c4c45525f524f4c45","id":5226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"500:25:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f3","typeString":"literal_string \"REWARDS_CONTROLLER_ROLE\""},"value":"REWARDS_CONTROLLER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f3","typeString":"literal_string \"REWARDS_CONTROLLER_ROLE\""}],"id":5225,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"490:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"490:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"c2a74752","id":5230,"mutability":"immutable","name":"MAX_REWARD_TIME_WINDOW","nameLocation":"557:22:23","nodeType":"VariableDeclaration","scope":5516,"src":"532:47:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5229,"name":"uint256","nodeType":"ElementaryTypeName","src":"532:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"8f10369a","id":5232,"mutability":"mutable","name":"rewardPerSecond","nameLocation":"601:15:23","nodeType":"VariableDeclaration","scope":5516,"src":"586:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5231,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":5233,"nodeType":"StructuredDocumentation","src":"623:42:23","text":"@notice batchNumber => reward per land"},"functionSelector":"6f63b8ab","id":5237,"mutability":"mutable","name":"rewardPerLandOfBatch","nameLocation":"705:20:23","nodeType":"VariableDeclaration","scope":5516,"src":"670:55:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5236,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5234,"name":"uint256","nodeType":"ElementaryTypeName","src":"678:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"670:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5235,"name":"uint256","nodeType":"ElementaryTypeName","src":"689:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":5238,"nodeType":"StructuredDocumentation","src":"731:47:23","text":"@notice batchNumber => tokenId => recipient"},"functionSelector":"0f0479b4","id":5244,"mutability":"mutable","name":"rewardsRecipients","nameLocation":"838:17:23","nodeType":"VariableDeclaration","scope":5516,"src":"783:72:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"},"typeName":{"id":5243,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5239,"name":"uint256","nodeType":"ElementaryTypeName","src":"791:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"783:47:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5242,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5240,"name":"uint256","nodeType":"ElementaryTypeName","src":"810:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"802:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5241,"name":"address","nodeType":"ElementaryTypeName","src":"821:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":5245,"nodeType":"StructuredDocumentation","src":"862:52:23","text":"@notice Emitted when rewardPerSecond is updated."},"eventSelector":"951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e98793","id":5249,"name":"RewardPerSecondUpdated","nameLocation":"925:22:23","nodeType":"EventDefinition","parameters":{"id":5248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5247,"indexed":false,"mutability":"mutable","name":"rewardPerSecond","nameLocation":"956:15:23","nodeType":"VariableDeclaration","scope":5249,"src":"948:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5246,"name":"uint256","nodeType":"ElementaryTypeName","src":"948:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"947:25:23"},"src":"919:54:23"},{"anonymous":false,"documentation":{"id":5250,"nodeType":"StructuredDocumentation","src":"979:44:23","text":"@notice Emitted when batch is finalized."},"eventSelector":"daf33b9129a7a0fda038b5357d925eac65b91567a5f1a3e563a27a13e542d6b7","id":5256,"name":"BatchFinalized","nameLocation":"1034:14:23","nodeType":"EventDefinition","parameters":{"id":5255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5252,"indexed":true,"mutability":"mutable","name":"batchNumber","nameLocation":"1065:11:23","nodeType":"VariableDeclaration","scope":5256,"src":"1049:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5254,"indexed":false,"mutability":"mutable","name":"rewardPerLand","nameLocation":"1086:13:23","nodeType":"VariableDeclaration","scope":5256,"src":"1078:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5253,"name":"uint256","nodeType":"ElementaryTypeName","src":"1078:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1048:52:23"},"src":"1028:73:23"},{"anonymous":false,"documentation":{"id":5257,"nodeType":"StructuredDocumentation","src":"1107:43:23","text":"@notice Emitted when reward is claimed."},"eventSelector":"9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e","id":5267,"name":"Claimed","nameLocation":"1161:7:23","nodeType":"EventDefinition","parameters":{"id":5266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5259,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1185:7:23","nodeType":"VariableDeclaration","scope":5267,"src":"1169:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5258,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5261,"indexed":true,"mutability":"mutable","name":"batchNumber","nameLocation":"1210:11:23","nodeType":"VariableDeclaration","scope":5267,"src":"1194:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5260,"name":"uint256","nodeType":"ElementaryTypeName","src":"1194:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5263,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1239:7:23","nodeType":"VariableDeclaration","scope":5267,"src":"1223:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5265,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1256:6:23","nodeType":"VariableDeclaration","scope":5267,"src":"1248:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1248:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1168:95:23"},"src":"1155:109:23"},{"errorSelector":"5aa9184d","id":5269,"name":"NoRewardToClaim","nameLocation":"1276:15:23","nodeType":"ErrorDefinition","parameters":{"id":5268,"nodeType":"ParameterList","parameters":[],"src":"1291:2:23"},"src":"1270:24:23"},{"body":{"id":5321,"nodeType":"Block","src":"1901:370:23","statements":[{"expression":{"id":5290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5288,"name":"MAX_REWARD_TIME_WINDOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"1911:22:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5289,"name":"maxRewardTimeWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"1936:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1911:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5291,"nodeType":"ExpressionStatement","src":"1911:44:23"},{"expression":{"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5292,"name":"rewardPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5232,"src":"1966:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5293,"name":"rewardPerSecond_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"1984:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1966:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5295,"nodeType":"ExpressionStatement","src":"1966:34:23"},{"eventCall":{"arguments":[{"id":5297,"name":"rewardPerSecond_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5280,"src":"2038:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5296,"name":"RewardPerSecondUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"2015:22:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5299,"nodeType":"EmitStatement","src":"2010:45:23"},{"expression":{"arguments":[{"id":5301,"name":"REWARDS_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"2080:23:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5302,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2105:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5300,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"2066:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2066:50:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5304,"nodeType":"ExpressionStatement","src":"2066:50:23"},{"expression":{"arguments":[{"id":5306,"name":"KYC_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2140:19:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5307,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2161:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5305,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"2126:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":5308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2126:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5309,"nodeType":"ExpressionStatement","src":"2126:46:23"},{"expression":{"arguments":[{"id":5311,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2197:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5312,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2209:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5310,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"2183:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5314,"nodeType":"ExpressionStatement","src":"2183:37:23"},{"expression":{"arguments":[{"id":5316,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2241:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5317,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2253:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2257:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2253:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5315,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"2230:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2230:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5320,"nodeType":"ExpressionStatement","src":"2230:34:23"}]},"documentation":{"id":5270,"nodeType":"StructuredDocumentation","src":"1300:373:23","text":"@notice Constructor\n @dev emits a {RewardPerSecondUpdated} event\n @param maxRewardTimeWindow The maximum reward time window\n @param referee The address of the referee contract\n @param landAddress The address of the land contract\n @param rewardToken The address of the reward token\n @param rewardPerSecond_ The reward per second"},"id":5322,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5283,"name":"referee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"1866:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5284,"name":"landAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"1875:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5285,"name":"rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5278,"src":"1888:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5286,"kind":"baseConstructorSpecifier","modifierName":{"id":5282,"name":"NodeRewardsBase","nameLocations":["1850:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":185,"src":"1850:15:23"},"nodeType":"ModifierInvocation","src":"1850:50:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5272,"mutability":"mutable","name":"maxRewardTimeWindow","nameLocation":"1707:19:23","nodeType":"VariableDeclaration","scope":5322,"src":"1699:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1699:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5274,"mutability":"mutable","name":"referee","nameLocation":"1744:7:23","nodeType":"VariableDeclaration","scope":5322,"src":"1736:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5273,"name":"address","nodeType":"ElementaryTypeName","src":"1736:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5276,"mutability":"mutable","name":"landAddress","nameLocation":"1769:11:23","nodeType":"VariableDeclaration","scope":5322,"src":"1761:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5275,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5278,"mutability":"mutable","name":"rewardToken","nameLocation":"1798:11:23","nodeType":"VariableDeclaration","scope":5322,"src":"1790:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5277,"name":"address","nodeType":"ElementaryTypeName","src":"1790:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5280,"mutability":"mutable","name":"rewardPerSecond_","nameLocation":"1827:16:23","nodeType":"VariableDeclaration","scope":5322,"src":"1819:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1819:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1689:160:23"},"returnParameters":{"id":5287,"nodeType":"ParameterList","parameters":[],"src":"1901:0:23"},"scope":5516,"src":"1678:593:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5339,"nodeType":"Block","src":"2641:110:23","statements":[{"expression":{"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5331,"name":"rewardPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5232,"src":"2651:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5332,"name":"newRewardPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"2669:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2651:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5334,"nodeType":"ExpressionStatement","src":"2651:36:23"},{"eventCall":{"arguments":[{"id":5336,"name":"newRewardPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"2725:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5335,"name":"RewardPerSecondUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5249,"src":"2702:22:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2702:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5338,"nodeType":"EmitStatement","src":"2697:47:23"}]},"documentation":{"id":5323,"nodeType":"StructuredDocumentation","src":"2277:260:23","text":"@notice Sets the max token supply\n @dev Reverts with {AccessControlUnauthorizedAccount} if the sender is not the operator.\n @dev Emits a {RewardPerSecondUpdated} event.\n @param newRewardPerSecond The new new reward per second to be set"},"functionSelector":"66da5815","id":5340,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5328,"name":"REWARDS_CONTROLLER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"2616:23:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5329,"kind":"modifierInvocation","modifierName":{"id":5327,"name":"onlyRole","nameLocations":["2607:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":627,"src":"2607:8:23"},"nodeType":"ModifierInvocation","src":"2607:33:23"}],"name":"setRewardPerSecond","nameLocation":"2551:18:23","nodeType":"FunctionDefinition","parameters":{"id":5326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"newRewardPerSecond","nameLocation":"2578:18:23","nodeType":"VariableDeclaration","scope":5340,"src":"2570:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5324,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:28:23"},"returnParameters":{"id":5330,"nodeType":"ParameterList","parameters":[],"src":"2641:0:23"},"scope":5516,"src":"2542:209:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[163],"body":{"id":5360,"nodeType":"Block","src":"2868:84:23","statements":[{"expression":{"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5349,"name":"rewardsRecipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"2878:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":5352,"indexExpression":{"id":5350,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5343,"src":"2896:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2878:30:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5353,"indexExpression":{"id":5351,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5345,"src":"2909:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2878:39:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5356,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5345,"src":"2937:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5354,"name":"NODE_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"2920:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_INodeKey_$426","typeString":"contract INodeKey"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2929:7:23","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3318,"src":"2920:16:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2920:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2878:67:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5359,"nodeType":"ExpressionStatement","src":"2878:67:23"}]},"documentation":{"id":5341,"nodeType":"StructuredDocumentation","src":"2757:31:23","text":"@inheritdoc NodeRewardsBase"},"id":5361,"implemented":true,"kind":"function","modifiers":[],"name":"_onAttest","nameLocation":"2802:9:23","nodeType":"FunctionDefinition","overrides":{"id":5347,"nodeType":"OverrideSpecifier","overrides":[],"src":"2859:8:23"},"parameters":{"id":5346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5343,"mutability":"mutable","name":"batchNumber","nameLocation":"2820:11:23","nodeType":"VariableDeclaration","scope":5361,"src":"2812:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5342,"name":"uint256","nodeType":"ElementaryTypeName","src":"2812:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5345,"mutability":"mutable","name":"tokenId","nameLocation":"2841:7:23","nodeType":"VariableDeclaration","scope":5361,"src":"2833:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2833:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2811:38:23"},"returnParameters":{"id":5348,"nodeType":"ParameterList","parameters":[],"src":"2868:0:23"},"scope":5516,"src":"2793:159:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[175],"body":{"id":5409,"nodeType":"Block","src":"3245:420:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5374,"name":"nrOfSuccessfulAttestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5370,"src":"3259:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3288:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3259:30:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5408,"nodeType":"IfStatement","src":"3255:404:23","trueBody":{"id":5407,"nodeType":"Block","src":"3291:368:23","statements":[{"assignments":[5378],"declarations":[{"constant":false,"id":5378,"mutability":"mutable","name":"rewardTimeWindow","nameLocation":"3313:16:23","nodeType":"VariableDeclaration","scope":5407,"src":"3305:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5377,"name":"uint256","nodeType":"ElementaryTypeName","src":"3305:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5386,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5381,"name":"l1NodeConfirmedTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"3341:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5382,"name":"prevL1NodeConfirmedTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"3368:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3341:55:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5384,"name":"MAX_REWARD_TIME_WINDOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5230,"src":"3398:22:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5379,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"3332:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4593_$","typeString":"type(library Math)"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3337:3:23","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":3770,"src":"3332:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:89:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3305:116:23"},{"assignments":[5388],"declarations":[{"constant":false,"id":5388,"mutability":"mutable","name":"rewardPerLand","nameLocation":"3443:13:23","nodeType":"VariableDeclaration","scope":5407,"src":"3435:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5387,"name":"uint256","nodeType":"ElementaryTypeName","src":"3435:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5395,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5389,"name":"rewardTimeWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5378,"src":"3460:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5390,"name":"rewardPerSecond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5232,"src":"3479:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3460:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5392,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3459:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5393,"name":"nrOfSuccessfulAttestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5370,"src":"3498:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3459:65:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3435:89:23"},{"expression":{"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5396,"name":"rewardPerLandOfBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"3538:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5398,"indexExpression":{"id":5397,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"3559:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3538:33:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5399,"name":"rewardPerLand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5388,"src":"3574:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3538:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5401,"nodeType":"ExpressionStatement","src":"3538:49:23"},{"eventCall":{"arguments":[{"id":5403,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"3621:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5404,"name":"rewardPerLand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5388,"src":"3634:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5402,"name":"BatchFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"3606:14:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3606:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5406,"nodeType":"EmitStatement","src":"3601:47:23"}]}}]},"documentation":{"id":5362,"nodeType":"StructuredDocumentation","src":"2958:76:23","text":"@inheritdoc NodeRewardsBase\n @dev Emits a {BatchFinalized} event."},"id":5410,"implemented":true,"kind":"function","modifiers":[],"name":"_onFinalize","nameLocation":"3048:11:23","nodeType":"FunctionDefinition","overrides":{"id":5372,"nodeType":"OverrideSpecifier","overrides":[],"src":"3236:8:23"},"parameters":{"id":5371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5364,"mutability":"mutable","name":"batchNumber","nameLocation":"3077:11:23","nodeType":"VariableDeclaration","scope":5410,"src":"3069:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5363,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5366,"mutability":"mutable","name":"l1NodeConfirmedTimestamp","nameLocation":"3106:24:23","nodeType":"VariableDeclaration","scope":5410,"src":"3098:32:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5365,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5368,"mutability":"mutable","name":"prevL1NodeConfirmedTimestamp","nameLocation":"3148:28:23","nodeType":"VariableDeclaration","scope":5410,"src":"3140:36:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5367,"name":"uint256","nodeType":"ElementaryTypeName","src":"3140:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5370,"mutability":"mutable","name":"nrOfSuccessfulAttestations","nameLocation":"3194:26:23","nodeType":"VariableDeclaration","scope":5410,"src":"3186:34:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5369,"name":"uint256","nodeType":"ElementaryTypeName","src":"3186:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3059:167:23"},"returnParameters":{"id":5373,"nodeType":"ParameterList","parameters":[],"src":"3245:0:23"},"scope":5516,"src":"3039:626:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[184],"body":{"id":5501,"nodeType":"Block","src":"3881:745:23","statements":[{"assignments":[5421],"declarations":[{"constant":false,"id":5421,"mutability":"mutable","name":"hasRewards","nameLocation":"3896:10:23","nodeType":"VariableDeclaration","scope":5501,"src":"3891:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5420,"name":"bool","nodeType":"ElementaryTypeName","src":"3891:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5422,"nodeType":"VariableDeclarationStatement","src":"3891:15:23"},{"body":{"id":5492,"nodeType":"Block","src":"3962:582:23","statements":[{"assignments":[5434],"declarations":[{"constant":false,"id":5434,"mutability":"mutable","name":"batchNumber","nameLocation":"3984:11:23","nodeType":"VariableDeclaration","scope":5492,"src":"3976:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5433,"name":"uint256","nodeType":"ElementaryTypeName","src":"3976:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5438,"initialValue":{"baseExpression":{"id":5435,"name":"batchNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"3998:12:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5437,"indexExpression":{"id":5436,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"4011:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3998:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3976:37:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5439,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"4031:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4046:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4031:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5444,"nodeType":"IfStatement","src":"4027:63:23","trueBody":{"id":5443,"nodeType":"Block","src":"4049:41:23","statements":[{"id":5442,"nodeType":"Continue","src":"4067:8:23"}]}},{"assignments":[5446],"declarations":[{"constant":false,"id":5446,"mutability":"mutable","name":"tokenOwner","nameLocation":"4112:10:23","nodeType":"VariableDeclaration","scope":5492,"src":"4104:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5445,"name":"address","nodeType":"ElementaryTypeName","src":"4104:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5452,"initialValue":{"baseExpression":{"baseExpression":{"id":5447,"name":"rewardsRecipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"4125:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":5449,"indexExpression":{"id":5448,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"4143:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4125:30:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5451,"indexExpression":{"id":5450,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"4156:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4125:39:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4104:60:23"},{"expression":{"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4178:46:23","subExpression":{"baseExpression":{"baseExpression":{"id":5453,"name":"rewardsRecipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"4185:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":5455,"indexExpression":{"id":5454,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"4203:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4185:30:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5457,"indexExpression":{"id":5456,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"4216:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4185:39:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5459,"nodeType":"ExpressionStatement","src":"4178:46:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4242:12:23","subExpression":{"id":5460,"name":"kycDisabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"4243:11:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4258:25:23","subExpression":{"arguments":[{"id":5463,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5446,"src":"4272:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5462,"name":"_isKycWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"4259:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4259:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4242:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5469,"nodeType":"IfStatement","src":"4238:88:23","trueBody":{"id":5468,"nodeType":"Block","src":"4285:41:23","statements":[{"id":5467,"nodeType":"Continue","src":"4303:8:23"}]}},{"assignments":[5471],"declarations":[{"constant":false,"id":5471,"mutability":"mutable","name":"amount","nameLocation":"4348:6:23","nodeType":"VariableDeclaration","scope":5492,"src":"4340:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5470,"name":"uint256","nodeType":"ElementaryTypeName","src":"4340:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5475,"initialValue":{"baseExpression":{"id":5472,"name":"rewardPerLandOfBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"4357:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5474,"indexExpression":{"id":5473,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"4378:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4357:33:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4340:50:23"},{"expression":{"arguments":[{"id":5477,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5446,"src":"4415:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5478,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"4427:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5476,"name":"_payReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4404:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"4404:30:23"},{"eventCall":{"arguments":[{"id":5482,"name":"tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5446,"src":"4461:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5483,"name":"batchNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"4473:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5484,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"4486:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5485,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"4495:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5481,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"4453:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4453:49:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5487,"nodeType":"EmitStatement","src":"4448:54:23"},{"expression":{"id":5490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5488,"name":"hasRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"4516:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4529:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4516:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5491,"nodeType":"ExpressionStatement","src":"4516:17:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5426,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"3932:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5427,"name":"batchNumbers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"3936:12:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3949:6:23","memberName":"length","nodeType":"MemberAccess","src":"3936:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3932:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5493,"initializationExpression":{"assignments":[5424],"declarations":[{"constant":false,"id":5424,"mutability":"mutable","name":"i","nameLocation":"3929:1:23","nodeType":"VariableDeclaration","scope":5493,"src":"3921:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5423,"name":"uint256","nodeType":"ElementaryTypeName","src":"3921:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5425,"nodeType":"VariableDeclarationStatement","src":"3921:9:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3957:3:23","subExpression":{"id":5430,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"3957:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5432,"nodeType":"ExpressionStatement","src":"3957:3:23"},"nodeType":"ForStatement","src":"3916:628:23"},{"condition":{"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4558:11:23","subExpression":{"id":5494,"name":"hasRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"4559:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5500,"nodeType":"IfStatement","src":"4554:66:23","trueBody":{"id":5499,"nodeType":"Block","src":"4571:49:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5496,"name":"NoRewardToClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"4592:15:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5498,"nodeType":"RevertStatement","src":"4585:24:23"}]}}]},"documentation":{"id":5411,"nodeType":"StructuredDocumentation","src":"3671:115:23","text":"@inheritdoc NodeRewardsBase\n @dev Reverts if now rewards to claim.\n @dev Emits a {Claimed} event."},"id":5502,"implemented":true,"kind":"function","modifiers":[],"name":"_claimReward","nameLocation":"3800:12:23","nodeType":"FunctionDefinition","overrides":{"id":5418,"nodeType":"OverrideSpecifier","overrides":[],"src":"3872:8:23"},"parameters":{"id":5417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5413,"mutability":"mutable","name":"tokenId","nameLocation":"3821:7:23","nodeType":"VariableDeclaration","scope":5502,"src":"3813:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5412,"name":"uint256","nodeType":"ElementaryTypeName","src":"3813:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5416,"mutability":"mutable","name":"batchNumbers","nameLocation":"3849:12:23","nodeType":"VariableDeclaration","scope":5502,"src":"3830:31:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5414,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5415,"nodeType":"ArrayTypeName","src":"3830:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3812:50:23"},"returnParameters":{"id":5419,"nodeType":"ParameterList","parameters":[],"src":"3881:0:23"},"scope":5516,"src":"3791:835:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5514,"nodeType":"Block","src":"4794:44:23","statements":[{"expression":{"arguments":[{"id":5511,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"4824:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5510,"name":"_isKycWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"4811:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5509,"id":5513,"nodeType":"Return","src":"4804:27:23"}]},"documentation":{"id":5503,"nodeType":"StructuredDocumentation","src":"4632:93:23","text":"@notice Check if the wallet has been KYCed\n @param wallet The wallet to be checked"},"functionSelector":"905eaf1d","id":5515,"implemented":true,"kind":"function","modifiers":[],"name":"isKycWallet","nameLocation":"4739:11:23","nodeType":"FunctionDefinition","parameters":{"id":5506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5505,"mutability":"mutable","name":"wallet","nameLocation":"4759:6:23","nodeType":"VariableDeclaration","scope":5515,"src":"4751:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5504,"name":"address","nodeType":"ElementaryTypeName","src":"4751:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4750:16:23"},"returnParameters":{"id":5509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5515,"src":"4788:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5507,"name":"bool","nodeType":"ElementaryTypeName","src":"4788:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4787:6:23"},"scope":5516,"src":"4730:108:23","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5517,"src":"313:4527:23","usedErrors":[11,192,262,5269],"usedEvents":[266,921,930,939,997,5249,5256,5267]}],"src":"39:4802:23"},"id":23}},"contracts":{"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol":{"NodeRewardsBase":{"abi":[{"inputs":[],"name":"ETHTransferFailed","type":"error"},{"inputs":[],"name":"OnlyReferee","type":"error"},{"inputs":[],"name":"NODE_KEY","outputs":[{"internalType":"contract INodeKey","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFEREE","outputs":[{"internalType":"contract IReferee","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_TOKEN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"},{"internalType":"uint256[]","name":"_batchNumbers","type":"uint256[]"}],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"onAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256[]","name":"_nodeKeyIds","type":"uint256[]"}],"name":"onBatchAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_l1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"uint256","name":"_prevL1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"uint256","name":"_nrOfSuccessfulAttestations","type":"uint256"}],"name":"onFinalize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"claimReward(uint256,uint256[])":{"details":"_batchNumbers can contain 0 (empty items). Make sure to skip over it.","params":{"_batchNumbers":"Batch numbers of successful attestations made by the node key.","_nodeKeyId":"Id of the node key which is claiming the reward."}},"onAttest(uint256,uint256)":{"params":{"_batchNumber":"Batch number of the attestation.","_nodeKeyId":"Id of the node key."}},"onBatchAttest(uint256,uint256[])":{"details":"_nodeKeyIds can contain 0 (empty items). We skip over it here.","params":{"_batchNumber":"Batch number of the attestation.","_nodeKeyIds":"Id of the node keys."}},"onFinalize(uint256,uint256,uint256,uint256)":{"details":"_prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.","params":{"_batchNumber":"Batch number that is being finalized.","_l1NodeConfirmedTimestamp":"Timestamp of which the batch is confirmed on the L1.","_nrOfSuccessfulAttestations":"Number of node keys which have submitted a valid attestation.","_prevL1NodeConfirmedTimestamp":"Timestamp of which the previous batch is confirmed on the L1."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"NODE_KEY()":"a5f957f9","REFEREE()":"95126fe6","REWARD_TOKEN()":"99248ea7","claimReward(uint256,uint256[])":"9b6e0d74","onAttest(uint256,uint256)":"e6ed1180","onBatchAttest(uint256,uint256[])":"b7355fb4","onFinalize(uint256,uint256,uint256,uint256)":"1bcdb77a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyReferee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NODE_KEY\",\"outputs\":[{\"internalType\":\"contract INodeKey\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFEREE\",\"outputs\":[{\"internalType\":\"contract IReferee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchNumbers\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"onAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeKeyIds\",\"type\":\"uint256[]\"}],\"name\":\"onBatchAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevL1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nrOfSuccessfulAttestations\",\"type\":\"uint256\"}],\"name\":\"onFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(uint256,uint256[])\":{\"details\":\"_batchNumbers can contain 0 (empty items). Make sure to skip over it.\",\"params\":{\"_batchNumbers\":\"Batch numbers of successful attestations made by the node key.\",\"_nodeKeyId\":\"Id of the node key which is claiming the reward.\"}},\"onAttest(uint256,uint256)\":{\"params\":{\"_batchNumber\":\"Batch number of the attestation.\",\"_nodeKeyId\":\"Id of the node key.\"}},\"onBatchAttest(uint256,uint256[])\":{\"details\":\"_nodeKeyIds can contain 0 (empty items). We skip over it here.\",\"params\":{\"_batchNumber\":\"Batch number of the attestation.\",\"_nodeKeyIds\":\"Id of the node keys.\"}},\"onFinalize(uint256,uint256,uint256,uint256)\":{\"details\":\"_prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\",\"params\":{\"_batchNumber\":\"Batch number that is being finalized.\",\"_l1NodeConfirmedTimestamp\":\"Timestamp of which the batch is confirmed on the L1.\",\"_nrOfSuccessfulAttestations\":\"Number of node keys which have submitted a valid attestation.\",\"_prevL1NodeConfirmedTimestamp\":\"Timestamp of which the previous batch is confirmed on the L1.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(uint256,uint256[])\":{\"notice\":\"Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\"},\"onAttest(uint256,uint256)\":{\"notice\":\"Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\"},\"onBatchAttest(uint256,uint256[])\":{\"notice\":\"Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\"},\"onFinalize(uint256,uint256,uint256,uint256)\":{\"notice\":\"Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol\":\"NodeRewardsBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {INodeKey} from \\\"./interfaces/INodeKey.sol\\\";\\nimport {IReferee} from \\\"./interfaces/IReferee.sol\\\";\\nimport {RewardsHelper} from \\\"./RewardsHelper.sol\\\";\\n\\nabstract contract NodeRewardsBase is RewardsHelper {\\n    error OnlyReferee();\\n\\n    IReferee public immutable REFEREE;\\n    INodeKey public immutable NODE_KEY;\\n\\n    modifier onlyReferee() {\\n        if (msg.sender != address(REFEREE)) {\\n            revert OnlyReferee();\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        address _referee,\\n        address _nodeKey,\\n        address _rewardToken\\n    ) RewardsHelper(_rewardToken) {\\n        REFEREE = IReferee(_referee);\\n        NODE_KEY = INodeKey(_nodeKey);\\n    }\\n\\n    /**\\n     * @notice Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyId Id of the node key.\\n     */\\n    function onAttest(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) external onlyReferee {\\n        _onAttest(_batchNumber, _nodeKeyId);\\n    }\\n\\n    /**\\n     * @notice Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyIds Id of the node keys.\\n     *\\n     * @dev _nodeKeyIds can contain 0 (empty items). We skip over it here.\\n     */\\n    function onBatchAttest(\\n        uint256 _batchNumber,\\n        uint256[] calldata _nodeKeyIds\\n    ) external onlyReferee {\\n        for (uint256 i; i < _nodeKeyIds.length; i++) {\\n            if (_nodeKeyIds[i] == 0) continue;\\n            _onAttest(_batchNumber, _nodeKeyIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number that is being finalized.\\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\\n     *\\n     * @dev _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\\n     */\\n    function onFinalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        uint256 _prevL1NodeConfirmedTimestamp,\\n        uint256 _nrOfSuccessfulAttestations\\n    ) external onlyReferee {\\n        _onFinalize(\\n            _batchNumber,\\n            _l1NodeConfirmedTimestamp,\\n            _prevL1NodeConfirmedTimestamp,\\n            _nrOfSuccessfulAttestations\\n        );\\n    }\\n\\n    /**\\n     * @notice Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\\n     *\\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\\n     *\\n     * @dev _batchNumbers can contain 0 (empty items). Make sure to skip over it.\\n     */\\n    function claimReward(\\n        uint256 _nodeKeyId,\\n        uint256[] calldata _batchNumbers\\n    ) external onlyReferee {\\n        _claimReward(_nodeKeyId, _batchNumbers);\\n    }\\n\\n    /**\\n     * @dev Override this function if your rewards logic for each\\n     * node key varies depending on other factor.\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyId Id of the node key.\\n     */\\n    function _onAttest(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Override this function if your rewards logic takes into\\n     * account the timestamps of the attestation and number of attestations.\\n     *\\n     * @dev IMPORTANT _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\\n     *\\n     * @param _batchNumber Batch number that is being finalized.\\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\\n     */\\n    function _onFinalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        uint256 _prevL1NodeConfirmedTimestamp,\\n        uint256 _nrOfSuccessfulAttestations\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Override this function to handle the reward payment logic.\\n     *\\n     * @dev IMPORTANT _batchNumbers can contain 0 (empty items). Make sure to skip over it.\\n     *\\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\\n     */\\n    function _claimReward(\\n        uint256 _nodeKeyId,\\n        uint256[] calldata _batchNumbers\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x19c794ce9255d2d0bb5882afa936119990cca8e9915252041a2a523dae97d596\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract RewardsHelper {\\n    error ETHTransferFailed();\\n\\n    address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable REWARD_TOKEN;\\n\\n    constructor(address _rewardToken) {\\n        REWARD_TOKEN = _rewardToken;\\n    }\\n\\n    function _payReward(address _to, uint256 _amount) internal {\\n        if (REWARD_TOKEN == _ETH) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            if (!success) {\\n                revert ETHTransferFailed();\\n            }\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(REWARD_TOKEN), _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8bab95c195bd087efbe580d34c2e48c5eac785c2d85c18e8877f095ff796880\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INodeKey is IERC721 {}\\n\",\"keccak256\":\"0xd4efc98d3f910d0c8e06bc3b25b3e3f66226faeeb2566cafe054d40baedf7489\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {INodeKey} from \\\"./INodeKey.sol\\\";\\n\\ninterface IReferee {\\n    struct BatchInfo {\\n        uint256 prevBatchNumber;\\n        uint256 l1NodeConfirmedTimestamp;\\n        uint256 nrOfSuccessfulAttestations;\\n        bytes32 finalL2StateRoot;\\n    }\\n\\n    event LogAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    );\\n    event LogSetNodeRewards(address _nodeRewards);\\n    event LogSetOracle(address _oracle, bool _isOracle);\\n    event LogFinalized(\\n        uint256 _batchNumber,\\n        bytes32 _finalL2StateRoot,\\n        uint256 _nrOfSuccessfulAttestations\\n    );\\n\\n    error AttestFailed();\\n    error InvalidBatchNumber();\\n    error NodeRewardsNotSet();\\n    error NoRewardsToClaim();\\n    error OnlyOracle();\\n\\n    function NODE_KEY() external view returns (INodeKey _nodeKey);\\n\\n    function ATTEST_PERIOD() external view returns (uint256 _attestPeriod);\\n\\n    function getBatchInfo(\\n        uint256 _batchNumber\\n    ) external view returns (BatchInfo memory);\\n\\n    function getAttestedBatchNumbers(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256[] memory);\\n\\n    function getIndexOfUnclaimedBatch(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256);\\n\\n    function getAttestation(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) external view returns (bytes32);\\n\\n    function attest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    ) external;\\n\\n    function batchAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256[] memory _nodeKeyIds\\n    ) external;\\n\\n    function finalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        bytes32 _finalL2StateRoot\\n    ) external;\\n\\n    function claimReward(uint256 _nodeKeyId, uint256 _batchesCount) external;\\n\\n    function batchClaimReward(\\n        uint256[] memory _nodeKeyIds,\\n        uint256 _batchesCount\\n    ) external;\\n\\n    function getUnattestedNodeKeyIds(\\n        uint256 _batchNumber,\\n        uint256[] memory _nodeKeyIds\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0dacccecd13e314615ff3020e88f5981edab3fd58d6b5e2d434f5182c1b4ac98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"claimReward(uint256,uint256[])":{"notice":"Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}"},"onAttest(uint256,uint256)":{"notice":"Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}"},"onBatchAttest(uint256,uint256[])":{"notice":"Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}"},"onFinalize(uint256,uint256,uint256,uint256)":{"notice":"Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}"}},"version":1}}},"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol":{"RewardsHelper":{"abi":[{"inputs":[],"name":"ETHTransferFailed","type":"error"},{"inputs":[],"name":"REWARD_TOKEN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"REWARD_TOKEN()":"99248ea7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol\":\"RewardsHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract RewardsHelper {\\n    error ETHTransferFailed();\\n\\n    address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable REWARD_TOKEN;\\n\\n    constructor(address _rewardToken) {\\n        REWARD_TOKEN = _rewardToken;\\n    }\\n\\n    function _payReward(address _to, uint256 _amount) internal {\\n        if (REWARD_TOKEN == _ETH) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            if (!success) {\\n                revert ETHTransferFailed();\\n            }\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(REWARD_TOKEN), _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8bab95c195bd087efbe580d34c2e48c5eac785c2d85c18e8877f095ff796880\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol":{"RewardsKYC":{"abi":[{"inputs":[],"name":"OnlyKycWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"_disabled","type":"bool"}],"name":"LogSetKycDisabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"ADMIN_KYC_CONTROLLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"KYC_CONTROLLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_wallets","type":"address[]"}],"name":"addKycWallets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getKycWallets","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"kycDisabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_wallets","type":"address[]"}],"name":"removeKycWallets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_disabled","type":"bool"}],"name":"setKycDisabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ADMIN_KYC_CONTROLLER_ROLE()":"dcd50d2e","DEFAULT_ADMIN_ROLE()":"a217fddf","KYC_CONTROLLER_ROLE()":"86f8a03e","addKycWallets(address[])":"229d683d","getKycWallets()":"e2d18be6","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","kycDisabled()":"5dff0ce9","removeKycWallets(address[])":"7cd727ba","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setKycDisabled(bool)":"cbd73cb2","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyKycWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"LogSetKycDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_KYC_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYC_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"addKycWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKycWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"removeKycWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setKycDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol\":\"RewardsKYC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract RewardsKYC is AccessControlUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error OnlyKycWallet();\\n\\n    event LogSetKycDisabled(bool _disabled);\\n\\n    bytes32 public constant ADMIN_KYC_CONTROLLER_ROLE =\\n        keccak256(\\\"ADMIN_KYC_CONTROLLER_ROLE\\\");\\n    bytes32 public constant KYC_CONTROLLER_ROLE =\\n        keccak256(\\\"KYC_CONTROLLER_ROLE\\\");\\n    bool public kycDisabled;\\n    EnumerableSet.AddressSet internal _kycWallets;\\n\\n    function __RewardsKYC_init(\\n        address _adminKycController\\n    ) internal onlyInitializing {\\n        _setRoleAdmin(KYC_CONTROLLER_ROLE, ADMIN_KYC_CONTROLLER_ROLE);\\n        _grantRole(ADMIN_KYC_CONTROLLER_ROLE, _adminKycController);\\n    }\\n\\n    function setKycDisabled(\\n        bool _disabled\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        kycDisabled = _disabled;\\n\\n        emit LogSetKycDisabled(_disabled);\\n    }\\n\\n    function addKycWallets(\\n        address[] calldata _wallets\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        for (uint256 i; i < _wallets.length; i++) {\\n            _kycWallets.add(_wallets[i]);\\n        }\\n    }\\n\\n    function removeKycWallets(\\n        address[] calldata _wallets\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        for (uint256 i; i < _wallets.length; i++) {\\n            _kycWallets.remove(_wallets[i]);\\n        }\\n    }\\n\\n    function getKycWallets() external view returns (address[] memory) {\\n        return _kycWallets.values();\\n    }\\n\\n    function _isKycWallet(address _wallet) internal view returns (bool) {\\n        return _kycWallets.contains(_wallet);\\n    }\\n\\n    function _onlyKycWallet(address _wallet) internal view {\\n        if (!kycDisabled && !_isKycWallet(_wallet)) {\\n            revert OnlyKycWallet();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x477a94c67c6303aeca8431f47890e7c1534021b44c5000aa5909fa7430f8a703\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1522,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1795,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":613,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)608_storage)"},{"astId":908,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":278,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"kycDisabled","offset":0,"slot":"151","type":"t_bool"},{"astId":281,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_kycWallets","offset":0,"slot":"152","type":"t_struct(AddressSet)4919_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)608_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)608_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4919_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4918,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4604_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)608_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":605,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":607,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)4604_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":4599,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":4603,"contract":"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol:RewardsKYC","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol":{"INodeKey":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol\":\"INodeKey\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INodeKey is IERC721 {}\\n\",\"keccak256\":\"0xd4efc98d3f910d0c8e06bc3b25b3e3f66226faeeb2566cafe054d40baedf7489\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol":{"IReferee":{"abi":[{"inputs":[],"name":"AttestFailed","type":"error"},{"inputs":[],"name":"InvalidBatchNumber","type":"error"},{"inputs":[],"name":"NoRewardsToClaim","type":"error"},{"inputs":[],"name":"NodeRewardsNotSet","type":"error"},{"inputs":[],"name":"OnlyOracle","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_l2StateRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"LogAttest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_finalL2StateRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"_nrOfSuccessfulAttestations","type":"uint256"}],"name":"LogFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_nodeRewards","type":"address"}],"name":"LogSetNodeRewards","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_oracle","type":"address"},{"indexed":false,"internalType":"bool","name":"_isOracle","type":"bool"}],"name":"LogSetOracle","type":"event"},{"inputs":[],"name":"ATTEST_PERIOD","outputs":[{"internalType":"uint256","name":"_attestPeriod","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NODE_KEY","outputs":[{"internalType":"contract INodeKey","name":"_nodeKey","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"bytes32","name":"_l2StateRoot","type":"bytes32"},{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"attest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"bytes32","name":"_l2StateRoot","type":"bytes32"},{"internalType":"uint256[]","name":"_nodeKeyIds","type":"uint256[]"}],"name":"batchAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_nodeKeyIds","type":"uint256[]"},{"internalType":"uint256","name":"_batchesCount","type":"uint256"}],"name":"batchClaimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"},{"internalType":"uint256","name":"_batchesCount","type":"uint256"}],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_l1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"bytes32","name":"_finalL2StateRoot","type":"bytes32"}],"name":"finalize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"getAttestation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"getAttestedBatchNumbers","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"}],"name":"getBatchInfo","outputs":[{"components":[{"internalType":"uint256","name":"prevBatchNumber","type":"uint256"},{"internalType":"uint256","name":"l1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"uint256","name":"nrOfSuccessfulAttestations","type":"uint256"},{"internalType":"bytes32","name":"finalL2StateRoot","type":"bytes32"}],"internalType":"struct IReferee.BatchInfo","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"getIndexOfUnclaimedBatch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256[]","name":"_nodeKeyIds","type":"uint256[]"}],"name":"getUnattestedNodeKeyIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ATTEST_PERIOD()":"95ed640e","NODE_KEY()":"a5f957f9","attest(uint256,bytes32,uint256)":"70508141","batchAttest(uint256,bytes32,uint256[])":"569861a3","batchClaimReward(uint256[],uint256)":"615668e0","claimReward(uint256,uint256)":"86bb8f37","finalize(uint256,uint256,bytes32)":"fde34dc4","getAttestation(uint256,uint256)":"fc711133","getAttestedBatchNumbers(uint256)":"596c9928","getBatchInfo(uint256)":"1a0058f5","getIndexOfUnclaimedBatch(uint256)":"cf440998","getUnattestedNodeKeyIds(uint256,uint256[])":"18fa2fcc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AttestFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NodeRewardsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_l2StateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"LogAttest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_finalL2StateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nrOfSuccessfulAttestations\",\"type\":\"uint256\"}],\"name\":\"LogFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nodeRewards\",\"type\":\"address\"}],\"name\":\"LogSetNodeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isOracle\",\"type\":\"bool\"}],\"name\":\"LogSetOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTEST_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_attestPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_KEY\",\"outputs\":[{\"internalType\":\"contract INodeKey\",\"name\":\"_nodeKey\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_l2StateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_l2StateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeKeyIds\",\"type\":\"uint256[]\"}],\"name\":\"batchAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nodeKeyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchesCount\",\"type\":\"uint256\"}],\"name\":\"batchClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchesCount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_finalL2StateRoot\",\"type\":\"bytes32\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"getAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"getAttestedBatchNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"}],\"name\":\"getBatchInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"prevBatchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nrOfSuccessfulAttestations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"finalL2StateRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IReferee.BatchInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"getIndexOfUnclaimedBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeKeyIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnattestedNodeKeyIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol\":\"IReferee\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INodeKey is IERC721 {}\\n\",\"keccak256\":\"0xd4efc98d3f910d0c8e06bc3b25b3e3f66226faeeb2566cafe054d40baedf7489\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {INodeKey} from \\\"./INodeKey.sol\\\";\\n\\ninterface IReferee {\\n    struct BatchInfo {\\n        uint256 prevBatchNumber;\\n        uint256 l1NodeConfirmedTimestamp;\\n        uint256 nrOfSuccessfulAttestations;\\n        bytes32 finalL2StateRoot;\\n    }\\n\\n    event LogAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    );\\n    event LogSetNodeRewards(address _nodeRewards);\\n    event LogSetOracle(address _oracle, bool _isOracle);\\n    event LogFinalized(\\n        uint256 _batchNumber,\\n        bytes32 _finalL2StateRoot,\\n        uint256 _nrOfSuccessfulAttestations\\n    );\\n\\n    error AttestFailed();\\n    error InvalidBatchNumber();\\n    error NodeRewardsNotSet();\\n    error NoRewardsToClaim();\\n    error OnlyOracle();\\n\\n    function NODE_KEY() external view returns (INodeKey _nodeKey);\\n\\n    function ATTEST_PERIOD() external view returns (uint256 _attestPeriod);\\n\\n    function getBatchInfo(\\n        uint256 _batchNumber\\n    ) external view returns (BatchInfo memory);\\n\\n    function getAttestedBatchNumbers(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256[] memory);\\n\\n    function getIndexOfUnclaimedBatch(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256);\\n\\n    function getAttestation(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) external view returns (bytes32);\\n\\n    function attest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    ) external;\\n\\n    function batchAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256[] memory _nodeKeyIds\\n    ) external;\\n\\n    function finalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        bytes32 _finalL2StateRoot\\n    ) external;\\n\\n    function claimReward(uint256 _nodeKeyId, uint256 _batchesCount) external;\\n\\n    function batchClaimReward(\\n        uint256[] memory _nodeKeyIds,\\n        uint256 _batchesCount\\n    ) external;\\n\\n    function getUnattestedNodeKeyIds(\\n        uint256 _batchNumber,\\n        uint256[] memory _nodeKeyIds\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0dacccecd13e314615ff3020e88f5981edab3fd58d6b5e2d434f5182c1b4ac98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1522,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1795,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":613,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)608_storage)"},{"astId":908,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)608_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)608_storage"},"t_struct(RoleData)608_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":605,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":607,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122064c2af5d1ad0c86ccb59a56b8a2e217eff7a4f37b2cbed41c1dd3a8d7ccd30af64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xC2AF5D1AD0 0xC8 PUSH13 0xCB59A56B8A2E217EFF7A4F37B2 0xCB 0xED COINBASE 0xC1 0xDD GASPRICE DUP14 PUSH29 0xCD30AF64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"194:9180:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122064c2af5d1ad0c86ccb59a56b8a2e217eff7a4f37b2cbed41c1dd3a8d7ccd30af64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xC2AF5D1AD0 0xC8 PUSH13 0xCB59A56B8A2E217EFF7A4F37B2 0xCB 0xED COINBASE 0xC1 0xDD GASPRICE DUP14 PUSH29 0xCD30AF64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"194:9180:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1522,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3d2307a375a146dbf8f7cf747bfcd00c02560f6ba4aed7a5dd8a5b60b7ec3e164736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xD2 ADDRESS PUSH27 0x375A146DBF8F7CF747BFCD00C02560F6BA4AED7A5DD8A5B60B7EC3 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"242:2603:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;242:2603:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3d2307a375a146dbf8f7cf747bfcd00c02560f6ba4aed7a5dd8a5b60b7ec3e164736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xD2 ADDRESS PUSH27 0x375A146DBF8F7CF747BFCD00C02560F6BA4AED7A5DD8A5B60B7EC3 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"242:2603:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1795,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e8fdc300b36aef1b2c085989c57e4836471933702ab4286186bf5be775c2abe464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 REVERT 0xC3 STOP 0xB3 PUSH11 0xEF1B2C085989C57E483647 NOT CALLER PUSH17 0x2AB4286186BF5BE775C2ABE464736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"202:12593:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12593:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e8fdc300b36aef1b2c085989c57e4836471933702ab4286186bf5be775c2abe464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 REVERT 0xC3 STOP 0xB3 PUSH11 0xEF1B2C085989C57E483647 NOT CALLER PUSH17 0x2AB4286186BF5BE775C2ABE464736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"202:12593:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8cab7e817bc605fa8d85391d632cdcf941b77160b0ef6c629402bcd5f38ac4164736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xCA 0xB7 0xE8 OR 0xBC PUSH1 0x5F 0xA8 0xD8 MSTORE8 SWAP2 0xD6 ORIGIN 0xCD 0xCF SWAP5 SHL PUSH24 0x160B0EF6C629402BCD5F38AC4164736F6C63430008160033 ","sourceMap":"215:1058:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1058:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8cab7e817bc605fa8d85391d632cdcf941b77160b0ef6c629402bcd5f38ac4164736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xCA 0xB7 0xE8 OR 0xBC PUSH1 0x5F 0xA8 0xD8 MSTORE8 SWAP2 0xD6 ORIGIN 0xCD 0xCF SWAP5 SHL PUSH24 0x160B0EF6C629402BCD5F38AC4164736F6C63430008160033 ","sourceMap":"215:1058:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cd0ba6907ef97db167a16566a1e9802f382da7e057e429175ea6a78b9a4b4f264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xD0 0xBA PUSH10 0x7EF97DB167A16566A1E SWAP9 MUL RETURN DUP3 0xDA PUSH31 0x57E429175EA6A78B9A4B4F264736F6C634300081600330000000000000000 ","sourceMap":"202:12582:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cd0ba6907ef97db167a16566a1e9802f382da7e057e429175ea6a78b9a4b4f264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xD0 0xBA PUSH10 0x7EF97DB167A16566A1E SWAP9 MUL RETURN DUP3 0xDA PUSH31 0x57E429175EA6A78B9A4B4F264736F6C634300081600330000000000000000 ","sourceMap":"202:12582:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203da9773696c2f46213dbc32b29a8ca47fa94bf0a27595416bfb75ab9ef8469ec64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0xA9 PUSH24 0x3696C2F46213DBC32B29A8CA47FA94BF0A27595416BFB75A 0xB9 0xEF DUP5 PUSH10 0xEC64736F6C6343000816 STOP CALLER ","sourceMap":"1329:11630:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1329:11630:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203da9773696c2f46213dbc32b29a8ca47fa94bf0a27595416bfb75ab9ef8469ec64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0xA9 PUSH24 0x3696C2F46213DBC32B29A8CA47FA94BF0A27595416BFB75A 0xB9 0xEF DUP5 PUSH10 0xEC64736F6C6343000816 STOP CALLER ","sourceMap":"1329:11630:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/land/EDULandRewards.sol":{"EDULandRewards":{"abi":[{"inputs":[{"internalType":"uint256","name":"maxRewardTimeWindow","type":"uint256"},{"internalType":"address","name":"referee","type":"address"},{"internalType":"address","name":"landAddress","type":"address"},{"internalType":"address","name":"rewardToken","type":"address"},{"internalType":"uint256","name":"rewardPerSecond_","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ETHTransferFailed","type":"error"},{"inputs":[],"name":"NoRewardToClaim","type":"error"},{"inputs":[],"name":"OnlyKycWallet","type":"error"},{"inputs":[],"name":"OnlyReferee","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"batchNumber","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardPerLand","type":"uint256"}],"name":"BatchFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"batchNumber","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"_disabled","type":"bool"}],"name":"LogSetKycDisabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPerSecond","type":"uint256"}],"name":"RewardPerSecondUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"ADMIN_KYC_CONTROLLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"KYC_CONTROLLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_REWARD_TIME_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NODE_KEY","outputs":[{"internalType":"contract INodeKey","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFEREE","outputs":[{"internalType":"contract IReferee","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDS_CONTROLLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_TOKEN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_wallets","type":"address[]"}],"name":"addKycWallets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"},{"internalType":"uint256[]","name":"_batchNumbers","type":"uint256[]"}],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getKycWallets","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"isKycWallet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"kycDisabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_nodeKeyId","type":"uint256"}],"name":"onAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256[]","name":"_nodeKeyIds","type":"uint256[]"}],"name":"onBatchAttest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchNumber","type":"uint256"},{"internalType":"uint256","name":"_l1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"uint256","name":"_prevL1NodeConfirmedTimestamp","type":"uint256"},{"internalType":"uint256","name":"_nrOfSuccessfulAttestations","type":"uint256"}],"name":"onFinalize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_wallets","type":"address[]"}],"name":"removeKycWallets","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardPerLandOfBatch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerSecond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardsRecipients","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_disabled","type":"bool"}],"name":"setKycDisabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newRewardPerSecond","type":"uint256"}],"name":"setRewardPerSecond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"claimReward(uint256,uint256[])":{"details":"_batchNumbers can contain 0 (empty items). Make sure to skip over it.","params":{"_batchNumbers":"Batch numbers of successful attestations made by the node key.","_nodeKeyId":"Id of the node key which is claiming the reward."}},"constructor":{"details":"emits a {RewardPerSecondUpdated} event","params":{"landAddress":"The address of the land contract","maxRewardTimeWindow":"The maximum reward time window","referee":"The address of the referee contract","rewardPerSecond_":"The reward per second","rewardToken":"The address of the reward token"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isKycWallet(address)":{"params":{"wallet":"The wallet to be checked"}},"onAttest(uint256,uint256)":{"params":{"_batchNumber":"Batch number of the attestation.","_nodeKeyId":"Id of the node key."}},"onBatchAttest(uint256,uint256[])":{"details":"_nodeKeyIds can contain 0 (empty items). We skip over it here.","params":{"_batchNumber":"Batch number of the attestation.","_nodeKeyIds":"Id of the node keys."}},"onFinalize(uint256,uint256,uint256,uint256)":{"details":"_prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.","params":{"_batchNumber":"Batch number that is being finalized.","_l1NodeConfirmedTimestamp":"Timestamp of which the batch is confirmed on the L1.","_nrOfSuccessfulAttestations":"Number of node keys which have submitted a valid attestation.","_prevL1NodeConfirmedTimestamp":"Timestamp of which the previous batch is confirmed on the L1."}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setRewardPerSecond(uint256)":{"details":"Reverts with {AccessControlUnauthorizedAccount} if the sender is not the operator.Emits a {RewardPerSecondUpdated} event.","params":{"newRewardPerSecond":"The new new reward per second to be set"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_207":{"entryPoint":null,"id":207,"parameterSlots":1,"returnSlots":0},"@_5322":{"entryPoint":null,"id":5322,"parameterSlots":5,"returnSlots":0},"@_62":{"entryPoint":null,"id":62,"parameterSlots":3,"returnSlots":0},"@_grantRole_872":{"entryPoint":397,"id":872,"parameterSlots":2,"returnSlots":0},"@_msgSender_1508":{"entryPoint":null,"id":1508,"parameterSlots":0,"returnSlots":1},"@_setRoleAdmin_840":{"entryPoint":322,"id":840,"parameterSlots":2,"returnSlots":0},"@getRoleAdmin_735":{"entryPoint":null,"id":735,"parameterSlots":1,"returnSlots":1},"@hasRole_668":{"entryPoint":null,"id":668,"parameterSlots":2,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":562,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256_fromMemory":{"entryPoint":591,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:882:24","nodeType":"YulBlock","src":"0:882:24","statements":[{"nativeSrc":"6:3:24","nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nativeSrc":"74:117:24","nodeType":"YulBlock","src":"74:117:24","statements":[{"nativeSrc":"84:22:24","nodeType":"YulAssignment","src":"84:22:24","value":{"arguments":[{"name":"offset","nativeSrc":"99:6:24","nodeType":"YulIdentifier","src":"99:6:24"}],"functionName":{"name":"mload","nativeSrc":"93:5:24","nodeType":"YulIdentifier","src":"93:5:24"},"nativeSrc":"93:13:24","nodeType":"YulFunctionCall","src":"93:13:24"},"variableNames":[{"name":"value","nativeSrc":"84:5:24","nodeType":"YulIdentifier","src":"84:5:24"}]},{"body":{"nativeSrc":"169:16:24","nodeType":"YulBlock","src":"169:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:24","nodeType":"YulLiteral","src":"178:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:24","nodeType":"YulLiteral","src":"181:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:24","nodeType":"YulIdentifier","src":"171:6:24"},"nativeSrc":"171:12:24","nodeType":"YulFunctionCall","src":"171:12:24"},"nativeSrc":"171:12:24","nodeType":"YulExpressionStatement","src":"171:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"128:5:24","nodeType":"YulIdentifier","src":"128:5:24"},{"arguments":[{"name":"value","nativeSrc":"139:5:24","nodeType":"YulIdentifier","src":"139:5:24"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"154:3:24","nodeType":"YulLiteral","src":"154:3:24","type":"","value":"160"},{"kind":"number","nativeSrc":"159:1:24","nodeType":"YulLiteral","src":"159:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"150:3:24","nodeType":"YulIdentifier","src":"150:3:24"},"nativeSrc":"150:11:24","nodeType":"YulFunctionCall","src":"150:11:24"},{"kind":"number","nativeSrc":"163:1:24","nodeType":"YulLiteral","src":"163:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"146:3:24","nodeType":"YulIdentifier","src":"146:3:24"},"nativeSrc":"146:19:24","nodeType":"YulFunctionCall","src":"146:19:24"}],"functionName":{"name":"and","nativeSrc":"135:3:24","nodeType":"YulIdentifier","src":"135:3:24"},"nativeSrc":"135:31:24","nodeType":"YulFunctionCall","src":"135:31:24"}],"functionName":{"name":"eq","nativeSrc":"125:2:24","nodeType":"YulIdentifier","src":"125:2:24"},"nativeSrc":"125:42:24","nodeType":"YulFunctionCall","src":"125:42:24"}],"functionName":{"name":"iszero","nativeSrc":"118:6:24","nodeType":"YulIdentifier","src":"118:6:24"},"nativeSrc":"118:50:24","nodeType":"YulFunctionCall","src":"118:50:24"},"nativeSrc":"115:70:24","nodeType":"YulIf","src":"115:70:24"}]},"name":"abi_decode_address_fromMemory","nativeSrc":"14:177:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"53:6:24","nodeType":"YulTypedName","src":"53:6:24","type":""}],"returnVariables":[{"name":"value","nativeSrc":"64:5:24","nodeType":"YulTypedName","src":"64:5:24","type":""}],"src":"14:177:24"},{"body":{"nativeSrc":"345:353:24","nodeType":"YulBlock","src":"345:353:24","statements":[{"body":{"nativeSrc":"392:16:24","nodeType":"YulBlock","src":"392:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"401:1:24","nodeType":"YulLiteral","src":"401:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"404:1:24","nodeType":"YulLiteral","src":"404:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"394:6:24","nodeType":"YulIdentifier","src":"394:6:24"},"nativeSrc":"394:12:24","nodeType":"YulFunctionCall","src":"394:12:24"},"nativeSrc":"394:12:24","nodeType":"YulExpressionStatement","src":"394:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"366:7:24","nodeType":"YulIdentifier","src":"366:7:24"},{"name":"headStart","nativeSrc":"375:9:24","nodeType":"YulIdentifier","src":"375:9:24"}],"functionName":{"name":"sub","nativeSrc":"362:3:24","nodeType":"YulIdentifier","src":"362:3:24"},"nativeSrc":"362:23:24","nodeType":"YulFunctionCall","src":"362:23:24"},{"kind":"number","nativeSrc":"387:3:24","nodeType":"YulLiteral","src":"387:3:24","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"358:3:24","nodeType":"YulIdentifier","src":"358:3:24"},"nativeSrc":"358:33:24","nodeType":"YulFunctionCall","src":"358:33:24"},"nativeSrc":"355:53:24","nodeType":"YulIf","src":"355:53:24"},{"nativeSrc":"417:26:24","nodeType":"YulAssignment","src":"417:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"433:9:24","nodeType":"YulIdentifier","src":"433:9:24"}],"functionName":{"name":"mload","nativeSrc":"427:5:24","nodeType":"YulIdentifier","src":"427:5:24"},"nativeSrc":"427:16:24","nodeType":"YulFunctionCall","src":"427:16:24"},"variableNames":[{"name":"value0","nativeSrc":"417:6:24","nodeType":"YulIdentifier","src":"417:6:24"}]},{"nativeSrc":"452:59:24","nodeType":"YulAssignment","src":"452:59:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"496:9:24","nodeType":"YulIdentifier","src":"496:9:24"},{"kind":"number","nativeSrc":"507:2:24","nodeType":"YulLiteral","src":"507:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"492:3:24","nodeType":"YulIdentifier","src":"492:3:24"},"nativeSrc":"492:18:24","nodeType":"YulFunctionCall","src":"492:18:24"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"462:29:24","nodeType":"YulIdentifier","src":"462:29:24"},"nativeSrc":"462:49:24","nodeType":"YulFunctionCall","src":"462:49:24"},"variableNames":[{"name":"value1","nativeSrc":"452:6:24","nodeType":"YulIdentifier","src":"452:6:24"}]},{"nativeSrc":"520:59:24","nodeType":"YulAssignment","src":"520:59:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"564:9:24","nodeType":"YulIdentifier","src":"564:9:24"},{"kind":"number","nativeSrc":"575:2:24","nodeType":"YulLiteral","src":"575:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"560:3:24","nodeType":"YulIdentifier","src":"560:3:24"},"nativeSrc":"560:18:24","nodeType":"YulFunctionCall","src":"560:18:24"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"530:29:24","nodeType":"YulIdentifier","src":"530:29:24"},"nativeSrc":"530:49:24","nodeType":"YulFunctionCall","src":"530:49:24"},"variableNames":[{"name":"value2","nativeSrc":"520:6:24","nodeType":"YulIdentifier","src":"520:6:24"}]},{"nativeSrc":"588:59:24","nodeType":"YulAssignment","src":"588:59:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"632:9:24","nodeType":"YulIdentifier","src":"632:9:24"},{"kind":"number","nativeSrc":"643:2:24","nodeType":"YulLiteral","src":"643:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"628:3:24","nodeType":"YulIdentifier","src":"628:3:24"},"nativeSrc":"628:18:24","nodeType":"YulFunctionCall","src":"628:18:24"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"598:29:24","nodeType":"YulIdentifier","src":"598:29:24"},"nativeSrc":"598:49:24","nodeType":"YulFunctionCall","src":"598:49:24"},"variableNames":[{"name":"value3","nativeSrc":"588:6:24","nodeType":"YulIdentifier","src":"588:6:24"}]},{"nativeSrc":"656:36:24","nodeType":"YulAssignment","src":"656:36:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"676:9:24","nodeType":"YulIdentifier","src":"676:9:24"},{"kind":"number","nativeSrc":"687:3:24","nodeType":"YulLiteral","src":"687:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"672:3:24","nodeType":"YulIdentifier","src":"672:3:24"},"nativeSrc":"672:19:24","nodeType":"YulFunctionCall","src":"672:19:24"}],"functionName":{"name":"mload","nativeSrc":"666:5:24","nodeType":"YulIdentifier","src":"666:5:24"},"nativeSrc":"666:26:24","nodeType":"YulFunctionCall","src":"666:26:24"},"variableNames":[{"name":"value4","nativeSrc":"656:6:24","nodeType":"YulIdentifier","src":"656:6:24"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256_fromMemory","nativeSrc":"196:502:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"279:9:24","nodeType":"YulTypedName","src":"279:9:24","type":""},{"name":"dataEnd","nativeSrc":"290:7:24","nodeType":"YulTypedName","src":"290:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"302:6:24","nodeType":"YulTypedName","src":"302:6:24","type":""},{"name":"value1","nativeSrc":"310:6:24","nodeType":"YulTypedName","src":"310:6:24","type":""},{"name":"value2","nativeSrc":"318:6:24","nodeType":"YulTypedName","src":"318:6:24","type":""},{"name":"value3","nativeSrc":"326:6:24","nodeType":"YulTypedName","src":"326:6:24","type":""},{"name":"value4","nativeSrc":"334:6:24","nodeType":"YulTypedName","src":"334:6:24","type":""}],"src":"196:502:24"},{"body":{"nativeSrc":"804:76:24","nodeType":"YulBlock","src":"804:76:24","statements":[{"nativeSrc":"814:26:24","nodeType":"YulAssignment","src":"814:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"826:9:24","nodeType":"YulIdentifier","src":"826:9:24"},{"kind":"number","nativeSrc":"837:2:24","nodeType":"YulLiteral","src":"837:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"822:3:24","nodeType":"YulIdentifier","src":"822:3:24"},"nativeSrc":"822:18:24","nodeType":"YulFunctionCall","src":"822:18:24"},"variableNames":[{"name":"tail","nativeSrc":"814:4:24","nodeType":"YulIdentifier","src":"814:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"856:9:24","nodeType":"YulIdentifier","src":"856:9:24"},{"name":"value0","nativeSrc":"867:6:24","nodeType":"YulIdentifier","src":"867:6:24"}],"functionName":{"name":"mstore","nativeSrc":"849:6:24","nodeType":"YulIdentifier","src":"849:6:24"},"nativeSrc":"849:25:24","nodeType":"YulFunctionCall","src":"849:25:24"},"nativeSrc":"849:25:24","nodeType":"YulExpressionStatement","src":"849:25:24"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"703:177:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"773:9:24","nodeType":"YulTypedName","src":"773:9:24","type":""},{"name":"value0","nativeSrc":"784:6:24","nodeType":"YulTypedName","src":"784:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"795:4:24","nodeType":"YulTypedName","src":"795:4:24","type":""}],"src":"703:177:24"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_addresst_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101006040523480156200001257600080fd5b506040516200241b3803806200241b83398101604081905262000035916200024f565b6001600160a01b0382811660805284811660a052831660c05260e0859052609a8190556040518181527f951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e987939060200160405180910390a1620000c67fff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f3600080516020620023fb83398151915262000142565b620001017f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb1600080516020620023fb83398151915262000142565b6200011c600080516020620023fb8339815191528062000142565b62000137600080516020620023fb833981519152336200018d565b5050505050620002ad565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166200022e5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ed3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200024a57600080fd5b919050565b600080600080600060a086880312156200026857600080fd5b855194506200027a6020870162000232565b93506200028a6040870162000232565b92506200029a6060870162000232565b9150608086015190509295509295909350565b60805160a05160c05160e0516120dc6200031f600039600081816105b50152610c9d01526000818161056101526110e20152600081816104c40152818161077201528181610a2701528181610aa10152610c250152600081816104f801528181611430015261150901526120dc6000f3fe6080604052600436106101c65760003560e01c8063905eaf1d116100f7578063b7355fb411610095578063dcd50d2e11610064578063dcd50d2e14610617578063e2d18be61461064b578063e58378bb1461066d578063e6ed1180146106a157600080fd5b8063b7355fb414610583578063c2a74752146105a3578063cbd73cb2146105d7578063d547741f146105f757600080fd5b806399248ea7116100d157806399248ea7146104e65780639b6e0d741461051a578063a217fddf1461053a578063a5f957f91461054f57600080fd5b8063905eaf1d1461043f57806391d148541461045f57806395126fe6146104b257600080fd5b80635dff0ce9116101645780637cd727ba1161013e5780637cd727ba146103a157806386f8a03e146103c15780638ad9c511146103f55780638f10369a1461042957600080fd5b80635dff0ce91461033a57806366da5815146103545780636f63b8ab1461037457600080fd5b8063229d683d116101a0578063229d683d1461029c578063248a9ca3146102bc5780632f2ff15d146102fa57806336568abe1461031a57600080fd5b806301ffc9a7146101d25780630f0479b4146102075780631bcdb77a1461027a57600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed366004611b74565b6106c1565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b50610255610222366004611bb6565b609c60209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b34801561028657600080fd5b5061029a610295366004611bd8565b61075a565b005b3480156102a857600080fd5b5061029a6102b7366004611c56565b6107db565b3480156102c857600080fd5b506102ec6102d7366004611c98565b60009081526065602052604090206001015490565b6040519081526020016101fe565b34801561030657600080fd5b5061029a610315366004611cd3565b61084b565b34801561032657600080fd5b5061029a610335366004611cd3565b610875565b34801561034657600080fd5b506097546101f29060ff1681565b34801561036057600080fd5b5061029a61036f366004611c98565b61092d565b34801561038057600080fd5b506102ec61038f366004611c98565b609b6020526000908152604090205481565b3480156103ad57600080fd5b5061029a6103bc366004611c56565b610994565b3480156103cd57600080fd5b506102ec7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb181565b34801561040157600080fd5b506102ec7fff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f381565b34801561043557600080fd5b506102ec609a5481565b34801561044b57600080fd5b506101f261045a366004611d03565b610a04565b34801561046b57600080fd5b506101f261047a366004611cd3565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156104be57600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f257600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b34801561052657600080fd5b5061029a610535366004611d20565b610a0f565b34801561054657600080fd5b506102ec600081565b34801561055b57600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b34801561058f57600080fd5b5061029a61059e366004611d20565b610a89565b3480156105af57600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e357600080fd5b5061029a6105f2366004611d7a565b610b4e565b34801561060357600080fd5b5061029a610612366004611cd3565b610bd7565b34801561062357600080fd5b506102ec7f05e9bce9d0ef4f3ddc258eb9c04459fd66d9887e1079e0b19880fc501a3ddd5f81565b34801561065757600080fd5b50610660610bfc565b6040516101fe9190611d97565b34801561067957600080fd5b506102ec7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b3480156106ad57600080fd5b5061029a6106bc366004611bb6565b610c0d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061075457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146107c9576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107d584848484610c86565b50505050565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb161080581610d36565b60005b828110156107d55761084284848381811061082557610825611df1565b905060200201602081019061083a9190611d03565b609890610d43565b50600101610808565b60008281526065602052604090206001015461086681610d36565b6108708383610d6c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6109298282610e60565b5050565b7fff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f361095781610d36565b609a8290556040518281527f951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e98793906020015b60405180910390a15050565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb16109be81610d36565b60005b828110156107d5576109fb8484838181106109de576109de611df1565b90506020020160208101906109f39190611d03565b609890610f1b565b506001016109c1565b600061075482610f3d565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a7e576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610870838383610f4a565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610af8576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156107d557828282818110610b1557610b15611df1565b9050602002013560000315610b4657610b4684848484818110610b3a57610b3a611df1565b905060200201356110b3565b600101610afb565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb1610b7881610d36565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315159081179091556040519081527fd76c99a8f1eb77feac25a1b5d67950ec13adb34b7d857c57e8d2894aaf3f230d90602001610988565b600082815260656020526040902060010154610bf281610d36565b6108708383610e60565b6060610c0860986111bf565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c7c576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61092982826110b3565b80156107d5576000610cc1610c9b8486611e4f565b7f00000000000000000000000000000000000000000000000000000000000000006111cc565b9050600082609a5483610cd49190611e62565b610cde9190611e79565b6000878152609b6020526040908190208290555190915086907fdaf33b9129a7a0fda038b5357d925eac65b91567a5f1a3e563a27a13e542d6b790610d269084815260200190565b60405180910390a2505050505050565b610d4081336111e2565b50565b6000610d658373ffffffffffffffffffffffffffffffffffffffff841661129c565b9392505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661092957600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e023390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561092957600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d658373ffffffffffffffffffffffffffffffffffffffff84166112eb565b60006107546098836113de565b6000805b8281101561107b576000848483818110610f6a57610f6a611df1565b90506020020135905080600003610f815750611073565b6000818152609c60209081526040808320898452909152902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915560975473ffffffffffffffffffffffffffffffffffffffff9091169060ff16158015610ff45750610ff281610f3d565b155b15611000575050611073565b6000828152609b6020526040902054611019828261140d565b87838373ffffffffffffffffffffffffffffffffffffffff167f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e8460405161106391815260200190565b60405180910390a4600194505050505b600101610f4e565b50806107d5576040517f5aa9184d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190611eb4565b6000928352609c60209081526040808520938552929052912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60606000610d658361152f565b60008183106111db5781610d65565b5090919050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610929576112228161158b565b61122d8360206115aa565b60405160200161123e929190611ef5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261091691600401611f76565b60008181526001830160205260408120546112e357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610754565b506000610754565b600081815260018301602052604081205480156113d457600061130f600183611e4f565b855490915060009061132390600190611e4f565b905081811461138857600086600001828154811061134357611343611df1565b906000526020600020015490508087600001848154811061136657611366611df1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061139957611399611fc7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610754565b6000915050610754565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515610d65565b7fffffffffffffffffffffffff11111111111111111111111111111111111111127f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16016115045760008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146114c4576040519150601f19603f3d011682016040523d82523d6000602084013e6114c9565b606091505b5050905080610870576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109297f000000000000000000000000000000000000000000000000000000000000000083836117ed565b60608160000180548060200260200160405190810160405280929190818152602001828054801561157f57602002820191906000526020600020905b81548152602001906001019080831161156b575b50505050509050919050565b606061075473ffffffffffffffffffffffffffffffffffffffff831660145b606060006115b9836002611e62565b6115c4906002611ff6565b67ffffffffffffffff8111156115dc576115dc612009565b6040519080825280601f01601f191660200182016040528015611606576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061163d5761163d611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116a0576116a0611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006116dc846002611e62565b6116e7906001611ff6565b90505b6001811115611784577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061172857611728611df1565b1a60f81b82828151811061173e5761173e611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361177d81612038565b90506116ea565b508315610d65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610916565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610870928692916000916118b8918516908490611965565b90508051600014806118d95750808060200190518101906118d9919061206d565b610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610916565b6060611974848460008561197c565b949350505050565b606082471015611a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610916565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a37919061208a565b60006040518083038185875af1925050503d8060008114611a74576040519150601f19603f3d011682016040523d82523d6000602084013e611a79565b606091505b5091509150611a8a87838387611a95565b979650505050505050565b60608315611b2b578251600003611b245773ffffffffffffffffffffffffffffffffffffffff85163b611b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610916565b5081611974565b6119748383815115611b405781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109169190611f76565b600060208284031215611b8657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d6557600080fd5b60008060408385031215611bc957600080fd5b50508035926020909101359150565b60008060008060808587031215611bee57600080fd5b5050823594602084013594506040840135936060013592509050565b60008083601f840112611c1c57600080fd5b50813567ffffffffffffffff811115611c3457600080fd5b6020830191508360208260051b8501011115611c4f57600080fd5b9250929050565b60008060208385031215611c6957600080fd5b823567ffffffffffffffff811115611c8057600080fd5b611c8c85828601611c0a565b90969095509350505050565b600060208284031215611caa57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d4057600080fd5b60008060408385031215611ce657600080fd5b823591506020830135611cf881611cb1565b809150509250929050565b600060208284031215611d1557600080fd5b8135610d6581611cb1565b600080600060408486031215611d3557600080fd5b83359250602084013567ffffffffffffffff811115611d5357600080fd5b611d5f86828701611c0a565b9497909650939450505050565b8015158114610d4057600080fd5b600060208284031215611d8c57600080fd5b8135610d6581611d6c565b6020808252825182820181905260009190848201906040850190845b81811015611de557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611db3565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561075457610754611e20565b808202811582820484141761075457610754611e20565b600082611eaf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611ec657600080fd5b8151610d6581611cb1565b60005b83811015611eec578181015183820152602001611ed4565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f2d816017850160208801611ed1565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f6a816028840160208801611ed1565b01602801949350505050565b6020815260008251806020840152611f95816040850160208701611ed1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b8082018082111561075457610754611e20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008161204757612047611e20565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561207f57600080fd5b8151610d6581611d6c565b6000825161209c818460208701611ed1565b919091019291505056fea26469706673582212207e3705b2b245fd1c82813a26f50730548c325723b2f46b25a65e9799e9b07efe64736f6c63430008160033b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x241B CODESIZE SUB DUP1 PUSH3 0x241B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x24F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x80 MSTORE DUP5 DUP2 AND PUSH1 0xA0 MSTORE DUP4 AND PUSH1 0xC0 MSTORE PUSH1 0xE0 DUP6 SWAP1 MSTORE PUSH1 0x9A DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x951C6F64EB06EC6A6682072CDA71420984DD55199006684BB820A80FD7E98793 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH3 0xC6 PUSH32 0xFF073D0DCF74639A8D3C1C189AC3A527293F2FBAE27F12ACBFDAABD420F2A5F3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23FB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH3 0x142 JUMP JUMPDEST PUSH3 0x101 PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23FB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH3 0x142 JUMP JUMPDEST PUSH3 0x11C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23FB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 PUSH3 0x142 JUMP JUMPDEST PUSH3 0x137 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23FB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0x18D JUMP JUMPDEST POP POP POP POP POP PUSH3 0x2AD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x22E JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x1ED CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD SWAP5 POP PUSH3 0x27A PUSH1 0x20 DUP8 ADD PUSH3 0x232 JUMP JUMPDEST SWAP4 POP PUSH3 0x28A PUSH1 0x40 DUP8 ADD PUSH3 0x232 JUMP JUMPDEST SWAP3 POP PUSH3 0x29A PUSH1 0x60 DUP8 ADD PUSH3 0x232 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x20DC PUSH3 0x31F PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5B5 ADD MSTORE PUSH2 0xC9D ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x561 ADD MSTORE PUSH2 0x10E2 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x4C4 ADD MSTORE DUP2 DUP2 PUSH2 0x772 ADD MSTORE DUP2 DUP2 PUSH2 0xA27 ADD MSTORE DUP2 DUP2 PUSH2 0xAA1 ADD MSTORE PUSH2 0xC25 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x4F8 ADD MSTORE DUP2 DUP2 PUSH2 0x1430 ADD MSTORE PUSH2 0x1509 ADD MSTORE PUSH2 0x20DC PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x905EAF1D GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xB7355FB4 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDCD50D2E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDCD50D2E EQ PUSH2 0x617 JUMPI DUP1 PUSH4 0xE2D18BE6 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0xE6ED1180 EQ PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7355FB4 EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xC2A74752 EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xCBD73CB2 EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x99248EA7 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x99248EA7 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x9B6E0D74 EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x53A JUMPI DUP1 PUSH4 0xA5F957F9 EQ PUSH2 0x54F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x905EAF1D EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x95126FE6 EQ PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DFF0CE9 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x7CD727BA GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x7CD727BA EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x86F8A03E EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x8AD9C511 EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0x8F10369A EQ PUSH2 0x429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DFF0CE9 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x66DA5815 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6F63B8AB EQ PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x229D683D GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x229D683D EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xF0479B4 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x1BCDB77A EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1CD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1B74 JUMP JUMPDEST PUSH2 0x6C1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB6 JUMP JUMPDEST PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD8 JUMP JUMPDEST PUSH2 0x75A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x7DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x1F2 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x92D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0xFF073D0DCF74639A8D3C1C189AC3A527293F2FBAE27F12ACBFDAABD420F2A5F3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D03 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x47A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x535 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0xA0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x59E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0xA89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x5F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D7A JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x612 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0xBD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x5E9BCE9D0EF4F3DDC258EB9C04459FD66D9887E1079E0B19880FC501A3DDD5F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x660 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x1D97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x6BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB6 JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x754 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D5 DUP5 DUP5 DUP5 DUP5 PUSH2 0xC86 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0x805 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x842 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x825 JUMPI PUSH2 0x825 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x83A SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x98 SWAP1 PUSH2 0xD43 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x808 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x866 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x870 DUP4 DUP4 PUSH2 0xD6C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 DUP3 DUP3 PUSH2 0xE60 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xFF073D0DCF74639A8D3C1C189AC3A527293F2FBAE27F12ACBFDAABD420F2A5F3 PUSH2 0x957 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x9A DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x951C6F64EB06EC6A6682072CDA71420984DD55199006684BB820A80FD7E98793 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0x9BE DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x9FB DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x9DE JUMPI PUSH2 0x9DE PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9F3 SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x98 SWAP1 PUSH2 0xF1B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x754 DUP3 PUSH2 0xF3D JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 DUP4 DUP4 DUP4 PUSH2 0xF4A JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xB15 JUMPI PUSH2 0xB15 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB ISZERO PUSH2 0xB46 JUMPI PUSH2 0xB46 DUP5 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xB3A JUMPI PUSH2 0xB3A PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xAFB JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0xB78 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xD76C99A8F1EB77FEAC25A1B5D67950EC13ADB34B7D857C57E8D2894AAF3F230D SWAP1 PUSH1 0x20 ADD PUSH2 0x988 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xBF2 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x870 DUP4 DUP4 PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC08 PUSH1 0x98 PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xC7C JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 DUP3 DUP3 PUSH2 0x10B3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 PUSH2 0xCC1 PUSH2 0xC9B DUP5 DUP7 PUSH2 0x1E4F JUMP JUMPDEST PUSH32 0x0 PUSH2 0x11CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x9A SLOAD DUP4 PUSH2 0xCD4 SWAP2 SWAP1 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0xCDE SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP DUP7 SWAP1 PUSH32 0xDAF33B9129A7A0FDA038B5357D925EAC65B91567A5F1A3E563A27A13E542D6B7 SWAP1 PUSH2 0xD26 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD40 DUP2 CALLER PUSH2 0x11E2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x129C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x929 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE02 CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x929 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x754 PUSH1 0x98 DUP4 PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xF6A JUMPI PUSH2 0xF6A PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF81 JUMPI POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x97 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xFF4 JUMPI POP PUSH2 0xFF2 DUP2 PUSH2 0xF3D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1000 JUMPI POP POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1019 DUP3 DUP3 PUSH2 0x140D JUMP JUMPDEST DUP8 DUP4 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9CDCF2F7714CCA3508C7F0110B04A90A80A3A8DD0E35DE99689DB74D28C5383E DUP5 PUSH1 0x40 MLOAD PUSH2 0x1063 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP5 POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF4E JUMP JUMPDEST POP DUP1 PUSH2 0x7D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5AA9184D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1162 SWAP2 SWAP1 PUSH2 0x1EB4 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP4 DUP6 MSTORE SWAP3 SWAP1 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH2 0x152F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DB JUMPI DUP2 PUSH2 0xD65 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x929 JUMPI PUSH2 0x1222 DUP2 PUSH2 0x158B JUMP JUMPDEST PUSH2 0x122D DUP4 PUSH1 0x20 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x123E SWAP3 SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x916 SWAP2 PUSH1 0x4 ADD PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x12E3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x754 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x0 PUSH2 0x130F PUSH1 0x1 DUP4 PUSH2 0x1E4F JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1323 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1E4F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1388 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1343 JUMPI PUSH2 0x1343 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1366 JUMPI PUSH2 0x1366 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1399 JUMPI PUSH2 0x1399 PUSH2 0x1FC7 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x754 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xD65 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF1111111111111111111111111111111111111112 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD PUSH2 0x1504 JUMPI PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x870 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB12D13EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 PUSH32 0x0 DUP4 DUP4 PUSH2 0x17ED JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x157F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x156B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x754 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x15B9 DUP4 PUSH1 0x2 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x15C4 SWAP1 PUSH1 0x2 PUSH2 0x1FF6 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15DC JUMPI PUSH2 0x15DC PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x163D JUMPI PUSH2 0x163D PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x16DC DUP5 PUSH1 0x2 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x16E7 SWAP1 PUSH1 0x1 PUSH2 0x1FF6 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1784 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1728 JUMPI PUSH2 0x1728 PUSH2 0x1DF1 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x173E JUMPI PUSH2 0x173E PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x177D DUP2 PUSH2 0x2038 JUMP JUMPDEST SWAP1 POP PUSH2 0x16EA JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x870 SWAP3 DUP7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x18B8 SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x1965 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x18D9 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x18D9 SWAP2 SWAP1 PUSH2 0x206D JUMP JUMPDEST PUSH2 0x870 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1974 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x197C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1A0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x208A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A74 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A79 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A8A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1A95 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B2B JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1B24 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1B24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x916 JUMP JUMPDEST POP DUP2 PUSH2 0x1974 JUMP JUMPDEST PUSH2 0x1974 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1B40 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x916 SWAP2 SWAP1 PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8C DUP6 DUP3 DUP7 ADD PUSH2 0x1C0A JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1CF8 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD65 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D5F DUP7 DUP3 DUP8 ADD PUSH2 0x1C0A JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD65 DUP2 PUSH2 0x1D6C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1DB3 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EAF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD65 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EEC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1ED4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1F2D DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1ED1 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1F6A DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1ED1 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F95 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1ED1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2047 JUMPI PUSH2 0x2047 PUSH2 0x1E20 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x207F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD65 DUP2 PUSH2 0x1D6C JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x209C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1ED1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x3705B2B245FD1C82813A26F50730548C325723B2F46B25A65E9799E9B07EFE PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E ","sourceMap":"313:4527:23:-:0;;;1678:593;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;398:27:1;;;;;687:28:0;;::::1;;::::0;725:29;::::1;;::::0;1911:44:23::1;::::0;;;1966:15:::1;:34:::0;;;2015:40:::1;::::0;849:25:24;;;2015:40:23::1;::::0;837:2:24;822:18;2015:40:23::1;;;;;;;2066:50;490:36;-1:-1:-1::0;;;;;;;;;;;2066:13:23::1;:50::i;:::-;2126:46;622:32:2;-1:-1:-1::0;;;;;;;;;;;2126:13:23::1;:46::i;:::-;2183:37;-1:-1:-1::0;;;;;;;;;;;411:23:23;2183:13:::1;:37::i;:::-;2230:34;-1:-1:-1::0;;;;;;;;;;;2253:10:23::1;2230;:34::i;:::-;1678:593:::0;;;;;313:4527;;7502:247:5;7585:25;4934:12;;;:6;:12;;;;;;:22;;;;7641:34;;;;7690:52;;4934:22;;7641:34;;4934:22;;:12;;7690:52;;7585:25;7690:52;7575:174;7502:247;;:::o;7917:233::-;3415:4;3438:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3438:29:5;;;;;;;;;;;;7995:149;;8038:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8038:29:5;;;;;;;;;:36;;-1:-1:-1;;8038:36:5;8070:4;8038:36;;;8120:12;929:10:9;;850:96;8120:12:5;-1:-1:-1;;;;;8093:40:5;8111:7;-1:-1:-1;;;;;8093:40:5;8105:4;8093:40;;;;;;;;;;7995:149;7917:233;;:::o;14:177:24:-;93:13;;-1:-1:-1;;;;;135:31:24;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:502::-;302:6;310;318;326;334;387:3;375:9;366:7;362:23;358:33;355:53;;;404:1;401;394:12;355:53;433:9;427:16;417:26;;462:49;507:2;496:9;492:18;462:49;:::i;:::-;452:59;;530:49;575:2;564:9;560:18;530:49;:::i;:::-;520:59;;598:49;643:2;632:9;628:18;598:49;:::i;:::-;588:59;;687:3;676:9;672:19;666:26;656:36;;196:502;;;;;;;;:::o;703:177::-;313:4527:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_KYC_CONTROLLER_ROLE_271":{"entryPoint":null,"id":271,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_616":{"entryPoint":null,"id":616,"parameterSlots":0,"returnSlots":0},"@KYC_CONTROLLER_ROLE_276":{"entryPoint":null,"id":276,"parameterSlots":0,"returnSlots":0},"@MAX_REWARD_TIME_WINDOW_5230":{"entryPoint":null,"id":5230,"parameterSlots":0,"returnSlots":0},"@NODE_KEY_17":{"entryPoint":null,"id":17,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_5223":{"entryPoint":null,"id":5223,"parameterSlots":0,"returnSlots":0},"@REFEREE_14":{"entryPoint":null,"id":14,"parameterSlots":0,"returnSlots":0},"@REWARDS_CONTROLLER_ROLE_5228":{"entryPoint":null,"id":5228,"parameterSlots":0,"returnSlots":0},"@REWARD_TOKEN_197":{"entryPoint":null,"id":197,"parameterSlots":0,"returnSlots":0},"@_37":{"entryPoint":null,"id":37,"parameterSlots":0,"returnSlots":0},"@_add_4646":{"entryPoint":4764,"id":4646,"parameterSlots":2,"returnSlots":1},"@_callOptionalReturn_3220":{"entryPoint":null,"id":3220,"parameterSlots":2,"returnSlots":0},"@_checkRole_681":{"entryPoint":3382,"id":681,"parameterSlots":1,"returnSlots":0},"@_checkRole_720":{"entryPoint":4578,"id":720,"parameterSlots":2,"returnSlots":0},"@_claimReward_5502":{"entryPoint":3914,"id":5502,"parameterSlots":3,"returnSlots":0},"@_contains_4749":{"entryPoint":null,"id":4749,"parameterSlots":2,"returnSlots":1},"@_grantRole_872":{"entryPoint":3436,"id":872,"parameterSlots":2,"returnSlots":0},"@_isKycWallet_400":{"entryPoint":3901,"id":400,"parameterSlots":1,"returnSlots":1},"@_msgSender_1508":{"entryPoint":null,"id":1508,"parameterSlots":0,"returnSlots":1},"@_onAttest_5361":{"entryPoint":4275,"id":5361,"parameterSlots":2,"returnSlots":0},"@_onFinalize_5410":{"entryPoint":3206,"id":5410,"parameterSlots":4,"returnSlots":0},"@_payReward_247":{"entryPoint":5133,"id":247,"parameterSlots":2,"returnSlots":0},"@_remove_4730":{"entryPoint":4843,"id":4730,"parameterSlots":2,"returnSlots":1},"@_revert_3714":{"entryPoint":null,"id":3714,"parameterSlots":2,"returnSlots":0},"@_revokeRole_903":{"entryPoint":3680,"id":903,"parameterSlots":2,"returnSlots":0},"@_values_4794":{"entryPoint":5423,"id":4794,"parameterSlots":1,"returnSlots":1},"@addKycWallets_346":{"entryPoint":2011,"id":346,"parameterSlots":2,"returnSlots":0},"@add_4946":{"entryPoint":3395,"id":4946,"parameterSlots":2,"returnSlots":1},"@claimReward_155":{"entryPoint":2575,"id":155,"parameterSlots":3,"returnSlots":0},"@contains_5000":{"entryPoint":5086,"id":5000,"parameterSlots":2,"returnSlots":1},"@functionCallWithValue_3539":{"entryPoint":6524,"id":3539,"parameterSlots":4,"returnSlots":1},"@functionCall_3475":{"entryPoint":6501,"id":3475,"parameterSlots":3,"returnSlots":1},"@getKycWallets_387":{"entryPoint":3068,"id":387,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_735":{"entryPoint":null,"id":735,"parameterSlots":1,"returnSlots":1},"@grantRole_755":{"entryPoint":2123,"id":755,"parameterSlots":2,"returnSlots":0},"@hasRole_668":{"entryPoint":null,"id":668,"parameterSlots":2,"returnSlots":1},"@isContract_3403":{"entryPoint":null,"id":3403,"parameterSlots":1,"returnSlots":1},"@isKycWallet_5515":{"entryPoint":2564,"id":5515,"parameterSlots":1,"returnSlots":1},"@kycDisabled_278":{"entryPoint":null,"id":278,"parameterSlots":0,"returnSlots":0},"@min_3770":{"entryPoint":4556,"id":3770,"parameterSlots":2,"returnSlots":1},"@onAttest_78":{"entryPoint":3085,"id":78,"parameterSlots":2,"returnSlots":0},"@onBatchAttest_116":{"entryPoint":2697,"id":116,"parameterSlots":3,"returnSlots":0},"@onFinalize_138":{"entryPoint":1882,"id":138,"parameterSlots":4,"returnSlots":0},"@removeKycWallets_376":{"entryPoint":2452,"id":376,"parameterSlots":2,"returnSlots":0},"@remove_4973":{"entryPoint":3867,"id":4973,"parameterSlots":2,"returnSlots":1},"@renounceRole_798":{"entryPoint":2165,"id":798,"parameterSlots":2,"returnSlots":0},"@revokeRole_775":{"entryPoint":3031,"id":775,"parameterSlots":2,"returnSlots":0},"@rewardPerLandOfBatch_5237":{"entryPoint":null,"id":5237,"parameterSlots":0,"returnSlots":0},"@rewardPerSecond_5232":{"entryPoint":null,"id":5232,"parameterSlots":0,"returnSlots":0},"@rewardsRecipients_5244":{"entryPoint":null,"id":5244,"parameterSlots":0,"returnSlots":0},"@safeTransfer_2926":{"entryPoint":6125,"id":2926,"parameterSlots":3,"returnSlots":0},"@setKycDisabled_316":{"entryPoint":2894,"id":316,"parameterSlots":1,"returnSlots":0},"@setRewardPerSecond_5340":{"entryPoint":2349,"id":5340,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1790":{"entryPoint":null,"id":1790,"parameterSlots":1,"returnSlots":1},"@supportsInterface_649":{"entryPoint":1729,"id":649,"parameterSlots":1,"returnSlots":1},"@toHexString_1706":{"entryPoint":5546,"id":1706,"parameterSlots":2,"returnSlots":1},"@toHexString_1726":{"entryPoint":5515,"id":1726,"parameterSlots":1,"returnSlots":1},"@values_5072":{"entryPoint":4543,"id":5072,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_3670":{"entryPoint":6805,"id":3670,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":7178,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":7427,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":7860,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":7254,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":7546,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8301,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":7320,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7379,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":7456,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7094,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256":{"entryPoint":7128,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8330,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7925,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7575,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_INodeKey_$426__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IReferee_$573__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8182,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7801,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7778,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7759,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7889,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8248,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7712,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":8135,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7665,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8201,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":7345,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":7532,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12219:24","nodeType":"YulBlock","src":"0:12219:24","statements":[{"nativeSrc":"6:3:24","nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nativeSrc":"83:263:24","nodeType":"YulBlock","src":"83:263:24","statements":[{"body":{"nativeSrc":"129:16:24","nodeType":"YulBlock","src":"129:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:24","nodeType":"YulLiteral","src":"138:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:24","nodeType":"YulLiteral","src":"141:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:24","nodeType":"YulIdentifier","src":"131:6:24"},"nativeSrc":"131:12:24","nodeType":"YulFunctionCall","src":"131:12:24"},"nativeSrc":"131:12:24","nodeType":"YulExpressionStatement","src":"131:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:24","nodeType":"YulIdentifier","src":"104:7:24"},{"name":"headStart","nativeSrc":"113:9:24","nodeType":"YulIdentifier","src":"113:9:24"}],"functionName":{"name":"sub","nativeSrc":"100:3:24","nodeType":"YulIdentifier","src":"100:3:24"},"nativeSrc":"100:23:24","nodeType":"YulFunctionCall","src":"100:23:24"},{"kind":"number","nativeSrc":"125:2:24","nodeType":"YulLiteral","src":"125:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:24","nodeType":"YulIdentifier","src":"96:3:24"},"nativeSrc":"96:32:24","nodeType":"YulFunctionCall","src":"96:32:24"},"nativeSrc":"93:52:24","nodeType":"YulIf","src":"93:52:24"},{"nativeSrc":"154:36:24","nodeType":"YulVariableDeclaration","src":"154:36:24","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:24","nodeType":"YulIdentifier","src":"180:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:24","nodeType":"YulIdentifier","src":"167:12:24"},"nativeSrc":"167:23:24","nodeType":"YulFunctionCall","src":"167:23:24"},"variables":[{"name":"value","nativeSrc":"158:5:24","nodeType":"YulTypedName","src":"158:5:24","type":""}]},{"body":{"nativeSrc":"300:16:24","nodeType":"YulBlock","src":"300:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:24","nodeType":"YulLiteral","src":"309:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:24","nodeType":"YulLiteral","src":"312:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:24","nodeType":"YulIdentifier","src":"302:6:24"},"nativeSrc":"302:12:24","nodeType":"YulFunctionCall","src":"302:12:24"},"nativeSrc":"302:12:24","nodeType":"YulExpressionStatement","src":"302:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:24","nodeType":"YulIdentifier","src":"212:5:24"},{"arguments":[{"name":"value","nativeSrc":"223:5:24","nodeType":"YulIdentifier","src":"223:5:24"},{"kind":"number","nativeSrc":"230:66:24","nodeType":"YulLiteral","src":"230:66:24","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:24","nodeType":"YulIdentifier","src":"219:3:24"},"nativeSrc":"219:78:24","nodeType":"YulFunctionCall","src":"219:78:24"}],"functionName":{"name":"eq","nativeSrc":"209:2:24","nodeType":"YulIdentifier","src":"209:2:24"},"nativeSrc":"209:89:24","nodeType":"YulFunctionCall","src":"209:89:24"}],"functionName":{"name":"iszero","nativeSrc":"202:6:24","nodeType":"YulIdentifier","src":"202:6:24"},"nativeSrc":"202:97:24","nodeType":"YulFunctionCall","src":"202:97:24"},"nativeSrc":"199:117:24","nodeType":"YulIf","src":"199:117:24"},{"nativeSrc":"325:15:24","nodeType":"YulAssignment","src":"325:15:24","value":{"name":"value","nativeSrc":"335:5:24","nodeType":"YulIdentifier","src":"335:5:24"},"variableNames":[{"name":"value0","nativeSrc":"325:6:24","nodeType":"YulIdentifier","src":"325:6:24"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:24","nodeType":"YulTypedName","src":"49:9:24","type":""},{"name":"dataEnd","nativeSrc":"60:7:24","nodeType":"YulTypedName","src":"60:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:24","nodeType":"YulTypedName","src":"72:6:24","type":""}],"src":"14:332:24"},{"body":{"nativeSrc":"446:92:24","nodeType":"YulBlock","src":"446:92:24","statements":[{"nativeSrc":"456:26:24","nodeType":"YulAssignment","src":"456:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:24","nodeType":"YulIdentifier","src":"468:9:24"},{"kind":"number","nativeSrc":"479:2:24","nodeType":"YulLiteral","src":"479:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:24","nodeType":"YulIdentifier","src":"464:3:24"},"nativeSrc":"464:18:24","nodeType":"YulFunctionCall","src":"464:18:24"},"variableNames":[{"name":"tail","nativeSrc":"456:4:24","nodeType":"YulIdentifier","src":"456:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:24","nodeType":"YulIdentifier","src":"498:9:24"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:24","nodeType":"YulIdentifier","src":"523:6:24"}],"functionName":{"name":"iszero","nativeSrc":"516:6:24","nodeType":"YulIdentifier","src":"516:6:24"},"nativeSrc":"516:14:24","nodeType":"YulFunctionCall","src":"516:14:24"}],"functionName":{"name":"iszero","nativeSrc":"509:6:24","nodeType":"YulIdentifier","src":"509:6:24"},"nativeSrc":"509:22:24","nodeType":"YulFunctionCall","src":"509:22:24"}],"functionName":{"name":"mstore","nativeSrc":"491:6:24","nodeType":"YulIdentifier","src":"491:6:24"},"nativeSrc":"491:41:24","nodeType":"YulFunctionCall","src":"491:41:24"},"nativeSrc":"491:41:24","nodeType":"YulExpressionStatement","src":"491:41:24"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:24","nodeType":"YulTypedName","src":"415:9:24","type":""},{"name":"value0","nativeSrc":"426:6:24","nodeType":"YulTypedName","src":"426:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:24","nodeType":"YulTypedName","src":"437:4:24","type":""}],"src":"351:187:24"},{"body":{"nativeSrc":"630:161:24","nodeType":"YulBlock","src":"630:161:24","statements":[{"body":{"nativeSrc":"676:16:24","nodeType":"YulBlock","src":"676:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"685:1:24","nodeType":"YulLiteral","src":"685:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"688:1:24","nodeType":"YulLiteral","src":"688:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"678:6:24","nodeType":"YulIdentifier","src":"678:6:24"},"nativeSrc":"678:12:24","nodeType":"YulFunctionCall","src":"678:12:24"},"nativeSrc":"678:12:24","nodeType":"YulExpressionStatement","src":"678:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"651:7:24","nodeType":"YulIdentifier","src":"651:7:24"},{"name":"headStart","nativeSrc":"660:9:24","nodeType":"YulIdentifier","src":"660:9:24"}],"functionName":{"name":"sub","nativeSrc":"647:3:24","nodeType":"YulIdentifier","src":"647:3:24"},"nativeSrc":"647:23:24","nodeType":"YulFunctionCall","src":"647:23:24"},{"kind":"number","nativeSrc":"672:2:24","nodeType":"YulLiteral","src":"672:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"643:3:24","nodeType":"YulIdentifier","src":"643:3:24"},"nativeSrc":"643:32:24","nodeType":"YulFunctionCall","src":"643:32:24"},"nativeSrc":"640:52:24","nodeType":"YulIf","src":"640:52:24"},{"nativeSrc":"701:33:24","nodeType":"YulAssignment","src":"701:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"724:9:24","nodeType":"YulIdentifier","src":"724:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"711:12:24","nodeType":"YulIdentifier","src":"711:12:24"},"nativeSrc":"711:23:24","nodeType":"YulFunctionCall","src":"711:23:24"},"variableNames":[{"name":"value0","nativeSrc":"701:6:24","nodeType":"YulIdentifier","src":"701:6:24"}]},{"nativeSrc":"743:42:24","nodeType":"YulAssignment","src":"743:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"770:9:24","nodeType":"YulIdentifier","src":"770:9:24"},{"kind":"number","nativeSrc":"781:2:24","nodeType":"YulLiteral","src":"781:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"766:3:24","nodeType":"YulIdentifier","src":"766:3:24"},"nativeSrc":"766:18:24","nodeType":"YulFunctionCall","src":"766:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"753:12:24","nodeType":"YulIdentifier","src":"753:12:24"},"nativeSrc":"753:32:24","nodeType":"YulFunctionCall","src":"753:32:24"},"variableNames":[{"name":"value1","nativeSrc":"743:6:24","nodeType":"YulIdentifier","src":"743:6:24"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"543:248:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"588:9:24","nodeType":"YulTypedName","src":"588:9:24","type":""},{"name":"dataEnd","nativeSrc":"599:7:24","nodeType":"YulTypedName","src":"599:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"611:6:24","nodeType":"YulTypedName","src":"611:6:24","type":""},{"name":"value1","nativeSrc":"619:6:24","nodeType":"YulTypedName","src":"619:6:24","type":""}],"src":"543:248:24"},{"body":{"nativeSrc":"897:125:24","nodeType":"YulBlock","src":"897:125:24","statements":[{"nativeSrc":"907:26:24","nodeType":"YulAssignment","src":"907:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"919:9:24","nodeType":"YulIdentifier","src":"919:9:24"},{"kind":"number","nativeSrc":"930:2:24","nodeType":"YulLiteral","src":"930:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"915:3:24","nodeType":"YulIdentifier","src":"915:3:24"},"nativeSrc":"915:18:24","nodeType":"YulFunctionCall","src":"915:18:24"},"variableNames":[{"name":"tail","nativeSrc":"907:4:24","nodeType":"YulIdentifier","src":"907:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"949:9:24","nodeType":"YulIdentifier","src":"949:9:24"},{"arguments":[{"name":"value0","nativeSrc":"964:6:24","nodeType":"YulIdentifier","src":"964:6:24"},{"kind":"number","nativeSrc":"972:42:24","nodeType":"YulLiteral","src":"972:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"960:3:24","nodeType":"YulIdentifier","src":"960:3:24"},"nativeSrc":"960:55:24","nodeType":"YulFunctionCall","src":"960:55:24"}],"functionName":{"name":"mstore","nativeSrc":"942:6:24","nodeType":"YulIdentifier","src":"942:6:24"},"nativeSrc":"942:74:24","nodeType":"YulFunctionCall","src":"942:74:24"},"nativeSrc":"942:74:24","nodeType":"YulExpressionStatement","src":"942:74:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"796:226:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"866:9:24","nodeType":"YulTypedName","src":"866:9:24","type":""},{"name":"value0","nativeSrc":"877:6:24","nodeType":"YulTypedName","src":"877:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"888:4:24","nodeType":"YulTypedName","src":"888:4:24","type":""}],"src":"796:226:24"},{"body":{"nativeSrc":"1148:264:24","nodeType":"YulBlock","src":"1148:264:24","statements":[{"body":{"nativeSrc":"1195:16:24","nodeType":"YulBlock","src":"1195:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1204:1:24","nodeType":"YulLiteral","src":"1204:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1207:1:24","nodeType":"YulLiteral","src":"1207:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1197:6:24","nodeType":"YulIdentifier","src":"1197:6:24"},"nativeSrc":"1197:12:24","nodeType":"YulFunctionCall","src":"1197:12:24"},"nativeSrc":"1197:12:24","nodeType":"YulExpressionStatement","src":"1197:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1169:7:24","nodeType":"YulIdentifier","src":"1169:7:24"},{"name":"headStart","nativeSrc":"1178:9:24","nodeType":"YulIdentifier","src":"1178:9:24"}],"functionName":{"name":"sub","nativeSrc":"1165:3:24","nodeType":"YulIdentifier","src":"1165:3:24"},"nativeSrc":"1165:23:24","nodeType":"YulFunctionCall","src":"1165:23:24"},{"kind":"number","nativeSrc":"1190:3:24","nodeType":"YulLiteral","src":"1190:3:24","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1161:3:24","nodeType":"YulIdentifier","src":"1161:3:24"},"nativeSrc":"1161:33:24","nodeType":"YulFunctionCall","src":"1161:33:24"},"nativeSrc":"1158:53:24","nodeType":"YulIf","src":"1158:53:24"},{"nativeSrc":"1220:33:24","nodeType":"YulAssignment","src":"1220:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"1243:9:24","nodeType":"YulIdentifier","src":"1243:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"1230:12:24","nodeType":"YulIdentifier","src":"1230:12:24"},"nativeSrc":"1230:23:24","nodeType":"YulFunctionCall","src":"1230:23:24"},"variableNames":[{"name":"value0","nativeSrc":"1220:6:24","nodeType":"YulIdentifier","src":"1220:6:24"}]},{"nativeSrc":"1262:42:24","nodeType":"YulAssignment","src":"1262:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1289:9:24","nodeType":"YulIdentifier","src":"1289:9:24"},{"kind":"number","nativeSrc":"1300:2:24","nodeType":"YulLiteral","src":"1300:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1285:3:24","nodeType":"YulIdentifier","src":"1285:3:24"},"nativeSrc":"1285:18:24","nodeType":"YulFunctionCall","src":"1285:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"1272:12:24","nodeType":"YulIdentifier","src":"1272:12:24"},"nativeSrc":"1272:32:24","nodeType":"YulFunctionCall","src":"1272:32:24"},"variableNames":[{"name":"value1","nativeSrc":"1262:6:24","nodeType":"YulIdentifier","src":"1262:6:24"}]},{"nativeSrc":"1313:42:24","nodeType":"YulAssignment","src":"1313:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1340:9:24","nodeType":"YulIdentifier","src":"1340:9:24"},{"kind":"number","nativeSrc":"1351:2:24","nodeType":"YulLiteral","src":"1351:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1336:3:24","nodeType":"YulIdentifier","src":"1336:3:24"},"nativeSrc":"1336:18:24","nodeType":"YulFunctionCall","src":"1336:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"1323:12:24","nodeType":"YulIdentifier","src":"1323:12:24"},"nativeSrc":"1323:32:24","nodeType":"YulFunctionCall","src":"1323:32:24"},"variableNames":[{"name":"value2","nativeSrc":"1313:6:24","nodeType":"YulIdentifier","src":"1313:6:24"}]},{"nativeSrc":"1364:42:24","nodeType":"YulAssignment","src":"1364:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1391:9:24","nodeType":"YulIdentifier","src":"1391:9:24"},{"kind":"number","nativeSrc":"1402:2:24","nodeType":"YulLiteral","src":"1402:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1387:3:24","nodeType":"YulIdentifier","src":"1387:3:24"},"nativeSrc":"1387:18:24","nodeType":"YulFunctionCall","src":"1387:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"1374:12:24","nodeType":"YulIdentifier","src":"1374:12:24"},"nativeSrc":"1374:32:24","nodeType":"YulFunctionCall","src":"1374:32:24"},"variableNames":[{"name":"value3","nativeSrc":"1364:6:24","nodeType":"YulIdentifier","src":"1364:6:24"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256","nativeSrc":"1027:385:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1090:9:24","nodeType":"YulTypedName","src":"1090:9:24","type":""},{"name":"dataEnd","nativeSrc":"1101:7:24","nodeType":"YulTypedName","src":"1101:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1113:6:24","nodeType":"YulTypedName","src":"1113:6:24","type":""},{"name":"value1","nativeSrc":"1121:6:24","nodeType":"YulTypedName","src":"1121:6:24","type":""},{"name":"value2","nativeSrc":"1129:6:24","nodeType":"YulTypedName","src":"1129:6:24","type":""},{"name":"value3","nativeSrc":"1137:6:24","nodeType":"YulTypedName","src":"1137:6:24","type":""}],"src":"1027:385:24"},{"body":{"nativeSrc":"1501:283:24","nodeType":"YulBlock","src":"1501:283:24","statements":[{"body":{"nativeSrc":"1550:16:24","nodeType":"YulBlock","src":"1550:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1559:1:24","nodeType":"YulLiteral","src":"1559:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1562:1:24","nodeType":"YulLiteral","src":"1562:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1552:6:24","nodeType":"YulIdentifier","src":"1552:6:24"},"nativeSrc":"1552:12:24","nodeType":"YulFunctionCall","src":"1552:12:24"},"nativeSrc":"1552:12:24","nodeType":"YulExpressionStatement","src":"1552:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1529:6:24","nodeType":"YulIdentifier","src":"1529:6:24"},{"kind":"number","nativeSrc":"1537:4:24","nodeType":"YulLiteral","src":"1537:4:24","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1525:3:24","nodeType":"YulIdentifier","src":"1525:3:24"},"nativeSrc":"1525:17:24","nodeType":"YulFunctionCall","src":"1525:17:24"},{"name":"end","nativeSrc":"1544:3:24","nodeType":"YulIdentifier","src":"1544:3:24"}],"functionName":{"name":"slt","nativeSrc":"1521:3:24","nodeType":"YulIdentifier","src":"1521:3:24"},"nativeSrc":"1521:27:24","nodeType":"YulFunctionCall","src":"1521:27:24"}],"functionName":{"name":"iszero","nativeSrc":"1514:6:24","nodeType":"YulIdentifier","src":"1514:6:24"},"nativeSrc":"1514:35:24","nodeType":"YulFunctionCall","src":"1514:35:24"},"nativeSrc":"1511:55:24","nodeType":"YulIf","src":"1511:55:24"},{"nativeSrc":"1575:30:24","nodeType":"YulAssignment","src":"1575:30:24","value":{"arguments":[{"name":"offset","nativeSrc":"1598:6:24","nodeType":"YulIdentifier","src":"1598:6:24"}],"functionName":{"name":"calldataload","nativeSrc":"1585:12:24","nodeType":"YulIdentifier","src":"1585:12:24"},"nativeSrc":"1585:20:24","nodeType":"YulFunctionCall","src":"1585:20:24"},"variableNames":[{"name":"length","nativeSrc":"1575:6:24","nodeType":"YulIdentifier","src":"1575:6:24"}]},{"body":{"nativeSrc":"1648:16:24","nodeType":"YulBlock","src":"1648:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1657:1:24","nodeType":"YulLiteral","src":"1657:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1660:1:24","nodeType":"YulLiteral","src":"1660:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1650:6:24","nodeType":"YulIdentifier","src":"1650:6:24"},"nativeSrc":"1650:12:24","nodeType":"YulFunctionCall","src":"1650:12:24"},"nativeSrc":"1650:12:24","nodeType":"YulExpressionStatement","src":"1650:12:24"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1620:6:24","nodeType":"YulIdentifier","src":"1620:6:24"},{"kind":"number","nativeSrc":"1628:18:24","nodeType":"YulLiteral","src":"1628:18:24","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1617:2:24","nodeType":"YulIdentifier","src":"1617:2:24"},"nativeSrc":"1617:30:24","nodeType":"YulFunctionCall","src":"1617:30:24"},"nativeSrc":"1614:50:24","nodeType":"YulIf","src":"1614:50:24"},{"nativeSrc":"1673:29:24","nodeType":"YulAssignment","src":"1673:29:24","value":{"arguments":[{"name":"offset","nativeSrc":"1689:6:24","nodeType":"YulIdentifier","src":"1689:6:24"},{"kind":"number","nativeSrc":"1697:4:24","nodeType":"YulLiteral","src":"1697:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1685:3:24","nodeType":"YulIdentifier","src":"1685:3:24"},"nativeSrc":"1685:17:24","nodeType":"YulFunctionCall","src":"1685:17:24"},"variableNames":[{"name":"arrayPos","nativeSrc":"1673:8:24","nodeType":"YulIdentifier","src":"1673:8:24"}]},{"body":{"nativeSrc":"1762:16:24","nodeType":"YulBlock","src":"1762:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1771:1:24","nodeType":"YulLiteral","src":"1771:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1774:1:24","nodeType":"YulLiteral","src":"1774:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1764:6:24","nodeType":"YulIdentifier","src":"1764:6:24"},"nativeSrc":"1764:12:24","nodeType":"YulFunctionCall","src":"1764:12:24"},"nativeSrc":"1764:12:24","nodeType":"YulExpressionStatement","src":"1764:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1725:6:24","nodeType":"YulIdentifier","src":"1725:6:24"},{"arguments":[{"kind":"number","nativeSrc":"1737:1:24","nodeType":"YulLiteral","src":"1737:1:24","type":"","value":"5"},{"name":"length","nativeSrc":"1740:6:24","nodeType":"YulIdentifier","src":"1740:6:24"}],"functionName":{"name":"shl","nativeSrc":"1733:3:24","nodeType":"YulIdentifier","src":"1733:3:24"},"nativeSrc":"1733:14:24","nodeType":"YulFunctionCall","src":"1733:14:24"}],"functionName":{"name":"add","nativeSrc":"1721:3:24","nodeType":"YulIdentifier","src":"1721:3:24"},"nativeSrc":"1721:27:24","nodeType":"YulFunctionCall","src":"1721:27:24"},{"kind":"number","nativeSrc":"1750:4:24","nodeType":"YulLiteral","src":"1750:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1717:3:24","nodeType":"YulIdentifier","src":"1717:3:24"},"nativeSrc":"1717:38:24","nodeType":"YulFunctionCall","src":"1717:38:24"},{"name":"end","nativeSrc":"1757:3:24","nodeType":"YulIdentifier","src":"1757:3:24"}],"functionName":{"name":"gt","nativeSrc":"1714:2:24","nodeType":"YulIdentifier","src":"1714:2:24"},"nativeSrc":"1714:47:24","nodeType":"YulFunctionCall","src":"1714:47:24"},"nativeSrc":"1711:67:24","nodeType":"YulIf","src":"1711:67:24"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1417:367:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1464:6:24","nodeType":"YulTypedName","src":"1464:6:24","type":""},{"name":"end","nativeSrc":"1472:3:24","nodeType":"YulTypedName","src":"1472:3:24","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1480:8:24","nodeType":"YulTypedName","src":"1480:8:24","type":""},{"name":"length","nativeSrc":"1490:6:24","nodeType":"YulTypedName","src":"1490:6:24","type":""}],"src":"1417:367:24"},{"body":{"nativeSrc":"1894:332:24","nodeType":"YulBlock","src":"1894:332:24","statements":[{"body":{"nativeSrc":"1940:16:24","nodeType":"YulBlock","src":"1940:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1949:1:24","nodeType":"YulLiteral","src":"1949:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1952:1:24","nodeType":"YulLiteral","src":"1952:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1942:6:24","nodeType":"YulIdentifier","src":"1942:6:24"},"nativeSrc":"1942:12:24","nodeType":"YulFunctionCall","src":"1942:12:24"},"nativeSrc":"1942:12:24","nodeType":"YulExpressionStatement","src":"1942:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1915:7:24","nodeType":"YulIdentifier","src":"1915:7:24"},{"name":"headStart","nativeSrc":"1924:9:24","nodeType":"YulIdentifier","src":"1924:9:24"}],"functionName":{"name":"sub","nativeSrc":"1911:3:24","nodeType":"YulIdentifier","src":"1911:3:24"},"nativeSrc":"1911:23:24","nodeType":"YulFunctionCall","src":"1911:23:24"},{"kind":"number","nativeSrc":"1936:2:24","nodeType":"YulLiteral","src":"1936:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1907:3:24","nodeType":"YulIdentifier","src":"1907:3:24"},"nativeSrc":"1907:32:24","nodeType":"YulFunctionCall","src":"1907:32:24"},"nativeSrc":"1904:52:24","nodeType":"YulIf","src":"1904:52:24"},{"nativeSrc":"1965:37:24","nodeType":"YulVariableDeclaration","src":"1965:37:24","value":{"arguments":[{"name":"headStart","nativeSrc":"1992:9:24","nodeType":"YulIdentifier","src":"1992:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"1979:12:24","nodeType":"YulIdentifier","src":"1979:12:24"},"nativeSrc":"1979:23:24","nodeType":"YulFunctionCall","src":"1979:23:24"},"variables":[{"name":"offset","nativeSrc":"1969:6:24","nodeType":"YulTypedName","src":"1969:6:24","type":""}]},{"body":{"nativeSrc":"2045:16:24","nodeType":"YulBlock","src":"2045:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2054:1:24","nodeType":"YulLiteral","src":"2054:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2057:1:24","nodeType":"YulLiteral","src":"2057:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2047:6:24","nodeType":"YulIdentifier","src":"2047:6:24"},"nativeSrc":"2047:12:24","nodeType":"YulFunctionCall","src":"2047:12:24"},"nativeSrc":"2047:12:24","nodeType":"YulExpressionStatement","src":"2047:12:24"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2017:6:24","nodeType":"YulIdentifier","src":"2017:6:24"},{"kind":"number","nativeSrc":"2025:18:24","nodeType":"YulLiteral","src":"2025:18:24","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2014:2:24","nodeType":"YulIdentifier","src":"2014:2:24"},"nativeSrc":"2014:30:24","nodeType":"YulFunctionCall","src":"2014:30:24"},"nativeSrc":"2011:50:24","nodeType":"YulIf","src":"2011:50:24"},{"nativeSrc":"2070:96:24","nodeType":"YulVariableDeclaration","src":"2070:96:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2138:9:24","nodeType":"YulIdentifier","src":"2138:9:24"},{"name":"offset","nativeSrc":"2149:6:24","nodeType":"YulIdentifier","src":"2149:6:24"}],"functionName":{"name":"add","nativeSrc":"2134:3:24","nodeType":"YulIdentifier","src":"2134:3:24"},"nativeSrc":"2134:22:24","nodeType":"YulFunctionCall","src":"2134:22:24"},{"name":"dataEnd","nativeSrc":"2158:7:24","nodeType":"YulIdentifier","src":"2158:7:24"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2096:37:24","nodeType":"YulIdentifier","src":"2096:37:24"},"nativeSrc":"2096:70:24","nodeType":"YulFunctionCall","src":"2096:70:24"},"variables":[{"name":"value0_1","nativeSrc":"2074:8:24","nodeType":"YulTypedName","src":"2074:8:24","type":""},{"name":"value1_1","nativeSrc":"2084:8:24","nodeType":"YulTypedName","src":"2084:8:24","type":""}]},{"nativeSrc":"2175:18:24","nodeType":"YulAssignment","src":"2175:18:24","value":{"name":"value0_1","nativeSrc":"2185:8:24","nodeType":"YulIdentifier","src":"2185:8:24"},"variableNames":[{"name":"value0","nativeSrc":"2175:6:24","nodeType":"YulIdentifier","src":"2175:6:24"}]},{"nativeSrc":"2202:18:24","nodeType":"YulAssignment","src":"2202:18:24","value":{"name":"value1_1","nativeSrc":"2212:8:24","nodeType":"YulIdentifier","src":"2212:8:24"},"variableNames":[{"name":"value1","nativeSrc":"2202:6:24","nodeType":"YulIdentifier","src":"2202:6:24"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr","nativeSrc":"1789:437:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1852:9:24","nodeType":"YulTypedName","src":"1852:9:24","type":""},{"name":"dataEnd","nativeSrc":"1863:7:24","nodeType":"YulTypedName","src":"1863:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1875:6:24","nodeType":"YulTypedName","src":"1875:6:24","type":""},{"name":"value1","nativeSrc":"1883:6:24","nodeType":"YulTypedName","src":"1883:6:24","type":""}],"src":"1789:437:24"},{"body":{"nativeSrc":"2301:110:24","nodeType":"YulBlock","src":"2301:110:24","statements":[{"body":{"nativeSrc":"2347:16:24","nodeType":"YulBlock","src":"2347:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2356:1:24","nodeType":"YulLiteral","src":"2356:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2359:1:24","nodeType":"YulLiteral","src":"2359:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2349:6:24","nodeType":"YulIdentifier","src":"2349:6:24"},"nativeSrc":"2349:12:24","nodeType":"YulFunctionCall","src":"2349:12:24"},"nativeSrc":"2349:12:24","nodeType":"YulExpressionStatement","src":"2349:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2322:7:24","nodeType":"YulIdentifier","src":"2322:7:24"},{"name":"headStart","nativeSrc":"2331:9:24","nodeType":"YulIdentifier","src":"2331:9:24"}],"functionName":{"name":"sub","nativeSrc":"2318:3:24","nodeType":"YulIdentifier","src":"2318:3:24"},"nativeSrc":"2318:23:24","nodeType":"YulFunctionCall","src":"2318:23:24"},{"kind":"number","nativeSrc":"2343:2:24","nodeType":"YulLiteral","src":"2343:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2314:3:24","nodeType":"YulIdentifier","src":"2314:3:24"},"nativeSrc":"2314:32:24","nodeType":"YulFunctionCall","src":"2314:32:24"},"nativeSrc":"2311:52:24","nodeType":"YulIf","src":"2311:52:24"},{"nativeSrc":"2372:33:24","nodeType":"YulAssignment","src":"2372:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2395:9:24","nodeType":"YulIdentifier","src":"2395:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"2382:12:24","nodeType":"YulIdentifier","src":"2382:12:24"},"nativeSrc":"2382:23:24","nodeType":"YulFunctionCall","src":"2382:23:24"},"variableNames":[{"name":"value0","nativeSrc":"2372:6:24","nodeType":"YulIdentifier","src":"2372:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2231:180:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2267:9:24","nodeType":"YulTypedName","src":"2267:9:24","type":""},{"name":"dataEnd","nativeSrc":"2278:7:24","nodeType":"YulTypedName","src":"2278:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2290:6:24","nodeType":"YulTypedName","src":"2290:6:24","type":""}],"src":"2231:180:24"},{"body":{"nativeSrc":"2517:76:24","nodeType":"YulBlock","src":"2517:76:24","statements":[{"nativeSrc":"2527:26:24","nodeType":"YulAssignment","src":"2527:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2539:9:24","nodeType":"YulIdentifier","src":"2539:9:24"},{"kind":"number","nativeSrc":"2550:2:24","nodeType":"YulLiteral","src":"2550:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2535:3:24","nodeType":"YulIdentifier","src":"2535:3:24"},"nativeSrc":"2535:18:24","nodeType":"YulFunctionCall","src":"2535:18:24"},"variableNames":[{"name":"tail","nativeSrc":"2527:4:24","nodeType":"YulIdentifier","src":"2527:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2569:9:24","nodeType":"YulIdentifier","src":"2569:9:24"},{"name":"value0","nativeSrc":"2580:6:24","nodeType":"YulIdentifier","src":"2580:6:24"}],"functionName":{"name":"mstore","nativeSrc":"2562:6:24","nodeType":"YulIdentifier","src":"2562:6:24"},"nativeSrc":"2562:25:24","nodeType":"YulFunctionCall","src":"2562:25:24"},"nativeSrc":"2562:25:24","nodeType":"YulExpressionStatement","src":"2562:25:24"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2416:177:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2486:9:24","nodeType":"YulTypedName","src":"2486:9:24","type":""},{"name":"value0","nativeSrc":"2497:6:24","nodeType":"YulTypedName","src":"2497:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2508:4:24","nodeType":"YulTypedName","src":"2508:4:24","type":""}],"src":"2416:177:24"},{"body":{"nativeSrc":"2643:109:24","nodeType":"YulBlock","src":"2643:109:24","statements":[{"body":{"nativeSrc":"2730:16:24","nodeType":"YulBlock","src":"2730:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2739:1:24","nodeType":"YulLiteral","src":"2739:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2742:1:24","nodeType":"YulLiteral","src":"2742:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2732:6:24","nodeType":"YulIdentifier","src":"2732:6:24"},"nativeSrc":"2732:12:24","nodeType":"YulFunctionCall","src":"2732:12:24"},"nativeSrc":"2732:12:24","nodeType":"YulExpressionStatement","src":"2732:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2666:5:24","nodeType":"YulIdentifier","src":"2666:5:24"},{"arguments":[{"name":"value","nativeSrc":"2677:5:24","nodeType":"YulIdentifier","src":"2677:5:24"},{"kind":"number","nativeSrc":"2684:42:24","nodeType":"YulLiteral","src":"2684:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2673:3:24","nodeType":"YulIdentifier","src":"2673:3:24"},"nativeSrc":"2673:54:24","nodeType":"YulFunctionCall","src":"2673:54:24"}],"functionName":{"name":"eq","nativeSrc":"2663:2:24","nodeType":"YulIdentifier","src":"2663:2:24"},"nativeSrc":"2663:65:24","nodeType":"YulFunctionCall","src":"2663:65:24"}],"functionName":{"name":"iszero","nativeSrc":"2656:6:24","nodeType":"YulIdentifier","src":"2656:6:24"},"nativeSrc":"2656:73:24","nodeType":"YulFunctionCall","src":"2656:73:24"},"nativeSrc":"2653:93:24","nodeType":"YulIf","src":"2653:93:24"}]},"name":"validator_revert_address","nativeSrc":"2598:154:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2632:5:24","nodeType":"YulTypedName","src":"2632:5:24","type":""}],"src":"2598:154:24"},{"body":{"nativeSrc":"2844:228:24","nodeType":"YulBlock","src":"2844:228:24","statements":[{"body":{"nativeSrc":"2890:16:24","nodeType":"YulBlock","src":"2890:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2899:1:24","nodeType":"YulLiteral","src":"2899:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2902:1:24","nodeType":"YulLiteral","src":"2902:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2892:6:24","nodeType":"YulIdentifier","src":"2892:6:24"},"nativeSrc":"2892:12:24","nodeType":"YulFunctionCall","src":"2892:12:24"},"nativeSrc":"2892:12:24","nodeType":"YulExpressionStatement","src":"2892:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2865:7:24","nodeType":"YulIdentifier","src":"2865:7:24"},{"name":"headStart","nativeSrc":"2874:9:24","nodeType":"YulIdentifier","src":"2874:9:24"}],"functionName":{"name":"sub","nativeSrc":"2861:3:24","nodeType":"YulIdentifier","src":"2861:3:24"},"nativeSrc":"2861:23:24","nodeType":"YulFunctionCall","src":"2861:23:24"},{"kind":"number","nativeSrc":"2886:2:24","nodeType":"YulLiteral","src":"2886:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2857:3:24","nodeType":"YulIdentifier","src":"2857:3:24"},"nativeSrc":"2857:32:24","nodeType":"YulFunctionCall","src":"2857:32:24"},"nativeSrc":"2854:52:24","nodeType":"YulIf","src":"2854:52:24"},{"nativeSrc":"2915:33:24","nodeType":"YulAssignment","src":"2915:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2938:9:24","nodeType":"YulIdentifier","src":"2938:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"2925:12:24","nodeType":"YulIdentifier","src":"2925:12:24"},"nativeSrc":"2925:23:24","nodeType":"YulFunctionCall","src":"2925:23:24"},"variableNames":[{"name":"value0","nativeSrc":"2915:6:24","nodeType":"YulIdentifier","src":"2915:6:24"}]},{"nativeSrc":"2957:45:24","nodeType":"YulVariableDeclaration","src":"2957:45:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2987:9:24","nodeType":"YulIdentifier","src":"2987:9:24"},{"kind":"number","nativeSrc":"2998:2:24","nodeType":"YulLiteral","src":"2998:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2983:3:24","nodeType":"YulIdentifier","src":"2983:3:24"},"nativeSrc":"2983:18:24","nodeType":"YulFunctionCall","src":"2983:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"2970:12:24","nodeType":"YulIdentifier","src":"2970:12:24"},"nativeSrc":"2970:32:24","nodeType":"YulFunctionCall","src":"2970:32:24"},"variables":[{"name":"value","nativeSrc":"2961:5:24","nodeType":"YulTypedName","src":"2961:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3036:5:24","nodeType":"YulIdentifier","src":"3036:5:24"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3011:24:24","nodeType":"YulIdentifier","src":"3011:24:24"},"nativeSrc":"3011:31:24","nodeType":"YulFunctionCall","src":"3011:31:24"},"nativeSrc":"3011:31:24","nodeType":"YulExpressionStatement","src":"3011:31:24"},{"nativeSrc":"3051:15:24","nodeType":"YulAssignment","src":"3051:15:24","value":{"name":"value","nativeSrc":"3061:5:24","nodeType":"YulIdentifier","src":"3061:5:24"},"variableNames":[{"name":"value1","nativeSrc":"3051:6:24","nodeType":"YulIdentifier","src":"3051:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2757:315:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2802:9:24","nodeType":"YulTypedName","src":"2802:9:24","type":""},{"name":"dataEnd","nativeSrc":"2813:7:24","nodeType":"YulTypedName","src":"2813:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2825:6:24","nodeType":"YulTypedName","src":"2825:6:24","type":""},{"name":"value1","nativeSrc":"2833:6:24","nodeType":"YulTypedName","src":"2833:6:24","type":""}],"src":"2757:315:24"},{"body":{"nativeSrc":"3147:110:24","nodeType":"YulBlock","src":"3147:110:24","statements":[{"body":{"nativeSrc":"3193:16:24","nodeType":"YulBlock","src":"3193:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3202:1:24","nodeType":"YulLiteral","src":"3202:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"3205:1:24","nodeType":"YulLiteral","src":"3205:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3195:6:24","nodeType":"YulIdentifier","src":"3195:6:24"},"nativeSrc":"3195:12:24","nodeType":"YulFunctionCall","src":"3195:12:24"},"nativeSrc":"3195:12:24","nodeType":"YulExpressionStatement","src":"3195:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3168:7:24","nodeType":"YulIdentifier","src":"3168:7:24"},{"name":"headStart","nativeSrc":"3177:9:24","nodeType":"YulIdentifier","src":"3177:9:24"}],"functionName":{"name":"sub","nativeSrc":"3164:3:24","nodeType":"YulIdentifier","src":"3164:3:24"},"nativeSrc":"3164:23:24","nodeType":"YulFunctionCall","src":"3164:23:24"},{"kind":"number","nativeSrc":"3189:2:24","nodeType":"YulLiteral","src":"3189:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3160:3:24","nodeType":"YulIdentifier","src":"3160:3:24"},"nativeSrc":"3160:32:24","nodeType":"YulFunctionCall","src":"3160:32:24"},"nativeSrc":"3157:52:24","nodeType":"YulIf","src":"3157:52:24"},{"nativeSrc":"3218:33:24","nodeType":"YulAssignment","src":"3218:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3241:9:24","nodeType":"YulIdentifier","src":"3241:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"3228:12:24","nodeType":"YulIdentifier","src":"3228:12:24"},"nativeSrc":"3228:23:24","nodeType":"YulFunctionCall","src":"3228:23:24"},"variableNames":[{"name":"value0","nativeSrc":"3218:6:24","nodeType":"YulIdentifier","src":"3218:6:24"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3077:180:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3113:9:24","nodeType":"YulTypedName","src":"3113:9:24","type":""},{"name":"dataEnd","nativeSrc":"3124:7:24","nodeType":"YulTypedName","src":"3124:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3136:6:24","nodeType":"YulTypedName","src":"3136:6:24","type":""}],"src":"3077:180:24"},{"body":{"nativeSrc":"3363:76:24","nodeType":"YulBlock","src":"3363:76:24","statements":[{"nativeSrc":"3373:26:24","nodeType":"YulAssignment","src":"3373:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3385:9:24","nodeType":"YulIdentifier","src":"3385:9:24"},{"kind":"number","nativeSrc":"3396:2:24","nodeType":"YulLiteral","src":"3396:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3381:3:24","nodeType":"YulIdentifier","src":"3381:3:24"},"nativeSrc":"3381:18:24","nodeType":"YulFunctionCall","src":"3381:18:24"},"variableNames":[{"name":"tail","nativeSrc":"3373:4:24","nodeType":"YulIdentifier","src":"3373:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3415:9:24","nodeType":"YulIdentifier","src":"3415:9:24"},{"name":"value0","nativeSrc":"3426:6:24","nodeType":"YulIdentifier","src":"3426:6:24"}],"functionName":{"name":"mstore","nativeSrc":"3408:6:24","nodeType":"YulIdentifier","src":"3408:6:24"},"nativeSrc":"3408:25:24","nodeType":"YulFunctionCall","src":"3408:25:24"},"nativeSrc":"3408:25:24","nodeType":"YulExpressionStatement","src":"3408:25:24"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"3262:177:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3332:9:24","nodeType":"YulTypedName","src":"3332:9:24","type":""},{"name":"value0","nativeSrc":"3343:6:24","nodeType":"YulTypedName","src":"3343:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3354:4:24","nodeType":"YulTypedName","src":"3354:4:24","type":""}],"src":"3262:177:24"},{"body":{"nativeSrc":"3514:177:24","nodeType":"YulBlock","src":"3514:177:24","statements":[{"body":{"nativeSrc":"3560:16:24","nodeType":"YulBlock","src":"3560:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3569:1:24","nodeType":"YulLiteral","src":"3569:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"3572:1:24","nodeType":"YulLiteral","src":"3572:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3562:6:24","nodeType":"YulIdentifier","src":"3562:6:24"},"nativeSrc":"3562:12:24","nodeType":"YulFunctionCall","src":"3562:12:24"},"nativeSrc":"3562:12:24","nodeType":"YulExpressionStatement","src":"3562:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3535:7:24","nodeType":"YulIdentifier","src":"3535:7:24"},{"name":"headStart","nativeSrc":"3544:9:24","nodeType":"YulIdentifier","src":"3544:9:24"}],"functionName":{"name":"sub","nativeSrc":"3531:3:24","nodeType":"YulIdentifier","src":"3531:3:24"},"nativeSrc":"3531:23:24","nodeType":"YulFunctionCall","src":"3531:23:24"},{"kind":"number","nativeSrc":"3556:2:24","nodeType":"YulLiteral","src":"3556:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3527:3:24","nodeType":"YulIdentifier","src":"3527:3:24"},"nativeSrc":"3527:32:24","nodeType":"YulFunctionCall","src":"3527:32:24"},"nativeSrc":"3524:52:24","nodeType":"YulIf","src":"3524:52:24"},{"nativeSrc":"3585:36:24","nodeType":"YulVariableDeclaration","src":"3585:36:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3611:9:24","nodeType":"YulIdentifier","src":"3611:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"3598:12:24","nodeType":"YulIdentifier","src":"3598:12:24"},"nativeSrc":"3598:23:24","nodeType":"YulFunctionCall","src":"3598:23:24"},"variables":[{"name":"value","nativeSrc":"3589:5:24","nodeType":"YulTypedName","src":"3589:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3655:5:24","nodeType":"YulIdentifier","src":"3655:5:24"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3630:24:24","nodeType":"YulIdentifier","src":"3630:24:24"},"nativeSrc":"3630:31:24","nodeType":"YulFunctionCall","src":"3630:31:24"},"nativeSrc":"3630:31:24","nodeType":"YulExpressionStatement","src":"3630:31:24"},{"nativeSrc":"3670:15:24","nodeType":"YulAssignment","src":"3670:15:24","value":{"name":"value","nativeSrc":"3680:5:24","nodeType":"YulIdentifier","src":"3680:5:24"},"variableNames":[{"name":"value0","nativeSrc":"3670:6:24","nodeType":"YulIdentifier","src":"3670:6:24"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3444:247:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3480:9:24","nodeType":"YulTypedName","src":"3480:9:24","type":""},{"name":"dataEnd","nativeSrc":"3491:7:24","nodeType":"YulTypedName","src":"3491:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3503:6:24","nodeType":"YulTypedName","src":"3503:6:24","type":""}],"src":"3444:247:24"},{"body":{"nativeSrc":"3813:125:24","nodeType":"YulBlock","src":"3813:125:24","statements":[{"nativeSrc":"3823:26:24","nodeType":"YulAssignment","src":"3823:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3835:9:24","nodeType":"YulIdentifier","src":"3835:9:24"},{"kind":"number","nativeSrc":"3846:2:24","nodeType":"YulLiteral","src":"3846:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3831:3:24","nodeType":"YulIdentifier","src":"3831:3:24"},"nativeSrc":"3831:18:24","nodeType":"YulFunctionCall","src":"3831:18:24"},"variableNames":[{"name":"tail","nativeSrc":"3823:4:24","nodeType":"YulIdentifier","src":"3823:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3865:9:24","nodeType":"YulIdentifier","src":"3865:9:24"},{"arguments":[{"name":"value0","nativeSrc":"3880:6:24","nodeType":"YulIdentifier","src":"3880:6:24"},{"kind":"number","nativeSrc":"3888:42:24","nodeType":"YulLiteral","src":"3888:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3876:3:24","nodeType":"YulIdentifier","src":"3876:3:24"},"nativeSrc":"3876:55:24","nodeType":"YulFunctionCall","src":"3876:55:24"}],"functionName":{"name":"mstore","nativeSrc":"3858:6:24","nodeType":"YulIdentifier","src":"3858:6:24"},"nativeSrc":"3858:74:24","nodeType":"YulFunctionCall","src":"3858:74:24"},"nativeSrc":"3858:74:24","nodeType":"YulExpressionStatement","src":"3858:74:24"}]},"name":"abi_encode_tuple_t_contract$_IReferee_$573__to_t_address__fromStack_reversed","nativeSrc":"3696:242:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3782:9:24","nodeType":"YulTypedName","src":"3782:9:24","type":""},{"name":"value0","nativeSrc":"3793:6:24","nodeType":"YulTypedName","src":"3793:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3804:4:24","nodeType":"YulTypedName","src":"3804:4:24","type":""}],"src":"3696:242:24"},{"body":{"nativeSrc":"4065:383:24","nodeType":"YulBlock","src":"4065:383:24","statements":[{"body":{"nativeSrc":"4111:16:24","nodeType":"YulBlock","src":"4111:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4120:1:24","nodeType":"YulLiteral","src":"4120:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4123:1:24","nodeType":"YulLiteral","src":"4123:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4113:6:24","nodeType":"YulIdentifier","src":"4113:6:24"},"nativeSrc":"4113:12:24","nodeType":"YulFunctionCall","src":"4113:12:24"},"nativeSrc":"4113:12:24","nodeType":"YulExpressionStatement","src":"4113:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4086:7:24","nodeType":"YulIdentifier","src":"4086:7:24"},{"name":"headStart","nativeSrc":"4095:9:24","nodeType":"YulIdentifier","src":"4095:9:24"}],"functionName":{"name":"sub","nativeSrc":"4082:3:24","nodeType":"YulIdentifier","src":"4082:3:24"},"nativeSrc":"4082:23:24","nodeType":"YulFunctionCall","src":"4082:23:24"},{"kind":"number","nativeSrc":"4107:2:24","nodeType":"YulLiteral","src":"4107:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4078:3:24","nodeType":"YulIdentifier","src":"4078:3:24"},"nativeSrc":"4078:32:24","nodeType":"YulFunctionCall","src":"4078:32:24"},"nativeSrc":"4075:52:24","nodeType":"YulIf","src":"4075:52:24"},{"nativeSrc":"4136:33:24","nodeType":"YulAssignment","src":"4136:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"4159:9:24","nodeType":"YulIdentifier","src":"4159:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"4146:12:24","nodeType":"YulIdentifier","src":"4146:12:24"},"nativeSrc":"4146:23:24","nodeType":"YulFunctionCall","src":"4146:23:24"},"variableNames":[{"name":"value0","nativeSrc":"4136:6:24","nodeType":"YulIdentifier","src":"4136:6:24"}]},{"nativeSrc":"4178:46:24","nodeType":"YulVariableDeclaration","src":"4178:46:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4209:9:24","nodeType":"YulIdentifier","src":"4209:9:24"},{"kind":"number","nativeSrc":"4220:2:24","nodeType":"YulLiteral","src":"4220:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4205:3:24","nodeType":"YulIdentifier","src":"4205:3:24"},"nativeSrc":"4205:18:24","nodeType":"YulFunctionCall","src":"4205:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"4192:12:24","nodeType":"YulIdentifier","src":"4192:12:24"},"nativeSrc":"4192:32:24","nodeType":"YulFunctionCall","src":"4192:32:24"},"variables":[{"name":"offset","nativeSrc":"4182:6:24","nodeType":"YulTypedName","src":"4182:6:24","type":""}]},{"body":{"nativeSrc":"4267:16:24","nodeType":"YulBlock","src":"4267:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4276:1:24","nodeType":"YulLiteral","src":"4276:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4279:1:24","nodeType":"YulLiteral","src":"4279:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4269:6:24","nodeType":"YulIdentifier","src":"4269:6:24"},"nativeSrc":"4269:12:24","nodeType":"YulFunctionCall","src":"4269:12:24"},"nativeSrc":"4269:12:24","nodeType":"YulExpressionStatement","src":"4269:12:24"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4239:6:24","nodeType":"YulIdentifier","src":"4239:6:24"},{"kind":"number","nativeSrc":"4247:18:24","nodeType":"YulLiteral","src":"4247:18:24","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4236:2:24","nodeType":"YulIdentifier","src":"4236:2:24"},"nativeSrc":"4236:30:24","nodeType":"YulFunctionCall","src":"4236:30:24"},"nativeSrc":"4233:50:24","nodeType":"YulIf","src":"4233:50:24"},{"nativeSrc":"4292:96:24","nodeType":"YulVariableDeclaration","src":"4292:96:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4360:9:24","nodeType":"YulIdentifier","src":"4360:9:24"},{"name":"offset","nativeSrc":"4371:6:24","nodeType":"YulIdentifier","src":"4371:6:24"}],"functionName":{"name":"add","nativeSrc":"4356:3:24","nodeType":"YulIdentifier","src":"4356:3:24"},"nativeSrc":"4356:22:24","nodeType":"YulFunctionCall","src":"4356:22:24"},{"name":"dataEnd","nativeSrc":"4380:7:24","nodeType":"YulIdentifier","src":"4380:7:24"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4318:37:24","nodeType":"YulIdentifier","src":"4318:37:24"},"nativeSrc":"4318:70:24","nodeType":"YulFunctionCall","src":"4318:70:24"},"variables":[{"name":"value1_1","nativeSrc":"4296:8:24","nodeType":"YulTypedName","src":"4296:8:24","type":""},{"name":"value2_1","nativeSrc":"4306:8:24","nodeType":"YulTypedName","src":"4306:8:24","type":""}]},{"nativeSrc":"4397:18:24","nodeType":"YulAssignment","src":"4397:18:24","value":{"name":"value1_1","nativeSrc":"4407:8:24","nodeType":"YulIdentifier","src":"4407:8:24"},"variableNames":[{"name":"value1","nativeSrc":"4397:6:24","nodeType":"YulIdentifier","src":"4397:6:24"}]},{"nativeSrc":"4424:18:24","nodeType":"YulAssignment","src":"4424:18:24","value":{"name":"value2_1","nativeSrc":"4434:8:24","nodeType":"YulIdentifier","src":"4434:8:24"},"variableNames":[{"name":"value2","nativeSrc":"4424:6:24","nodeType":"YulIdentifier","src":"4424:6:24"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"3943:505:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4015:9:24","nodeType":"YulTypedName","src":"4015:9:24","type":""},{"name":"dataEnd","nativeSrc":"4026:7:24","nodeType":"YulTypedName","src":"4026:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4038:6:24","nodeType":"YulTypedName","src":"4038:6:24","type":""},{"name":"value1","nativeSrc":"4046:6:24","nodeType":"YulTypedName","src":"4046:6:24","type":""},{"name":"value2","nativeSrc":"4054:6:24","nodeType":"YulTypedName","src":"4054:6:24","type":""}],"src":"3943:505:24"},{"body":{"nativeSrc":"4570:125:24","nodeType":"YulBlock","src":"4570:125:24","statements":[{"nativeSrc":"4580:26:24","nodeType":"YulAssignment","src":"4580:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"4592:9:24","nodeType":"YulIdentifier","src":"4592:9:24"},{"kind":"number","nativeSrc":"4603:2:24","nodeType":"YulLiteral","src":"4603:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4588:3:24","nodeType":"YulIdentifier","src":"4588:3:24"},"nativeSrc":"4588:18:24","nodeType":"YulFunctionCall","src":"4588:18:24"},"variableNames":[{"name":"tail","nativeSrc":"4580:4:24","nodeType":"YulIdentifier","src":"4580:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4622:9:24","nodeType":"YulIdentifier","src":"4622:9:24"},{"arguments":[{"name":"value0","nativeSrc":"4637:6:24","nodeType":"YulIdentifier","src":"4637:6:24"},{"kind":"number","nativeSrc":"4645:42:24","nodeType":"YulLiteral","src":"4645:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4633:3:24","nodeType":"YulIdentifier","src":"4633:3:24"},"nativeSrc":"4633:55:24","nodeType":"YulFunctionCall","src":"4633:55:24"}],"functionName":{"name":"mstore","nativeSrc":"4615:6:24","nodeType":"YulIdentifier","src":"4615:6:24"},"nativeSrc":"4615:74:24","nodeType":"YulFunctionCall","src":"4615:74:24"},"nativeSrc":"4615:74:24","nodeType":"YulExpressionStatement","src":"4615:74:24"}]},"name":"abi_encode_tuple_t_contract$_INodeKey_$426__to_t_address__fromStack_reversed","nativeSrc":"4453:242:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4539:9:24","nodeType":"YulTypedName","src":"4539:9:24","type":""},{"name":"value0","nativeSrc":"4550:6:24","nodeType":"YulTypedName","src":"4550:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4561:4:24","nodeType":"YulTypedName","src":"4561:4:24","type":""}],"src":"4453:242:24"},{"body":{"nativeSrc":"4742:76:24","nodeType":"YulBlock","src":"4742:76:24","statements":[{"body":{"nativeSrc":"4796:16:24","nodeType":"YulBlock","src":"4796:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4805:1:24","nodeType":"YulLiteral","src":"4805:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4808:1:24","nodeType":"YulLiteral","src":"4808:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4798:6:24","nodeType":"YulIdentifier","src":"4798:6:24"},"nativeSrc":"4798:12:24","nodeType":"YulFunctionCall","src":"4798:12:24"},"nativeSrc":"4798:12:24","nodeType":"YulExpressionStatement","src":"4798:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4765:5:24","nodeType":"YulIdentifier","src":"4765:5:24"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4786:5:24","nodeType":"YulIdentifier","src":"4786:5:24"}],"functionName":{"name":"iszero","nativeSrc":"4779:6:24","nodeType":"YulIdentifier","src":"4779:6:24"},"nativeSrc":"4779:13:24","nodeType":"YulFunctionCall","src":"4779:13:24"}],"functionName":{"name":"iszero","nativeSrc":"4772:6:24","nodeType":"YulIdentifier","src":"4772:6:24"},"nativeSrc":"4772:21:24","nodeType":"YulFunctionCall","src":"4772:21:24"}],"functionName":{"name":"eq","nativeSrc":"4762:2:24","nodeType":"YulIdentifier","src":"4762:2:24"},"nativeSrc":"4762:32:24","nodeType":"YulFunctionCall","src":"4762:32:24"}],"functionName":{"name":"iszero","nativeSrc":"4755:6:24","nodeType":"YulIdentifier","src":"4755:6:24"},"nativeSrc":"4755:40:24","nodeType":"YulFunctionCall","src":"4755:40:24"},"nativeSrc":"4752:60:24","nodeType":"YulIf","src":"4752:60:24"}]},"name":"validator_revert_bool","nativeSrc":"4700:118:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4731:5:24","nodeType":"YulTypedName","src":"4731:5:24","type":""}],"src":"4700:118:24"},{"body":{"nativeSrc":"4890:174:24","nodeType":"YulBlock","src":"4890:174:24","statements":[{"body":{"nativeSrc":"4936:16:24","nodeType":"YulBlock","src":"4936:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4945:1:24","nodeType":"YulLiteral","src":"4945:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4948:1:24","nodeType":"YulLiteral","src":"4948:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4938:6:24","nodeType":"YulIdentifier","src":"4938:6:24"},"nativeSrc":"4938:12:24","nodeType":"YulFunctionCall","src":"4938:12:24"},"nativeSrc":"4938:12:24","nodeType":"YulExpressionStatement","src":"4938:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4911:7:24","nodeType":"YulIdentifier","src":"4911:7:24"},{"name":"headStart","nativeSrc":"4920:9:24","nodeType":"YulIdentifier","src":"4920:9:24"}],"functionName":{"name":"sub","nativeSrc":"4907:3:24","nodeType":"YulIdentifier","src":"4907:3:24"},"nativeSrc":"4907:23:24","nodeType":"YulFunctionCall","src":"4907:23:24"},{"kind":"number","nativeSrc":"4932:2:24","nodeType":"YulLiteral","src":"4932:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4903:3:24","nodeType":"YulIdentifier","src":"4903:3:24"},"nativeSrc":"4903:32:24","nodeType":"YulFunctionCall","src":"4903:32:24"},"nativeSrc":"4900:52:24","nodeType":"YulIf","src":"4900:52:24"},{"nativeSrc":"4961:36:24","nodeType":"YulVariableDeclaration","src":"4961:36:24","value":{"arguments":[{"name":"headStart","nativeSrc":"4987:9:24","nodeType":"YulIdentifier","src":"4987:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"4974:12:24","nodeType":"YulIdentifier","src":"4974:12:24"},"nativeSrc":"4974:23:24","nodeType":"YulFunctionCall","src":"4974:23:24"},"variables":[{"name":"value","nativeSrc":"4965:5:24","nodeType":"YulTypedName","src":"4965:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5028:5:24","nodeType":"YulIdentifier","src":"5028:5:24"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"5006:21:24","nodeType":"YulIdentifier","src":"5006:21:24"},"nativeSrc":"5006:28:24","nodeType":"YulFunctionCall","src":"5006:28:24"},"nativeSrc":"5006:28:24","nodeType":"YulExpressionStatement","src":"5006:28:24"},{"nativeSrc":"5043:15:24","nodeType":"YulAssignment","src":"5043:15:24","value":{"name":"value","nativeSrc":"5053:5:24","nodeType":"YulIdentifier","src":"5053:5:24"},"variableNames":[{"name":"value0","nativeSrc":"5043:6:24","nodeType":"YulIdentifier","src":"5043:6:24"}]}]},"name":"abi_decode_tuple_t_bool","nativeSrc":"4823:241:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4856:9:24","nodeType":"YulTypedName","src":"4856:9:24","type":""},{"name":"dataEnd","nativeSrc":"4867:7:24","nodeType":"YulTypedName","src":"4867:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4879:6:24","nodeType":"YulTypedName","src":"4879:6:24","type":""}],"src":"4823:241:24"},{"body":{"nativeSrc":"5220:530:24","nodeType":"YulBlock","src":"5220:530:24","statements":[{"nativeSrc":"5230:12:24","nodeType":"YulVariableDeclaration","src":"5230:12:24","value":{"kind":"number","nativeSrc":"5240:2:24","nodeType":"YulLiteral","src":"5240:2:24","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"5234:2:24","nodeType":"YulTypedName","src":"5234:2:24","type":""}]},{"nativeSrc":"5251:32:24","nodeType":"YulVariableDeclaration","src":"5251:32:24","value":{"arguments":[{"name":"headStart","nativeSrc":"5269:9:24","nodeType":"YulIdentifier","src":"5269:9:24"},{"kind":"number","nativeSrc":"5280:2:24","nodeType":"YulLiteral","src":"5280:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5265:3:24","nodeType":"YulIdentifier","src":"5265:3:24"},"nativeSrc":"5265:18:24","nodeType":"YulFunctionCall","src":"5265:18:24"},"variables":[{"name":"tail_1","nativeSrc":"5255:6:24","nodeType":"YulTypedName","src":"5255:6:24","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5299:9:24","nodeType":"YulIdentifier","src":"5299:9:24"},{"kind":"number","nativeSrc":"5310:2:24","nodeType":"YulLiteral","src":"5310:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"5292:6:24","nodeType":"YulIdentifier","src":"5292:6:24"},"nativeSrc":"5292:21:24","nodeType":"YulFunctionCall","src":"5292:21:24"},"nativeSrc":"5292:21:24","nodeType":"YulExpressionStatement","src":"5292:21:24"},{"nativeSrc":"5322:17:24","nodeType":"YulVariableDeclaration","src":"5322:17:24","value":{"name":"tail_1","nativeSrc":"5333:6:24","nodeType":"YulIdentifier","src":"5333:6:24"},"variables":[{"name":"pos","nativeSrc":"5326:3:24","nodeType":"YulTypedName","src":"5326:3:24","type":""}]},{"nativeSrc":"5348:27:24","nodeType":"YulVariableDeclaration","src":"5348:27:24","value":{"arguments":[{"name":"value0","nativeSrc":"5368:6:24","nodeType":"YulIdentifier","src":"5368:6:24"}],"functionName":{"name":"mload","nativeSrc":"5362:5:24","nodeType":"YulIdentifier","src":"5362:5:24"},"nativeSrc":"5362:13:24","nodeType":"YulFunctionCall","src":"5362:13:24"},"variables":[{"name":"length","nativeSrc":"5352:6:24","nodeType":"YulTypedName","src":"5352:6:24","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"5391:6:24","nodeType":"YulIdentifier","src":"5391:6:24"},{"name":"length","nativeSrc":"5399:6:24","nodeType":"YulIdentifier","src":"5399:6:24"}],"functionName":{"name":"mstore","nativeSrc":"5384:6:24","nodeType":"YulIdentifier","src":"5384:6:24"},"nativeSrc":"5384:22:24","nodeType":"YulFunctionCall","src":"5384:22:24"},"nativeSrc":"5384:22:24","nodeType":"YulExpressionStatement","src":"5384:22:24"},{"nativeSrc":"5415:25:24","nodeType":"YulAssignment","src":"5415:25:24","value":{"arguments":[{"name":"headStart","nativeSrc":"5426:9:24","nodeType":"YulIdentifier","src":"5426:9:24"},{"kind":"number","nativeSrc":"5437:2:24","nodeType":"YulLiteral","src":"5437:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5422:3:24","nodeType":"YulIdentifier","src":"5422:3:24"},"nativeSrc":"5422:18:24","nodeType":"YulFunctionCall","src":"5422:18:24"},"variableNames":[{"name":"pos","nativeSrc":"5415:3:24","nodeType":"YulIdentifier","src":"5415:3:24"}]},{"nativeSrc":"5449:29:24","nodeType":"YulVariableDeclaration","src":"5449:29:24","value":{"arguments":[{"name":"value0","nativeSrc":"5467:6:24","nodeType":"YulIdentifier","src":"5467:6:24"},{"kind":"number","nativeSrc":"5475:2:24","nodeType":"YulLiteral","src":"5475:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5463:3:24","nodeType":"YulIdentifier","src":"5463:3:24"},"nativeSrc":"5463:15:24","nodeType":"YulFunctionCall","src":"5463:15:24"},"variables":[{"name":"srcPtr","nativeSrc":"5453:6:24","nodeType":"YulTypedName","src":"5453:6:24","type":""}]},{"nativeSrc":"5487:10:24","nodeType":"YulVariableDeclaration","src":"5487:10:24","value":{"kind":"number","nativeSrc":"5496:1:24","nodeType":"YulLiteral","src":"5496:1:24","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"5491:1:24","nodeType":"YulTypedName","src":"5491:1:24","type":""}]},{"body":{"nativeSrc":"5555:169:24","nodeType":"YulBlock","src":"5555:169:24","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5576:3:24","nodeType":"YulIdentifier","src":"5576:3:24"},{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"5591:6:24","nodeType":"YulIdentifier","src":"5591:6:24"}],"functionName":{"name":"mload","nativeSrc":"5585:5:24","nodeType":"YulIdentifier","src":"5585:5:24"},"nativeSrc":"5585:13:24","nodeType":"YulFunctionCall","src":"5585:13:24"},{"kind":"number","nativeSrc":"5600:42:24","nodeType":"YulLiteral","src":"5600:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5581:3:24","nodeType":"YulIdentifier","src":"5581:3:24"},"nativeSrc":"5581:62:24","nodeType":"YulFunctionCall","src":"5581:62:24"}],"functionName":{"name":"mstore","nativeSrc":"5569:6:24","nodeType":"YulIdentifier","src":"5569:6:24"},"nativeSrc":"5569:75:24","nodeType":"YulFunctionCall","src":"5569:75:24"},"nativeSrc":"5569:75:24","nodeType":"YulExpressionStatement","src":"5569:75:24"},{"nativeSrc":"5657:19:24","nodeType":"YulAssignment","src":"5657:19:24","value":{"arguments":[{"name":"pos","nativeSrc":"5668:3:24","nodeType":"YulIdentifier","src":"5668:3:24"},{"name":"_1","nativeSrc":"5673:2:24","nodeType":"YulIdentifier","src":"5673:2:24"}],"functionName":{"name":"add","nativeSrc":"5664:3:24","nodeType":"YulIdentifier","src":"5664:3:24"},"nativeSrc":"5664:12:24","nodeType":"YulFunctionCall","src":"5664:12:24"},"variableNames":[{"name":"pos","nativeSrc":"5657:3:24","nodeType":"YulIdentifier","src":"5657:3:24"}]},{"nativeSrc":"5689:25:24","nodeType":"YulAssignment","src":"5689:25:24","value":{"arguments":[{"name":"srcPtr","nativeSrc":"5703:6:24","nodeType":"YulIdentifier","src":"5703:6:24"},{"name":"_1","nativeSrc":"5711:2:24","nodeType":"YulIdentifier","src":"5711:2:24"}],"functionName":{"name":"add","nativeSrc":"5699:3:24","nodeType":"YulIdentifier","src":"5699:3:24"},"nativeSrc":"5699:15:24","nodeType":"YulFunctionCall","src":"5699:15:24"},"variableNames":[{"name":"srcPtr","nativeSrc":"5689:6:24","nodeType":"YulIdentifier","src":"5689:6:24"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5517:1:24","nodeType":"YulIdentifier","src":"5517:1:24"},{"name":"length","nativeSrc":"5520:6:24","nodeType":"YulIdentifier","src":"5520:6:24"}],"functionName":{"name":"lt","nativeSrc":"5514:2:24","nodeType":"YulIdentifier","src":"5514:2:24"},"nativeSrc":"5514:13:24","nodeType":"YulFunctionCall","src":"5514:13:24"},"nativeSrc":"5506:218:24","nodeType":"YulForLoop","post":{"nativeSrc":"5528:18:24","nodeType":"YulBlock","src":"5528:18:24","statements":[{"nativeSrc":"5530:14:24","nodeType":"YulAssignment","src":"5530:14:24","value":{"arguments":[{"name":"i","nativeSrc":"5539:1:24","nodeType":"YulIdentifier","src":"5539:1:24"},{"kind":"number","nativeSrc":"5542:1:24","nodeType":"YulLiteral","src":"5542:1:24","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5535:3:24","nodeType":"YulIdentifier","src":"5535:3:24"},"nativeSrc":"5535:9:24","nodeType":"YulFunctionCall","src":"5535:9:24"},"variableNames":[{"name":"i","nativeSrc":"5530:1:24","nodeType":"YulIdentifier","src":"5530:1:24"}]}]},"pre":{"nativeSrc":"5510:3:24","nodeType":"YulBlock","src":"5510:3:24","statements":[]},"src":"5506:218:24"},{"nativeSrc":"5733:11:24","nodeType":"YulAssignment","src":"5733:11:24","value":{"name":"pos","nativeSrc":"5741:3:24","nodeType":"YulIdentifier","src":"5741:3:24"},"variableNames":[{"name":"tail","nativeSrc":"5733:4:24","nodeType":"YulIdentifier","src":"5733:4:24"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"5069:681:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5189:9:24","nodeType":"YulTypedName","src":"5189:9:24","type":""},{"name":"value0","nativeSrc":"5200:6:24","nodeType":"YulTypedName","src":"5200:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5211:4:24","nodeType":"YulTypedName","src":"5211:4:24","type":""}],"src":"5069:681:24"},{"body":{"nativeSrc":"5787:152:24","nodeType":"YulBlock","src":"5787:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5804:1:24","nodeType":"YulLiteral","src":"5804:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5807:77:24","nodeType":"YulLiteral","src":"5807:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5797:6:24","nodeType":"YulIdentifier","src":"5797:6:24"},"nativeSrc":"5797:88:24","nodeType":"YulFunctionCall","src":"5797:88:24"},"nativeSrc":"5797:88:24","nodeType":"YulExpressionStatement","src":"5797:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5901:1:24","nodeType":"YulLiteral","src":"5901:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"5904:4:24","nodeType":"YulLiteral","src":"5904:4:24","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5894:6:24","nodeType":"YulIdentifier","src":"5894:6:24"},"nativeSrc":"5894:15:24","nodeType":"YulFunctionCall","src":"5894:15:24"},"nativeSrc":"5894:15:24","nodeType":"YulExpressionStatement","src":"5894:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5925:1:24","nodeType":"YulLiteral","src":"5925:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5928:4:24","nodeType":"YulLiteral","src":"5928:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5918:6:24","nodeType":"YulIdentifier","src":"5918:6:24"},"nativeSrc":"5918:15:24","nodeType":"YulFunctionCall","src":"5918:15:24"},"nativeSrc":"5918:15:24","nodeType":"YulExpressionStatement","src":"5918:15:24"}]},"name":"panic_error_0x32","nativeSrc":"5755:184:24","nodeType":"YulFunctionDefinition","src":"5755:184:24"},{"body":{"nativeSrc":"6118:237:24","nodeType":"YulBlock","src":"6118:237:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6135:9:24","nodeType":"YulIdentifier","src":"6135:9:24"},{"kind":"number","nativeSrc":"6146:2:24","nodeType":"YulLiteral","src":"6146:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6128:6:24","nodeType":"YulIdentifier","src":"6128:6:24"},"nativeSrc":"6128:21:24","nodeType":"YulFunctionCall","src":"6128:21:24"},"nativeSrc":"6128:21:24","nodeType":"YulExpressionStatement","src":"6128:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6169:9:24","nodeType":"YulIdentifier","src":"6169:9:24"},{"kind":"number","nativeSrc":"6180:2:24","nodeType":"YulLiteral","src":"6180:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6165:3:24","nodeType":"YulIdentifier","src":"6165:3:24"},"nativeSrc":"6165:18:24","nodeType":"YulFunctionCall","src":"6165:18:24"},{"kind":"number","nativeSrc":"6185:2:24","nodeType":"YulLiteral","src":"6185:2:24","type":"","value":"47"}],"functionName":{"name":"mstore","nativeSrc":"6158:6:24","nodeType":"YulIdentifier","src":"6158:6:24"},"nativeSrc":"6158:30:24","nodeType":"YulFunctionCall","src":"6158:30:24"},"nativeSrc":"6158:30:24","nodeType":"YulExpressionStatement","src":"6158:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6208:9:24","nodeType":"YulIdentifier","src":"6208:9:24"},{"kind":"number","nativeSrc":"6219:2:24","nodeType":"YulLiteral","src":"6219:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6204:3:24","nodeType":"YulIdentifier","src":"6204:3:24"},"nativeSrc":"6204:18:24","nodeType":"YulFunctionCall","src":"6204:18:24"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nativeSrc":"6224:34:24","nodeType":"YulLiteral","src":"6224:34:24","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nativeSrc":"6197:6:24","nodeType":"YulIdentifier","src":"6197:6:24"},"nativeSrc":"6197:62:24","nodeType":"YulFunctionCall","src":"6197:62:24"},"nativeSrc":"6197:62:24","nodeType":"YulExpressionStatement","src":"6197:62:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6279:9:24","nodeType":"YulIdentifier","src":"6279:9:24"},{"kind":"number","nativeSrc":"6290:2:24","nodeType":"YulLiteral","src":"6290:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6275:3:24","nodeType":"YulIdentifier","src":"6275:3:24"},"nativeSrc":"6275:18:24","nodeType":"YulFunctionCall","src":"6275:18:24"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nativeSrc":"6295:17:24","nodeType":"YulLiteral","src":"6295:17:24","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nativeSrc":"6268:6:24","nodeType":"YulIdentifier","src":"6268:6:24"},"nativeSrc":"6268:45:24","nodeType":"YulFunctionCall","src":"6268:45:24"},"nativeSrc":"6268:45:24","nodeType":"YulExpressionStatement","src":"6268:45:24"},{"nativeSrc":"6322:27:24","nodeType":"YulAssignment","src":"6322:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"6334:9:24","nodeType":"YulIdentifier","src":"6334:9:24"},{"kind":"number","nativeSrc":"6345:3:24","nodeType":"YulLiteral","src":"6345:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6330:3:24","nodeType":"YulIdentifier","src":"6330:3:24"},"nativeSrc":"6330:19:24","nodeType":"YulFunctionCall","src":"6330:19:24"},"variableNames":[{"name":"tail","nativeSrc":"6322:4:24","nodeType":"YulIdentifier","src":"6322:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"5944:411:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6095:9:24","nodeType":"YulTypedName","src":"6095:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6109:4:24","nodeType":"YulTypedName","src":"6109:4:24","type":""}],"src":"5944:411:24"},{"body":{"nativeSrc":"6392:152:24","nodeType":"YulBlock","src":"6392:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6409:1:24","nodeType":"YulLiteral","src":"6409:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"6412:77:24","nodeType":"YulLiteral","src":"6412:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6402:6:24","nodeType":"YulIdentifier","src":"6402:6:24"},"nativeSrc":"6402:88:24","nodeType":"YulFunctionCall","src":"6402:88:24"},"nativeSrc":"6402:88:24","nodeType":"YulExpressionStatement","src":"6402:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6506:1:24","nodeType":"YulLiteral","src":"6506:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"6509:4:24","nodeType":"YulLiteral","src":"6509:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6499:6:24","nodeType":"YulIdentifier","src":"6499:6:24"},"nativeSrc":"6499:15:24","nodeType":"YulFunctionCall","src":"6499:15:24"},"nativeSrc":"6499:15:24","nodeType":"YulExpressionStatement","src":"6499:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6530:1:24","nodeType":"YulLiteral","src":"6530:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"6533:4:24","nodeType":"YulLiteral","src":"6533:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6523:6:24","nodeType":"YulIdentifier","src":"6523:6:24"},"nativeSrc":"6523:15:24","nodeType":"YulFunctionCall","src":"6523:15:24"},"nativeSrc":"6523:15:24","nodeType":"YulExpressionStatement","src":"6523:15:24"}]},"name":"panic_error_0x11","nativeSrc":"6360:184:24","nodeType":"YulFunctionDefinition","src":"6360:184:24"},{"body":{"nativeSrc":"6598:79:24","nodeType":"YulBlock","src":"6598:79:24","statements":[{"nativeSrc":"6608:17:24","nodeType":"YulAssignment","src":"6608:17:24","value":{"arguments":[{"name":"x","nativeSrc":"6620:1:24","nodeType":"YulIdentifier","src":"6620:1:24"},{"name":"y","nativeSrc":"6623:1:24","nodeType":"YulIdentifier","src":"6623:1:24"}],"functionName":{"name":"sub","nativeSrc":"6616:3:24","nodeType":"YulIdentifier","src":"6616:3:24"},"nativeSrc":"6616:9:24","nodeType":"YulFunctionCall","src":"6616:9:24"},"variableNames":[{"name":"diff","nativeSrc":"6608:4:24","nodeType":"YulIdentifier","src":"6608:4:24"}]},{"body":{"nativeSrc":"6649:22:24","nodeType":"YulBlock","src":"6649:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6651:16:24","nodeType":"YulIdentifier","src":"6651:16:24"},"nativeSrc":"6651:18:24","nodeType":"YulFunctionCall","src":"6651:18:24"},"nativeSrc":"6651:18:24","nodeType":"YulExpressionStatement","src":"6651:18:24"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6640:4:24","nodeType":"YulIdentifier","src":"6640:4:24"},{"name":"x","nativeSrc":"6646:1:24","nodeType":"YulIdentifier","src":"6646:1:24"}],"functionName":{"name":"gt","nativeSrc":"6637:2:24","nodeType":"YulIdentifier","src":"6637:2:24"},"nativeSrc":"6637:11:24","nodeType":"YulFunctionCall","src":"6637:11:24"},"nativeSrc":"6634:37:24","nodeType":"YulIf","src":"6634:37:24"}]},"name":"checked_sub_t_uint256","nativeSrc":"6549:128:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6580:1:24","nodeType":"YulTypedName","src":"6580:1:24","type":""},{"name":"y","nativeSrc":"6583:1:24","nodeType":"YulTypedName","src":"6583:1:24","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6589:4:24","nodeType":"YulTypedName","src":"6589:4:24","type":""}],"src":"6549:128:24"},{"body":{"nativeSrc":"6734:116:24","nodeType":"YulBlock","src":"6734:116:24","statements":[{"nativeSrc":"6744:20:24","nodeType":"YulAssignment","src":"6744:20:24","value":{"arguments":[{"name":"x","nativeSrc":"6759:1:24","nodeType":"YulIdentifier","src":"6759:1:24"},{"name":"y","nativeSrc":"6762:1:24","nodeType":"YulIdentifier","src":"6762:1:24"}],"functionName":{"name":"mul","nativeSrc":"6755:3:24","nodeType":"YulIdentifier","src":"6755:3:24"},"nativeSrc":"6755:9:24","nodeType":"YulFunctionCall","src":"6755:9:24"},"variableNames":[{"name":"product","nativeSrc":"6744:7:24","nodeType":"YulIdentifier","src":"6744:7:24"}]},{"body":{"nativeSrc":"6822:22:24","nodeType":"YulBlock","src":"6822:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6824:16:24","nodeType":"YulIdentifier","src":"6824:16:24"},"nativeSrc":"6824:18:24","nodeType":"YulFunctionCall","src":"6824:18:24"},"nativeSrc":"6824:18:24","nodeType":"YulExpressionStatement","src":"6824:18:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"6793:1:24","nodeType":"YulIdentifier","src":"6793:1:24"}],"functionName":{"name":"iszero","nativeSrc":"6786:6:24","nodeType":"YulIdentifier","src":"6786:6:24"},"nativeSrc":"6786:9:24","nodeType":"YulFunctionCall","src":"6786:9:24"},{"arguments":[{"name":"y","nativeSrc":"6800:1:24","nodeType":"YulIdentifier","src":"6800:1:24"},{"arguments":[{"name":"product","nativeSrc":"6807:7:24","nodeType":"YulIdentifier","src":"6807:7:24"},{"name":"x","nativeSrc":"6816:1:24","nodeType":"YulIdentifier","src":"6816:1:24"}],"functionName":{"name":"div","nativeSrc":"6803:3:24","nodeType":"YulIdentifier","src":"6803:3:24"},"nativeSrc":"6803:15:24","nodeType":"YulFunctionCall","src":"6803:15:24"}],"functionName":{"name":"eq","nativeSrc":"6797:2:24","nodeType":"YulIdentifier","src":"6797:2:24"},"nativeSrc":"6797:22:24","nodeType":"YulFunctionCall","src":"6797:22:24"}],"functionName":{"name":"or","nativeSrc":"6783:2:24","nodeType":"YulIdentifier","src":"6783:2:24"},"nativeSrc":"6783:37:24","nodeType":"YulFunctionCall","src":"6783:37:24"}],"functionName":{"name":"iszero","nativeSrc":"6776:6:24","nodeType":"YulIdentifier","src":"6776:6:24"},"nativeSrc":"6776:45:24","nodeType":"YulFunctionCall","src":"6776:45:24"},"nativeSrc":"6773:71:24","nodeType":"YulIf","src":"6773:71:24"}]},"name":"checked_mul_t_uint256","nativeSrc":"6682:168:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6713:1:24","nodeType":"YulTypedName","src":"6713:1:24","type":""},{"name":"y","nativeSrc":"6716:1:24","nodeType":"YulTypedName","src":"6716:1:24","type":""}],"returnVariables":[{"name":"product","nativeSrc":"6722:7:24","nodeType":"YulTypedName","src":"6722:7:24","type":""}],"src":"6682:168:24"},{"body":{"nativeSrc":"6901:228:24","nodeType":"YulBlock","src":"6901:228:24","statements":[{"body":{"nativeSrc":"6932:168:24","nodeType":"YulBlock","src":"6932:168:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6953:1:24","nodeType":"YulLiteral","src":"6953:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"6956:77:24","nodeType":"YulLiteral","src":"6956:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6946:6:24","nodeType":"YulIdentifier","src":"6946:6:24"},"nativeSrc":"6946:88:24","nodeType":"YulFunctionCall","src":"6946:88:24"},"nativeSrc":"6946:88:24","nodeType":"YulExpressionStatement","src":"6946:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7054:1:24","nodeType":"YulLiteral","src":"7054:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"7057:4:24","nodeType":"YulLiteral","src":"7057:4:24","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"7047:6:24","nodeType":"YulIdentifier","src":"7047:6:24"},"nativeSrc":"7047:15:24","nodeType":"YulFunctionCall","src":"7047:15:24"},"nativeSrc":"7047:15:24","nodeType":"YulExpressionStatement","src":"7047:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7082:1:24","nodeType":"YulLiteral","src":"7082:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"7085:4:24","nodeType":"YulLiteral","src":"7085:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7075:6:24","nodeType":"YulIdentifier","src":"7075:6:24"},"nativeSrc":"7075:15:24","nodeType":"YulFunctionCall","src":"7075:15:24"},"nativeSrc":"7075:15:24","nodeType":"YulExpressionStatement","src":"7075:15:24"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"6921:1:24","nodeType":"YulIdentifier","src":"6921:1:24"}],"functionName":{"name":"iszero","nativeSrc":"6914:6:24","nodeType":"YulIdentifier","src":"6914:6:24"},"nativeSrc":"6914:9:24","nodeType":"YulFunctionCall","src":"6914:9:24"},"nativeSrc":"6911:189:24","nodeType":"YulIf","src":"6911:189:24"},{"nativeSrc":"7109:14:24","nodeType":"YulAssignment","src":"7109:14:24","value":{"arguments":[{"name":"x","nativeSrc":"7118:1:24","nodeType":"YulIdentifier","src":"7118:1:24"},{"name":"y","nativeSrc":"7121:1:24","nodeType":"YulIdentifier","src":"7121:1:24"}],"functionName":{"name":"div","nativeSrc":"7114:3:24","nodeType":"YulIdentifier","src":"7114:3:24"},"nativeSrc":"7114:9:24","nodeType":"YulFunctionCall","src":"7114:9:24"},"variableNames":[{"name":"r","nativeSrc":"7109:1:24","nodeType":"YulIdentifier","src":"7109:1:24"}]}]},"name":"checked_div_t_uint256","nativeSrc":"6855:274:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6886:1:24","nodeType":"YulTypedName","src":"6886:1:24","type":""},{"name":"y","nativeSrc":"6889:1:24","nodeType":"YulTypedName","src":"6889:1:24","type":""}],"returnVariables":[{"name":"r","nativeSrc":"6895:1:24","nodeType":"YulTypedName","src":"6895:1:24","type":""}],"src":"6855:274:24"},{"body":{"nativeSrc":"7215:170:24","nodeType":"YulBlock","src":"7215:170:24","statements":[{"body":{"nativeSrc":"7261:16:24","nodeType":"YulBlock","src":"7261:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7270:1:24","nodeType":"YulLiteral","src":"7270:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"7273:1:24","nodeType":"YulLiteral","src":"7273:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7263:6:24","nodeType":"YulIdentifier","src":"7263:6:24"},"nativeSrc":"7263:12:24","nodeType":"YulFunctionCall","src":"7263:12:24"},"nativeSrc":"7263:12:24","nodeType":"YulExpressionStatement","src":"7263:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7236:7:24","nodeType":"YulIdentifier","src":"7236:7:24"},{"name":"headStart","nativeSrc":"7245:9:24","nodeType":"YulIdentifier","src":"7245:9:24"}],"functionName":{"name":"sub","nativeSrc":"7232:3:24","nodeType":"YulIdentifier","src":"7232:3:24"},"nativeSrc":"7232:23:24","nodeType":"YulFunctionCall","src":"7232:23:24"},{"kind":"number","nativeSrc":"7257:2:24","nodeType":"YulLiteral","src":"7257:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7228:3:24","nodeType":"YulIdentifier","src":"7228:3:24"},"nativeSrc":"7228:32:24","nodeType":"YulFunctionCall","src":"7228:32:24"},"nativeSrc":"7225:52:24","nodeType":"YulIf","src":"7225:52:24"},{"nativeSrc":"7286:29:24","nodeType":"YulVariableDeclaration","src":"7286:29:24","value":{"arguments":[{"name":"headStart","nativeSrc":"7305:9:24","nodeType":"YulIdentifier","src":"7305:9:24"}],"functionName":{"name":"mload","nativeSrc":"7299:5:24","nodeType":"YulIdentifier","src":"7299:5:24"},"nativeSrc":"7299:16:24","nodeType":"YulFunctionCall","src":"7299:16:24"},"variables":[{"name":"value","nativeSrc":"7290:5:24","nodeType":"YulTypedName","src":"7290:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7349:5:24","nodeType":"YulIdentifier","src":"7349:5:24"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7324:24:24","nodeType":"YulIdentifier","src":"7324:24:24"},"nativeSrc":"7324:31:24","nodeType":"YulFunctionCall","src":"7324:31:24"},"nativeSrc":"7324:31:24","nodeType":"YulExpressionStatement","src":"7324:31:24"},{"nativeSrc":"7364:15:24","nodeType":"YulAssignment","src":"7364:15:24","value":{"name":"value","nativeSrc":"7374:5:24","nodeType":"YulIdentifier","src":"7374:5:24"},"variableNames":[{"name":"value0","nativeSrc":"7364:6:24","nodeType":"YulIdentifier","src":"7364:6:24"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"7134:251:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7181:9:24","nodeType":"YulTypedName","src":"7181:9:24","type":""},{"name":"dataEnd","nativeSrc":"7192:7:24","nodeType":"YulTypedName","src":"7192:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7204:6:24","nodeType":"YulTypedName","src":"7204:6:24","type":""}],"src":"7134:251:24"},{"body":{"nativeSrc":"7456:184:24","nodeType":"YulBlock","src":"7456:184:24","statements":[{"nativeSrc":"7466:10:24","nodeType":"YulVariableDeclaration","src":"7466:10:24","value":{"kind":"number","nativeSrc":"7475:1:24","nodeType":"YulLiteral","src":"7475:1:24","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7470:1:24","nodeType":"YulTypedName","src":"7470:1:24","type":""}]},{"body":{"nativeSrc":"7535:63:24","nodeType":"YulBlock","src":"7535:63:24","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7560:3:24","nodeType":"YulIdentifier","src":"7560:3:24"},{"name":"i","nativeSrc":"7565:1:24","nodeType":"YulIdentifier","src":"7565:1:24"}],"functionName":{"name":"add","nativeSrc":"7556:3:24","nodeType":"YulIdentifier","src":"7556:3:24"},"nativeSrc":"7556:11:24","nodeType":"YulFunctionCall","src":"7556:11:24"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"7579:3:24","nodeType":"YulIdentifier","src":"7579:3:24"},{"name":"i","nativeSrc":"7584:1:24","nodeType":"YulIdentifier","src":"7584:1:24"}],"functionName":{"name":"add","nativeSrc":"7575:3:24","nodeType":"YulIdentifier","src":"7575:3:24"},"nativeSrc":"7575:11:24","nodeType":"YulFunctionCall","src":"7575:11:24"}],"functionName":{"name":"mload","nativeSrc":"7569:5:24","nodeType":"YulIdentifier","src":"7569:5:24"},"nativeSrc":"7569:18:24","nodeType":"YulFunctionCall","src":"7569:18:24"}],"functionName":{"name":"mstore","nativeSrc":"7549:6:24","nodeType":"YulIdentifier","src":"7549:6:24"},"nativeSrc":"7549:39:24","nodeType":"YulFunctionCall","src":"7549:39:24"},"nativeSrc":"7549:39:24","nodeType":"YulExpressionStatement","src":"7549:39:24"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7496:1:24","nodeType":"YulIdentifier","src":"7496:1:24"},{"name":"length","nativeSrc":"7499:6:24","nodeType":"YulIdentifier","src":"7499:6:24"}],"functionName":{"name":"lt","nativeSrc":"7493:2:24","nodeType":"YulIdentifier","src":"7493:2:24"},"nativeSrc":"7493:13:24","nodeType":"YulFunctionCall","src":"7493:13:24"},"nativeSrc":"7485:113:24","nodeType":"YulForLoop","post":{"nativeSrc":"7507:19:24","nodeType":"YulBlock","src":"7507:19:24","statements":[{"nativeSrc":"7509:15:24","nodeType":"YulAssignment","src":"7509:15:24","value":{"arguments":[{"name":"i","nativeSrc":"7518:1:24","nodeType":"YulIdentifier","src":"7518:1:24"},{"kind":"number","nativeSrc":"7521:2:24","nodeType":"YulLiteral","src":"7521:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7514:3:24","nodeType":"YulIdentifier","src":"7514:3:24"},"nativeSrc":"7514:10:24","nodeType":"YulFunctionCall","src":"7514:10:24"},"variableNames":[{"name":"i","nativeSrc":"7509:1:24","nodeType":"YulIdentifier","src":"7509:1:24"}]}]},"pre":{"nativeSrc":"7489:3:24","nodeType":"YulBlock","src":"7489:3:24","statements":[]},"src":"7485:113:24"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7618:3:24","nodeType":"YulIdentifier","src":"7618:3:24"},{"name":"length","nativeSrc":"7623:6:24","nodeType":"YulIdentifier","src":"7623:6:24"}],"functionName":{"name":"add","nativeSrc":"7614:3:24","nodeType":"YulIdentifier","src":"7614:3:24"},"nativeSrc":"7614:16:24","nodeType":"YulFunctionCall","src":"7614:16:24"},{"kind":"number","nativeSrc":"7632:1:24","nodeType":"YulLiteral","src":"7632:1:24","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7607:6:24","nodeType":"YulIdentifier","src":"7607:6:24"},"nativeSrc":"7607:27:24","nodeType":"YulFunctionCall","src":"7607:27:24"},"nativeSrc":"7607:27:24","nodeType":"YulExpressionStatement","src":"7607:27:24"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"7390:250:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"7434:3:24","nodeType":"YulTypedName","src":"7434:3:24","type":""},{"name":"dst","nativeSrc":"7439:3:24","nodeType":"YulTypedName","src":"7439:3:24","type":""},{"name":"length","nativeSrc":"7444:6:24","nodeType":"YulTypedName","src":"7444:6:24","type":""}],"src":"7390:250:24"},{"body":{"nativeSrc":"8034:423:24","nodeType":"YulBlock","src":"8034:423:24","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8051:3:24","nodeType":"YulIdentifier","src":"8051:3:24"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nativeSrc":"8056:25:24","nodeType":"YulLiteral","src":"8056:25:24","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nativeSrc":"8044:6:24","nodeType":"YulIdentifier","src":"8044:6:24"},"nativeSrc":"8044:38:24","nodeType":"YulFunctionCall","src":"8044:38:24"},"nativeSrc":"8044:38:24","nodeType":"YulExpressionStatement","src":"8044:38:24"},{"nativeSrc":"8091:27:24","nodeType":"YulVariableDeclaration","src":"8091:27:24","value":{"arguments":[{"name":"value0","nativeSrc":"8111:6:24","nodeType":"YulIdentifier","src":"8111:6:24"}],"functionName":{"name":"mload","nativeSrc":"8105:5:24","nodeType":"YulIdentifier","src":"8105:5:24"},"nativeSrc":"8105:13:24","nodeType":"YulFunctionCall","src":"8105:13:24"},"variables":[{"name":"length","nativeSrc":"8095:6:24","nodeType":"YulTypedName","src":"8095:6:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"8166:6:24","nodeType":"YulIdentifier","src":"8166:6:24"},{"kind":"number","nativeSrc":"8174:4:24","nodeType":"YulLiteral","src":"8174:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8162:3:24","nodeType":"YulIdentifier","src":"8162:3:24"},"nativeSrc":"8162:17:24","nodeType":"YulFunctionCall","src":"8162:17:24"},{"arguments":[{"name":"pos","nativeSrc":"8185:3:24","nodeType":"YulIdentifier","src":"8185:3:24"},{"kind":"number","nativeSrc":"8190:2:24","nodeType":"YulLiteral","src":"8190:2:24","type":"","value":"23"}],"functionName":{"name":"add","nativeSrc":"8181:3:24","nodeType":"YulIdentifier","src":"8181:3:24"},"nativeSrc":"8181:12:24","nodeType":"YulFunctionCall","src":"8181:12:24"},{"name":"length","nativeSrc":"8195:6:24","nodeType":"YulIdentifier","src":"8195:6:24"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"8127:34:24","nodeType":"YulIdentifier","src":"8127:34:24"},"nativeSrc":"8127:75:24","nodeType":"YulFunctionCall","src":"8127:75:24"},"nativeSrc":"8127:75:24","nodeType":"YulExpressionStatement","src":"8127:75:24"},{"nativeSrc":"8211:26:24","nodeType":"YulVariableDeclaration","src":"8211:26:24","value":{"arguments":[{"name":"pos","nativeSrc":"8225:3:24","nodeType":"YulIdentifier","src":"8225:3:24"},{"name":"length","nativeSrc":"8230:6:24","nodeType":"YulIdentifier","src":"8230:6:24"}],"functionName":{"name":"add","nativeSrc":"8221:3:24","nodeType":"YulIdentifier","src":"8221:3:24"},"nativeSrc":"8221:16:24","nodeType":"YulFunctionCall","src":"8221:16:24"},"variables":[{"name":"_1","nativeSrc":"8215:2:24","nodeType":"YulTypedName","src":"8215:2:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"8257:2:24","nodeType":"YulIdentifier","src":"8257:2:24"},{"kind":"number","nativeSrc":"8261:2:24","nodeType":"YulLiteral","src":"8261:2:24","type":"","value":"23"}],"functionName":{"name":"add","nativeSrc":"8253:3:24","nodeType":"YulIdentifier","src":"8253:3:24"},"nativeSrc":"8253:11:24","nodeType":"YulFunctionCall","src":"8253:11:24"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nativeSrc":"8266:19:24","nodeType":"YulLiteral","src":"8266:19:24","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nativeSrc":"8246:6:24","nodeType":"YulIdentifier","src":"8246:6:24"},"nativeSrc":"8246:40:24","nodeType":"YulFunctionCall","src":"8246:40:24"},"nativeSrc":"8246:40:24","nodeType":"YulExpressionStatement","src":"8246:40:24"},{"nativeSrc":"8295:29:24","nodeType":"YulVariableDeclaration","src":"8295:29:24","value":{"arguments":[{"name":"value1","nativeSrc":"8317:6:24","nodeType":"YulIdentifier","src":"8317:6:24"}],"functionName":{"name":"mload","nativeSrc":"8311:5:24","nodeType":"YulIdentifier","src":"8311:5:24"},"nativeSrc":"8311:13:24","nodeType":"YulFunctionCall","src":"8311:13:24"},"variables":[{"name":"length_1","nativeSrc":"8299:8:24","nodeType":"YulTypedName","src":"8299:8:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"8372:6:24","nodeType":"YulIdentifier","src":"8372:6:24"},{"kind":"number","nativeSrc":"8380:4:24","nodeType":"YulLiteral","src":"8380:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8368:3:24","nodeType":"YulIdentifier","src":"8368:3:24"},"nativeSrc":"8368:17:24","nodeType":"YulFunctionCall","src":"8368:17:24"},{"arguments":[{"name":"_1","nativeSrc":"8391:2:24","nodeType":"YulIdentifier","src":"8391:2:24"},{"kind":"number","nativeSrc":"8395:2:24","nodeType":"YulLiteral","src":"8395:2:24","type":"","value":"40"}],"functionName":{"name":"add","nativeSrc":"8387:3:24","nodeType":"YulIdentifier","src":"8387:3:24"},"nativeSrc":"8387:11:24","nodeType":"YulFunctionCall","src":"8387:11:24"},{"name":"length_1","nativeSrc":"8400:8:24","nodeType":"YulIdentifier","src":"8400:8:24"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"8333:34:24","nodeType":"YulIdentifier","src":"8333:34:24"},"nativeSrc":"8333:76:24","nodeType":"YulFunctionCall","src":"8333:76:24"},"nativeSrc":"8333:76:24","nodeType":"YulExpressionStatement","src":"8333:76:24"},{"nativeSrc":"8418:33:24","nodeType":"YulAssignment","src":"8418:33:24","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"8433:2:24","nodeType":"YulIdentifier","src":"8433:2:24"},{"name":"length_1","nativeSrc":"8437:8:24","nodeType":"YulIdentifier","src":"8437:8:24"}],"functionName":{"name":"add","nativeSrc":"8429:3:24","nodeType":"YulIdentifier","src":"8429:3:24"},"nativeSrc":"8429:17:24","nodeType":"YulFunctionCall","src":"8429:17:24"},{"kind":"number","nativeSrc":"8448:2:24","nodeType":"YulLiteral","src":"8448:2:24","type":"","value":"40"}],"functionName":{"name":"add","nativeSrc":"8425:3:24","nodeType":"YulIdentifier","src":"8425:3:24"},"nativeSrc":"8425:26:24","nodeType":"YulFunctionCall","src":"8425:26:24"},"variableNames":[{"name":"end","nativeSrc":"8418:3:24","nodeType":"YulIdentifier","src":"8418:3:24"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"7645:812:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8002:3:24","nodeType":"YulTypedName","src":"8002:3:24","type":""},{"name":"value1","nativeSrc":"8007:6:24","nodeType":"YulTypedName","src":"8007:6:24","type":""},{"name":"value0","nativeSrc":"8015:6:24","nodeType":"YulTypedName","src":"8015:6:24","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8026:3:24","nodeType":"YulTypedName","src":"8026:3:24","type":""}],"src":"7645:812:24"},{"body":{"nativeSrc":"8583:334:24","nodeType":"YulBlock","src":"8583:334:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8600:9:24","nodeType":"YulIdentifier","src":"8600:9:24"},{"kind":"number","nativeSrc":"8611:2:24","nodeType":"YulLiteral","src":"8611:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8593:6:24","nodeType":"YulIdentifier","src":"8593:6:24"},"nativeSrc":"8593:21:24","nodeType":"YulFunctionCall","src":"8593:21:24"},"nativeSrc":"8593:21:24","nodeType":"YulExpressionStatement","src":"8593:21:24"},{"nativeSrc":"8623:27:24","nodeType":"YulVariableDeclaration","src":"8623:27:24","value":{"arguments":[{"name":"value0","nativeSrc":"8643:6:24","nodeType":"YulIdentifier","src":"8643:6:24"}],"functionName":{"name":"mload","nativeSrc":"8637:5:24","nodeType":"YulIdentifier","src":"8637:5:24"},"nativeSrc":"8637:13:24","nodeType":"YulFunctionCall","src":"8637:13:24"},"variables":[{"name":"length","nativeSrc":"8627:6:24","nodeType":"YulTypedName","src":"8627:6:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8670:9:24","nodeType":"YulIdentifier","src":"8670:9:24"},{"kind":"number","nativeSrc":"8681:2:24","nodeType":"YulLiteral","src":"8681:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8666:3:24","nodeType":"YulIdentifier","src":"8666:3:24"},"nativeSrc":"8666:18:24","nodeType":"YulFunctionCall","src":"8666:18:24"},{"name":"length","nativeSrc":"8686:6:24","nodeType":"YulIdentifier","src":"8686:6:24"}],"functionName":{"name":"mstore","nativeSrc":"8659:6:24","nodeType":"YulIdentifier","src":"8659:6:24"},"nativeSrc":"8659:34:24","nodeType":"YulFunctionCall","src":"8659:34:24"},"nativeSrc":"8659:34:24","nodeType":"YulExpressionStatement","src":"8659:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"8741:6:24","nodeType":"YulIdentifier","src":"8741:6:24"},{"kind":"number","nativeSrc":"8749:2:24","nodeType":"YulLiteral","src":"8749:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8737:3:24","nodeType":"YulIdentifier","src":"8737:3:24"},"nativeSrc":"8737:15:24","nodeType":"YulFunctionCall","src":"8737:15:24"},{"arguments":[{"name":"headStart","nativeSrc":"8758:9:24","nodeType":"YulIdentifier","src":"8758:9:24"},{"kind":"number","nativeSrc":"8769:2:24","nodeType":"YulLiteral","src":"8769:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8754:3:24","nodeType":"YulIdentifier","src":"8754:3:24"},"nativeSrc":"8754:18:24","nodeType":"YulFunctionCall","src":"8754:18:24"},{"name":"length","nativeSrc":"8774:6:24","nodeType":"YulIdentifier","src":"8774:6:24"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"8702:34:24","nodeType":"YulIdentifier","src":"8702:34:24"},"nativeSrc":"8702:79:24","nodeType":"YulFunctionCall","src":"8702:79:24"},"nativeSrc":"8702:79:24","nodeType":"YulExpressionStatement","src":"8702:79:24"},{"nativeSrc":"8790:121:24","nodeType":"YulAssignment","src":"8790:121:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8806:9:24","nodeType":"YulIdentifier","src":"8806:9:24"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8825:6:24","nodeType":"YulIdentifier","src":"8825:6:24"},{"kind":"number","nativeSrc":"8833:2:24","nodeType":"YulLiteral","src":"8833:2:24","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"8821:3:24","nodeType":"YulIdentifier","src":"8821:3:24"},"nativeSrc":"8821:15:24","nodeType":"YulFunctionCall","src":"8821:15:24"},{"kind":"number","nativeSrc":"8838:66:24","nodeType":"YulLiteral","src":"8838:66:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"8817:3:24","nodeType":"YulIdentifier","src":"8817:3:24"},"nativeSrc":"8817:88:24","nodeType":"YulFunctionCall","src":"8817:88:24"}],"functionName":{"name":"add","nativeSrc":"8802:3:24","nodeType":"YulIdentifier","src":"8802:3:24"},"nativeSrc":"8802:104:24","nodeType":"YulFunctionCall","src":"8802:104:24"},{"kind":"number","nativeSrc":"8908:2:24","nodeType":"YulLiteral","src":"8908:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8798:3:24","nodeType":"YulIdentifier","src":"8798:3:24"},"nativeSrc":"8798:113:24","nodeType":"YulFunctionCall","src":"8798:113:24"},"variableNames":[{"name":"tail","nativeSrc":"8790:4:24","nodeType":"YulIdentifier","src":"8790:4:24"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8462:455:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8552:9:24","nodeType":"YulTypedName","src":"8552:9:24","type":""},{"name":"value0","nativeSrc":"8563:6:24","nodeType":"YulTypedName","src":"8563:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8574:4:24","nodeType":"YulTypedName","src":"8574:4:24","type":""}],"src":"8462:455:24"},{"body":{"nativeSrc":"8954:152:24","nodeType":"YulBlock","src":"8954:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8971:1:24","nodeType":"YulLiteral","src":"8971:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"8974:77:24","nodeType":"YulLiteral","src":"8974:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8964:6:24","nodeType":"YulIdentifier","src":"8964:6:24"},"nativeSrc":"8964:88:24","nodeType":"YulFunctionCall","src":"8964:88:24"},"nativeSrc":"8964:88:24","nodeType":"YulExpressionStatement","src":"8964:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9068:1:24","nodeType":"YulLiteral","src":"9068:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"9071:4:24","nodeType":"YulLiteral","src":"9071:4:24","type":"","value":"0x31"}],"functionName":{"name":"mstore","nativeSrc":"9061:6:24","nodeType":"YulIdentifier","src":"9061:6:24"},"nativeSrc":"9061:15:24","nodeType":"YulFunctionCall","src":"9061:15:24"},"nativeSrc":"9061:15:24","nodeType":"YulExpressionStatement","src":"9061:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9092:1:24","nodeType":"YulLiteral","src":"9092:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"9095:4:24","nodeType":"YulLiteral","src":"9095:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9085:6:24","nodeType":"YulIdentifier","src":"9085:6:24"},"nativeSrc":"9085:15:24","nodeType":"YulFunctionCall","src":"9085:15:24"},"nativeSrc":"9085:15:24","nodeType":"YulExpressionStatement","src":"9085:15:24"}]},"name":"panic_error_0x31","nativeSrc":"8922:184:24","nodeType":"YulFunctionDefinition","src":"8922:184:24"},{"body":{"nativeSrc":"9302:14:24","nodeType":"YulBlock","src":"9302:14:24","statements":[{"nativeSrc":"9304:10:24","nodeType":"YulAssignment","src":"9304:10:24","value":{"name":"pos","nativeSrc":"9311:3:24","nodeType":"YulIdentifier","src":"9311:3:24"},"variableNames":[{"name":"end","nativeSrc":"9304:3:24","nodeType":"YulIdentifier","src":"9304:3:24"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"9111:205:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9286:3:24","nodeType":"YulTypedName","src":"9286:3:24","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9294:3:24","nodeType":"YulTypedName","src":"9294:3:24","type":""}],"src":"9111:205:24"},{"body":{"nativeSrc":"9369:77:24","nodeType":"YulBlock","src":"9369:77:24","statements":[{"nativeSrc":"9379:16:24","nodeType":"YulAssignment","src":"9379:16:24","value":{"arguments":[{"name":"x","nativeSrc":"9390:1:24","nodeType":"YulIdentifier","src":"9390:1:24"},{"name":"y","nativeSrc":"9393:1:24","nodeType":"YulIdentifier","src":"9393:1:24"}],"functionName":{"name":"add","nativeSrc":"9386:3:24","nodeType":"YulIdentifier","src":"9386:3:24"},"nativeSrc":"9386:9:24","nodeType":"YulFunctionCall","src":"9386:9:24"},"variableNames":[{"name":"sum","nativeSrc":"9379:3:24","nodeType":"YulIdentifier","src":"9379:3:24"}]},{"body":{"nativeSrc":"9418:22:24","nodeType":"YulBlock","src":"9418:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9420:16:24","nodeType":"YulIdentifier","src":"9420:16:24"},"nativeSrc":"9420:18:24","nodeType":"YulFunctionCall","src":"9420:18:24"},"nativeSrc":"9420:18:24","nodeType":"YulExpressionStatement","src":"9420:18:24"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"9410:1:24","nodeType":"YulIdentifier","src":"9410:1:24"},{"name":"sum","nativeSrc":"9413:3:24","nodeType":"YulIdentifier","src":"9413:3:24"}],"functionName":{"name":"gt","nativeSrc":"9407:2:24","nodeType":"YulIdentifier","src":"9407:2:24"},"nativeSrc":"9407:10:24","nodeType":"YulFunctionCall","src":"9407:10:24"},"nativeSrc":"9404:36:24","nodeType":"YulIf","src":"9404:36:24"}]},"name":"checked_add_t_uint256","nativeSrc":"9321:125:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9352:1:24","nodeType":"YulTypedName","src":"9352:1:24","type":""},{"name":"y","nativeSrc":"9355:1:24","nodeType":"YulTypedName","src":"9355:1:24","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"9361:3:24","nodeType":"YulTypedName","src":"9361:3:24","type":""}],"src":"9321:125:24"},{"body":{"nativeSrc":"9483:152:24","nodeType":"YulBlock","src":"9483:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9500:1:24","nodeType":"YulLiteral","src":"9500:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"9503:77:24","nodeType":"YulLiteral","src":"9503:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9493:6:24","nodeType":"YulIdentifier","src":"9493:6:24"},"nativeSrc":"9493:88:24","nodeType":"YulFunctionCall","src":"9493:88:24"},"nativeSrc":"9493:88:24","nodeType":"YulExpressionStatement","src":"9493:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9597:1:24","nodeType":"YulLiteral","src":"9597:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"9600:4:24","nodeType":"YulLiteral","src":"9600:4:24","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"9590:6:24","nodeType":"YulIdentifier","src":"9590:6:24"},"nativeSrc":"9590:15:24","nodeType":"YulFunctionCall","src":"9590:15:24"},"nativeSrc":"9590:15:24","nodeType":"YulExpressionStatement","src":"9590:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9621:1:24","nodeType":"YulLiteral","src":"9621:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"9624:4:24","nodeType":"YulLiteral","src":"9624:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9614:6:24","nodeType":"YulIdentifier","src":"9614:6:24"},"nativeSrc":"9614:15:24","nodeType":"YulFunctionCall","src":"9614:15:24"},"nativeSrc":"9614:15:24","nodeType":"YulExpressionStatement","src":"9614:15:24"}]},"name":"panic_error_0x41","nativeSrc":"9451:184:24","nodeType":"YulFunctionDefinition","src":"9451:184:24"},{"body":{"nativeSrc":"9687:149:24","nodeType":"YulBlock","src":"9687:149:24","statements":[{"body":{"nativeSrc":"9714:22:24","nodeType":"YulBlock","src":"9714:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9716:16:24","nodeType":"YulIdentifier","src":"9716:16:24"},"nativeSrc":"9716:18:24","nodeType":"YulFunctionCall","src":"9716:18:24"},"nativeSrc":"9716:18:24","nodeType":"YulExpressionStatement","src":"9716:18:24"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"9707:5:24","nodeType":"YulIdentifier","src":"9707:5:24"}],"functionName":{"name":"iszero","nativeSrc":"9700:6:24","nodeType":"YulIdentifier","src":"9700:6:24"},"nativeSrc":"9700:13:24","nodeType":"YulFunctionCall","src":"9700:13:24"},"nativeSrc":"9697:39:24","nodeType":"YulIf","src":"9697:39:24"},{"nativeSrc":"9745:85:24","nodeType":"YulAssignment","src":"9745:85:24","value":{"arguments":[{"name":"value","nativeSrc":"9756:5:24","nodeType":"YulIdentifier","src":"9756:5:24"},{"kind":"number","nativeSrc":"9763:66:24","nodeType":"YulLiteral","src":"9763:66:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"add","nativeSrc":"9752:3:24","nodeType":"YulIdentifier","src":"9752:3:24"},"nativeSrc":"9752:78:24","nodeType":"YulFunctionCall","src":"9752:78:24"},"variableNames":[{"name":"ret","nativeSrc":"9745:3:24","nodeType":"YulIdentifier","src":"9745:3:24"}]}]},"name":"decrement_t_uint256","nativeSrc":"9640:196:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9669:5:24","nodeType":"YulTypedName","src":"9669:5:24","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"9679:3:24","nodeType":"YulTypedName","src":"9679:3:24","type":""}],"src":"9640:196:24"},{"body":{"nativeSrc":"10015:182:24","nodeType":"YulBlock","src":"10015:182:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10032:9:24","nodeType":"YulIdentifier","src":"10032:9:24"},{"kind":"number","nativeSrc":"10043:2:24","nodeType":"YulLiteral","src":"10043:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10025:6:24","nodeType":"YulIdentifier","src":"10025:6:24"},"nativeSrc":"10025:21:24","nodeType":"YulFunctionCall","src":"10025:21:24"},"nativeSrc":"10025:21:24","nodeType":"YulExpressionStatement","src":"10025:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10066:9:24","nodeType":"YulIdentifier","src":"10066:9:24"},{"kind":"number","nativeSrc":"10077:2:24","nodeType":"YulLiteral","src":"10077:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10062:3:24","nodeType":"YulIdentifier","src":"10062:3:24"},"nativeSrc":"10062:18:24","nodeType":"YulFunctionCall","src":"10062:18:24"},{"kind":"number","nativeSrc":"10082:2:24","nodeType":"YulLiteral","src":"10082:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10055:6:24","nodeType":"YulIdentifier","src":"10055:6:24"},"nativeSrc":"10055:30:24","nodeType":"YulFunctionCall","src":"10055:30:24"},"nativeSrc":"10055:30:24","nodeType":"YulExpressionStatement","src":"10055:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10105:9:24","nodeType":"YulIdentifier","src":"10105:9:24"},{"kind":"number","nativeSrc":"10116:2:24","nodeType":"YulLiteral","src":"10116:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10101:3:24","nodeType":"YulIdentifier","src":"10101:3:24"},"nativeSrc":"10101:18:24","nodeType":"YulFunctionCall","src":"10101:18:24"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nativeSrc":"10121:34:24","nodeType":"YulLiteral","src":"10121:34:24","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nativeSrc":"10094:6:24","nodeType":"YulIdentifier","src":"10094:6:24"},"nativeSrc":"10094:62:24","nodeType":"YulFunctionCall","src":"10094:62:24"},"nativeSrc":"10094:62:24","nodeType":"YulExpressionStatement","src":"10094:62:24"},{"nativeSrc":"10165:26:24","nodeType":"YulAssignment","src":"10165:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"10177:9:24","nodeType":"YulIdentifier","src":"10177:9:24"},{"kind":"number","nativeSrc":"10188:2:24","nodeType":"YulLiteral","src":"10188:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10173:3:24","nodeType":"YulIdentifier","src":"10173:3:24"},"nativeSrc":"10173:18:24","nodeType":"YulFunctionCall","src":"10173:18:24"},"variableNames":[{"name":"tail","nativeSrc":"10165:4:24","nodeType":"YulIdentifier","src":"10165:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9841:356:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9992:9:24","nodeType":"YulTypedName","src":"9992:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10006:4:24","nodeType":"YulTypedName","src":"10006:4:24","type":""}],"src":"9841:356:24"},{"body":{"nativeSrc":"10331:168:24","nodeType":"YulBlock","src":"10331:168:24","statements":[{"nativeSrc":"10341:26:24","nodeType":"YulAssignment","src":"10341:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"10353:9:24","nodeType":"YulIdentifier","src":"10353:9:24"},{"kind":"number","nativeSrc":"10364:2:24","nodeType":"YulLiteral","src":"10364:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10349:3:24","nodeType":"YulIdentifier","src":"10349:3:24"},"nativeSrc":"10349:18:24","nodeType":"YulFunctionCall","src":"10349:18:24"},"variableNames":[{"name":"tail","nativeSrc":"10341:4:24","nodeType":"YulIdentifier","src":"10341:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10383:9:24","nodeType":"YulIdentifier","src":"10383:9:24"},{"arguments":[{"name":"value0","nativeSrc":"10398:6:24","nodeType":"YulIdentifier","src":"10398:6:24"},{"kind":"number","nativeSrc":"10406:42:24","nodeType":"YulLiteral","src":"10406:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10394:3:24","nodeType":"YulIdentifier","src":"10394:3:24"},"nativeSrc":"10394:55:24","nodeType":"YulFunctionCall","src":"10394:55:24"}],"functionName":{"name":"mstore","nativeSrc":"10376:6:24","nodeType":"YulIdentifier","src":"10376:6:24"},"nativeSrc":"10376:74:24","nodeType":"YulFunctionCall","src":"10376:74:24"},"nativeSrc":"10376:74:24","nodeType":"YulExpressionStatement","src":"10376:74:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10470:9:24","nodeType":"YulIdentifier","src":"10470:9:24"},{"kind":"number","nativeSrc":"10481:2:24","nodeType":"YulLiteral","src":"10481:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10466:3:24","nodeType":"YulIdentifier","src":"10466:3:24"},"nativeSrc":"10466:18:24","nodeType":"YulFunctionCall","src":"10466:18:24"},{"name":"value1","nativeSrc":"10486:6:24","nodeType":"YulIdentifier","src":"10486:6:24"}],"functionName":{"name":"mstore","nativeSrc":"10459:6:24","nodeType":"YulIdentifier","src":"10459:6:24"},"nativeSrc":"10459:34:24","nodeType":"YulFunctionCall","src":"10459:34:24"},"nativeSrc":"10459:34:24","nodeType":"YulExpressionStatement","src":"10459:34:24"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"10202:297:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10292:9:24","nodeType":"YulTypedName","src":"10292:9:24","type":""},{"name":"value1","nativeSrc":"10303:6:24","nodeType":"YulTypedName","src":"10303:6:24","type":""},{"name":"value0","nativeSrc":"10311:6:24","nodeType":"YulTypedName","src":"10311:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10322:4:24","nodeType":"YulTypedName","src":"10322:4:24","type":""}],"src":"10202:297:24"},{"body":{"nativeSrc":"10582:167:24","nodeType":"YulBlock","src":"10582:167:24","statements":[{"body":{"nativeSrc":"10628:16:24","nodeType":"YulBlock","src":"10628:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10637:1:24","nodeType":"YulLiteral","src":"10637:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"10640:1:24","nodeType":"YulLiteral","src":"10640:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10630:6:24","nodeType":"YulIdentifier","src":"10630:6:24"},"nativeSrc":"10630:12:24","nodeType":"YulFunctionCall","src":"10630:12:24"},"nativeSrc":"10630:12:24","nodeType":"YulExpressionStatement","src":"10630:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10603:7:24","nodeType":"YulIdentifier","src":"10603:7:24"},{"name":"headStart","nativeSrc":"10612:9:24","nodeType":"YulIdentifier","src":"10612:9:24"}],"functionName":{"name":"sub","nativeSrc":"10599:3:24","nodeType":"YulIdentifier","src":"10599:3:24"},"nativeSrc":"10599:23:24","nodeType":"YulFunctionCall","src":"10599:23:24"},{"kind":"number","nativeSrc":"10624:2:24","nodeType":"YulLiteral","src":"10624:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10595:3:24","nodeType":"YulIdentifier","src":"10595:3:24"},"nativeSrc":"10595:32:24","nodeType":"YulFunctionCall","src":"10595:32:24"},"nativeSrc":"10592:52:24","nodeType":"YulIf","src":"10592:52:24"},{"nativeSrc":"10653:29:24","nodeType":"YulVariableDeclaration","src":"10653:29:24","value":{"arguments":[{"name":"headStart","nativeSrc":"10672:9:24","nodeType":"YulIdentifier","src":"10672:9:24"}],"functionName":{"name":"mload","nativeSrc":"10666:5:24","nodeType":"YulIdentifier","src":"10666:5:24"},"nativeSrc":"10666:16:24","nodeType":"YulFunctionCall","src":"10666:16:24"},"variables":[{"name":"value","nativeSrc":"10657:5:24","nodeType":"YulTypedName","src":"10657:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10713:5:24","nodeType":"YulIdentifier","src":"10713:5:24"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"10691:21:24","nodeType":"YulIdentifier","src":"10691:21:24"},"nativeSrc":"10691:28:24","nodeType":"YulFunctionCall","src":"10691:28:24"},"nativeSrc":"10691:28:24","nodeType":"YulExpressionStatement","src":"10691:28:24"},{"nativeSrc":"10728:15:24","nodeType":"YulAssignment","src":"10728:15:24","value":{"name":"value","nativeSrc":"10738:5:24","nodeType":"YulIdentifier","src":"10738:5:24"},"variableNames":[{"name":"value0","nativeSrc":"10728:6:24","nodeType":"YulIdentifier","src":"10728:6:24"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"10504:245:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10548:9:24","nodeType":"YulTypedName","src":"10548:9:24","type":""},{"name":"dataEnd","nativeSrc":"10559:7:24","nodeType":"YulTypedName","src":"10559:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10571:6:24","nodeType":"YulTypedName","src":"10571:6:24","type":""}],"src":"10504:245:24"},{"body":{"nativeSrc":"10928:232:24","nodeType":"YulBlock","src":"10928:232:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10945:9:24","nodeType":"YulIdentifier","src":"10945:9:24"},{"kind":"number","nativeSrc":"10956:2:24","nodeType":"YulLiteral","src":"10956:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10938:6:24","nodeType":"YulIdentifier","src":"10938:6:24"},"nativeSrc":"10938:21:24","nodeType":"YulFunctionCall","src":"10938:21:24"},"nativeSrc":"10938:21:24","nodeType":"YulExpressionStatement","src":"10938:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10979:9:24","nodeType":"YulIdentifier","src":"10979:9:24"},{"kind":"number","nativeSrc":"10990:2:24","nodeType":"YulLiteral","src":"10990:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10975:3:24","nodeType":"YulIdentifier","src":"10975:3:24"},"nativeSrc":"10975:18:24","nodeType":"YulFunctionCall","src":"10975:18:24"},{"kind":"number","nativeSrc":"10995:2:24","nodeType":"YulLiteral","src":"10995:2:24","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"10968:6:24","nodeType":"YulIdentifier","src":"10968:6:24"},"nativeSrc":"10968:30:24","nodeType":"YulFunctionCall","src":"10968:30:24"},"nativeSrc":"10968:30:24","nodeType":"YulExpressionStatement","src":"10968:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11018:9:24","nodeType":"YulIdentifier","src":"11018:9:24"},{"kind":"number","nativeSrc":"11029:2:24","nodeType":"YulLiteral","src":"11029:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11014:3:24","nodeType":"YulIdentifier","src":"11014:3:24"},"nativeSrc":"11014:18:24","nodeType":"YulFunctionCall","src":"11014:18:24"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"11034:34:24","nodeType":"YulLiteral","src":"11034:34:24","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"11007:6:24","nodeType":"YulIdentifier","src":"11007:6:24"},"nativeSrc":"11007:62:24","nodeType":"YulFunctionCall","src":"11007:62:24"},"nativeSrc":"11007:62:24","nodeType":"YulExpressionStatement","src":"11007:62:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11089:9:24","nodeType":"YulIdentifier","src":"11089:9:24"},{"kind":"number","nativeSrc":"11100:2:24","nodeType":"YulLiteral","src":"11100:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11085:3:24","nodeType":"YulIdentifier","src":"11085:3:24"},"nativeSrc":"11085:18:24","nodeType":"YulFunctionCall","src":"11085:18:24"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"11105:12:24","nodeType":"YulLiteral","src":"11105:12:24","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"11078:6:24","nodeType":"YulIdentifier","src":"11078:6:24"},"nativeSrc":"11078:40:24","nodeType":"YulFunctionCall","src":"11078:40:24"},"nativeSrc":"11078:40:24","nodeType":"YulExpressionStatement","src":"11078:40:24"},{"nativeSrc":"11127:27:24","nodeType":"YulAssignment","src":"11127:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"11139:9:24","nodeType":"YulIdentifier","src":"11139:9:24"},{"kind":"number","nativeSrc":"11150:3:24","nodeType":"YulLiteral","src":"11150:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11135:3:24","nodeType":"YulIdentifier","src":"11135:3:24"},"nativeSrc":"11135:19:24","nodeType":"YulFunctionCall","src":"11135:19:24"},"variableNames":[{"name":"tail","nativeSrc":"11127:4:24","nodeType":"YulIdentifier","src":"11127:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10754:406:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10905:9:24","nodeType":"YulTypedName","src":"10905:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10919:4:24","nodeType":"YulTypedName","src":"10919:4:24","type":""}],"src":"10754:406:24"},{"body":{"nativeSrc":"11339:228:24","nodeType":"YulBlock","src":"11339:228:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11356:9:24","nodeType":"YulIdentifier","src":"11356:9:24"},{"kind":"number","nativeSrc":"11367:2:24","nodeType":"YulLiteral","src":"11367:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11349:6:24","nodeType":"YulIdentifier","src":"11349:6:24"},"nativeSrc":"11349:21:24","nodeType":"YulFunctionCall","src":"11349:21:24"},"nativeSrc":"11349:21:24","nodeType":"YulExpressionStatement","src":"11349:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11390:9:24","nodeType":"YulIdentifier","src":"11390:9:24"},{"kind":"number","nativeSrc":"11401:2:24","nodeType":"YulLiteral","src":"11401:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11386:3:24","nodeType":"YulIdentifier","src":"11386:3:24"},"nativeSrc":"11386:18:24","nodeType":"YulFunctionCall","src":"11386:18:24"},{"kind":"number","nativeSrc":"11406:2:24","nodeType":"YulLiteral","src":"11406:2:24","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"11379:6:24","nodeType":"YulIdentifier","src":"11379:6:24"},"nativeSrc":"11379:30:24","nodeType":"YulFunctionCall","src":"11379:30:24"},"nativeSrc":"11379:30:24","nodeType":"YulExpressionStatement","src":"11379:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11429:9:24","nodeType":"YulIdentifier","src":"11429:9:24"},{"kind":"number","nativeSrc":"11440:2:24","nodeType":"YulLiteral","src":"11440:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11425:3:24","nodeType":"YulIdentifier","src":"11425:3:24"},"nativeSrc":"11425:18:24","nodeType":"YulFunctionCall","src":"11425:18:24"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"11445:34:24","nodeType":"YulLiteral","src":"11445:34:24","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"11418:6:24","nodeType":"YulIdentifier","src":"11418:6:24"},"nativeSrc":"11418:62:24","nodeType":"YulFunctionCall","src":"11418:62:24"},"nativeSrc":"11418:62:24","nodeType":"YulExpressionStatement","src":"11418:62:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11500:9:24","nodeType":"YulIdentifier","src":"11500:9:24"},{"kind":"number","nativeSrc":"11511:2:24","nodeType":"YulLiteral","src":"11511:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11496:3:24","nodeType":"YulIdentifier","src":"11496:3:24"},"nativeSrc":"11496:18:24","nodeType":"YulFunctionCall","src":"11496:18:24"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"11516:8:24","nodeType":"YulLiteral","src":"11516:8:24","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"11489:6:24","nodeType":"YulIdentifier","src":"11489:6:24"},"nativeSrc":"11489:36:24","nodeType":"YulFunctionCall","src":"11489:36:24"},"nativeSrc":"11489:36:24","nodeType":"YulExpressionStatement","src":"11489:36:24"},{"nativeSrc":"11534:27:24","nodeType":"YulAssignment","src":"11534:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"11546:9:24","nodeType":"YulIdentifier","src":"11546:9:24"},{"kind":"number","nativeSrc":"11557:3:24","nodeType":"YulLiteral","src":"11557:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11542:3:24","nodeType":"YulIdentifier","src":"11542:3:24"},"nativeSrc":"11542:19:24","nodeType":"YulFunctionCall","src":"11542:19:24"},"variableNames":[{"name":"tail","nativeSrc":"11534:4:24","nodeType":"YulIdentifier","src":"11534:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11165:402:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11316:9:24","nodeType":"YulTypedName","src":"11316:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11330:4:24","nodeType":"YulTypedName","src":"11330:4:24","type":""}],"src":"11165:402:24"},{"body":{"nativeSrc":"11709:150:24","nodeType":"YulBlock","src":"11709:150:24","statements":[{"nativeSrc":"11719:27:24","nodeType":"YulVariableDeclaration","src":"11719:27:24","value":{"arguments":[{"name":"value0","nativeSrc":"11739:6:24","nodeType":"YulIdentifier","src":"11739:6:24"}],"functionName":{"name":"mload","nativeSrc":"11733:5:24","nodeType":"YulIdentifier","src":"11733:5:24"},"nativeSrc":"11733:13:24","nodeType":"YulFunctionCall","src":"11733:13:24"},"variables":[{"name":"length","nativeSrc":"11723:6:24","nodeType":"YulTypedName","src":"11723:6:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"11794:6:24","nodeType":"YulIdentifier","src":"11794:6:24"},{"kind":"number","nativeSrc":"11802:4:24","nodeType":"YulLiteral","src":"11802:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11790:3:24","nodeType":"YulIdentifier","src":"11790:3:24"},"nativeSrc":"11790:17:24","nodeType":"YulFunctionCall","src":"11790:17:24"},{"name":"pos","nativeSrc":"11809:3:24","nodeType":"YulIdentifier","src":"11809:3:24"},{"name":"length","nativeSrc":"11814:6:24","nodeType":"YulIdentifier","src":"11814:6:24"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"11755:34:24","nodeType":"YulIdentifier","src":"11755:34:24"},"nativeSrc":"11755:66:24","nodeType":"YulFunctionCall","src":"11755:66:24"},"nativeSrc":"11755:66:24","nodeType":"YulExpressionStatement","src":"11755:66:24"},{"nativeSrc":"11830:23:24","nodeType":"YulAssignment","src":"11830:23:24","value":{"arguments":[{"name":"pos","nativeSrc":"11841:3:24","nodeType":"YulIdentifier","src":"11841:3:24"},{"name":"length","nativeSrc":"11846:6:24","nodeType":"YulIdentifier","src":"11846:6:24"}],"functionName":{"name":"add","nativeSrc":"11837:3:24","nodeType":"YulIdentifier","src":"11837:3:24"},"nativeSrc":"11837:16:24","nodeType":"YulFunctionCall","src":"11837:16:24"},"variableNames":[{"name":"end","nativeSrc":"11830:3:24","nodeType":"YulIdentifier","src":"11830:3:24"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"11572:287:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"11685:3:24","nodeType":"YulTypedName","src":"11685:3:24","type":""},{"name":"value0","nativeSrc":"11690:6:24","nodeType":"YulTypedName","src":"11690:6:24","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11701:3:24","nodeType":"YulTypedName","src":"11701:3:24","type":""}],"src":"11572:287:24"},{"body":{"nativeSrc":"12038:179:24","nodeType":"YulBlock","src":"12038:179:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12055:9:24","nodeType":"YulIdentifier","src":"12055:9:24"},{"kind":"number","nativeSrc":"12066:2:24","nodeType":"YulLiteral","src":"12066:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12048:6:24","nodeType":"YulIdentifier","src":"12048:6:24"},"nativeSrc":"12048:21:24","nodeType":"YulFunctionCall","src":"12048:21:24"},"nativeSrc":"12048:21:24","nodeType":"YulExpressionStatement","src":"12048:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12089:9:24","nodeType":"YulIdentifier","src":"12089:9:24"},{"kind":"number","nativeSrc":"12100:2:24","nodeType":"YulLiteral","src":"12100:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12085:3:24","nodeType":"YulIdentifier","src":"12085:3:24"},"nativeSrc":"12085:18:24","nodeType":"YulFunctionCall","src":"12085:18:24"},{"kind":"number","nativeSrc":"12105:2:24","nodeType":"YulLiteral","src":"12105:2:24","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"12078:6:24","nodeType":"YulIdentifier","src":"12078:6:24"},"nativeSrc":"12078:30:24","nodeType":"YulFunctionCall","src":"12078:30:24"},"nativeSrc":"12078:30:24","nodeType":"YulExpressionStatement","src":"12078:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12128:9:24","nodeType":"YulIdentifier","src":"12128:9:24"},{"kind":"number","nativeSrc":"12139:2:24","nodeType":"YulLiteral","src":"12139:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12124:3:24","nodeType":"YulIdentifier","src":"12124:3:24"},"nativeSrc":"12124:18:24","nodeType":"YulFunctionCall","src":"12124:18:24"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"12144:31:24","nodeType":"YulLiteral","src":"12144:31:24","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"12117:6:24","nodeType":"YulIdentifier","src":"12117:6:24"},"nativeSrc":"12117:59:24","nodeType":"YulFunctionCall","src":"12117:59:24"},"nativeSrc":"12117:59:24","nodeType":"YulExpressionStatement","src":"12117:59:24"},{"nativeSrc":"12185:26:24","nodeType":"YulAssignment","src":"12185:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"12197:9:24","nodeType":"YulIdentifier","src":"12197:9:24"},{"kind":"number","nativeSrc":"12208:2:24","nodeType":"YulLiteral","src":"12208:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12193:3:24","nodeType":"YulIdentifier","src":"12193:3:24"},"nativeSrc":"12193:18:24","nodeType":"YulFunctionCall","src":"12193:18:24"},"variableNames":[{"name":"tail","nativeSrc":"12185:4:24","nodeType":"YulIdentifier","src":"12185:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11864:353:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12015:9:24","nodeType":"YulTypedName","src":"12015:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12029:4:24","nodeType":"YulTypedName","src":"12029:4:24","type":""}],"src":"11864:353:24"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IReferee_$573__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_contract$_INodeKey_$426__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"14":[{"length":32,"start":1220},{"length":32,"start":1906},{"length":32,"start":2599},{"length":32,"start":2721},{"length":32,"start":3109}],"17":[{"length":32,"start":1377},{"length":32,"start":4322}],"197":[{"length":32,"start":1272},{"length":32,"start":5168},{"length":32,"start":5385}],"5230":[{"length":32,"start":1461},{"length":32,"start":3229}]},"linkReferences":{},"object":"6080604052600436106101c65760003560e01c8063905eaf1d116100f7578063b7355fb411610095578063dcd50d2e11610064578063dcd50d2e14610617578063e2d18be61461064b578063e58378bb1461066d578063e6ed1180146106a157600080fd5b8063b7355fb414610583578063c2a74752146105a3578063cbd73cb2146105d7578063d547741f146105f757600080fd5b806399248ea7116100d157806399248ea7146104e65780639b6e0d741461051a578063a217fddf1461053a578063a5f957f91461054f57600080fd5b8063905eaf1d1461043f57806391d148541461045f57806395126fe6146104b257600080fd5b80635dff0ce9116101645780637cd727ba1161013e5780637cd727ba146103a157806386f8a03e146103c15780638ad9c511146103f55780638f10369a1461042957600080fd5b80635dff0ce91461033a57806366da5815146103545780636f63b8ab1461037457600080fd5b8063229d683d116101a0578063229d683d1461029c578063248a9ca3146102bc5780632f2ff15d146102fa57806336568abe1461031a57600080fd5b806301ffc9a7146101d25780630f0479b4146102075780631bcdb77a1461027a57600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101f26101ed366004611b74565b6106c1565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b50610255610222366004611bb6565b609c60209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b34801561028657600080fd5b5061029a610295366004611bd8565b61075a565b005b3480156102a857600080fd5b5061029a6102b7366004611c56565b6107db565b3480156102c857600080fd5b506102ec6102d7366004611c98565b60009081526065602052604090206001015490565b6040519081526020016101fe565b34801561030657600080fd5b5061029a610315366004611cd3565b61084b565b34801561032657600080fd5b5061029a610335366004611cd3565b610875565b34801561034657600080fd5b506097546101f29060ff1681565b34801561036057600080fd5b5061029a61036f366004611c98565b61092d565b34801561038057600080fd5b506102ec61038f366004611c98565b609b6020526000908152604090205481565b3480156103ad57600080fd5b5061029a6103bc366004611c56565b610994565b3480156103cd57600080fd5b506102ec7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb181565b34801561040157600080fd5b506102ec7fff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f381565b34801561043557600080fd5b506102ec609a5481565b34801561044b57600080fd5b506101f261045a366004611d03565b610a04565b34801561046b57600080fd5b506101f261047a366004611cd3565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156104be57600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f257600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b34801561052657600080fd5b5061029a610535366004611d20565b610a0f565b34801561054657600080fd5b506102ec600081565b34801561055b57600080fd5b506102557f000000000000000000000000000000000000000000000000000000000000000081565b34801561058f57600080fd5b5061029a61059e366004611d20565b610a89565b3480156105af57600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e357600080fd5b5061029a6105f2366004611d7a565b610b4e565b34801561060357600080fd5b5061029a610612366004611cd3565b610bd7565b34801561062357600080fd5b506102ec7f05e9bce9d0ef4f3ddc258eb9c04459fd66d9887e1079e0b19880fc501a3ddd5f81565b34801561065757600080fd5b50610660610bfc565b6040516101fe9190611d97565b34801561067957600080fd5b506102ec7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b3480156106ad57600080fd5b5061029a6106bc366004611bb6565b610c0d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061075457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146107c9576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107d584848484610c86565b50505050565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb161080581610d36565b60005b828110156107d55761084284848381811061082557610825611df1565b905060200201602081019061083a9190611d03565b609890610d43565b50600101610808565b60008281526065602052604090206001015461086681610d36565b6108708383610d6c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6109298282610e60565b5050565b7fff073d0dcf74639a8d3c1c189ac3a527293f2fbae27f12acbfdaabd420f2a5f361095781610d36565b609a8290556040518281527f951c6f64eb06ec6a6682072cda71420984dd55199006684bb820a80fd7e98793906020015b60405180910390a15050565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb16109be81610d36565b60005b828110156107d5576109fb8484838181106109de576109de611df1565b90506020020160208101906109f39190611d03565b609890610f1b565b506001016109c1565b600061075482610f3d565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a7e576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610870838383610f4a565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610af8576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156107d557828282818110610b1557610b15611df1565b9050602002013560000315610b4657610b4684848484818110610b3a57610b3a611df1565b905060200201356110b3565b600101610afb565b7f6753d6b325cc45d6566c947baabf366ee79f2a1a197e23fbd9074f661fe28cb1610b7881610d36565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315159081179091556040519081527fd76c99a8f1eb77feac25a1b5d67950ec13adb34b7d857c57e8d2894aaf3f230d90602001610988565b600082815260656020526040902060010154610bf281610d36565b6108708383610e60565b6060610c0860986111bf565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c7c576040517ffe1bb40d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61092982826110b3565b80156107d5576000610cc1610c9b8486611e4f565b7f00000000000000000000000000000000000000000000000000000000000000006111cc565b9050600082609a5483610cd49190611e62565b610cde9190611e79565b6000878152609b6020526040908190208290555190915086907fdaf33b9129a7a0fda038b5357d925eac65b91567a5f1a3e563a27a13e542d6b790610d269084815260200190565b60405180910390a2505050505050565b610d4081336111e2565b50565b6000610d658373ffffffffffffffffffffffffffffffffffffffff841661129c565b9392505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661092957600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e023390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561092957600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d658373ffffffffffffffffffffffffffffffffffffffff84166112eb565b60006107546098836113de565b6000805b8281101561107b576000848483818110610f6a57610f6a611df1565b90506020020135905080600003610f815750611073565b6000818152609c60209081526040808320898452909152902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915560975473ffffffffffffffffffffffffffffffffffffffff9091169060ff16158015610ff45750610ff281610f3d565b155b15611000575050611073565b6000828152609b6020526040902054611019828261140d565b87838373ffffffffffffffffffffffffffffffffffffffff167f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e8460405161106391815260200190565b60405180910390a4600194505050505b600101610f4e565b50806107d5576040517f5aa9184d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190611eb4565b6000928352609c60209081526040808520938552929052912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60606000610d658361152f565b60008183106111db5781610d65565b5090919050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610929576112228161158b565b61122d8360206115aa565b60405160200161123e929190611ef5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261091691600401611f76565b60008181526001830160205260408120546112e357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610754565b506000610754565b600081815260018301602052604081205480156113d457600061130f600183611e4f565b855490915060009061132390600190611e4f565b905081811461138857600086600001828154811061134357611343611df1565b906000526020600020015490508087600001848154811061136657611366611df1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061139957611399611fc7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610754565b6000915050610754565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515610d65565b7fffffffffffffffffffffffff11111111111111111111111111111111111111127f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16016115045760008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146114c4576040519150601f19603f3d011682016040523d82523d6000602084013e6114c9565b606091505b5050905080610870576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109297f000000000000000000000000000000000000000000000000000000000000000083836117ed565b60608160000180548060200260200160405190810160405280929190818152602001828054801561157f57602002820191906000526020600020905b81548152602001906001019080831161156b575b50505050509050919050565b606061075473ffffffffffffffffffffffffffffffffffffffff831660145b606060006115b9836002611e62565b6115c4906002611ff6565b67ffffffffffffffff8111156115dc576115dc612009565b6040519080825280601f01601f191660200182016040528015611606576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061163d5761163d611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106116a0576116a0611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006116dc846002611e62565b6116e7906001611ff6565b90505b6001811115611784577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061172857611728611df1565b1a60f81b82828151811061173e5761173e611df1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361177d81612038565b90506116ea565b508315610d65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610916565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610870928692916000916118b8918516908490611965565b90508051600014806118d95750808060200190518101906118d9919061206d565b610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610916565b6060611974848460008561197c565b949350505050565b606082471015611a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610916565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a37919061208a565b60006040518083038185875af1925050503d8060008114611a74576040519150601f19603f3d011682016040523d82523d6000602084013e611a79565b606091505b5091509150611a8a87838387611a95565b979650505050505050565b60608315611b2b578251600003611b245773ffffffffffffffffffffffffffffffffffffffff85163b611b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610916565b5081611974565b6119748383815115611b405781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109169190611f76565b600060208284031215611b8657600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d6557600080fd5b60008060408385031215611bc957600080fd5b50508035926020909101359150565b60008060008060808587031215611bee57600080fd5b5050823594602084013594506040840135936060013592509050565b60008083601f840112611c1c57600080fd5b50813567ffffffffffffffff811115611c3457600080fd5b6020830191508360208260051b8501011115611c4f57600080fd5b9250929050565b60008060208385031215611c6957600080fd5b823567ffffffffffffffff811115611c8057600080fd5b611c8c85828601611c0a565b90969095509350505050565b600060208284031215611caa57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d4057600080fd5b60008060408385031215611ce657600080fd5b823591506020830135611cf881611cb1565b809150509250929050565b600060208284031215611d1557600080fd5b8135610d6581611cb1565b600080600060408486031215611d3557600080fd5b83359250602084013567ffffffffffffffff811115611d5357600080fd5b611d5f86828701611c0a565b9497909650939450505050565b8015158114610d4057600080fd5b600060208284031215611d8c57600080fd5b8135610d6581611d6c565b6020808252825182820181905260009190848201906040850190845b81811015611de557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611db3565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561075457610754611e20565b808202811582820484141761075457610754611e20565b600082611eaf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611ec657600080fd5b8151610d6581611cb1565b60005b83811015611eec578181015183820152602001611ed4565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f2d816017850160208801611ed1565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f6a816028840160208801611ed1565b01602801949350505050565b6020815260008251806020840152611f95816040850160208701611ed1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b8082018082111561075457610754611e20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008161204757612047611e20565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561207f57600080fd5b8151610d6581611d6c565b6000825161209c818460208701611ed1565b919091019291505056fea26469706673582212207e3705b2b245fd1c82813a26f50730548c325723b2f46b25a65e9799e9b07efe64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x905EAF1D GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xB7355FB4 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDCD50D2E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDCD50D2E EQ PUSH2 0x617 JUMPI DUP1 PUSH4 0xE2D18BE6 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0xE6ED1180 EQ PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7355FB4 EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xC2A74752 EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xCBD73CB2 EQ PUSH2 0x5D7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x99248EA7 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x99248EA7 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x9B6E0D74 EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x53A JUMPI DUP1 PUSH4 0xA5F957F9 EQ PUSH2 0x54F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x905EAF1D EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x95126FE6 EQ PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DFF0CE9 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x7CD727BA GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x7CD727BA EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x86F8A03E EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x8AD9C511 EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0x8F10369A EQ PUSH2 0x429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5DFF0CE9 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x66DA5815 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6F63B8AB EQ PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x229D683D GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x229D683D EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xF0479B4 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x1BCDB77A EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1CD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1B74 JUMP JUMPDEST PUSH2 0x6C1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB6 JUMP JUMPDEST PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD8 JUMP JUMPDEST PUSH2 0x75A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x7DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x1F2 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x92D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0xFF073D0DCF74639A8D3C1C189AC3A527293F2FBAE27F12ACBFDAABD420F2A5F3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x9A SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D03 JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x47A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x535 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0xA0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x59E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0xA89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x5F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D7A JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x612 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0xBD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0x5E9BCE9D0EF4F3DDC258EB9C04459FD66D9887E1079E0B19880FC501A3DDD5F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x660 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x1D97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x6BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1BB6 JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x754 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D5 DUP5 DUP5 DUP5 DUP5 PUSH2 0xC86 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0x805 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x842 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x825 JUMPI PUSH2 0x825 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x83A SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x98 SWAP1 PUSH2 0xD43 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x808 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x866 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x870 DUP4 DUP4 PUSH2 0xD6C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 DUP3 DUP3 PUSH2 0xE60 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0xFF073D0DCF74639A8D3C1C189AC3A527293F2FBAE27F12ACBFDAABD420F2A5F3 PUSH2 0x957 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x9A DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x951C6F64EB06EC6A6682072CDA71420984DD55199006684BB820A80FD7E98793 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0x9BE DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x9FB DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x9DE JUMPI PUSH2 0x9DE PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9F3 SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x98 SWAP1 PUSH2 0xF1B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x754 DUP3 PUSH2 0xF3D JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 DUP4 DUP4 DUP4 PUSH2 0xF4A JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0xB15 JUMPI PUSH2 0xB15 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB ISZERO PUSH2 0xB46 JUMPI PUSH2 0xB46 DUP5 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0xB3A JUMPI PUSH2 0xB3A PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xAFB JUMP JUMPDEST PUSH32 0x6753D6B325CC45D6566C947BAABF366EE79F2A1A197E23FBD9074F661FE28CB1 PUSH2 0xB78 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xD76C99A8F1EB77FEAC25A1B5D67950EC13ADB34B7D857C57E8D2894AAF3F230D SWAP1 PUSH1 0x20 ADD PUSH2 0x988 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xBF2 DUP2 PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x870 DUP4 DUP4 PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC08 PUSH1 0x98 PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xC7C JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE1BB40D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 DUP3 DUP3 PUSH2 0x10B3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 PUSH2 0xCC1 PUSH2 0xC9B DUP5 DUP7 PUSH2 0x1E4F JUMP JUMPDEST PUSH32 0x0 PUSH2 0x11CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x9A SLOAD DUP4 PUSH2 0xCD4 SWAP2 SWAP1 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0xCDE SWAP2 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP DUP7 SWAP1 PUSH32 0xDAF33B9129A7A0FDA038B5357D925EAC65B91567A5F1A3E563A27A13E542D6B7 SWAP1 PUSH2 0xD26 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD40 DUP2 CALLER PUSH2 0x11E2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x129C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x929 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE02 CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x929 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x754 PUSH1 0x98 DUP4 PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xF6A JUMPI PUSH2 0xF6A PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF81 JUMPI POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x97 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xFF4 JUMPI POP PUSH2 0xFF2 DUP2 PUSH2 0xF3D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1000 JUMPI POP POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1019 DUP3 DUP3 PUSH2 0x140D JUMP JUMPDEST DUP8 DUP4 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9CDCF2F7714CCA3508C7F0110B04A90A80A3A8DD0E35DE99689DB74D28C5383E DUP5 PUSH1 0x40 MLOAD PUSH2 0x1063 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP5 POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF4E JUMP JUMPDEST POP DUP1 PUSH2 0x7D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5AA9184D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1162 SWAP2 SWAP1 PUSH2 0x1EB4 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP4 DUP6 MSTORE SWAP3 SWAP1 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xD65 DUP4 PUSH2 0x152F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DB JUMPI DUP2 PUSH2 0xD65 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x929 JUMPI PUSH2 0x1222 DUP2 PUSH2 0x158B JUMP JUMPDEST PUSH2 0x122D DUP4 PUSH1 0x20 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x123E SWAP3 SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x916 SWAP2 PUSH1 0x4 ADD PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x12E3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x754 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x0 PUSH2 0x130F PUSH1 0x1 DUP4 PUSH2 0x1E4F JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x1323 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1E4F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1388 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1343 JUMPI PUSH2 0x1343 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1366 JUMPI PUSH2 0x1366 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1399 JUMPI PUSH2 0x1399 PUSH2 0x1FC7 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x754 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xD65 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF1111111111111111111111111111111111111112 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD PUSH2 0x1504 JUMPI PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x870 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB12D13EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x929 PUSH32 0x0 DUP4 DUP4 PUSH2 0x17ED JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x157F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x156B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x754 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x15B9 DUP4 PUSH1 0x2 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x15C4 SWAP1 PUSH1 0x2 PUSH2 0x1FF6 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15DC JUMPI PUSH2 0x15DC PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1606 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x163D JUMPI PUSH2 0x163D PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x16DC DUP5 PUSH1 0x2 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x16E7 SWAP1 PUSH1 0x1 PUSH2 0x1FF6 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1784 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1728 JUMPI PUSH2 0x1728 PUSH2 0x1DF1 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x173E JUMPI PUSH2 0x173E PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x177D DUP2 PUSH2 0x2038 JUMP JUMPDEST SWAP1 POP PUSH2 0x16EA JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x870 SWAP3 DUP7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x18B8 SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x1965 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x18D9 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x18D9 SWAP2 SWAP1 PUSH2 0x206D JUMP JUMPDEST PUSH2 0x870 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1974 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x197C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1A0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x916 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x208A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A74 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A79 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1A8A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1A95 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1B2B JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1B24 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1B24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x916 JUMP JUMPDEST POP DUP2 PUSH2 0x1974 JUMP JUMPDEST PUSH2 0x1974 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1B40 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x916 SWAP2 SWAP1 PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8C DUP6 DUP3 DUP7 ADD PUSH2 0x1C0A JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1CF8 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD65 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D5F DUP7 DUP3 DUP8 ADD PUSH2 0x1C0A JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD65 DUP2 PUSH2 0x1D6C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DE5 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1DB3 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EAF JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD65 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EEC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1ED4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1F2D DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1ED1 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1F6A DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1ED1 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F95 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1ED1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x754 JUMPI PUSH2 0x754 PUSH2 0x1E20 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2047 JUMPI PUSH2 0x2047 PUSH2 0x1E20 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x207F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD65 DUP2 PUSH2 0x1D6C JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x209C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1ED1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x3705B2B245FD1C82813A26F50730548C325723B2F46B25A65E9799E9B07EFE PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"313:4527:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3029:213:5;;;;;;;;;;-1:-1:-1;3029:213:5;;;;;:::i;:::-;;:::i;:::-;;;516:14:24;;509:22;491:41;;479:2;464:18;3029:213:5;;;;;;;;783:72:23;;;;;;;;;;-1:-1:-1;783:72:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;972:42:24;960:55;;;942:74;;930:2;915:18;783:72:23;796:226:24;2387:399:0;;;;;;;;;;-1:-1:-1;2387:399:0;;;;;:::i;:::-;;:::i;:::-;;1172:216:2;;;;;;;;;;-1:-1:-1;1172:216:2;;;;;:::i;:::-;;:::i;4834:129:5:-;;;;;;;;;;-1:-1:-1;4834:129:5;;;;;:::i;:::-;4908:7;4934:12;;;:6;:12;;;;;:22;;;;4834:129;;;;2562:25:24;;;2550:2;2535:18;4834:129:5;2416:177:24;5259:145:5;;;;;;;;;;-1:-1:-1;5259:145:5;;;;;:::i;:::-;;:::i;6368:214::-;;;;;;;;;;-1:-1:-1;6368:214:5;;;;;:::i;:::-;;:::i;660:23:2:-;;;;;;;;;;-1:-1:-1;660:23:2;;;;;;;;2542:209:23;;;;;;;;;;-1:-1:-1;2542:209:23;;;;;:::i;:::-;;:::i;670:55::-;;;;;;;;;;-1:-1:-1;670:55:23;;;;;:::i;:::-;;;;;;;;;;;;;;1394:222:2;;;;;;;;;;-1:-1:-1;1394:222:2;;;;;:::i;:::-;;:::i;568:86::-;;;;;;;;;;;;622:32;568:86;;440::23;;;;;;;;;;;;490:36;440:86;;586:30;;;;;;;;;;;;;;;;4730:108;;;;;;;;;;-1:-1:-1;4730:108:23;;;;;:::i;:::-;;:::i;3329:145:5:-;;;;;;;;;;-1:-1:-1;3329:145:5;;;;;:::i;:::-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;;;;3329:145;297:33:0;;;;;;;;;;;;;;;310:37:1;;;;;;;;;;;;;;;3170:174:0;;;;;;;;;;-1:-1:-1;3170:174:0;;;;;:::i;:::-;;:::i;2450:49:5:-;;;;;;;;;;-1:-1:-1;2450:49:5;2495:4;2450:49;;336:34:0;;;;;;;;;;;;;;;1473:292;;;;;;;;;;-1:-1:-1;1473:292:0;;;;;:::i;:::-;;:::i;532:47:23:-;;;;;;;;;;;;;;;989:177:2;;;;;;;;;;-1:-1:-1;989:177:2;;;;;:::i;:::-;;:::i;5684:147:5:-;;;;;;;;;;-1:-1:-1;5684:147:5;;;;;:::i;:::-;;:::i;464:98:2:-;;;;;;;;;;;;524:38;464:98;;1622:110;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;374:60:23:-;;;;;;;;;;;;411:23;374:60;;991:155:0;;;;;;;;;;-1:-1:-1;991:155:0;;;;;:::i;:::-;;:::i;3029:213:5:-;3114:4;3137:58;;;3152:43;3137:58;;:98;;-1:-1:-1;1183:36:11;1168:51;;;;3199:36:5;3130:105;3029:213;-1:-1:-1;;3029:213:5:o;2387:399:0:-;414:10;:30;436:7;414:30;;410:81;;467:13;;;;;;;;;;;;;;410:81;2609:170:::1;2634:12;2660:25;2699:29;2742:27;2609:11;:170::i;:::-;2387:399:::0;;;;:::o;1172:216:2:-;622:32;2928:16:5;2939:4;2928:10;:16::i;:::-;1292:9:2::1;1287:95;1303:19:::0;;::::1;1287:95;;;1343:28;1359:8;;1368:1;1359:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1343;::::0;:15:::1;:28::i;:::-;-1:-1:-1::0;1324:3:2::1;;1287:95;;5259:145:5::0;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5372:25:::1;5383:4;5389:7;5372:10;:25::i;:::-;5259:145:::0;;;:::o;6368:214::-;6463:23;;;929:10:9;6463:23:5;6455:83;;;;;;;6146:2:24;6455:83:5;;;6128:21:24;6185:2;6165:18;;;6158:30;6224:34;6204:18;;;6197:62;6295:17;6275:18;;;6268:45;6330:19;;6455:83:5;;;;;;;;;6549:26;6561:4;6567:7;6549:11;:26::i;:::-;6368:214;;:::o;2542:209:23:-;490:36;2928:16:5;2939:4;2928:10;:16::i;:::-;2651:15:23::1;:36:::0;;;2702:42:::1;::::0;2562:25:24;;;2702:42:23::1;::::0;2550:2:24;2535:18;2702:42:23::1;;;;;;;;2542:209:::0;;:::o;1394:222:2:-;622:32;2928:16:5;2939:4;2928:10;:16::i;:::-;1517:9:2::1;1512:98;1528:19:::0;;::::1;1512:98;;;1568:31;1587:8;;1596:1;1587:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1568;::::0;:18:::1;:31::i;:::-;-1:-1:-1::0;1549:3:2::1;;1512:98;;4730:108:23::0;4788:4;4811:20;4824:6;4811:12;:20::i;3170:174:0:-;414:10;:30;436:7;414:30;;410:81;;467:13;;;;;;;;;;;;;;410:81;3298:39:::1;3311:10;3323:13;;3298:12;:39::i;1473:292::-:0;414:10;:30;436:7;414:30;;410:81;;467:13;;;;;;;;;;;;;;410:81;1608:9:::1;1603:156;1619:22:::0;;::::1;1603:156;;;1666:11;;1678:1;1666:14;;;;;;;:::i;:::-;;;;;;;1684:1;1666:19:::0;1662:33;1687:8:::1;1662:33;1709:39;1719:12;1733:11;;1745:1;1733:14;;;;;;;:::i;:::-;;;;;;;1709:9;:39::i;:::-;1643:3;;1603:156;;989:177:2::0;622:32;2928:16:5;2939:4;2928:10;:16::i;:::-;1092:11:2::1;:23:::0;;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;1131:28:::1;::::0;491:41:24;;;1131:28:2::1;::::0;479:2:24;464:18;1131:28:2::1;351:187:24::0;5684:147:5;4908:7;4934:12;;;:6;:12;;;;;:22;;;2928:16;2939:4;2928:10;:16::i;:::-;5798:26:::1;5810:4;5816:7;5798:11;:26::i;1622:110:2:-:0;1670:16;1705:20;:11;:18;:20::i;:::-;1698:27;;1622:110;:::o;991:155:0:-;414:10;:30;436:7;414:30;;410:81;;467:13;;;;;;;;;;;;;;410:81;1104:35:::1;1114:12;1128:10;1104:9;:35::i;3039:626:23:-:0;3259:30;;3255:404;;3305:24;3332:89;3341:55;3368:28;3341:24;:55;:::i;:::-;3398:22;3332:8;:89::i;:::-;3305:116;;3435:21;3498:26;3479:15;;3460:16;:34;;;;:::i;:::-;3459:65;;;;:::i;:::-;3538:33;;;;:20;:33;;;;;;;:49;;;3606:42;3435:89;;-1:-1:-1;3559:11:23;;3606:42;;;;3435:89;2562:25:24;;2550:2;2535:18;;2416:177;3606:42:23;;;;;;;;3291:368;;3039:626;;;;:::o;3768:103:5:-;3834:30;3845:4;929:10:9;3834::5;:30::i;:::-;3768:103;:::o;8305:150:22:-;8375:4;8398:50;8403:3;8423:23;;;8398:4;:50::i;:::-;8391:57;8305:150;-1:-1:-1;;;8305:150:22:o;7917:233:5:-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;7995:149;;8038:12;;;;:6;:12;;;;;;;;:29;;;;;;;;;;:36;;;;8070:4;8038:36;;;8120:12;929:10:9;;850:96;8120:12:5;8093:40;;8111:7;8093:40;;8105:4;8093:40;;;;;;;;;;7917:233;;:::o;8321:234::-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;8400:149;;;8474:5;8442:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;:37;;;;;;8498:40;929:10:9;;8442:12:5;;8498:40;;8474:5;8498:40;8321:234;;:::o;8623:156:22:-;8696:4;8719:53;8727:3;8747:23;;;8719:7;:53::i;1738:121:2:-;1800:4;1823:29;:11;1844:7;1823:20;:29::i;3791:835:23:-;3891:15;3921:9;3916:628;3932:23;;;3916:628;;;3976:19;3998:12;;4011:1;3998:15;;;;;;;:::i;:::-;;;;;;;3976:37;;4031:11;4046:1;4031:16;4027:63;;4067:8;;;4027:63;4104:18;4125:30;;;:17;:30;;;;;;;;:39;;;;;;;;;;4178:46;;;;;;4243:11;;4125:39;;;;;4243:11;;4242:12;:41;;;;;4259:24;4272:10;4259:12;:24::i;:::-;4258:25;4242:41;4238:88;;;4303:8;;;;4238:88;4340:14;4357:33;;;:20;:33;;;;;;4404:30;4415:10;4357:33;4404:10;:30::i;:::-;4486:7;4473:11;4461:10;4453:49;;;4495:6;4453:49;;;;2562:25:24;;2550:2;2535:18;;2416:177;4453:49:23;;;;;;;;4529:4;4516:17;;3962:582;;;3916:628;3957:3;;3916:628;;;;4559:10;4554:66;;4592:17;;;;;;;;;;;;;;2793:159;2920:25;;;;;;;;2562::24;;;2920:8:23;:16;;;;;2535:18:24;;2920:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2878:30;;;;:17;:30;;;;;;;;:39;;;;;;;;:67;;;;;;;;;;;;;;2793:159::o;10259:300:22:-;10322:16;10350:22;10375:19;10383:3;10375:7;:19::i;588:104:21:-;646:7;676:1;672;:5;:13;;684:1;672:13;;;-1:-1:-1;680:1:21;;588:104;-1:-1:-1;588:104:21:o;4152:501:5:-;3415:4;3438:12;;;:6;:12;;;;;;;;:29;;;;;;;;;;;;;4235:412;;4423:39;4454:7;4423:30;:39::i;:::-;4533:49;4572:4;4579:2;4533:30;:49::i;:::-;4330:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;4278:358;;;;;;;;:::i;2214:404:22:-;2277:4;4351:19;;;:12;;;:19;;;;;;2293:319;;-1:-1:-1;2335:23:22;;;;;;;;:11;:23;;;;;;;;;;;;;2515:18;;2493:19;;;:12;;;:19;;;;;;:40;;;;2547:11;;2293:319;-1:-1:-1;2596:5:22;2589:12;;2786:1388;2852:4;2989:19;;;:12;;;:19;;;;;;3023:15;;3019:1149;;3392:21;3416:14;3429:1;3416:10;:14;:::i;:::-;3464:18;;3392:38;;-1:-1:-1;3444:17:22;;3464:22;;3485:1;;3464:22;:::i;:::-;3444:42;;3518:13;3505:9;:26;3501:398;;3551:17;3571:3;:11;;3583:9;3571:22;;;;;;;;:::i;:::-;;;;;;;;;3551:42;;3722:9;3693:3;:11;;3705:13;3693:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3805:23;;;:12;;;:23;;;;;:36;;;3501:398;3977:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4069:3;:12;;:19;4082:5;4069:19;;;;;;;;;;;4062:26;;;4110:4;4103:11;;;;;;;3019:1149;4152:5;4145:12;;;;;8860:165;8993:23;;;8940:4;4351:19;;;:12;;;:19;;;;;;:24;;8963:55;4255:127;438:348:1;511:20;:12;:20;;;507:273;;548:12;566:3;:8;;582:7;566:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;547:47;;;613:7;608:73;;647:19;;;;;;;;;;;;;;507:273;711:58;741:12;756:3;761:7;711:22;:58::i;5570:109:22:-;5626:16;5661:3;:11;;5654:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5570:109;;;:::o;2473:149:10:-;2531:13;2563:52;2575:22;;;376:2;1884:437;1959:13;1984:19;2016:10;2020:6;2016:1;:10;:::i;:::-;:14;;2029:1;2016:14;:::i;:::-;2006:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2006:25:10;;1984:47;;2041:15;:6;2048:1;2041:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;;2066;:6;2073:1;2066:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;-1:-1:-1;2096:9:10;2108:10;2112:6;2108:1;:10;:::i;:::-;:14;;2121:1;2108:14;:::i;:::-;2096:26;;2091:128;2128:1;2124;:5;2091:128;;;2162:8;2171:5;2179:3;2171:11;2162:21;;;;;;;:::i;:::-;;;;2150:6;2157:1;2150:9;;;;;;;;:::i;:::-;;;;:33;;;;;;;;;;-1:-1:-1;2207:1:10;2197:11;;;;;2131:3;;;:::i;:::-;;;2091:128;;;-1:-1:-1;2236:10:10;;2228:55;;;;;;;10043:2:24;2228:55:10;;;10025:21:24;;;10062:18;;;10055:30;10121:34;10101:18;;;10094:62;10173:18;;2228:55:10;9841:356:24;941:175:17;1050:58;;;10406:42:24;10394:55;;;1050:58:17;;;10376:74:24;10466:18;;;;10459:34;;;1050:58:17;;;;;;;;;;10349:18:24;;;;1050:58:17;;;;;;;;;;1073:23;1050:58;;;5641:69;;;;;;;;;;;;;;;;1023:86;;1043:5;;1050:58;-1:-1:-1;;5641:69:17;;:27;;;1050:58;;5641:27;:69::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;10956:2:24;5720:111:17;;;10938:21:24;10995:2;10975:18;;;10968:30;11034:34;11014:18;;;11007:62;11105:12;11085:18;;;11078:40;11135:19;;5720:111:17;10754:406:24;4108:223:19;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:19:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;11367:2:24;5354:81:19;;;11349:21:24;11406:2;11386:18;;;11379:30;11445:34;11425:18;;;11418:62;11516:8;11496:18;;;11489:36;11542:19;;5354:81:19;11165:402:24;5354:81:19;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:19:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;12066:2:24;8113:60:19;;;12048:21:24;12105:2;12085:18;;;12078:30;12144:31;12124:18;;;12117:59;12193:18;;8113:60:19;11864:353:24;8113:60:19;-1:-1:-1;8208:10:19;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:24:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:248;611:6;619;672:2;660:9;651:7;647:23;643:32;640:52;;;688:1;685;678:12;640:52;-1:-1:-1;;711:23:24;;;781:2;766:18;;;753:32;;-1:-1:-1;543:248:24:o;1027:385::-;1113:6;1121;1129;1137;1190:3;1178:9;1169:7;1165:23;1161:33;1158:53;;;1207:1;1204;1197:12;1158:53;-1:-1:-1;;1230:23:24;;;1300:2;1285:18;;1272:32;;-1:-1:-1;1351:2:24;1336:18;;1323:32;;1402:2;1387:18;1374:32;;-1:-1:-1;1027:385:24;-1:-1:-1;1027:385:24:o;1417:367::-;1480:8;1490:6;1544:3;1537:4;1529:6;1525:17;1521:27;1511:55;;1562:1;1559;1552:12;1511:55;-1:-1:-1;1585:20:24;;1628:18;1617:30;;1614:50;;;1660:1;1657;1650:12;1614:50;1697:4;1689:6;1685:17;1673:29;;1757:3;1750:4;1740:6;1737:1;1733:14;1725:6;1721:27;1717:38;1714:47;1711:67;;;1774:1;1771;1764:12;1711:67;1417:367;;;;;:::o;1789:437::-;1875:6;1883;1936:2;1924:9;1915:7;1911:23;1907:32;1904:52;;;1952:1;1949;1942:12;1904:52;1992:9;1979:23;2025:18;2017:6;2014:30;2011:50;;;2057:1;2054;2047:12;2011:50;2096:70;2158:7;2149:6;2138:9;2134:22;2096:70;:::i;:::-;2185:8;;2070:96;;-1:-1:-1;1789:437:24;-1:-1:-1;;;;1789:437:24:o;2231:180::-;2290:6;2343:2;2331:9;2322:7;2318:23;2314:32;2311:52;;;2359:1;2356;2349:12;2311:52;-1:-1:-1;2382:23:24;;2231:180;-1:-1:-1;2231:180:24:o;2598:154::-;2684:42;2677:5;2673:54;2666:5;2663:65;2653:93;;2742:1;2739;2732:12;2757:315;2825:6;2833;2886:2;2874:9;2865:7;2861:23;2857:32;2854:52;;;2902:1;2899;2892:12;2854:52;2938:9;2925:23;2915:33;;2998:2;2987:9;2983:18;2970:32;3011:31;3036:5;3011:31;:::i;:::-;3061:5;3051:15;;;2757:315;;;;;:::o;3444:247::-;3503:6;3556:2;3544:9;3535:7;3531:23;3527:32;3524:52;;;3572:1;3569;3562:12;3524:52;3611:9;3598:23;3630:31;3655:5;3630:31;:::i;3943:505::-;4038:6;4046;4054;4107:2;4095:9;4086:7;4082:23;4078:32;4075:52;;;4123:1;4120;4113:12;4075:52;4159:9;4146:23;4136:33;;4220:2;4209:9;4205:18;4192:32;4247:18;4239:6;4236:30;4233:50;;;4279:1;4276;4269:12;4233:50;4318:70;4380:7;4371:6;4360:9;4356:22;4318:70;:::i;:::-;3943:505;;4407:8;;-1:-1:-1;4292:96:24;;-1:-1:-1;;;;3943:505:24:o;4700:118::-;4786:5;4779:13;4772:21;4765:5;4762:32;4752:60;;4808:1;4805;4798:12;4823:241;4879:6;4932:2;4920:9;4911:7;4907:23;4903:32;4900:52;;;4948:1;4945;4938:12;4900:52;4987:9;4974:23;5006:28;5028:5;5006:28;:::i;5069:681::-;5240:2;5292:21;;;5362:13;;5265:18;;;5384:22;;;5211:4;;5240:2;5463:15;;;;5437:2;5422:18;;;5211:4;5506:218;5520:6;5517:1;5514:13;5506:218;;;5585:13;;5600:42;5581:62;5569:75;;5699:15;;;;5664:12;;;;5542:1;5535:9;5506:218;;;-1:-1:-1;5741:3:24;;5069:681;-1:-1:-1;;;;;;5069:681:24:o;5755:184::-;5807:77;5804:1;5797:88;5904:4;5901:1;5894:15;5928:4;5925:1;5918:15;6360:184;6412:77;6409:1;6402:88;6509:4;6506:1;6499:15;6533:4;6530:1;6523:15;6549:128;6616:9;;;6637:11;;;6634:37;;;6651:18;;:::i;6682:168::-;6755:9;;;6786;;6803:15;;;6797:22;;6783:37;6773:71;;6824:18;;:::i;6855:274::-;6895:1;6921;6911:189;;6956:77;6953:1;6946:88;7057:4;7054:1;7047:15;7085:4;7082:1;7075:15;6911:189;-1:-1:-1;7114:9:24;;6855:274::o;7134:251::-;7204:6;7257:2;7245:9;7236:7;7232:23;7228:32;7225:52;;;7273:1;7270;7263:12;7225:52;7305:9;7299:16;7324:31;7349:5;7324:31;:::i;7390:250::-;7475:1;7485:113;7499:6;7496:1;7493:13;7485:113;;;7575:11;;;7569:18;7556:11;;;7549:39;7521:2;7514:10;7485:113;;;-1:-1:-1;;7632:1:24;7614:16;;7607:27;7390:250::o;7645:812::-;8056:25;8051:3;8044:38;8026:3;8111:6;8105:13;8127:75;8195:6;8190:2;8185:3;8181:12;8174:4;8166:6;8162:17;8127:75;:::i;:::-;8266:19;8261:2;8221:16;;;8253:11;;;8246:40;8311:13;;8333:76;8311:13;8395:2;8387:11;;8380:4;8368:17;;8333:76;:::i;:::-;8429:17;8448:2;8425:26;;7645:812;-1:-1:-1;;;;7645:812:24:o;8462:455::-;8611:2;8600:9;8593:21;8574:4;8643:6;8637:13;8686:6;8681:2;8670:9;8666:18;8659:34;8702:79;8774:6;8769:2;8758:9;8754:18;8749:2;8741:6;8737:15;8702:79;:::i;:::-;8833:2;8821:15;8838:66;8817:88;8802:104;;;;8908:2;8798:113;;8462:455;-1:-1:-1;;8462:455:24:o;8922:184::-;8974:77;8971:1;8964:88;9071:4;9068:1;9061:15;9095:4;9092:1;9085:15;9321:125;9386:9;;;9407:10;;;9404:36;;;9420:18;;:::i;9451:184::-;9503:77;9500:1;9493:88;9600:4;9597:1;9590:15;9624:4;9621:1;9614:15;9640:196;9679:3;9707:5;9697:39;;9716:18;;:::i;:::-;-1:-1:-1;9763:66:24;9752:78;;9640:196::o;10504:245::-;10571:6;10624:2;10612:9;10603:7;10599:23;10595:32;10592:52;;;10640:1;10637;10630:12;10592:52;10672:9;10666:16;10691:28;10713:5;10691:28;:::i;11572:287::-;11701:3;11739:6;11733:13;11755:66;11814:6;11809:3;11802:4;11794:6;11790:17;11755:66;:::i;:::-;11837:16;;;;;11572:287;-1:-1:-1;;11572:287:24:o"},"gasEstimates":{"creation":{"codeDepositCost":"1682400","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_KYC_CONTROLLER_ROLE()":"239","DEFAULT_ADMIN_ROLE()":"284","KYC_CONTROLLER_ROLE()":"262","MAX_REWARD_TIME_WINDOW()":"infinite","NODE_KEY()":"infinite","OWNER_ROLE()":"283","REFEREE()":"infinite","REWARDS_CONTROLLER_ROLE()":"284","REWARD_TOKEN()":"infinite","addKycWallets(address[])":"infinite","claimReward(uint256,uint256[])":"infinite","getKycWallets()":"infinite","getRoleAdmin(bytes32)":"2512","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2685","isKycWallet(address)":"infinite","kycDisabled()":"2345","onAttest(uint256,uint256)":"infinite","onBatchAttest(uint256,uint256[])":"infinite","onFinalize(uint256,uint256,uint256,uint256)":"infinite","removeKycWallets(address[])":"infinite","renounceRole(bytes32,address)":"29022","revokeRole(bytes32,address)":"infinite","rewardPerLandOfBatch(uint256)":"2528","rewardPerSecond()":"2406","rewardsRecipients(uint256,uint256)":"2617","setKycDisabled(bool)":"infinite","setRewardPerSecond(uint256)":"infinite","supportsInterface(bytes4)":"416"},"internal":{"_claimReward(uint256,uint256[] calldata)":"infinite","_onAttest(uint256,uint256)":"infinite","_onFinalize(uint256,uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{"ADMIN_KYC_CONTROLLER_ROLE()":"dcd50d2e","DEFAULT_ADMIN_ROLE()":"a217fddf","KYC_CONTROLLER_ROLE()":"86f8a03e","MAX_REWARD_TIME_WINDOW()":"c2a74752","NODE_KEY()":"a5f957f9","OWNER_ROLE()":"e58378bb","REFEREE()":"95126fe6","REWARDS_CONTROLLER_ROLE()":"8ad9c511","REWARD_TOKEN()":"99248ea7","addKycWallets(address[])":"229d683d","claimReward(uint256,uint256[])":"9b6e0d74","getKycWallets()":"e2d18be6","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isKycWallet(address)":"905eaf1d","kycDisabled()":"5dff0ce9","onAttest(uint256,uint256)":"e6ed1180","onBatchAttest(uint256,uint256[])":"b7355fb4","onFinalize(uint256,uint256,uint256,uint256)":"1bcdb77a","removeKycWallets(address[])":"7cd727ba","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","rewardPerLandOfBatch(uint256)":"6f63b8ab","rewardPerSecond()":"8f10369a","rewardsRecipients(uint256,uint256)":"0f0479b4","setKycDisabled(bool)":"cbd73cb2","setRewardPerSecond(uint256)":"66da5815","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRewardTimeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"landAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKycWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyReferee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerLand\",\"type\":\"uint256\"}],\"name\":\"BatchFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"LogSetKycDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardPerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_KYC_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYC_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TIME_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_KEY\",\"outputs\":[{\"internalType\":\"contract INodeKey\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFEREE\",\"outputs\":[{\"internalType\":\"contract IReferee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"addKycWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchNumbers\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKycWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isKycWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeKeyId\",\"type\":\"uint256\"}],\"name\":\"onAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeKeyIds\",\"type\":\"uint256[]\"}],\"name\":\"onBatchAttest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevL1NodeConfirmedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nrOfSuccessfulAttestations\",\"type\":\"uint256\"}],\"name\":\"onFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"removeKycWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerLandOfBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setKycDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"claimReward(uint256,uint256[])\":{\"details\":\"_batchNumbers can contain 0 (empty items). Make sure to skip over it.\",\"params\":{\"_batchNumbers\":\"Batch numbers of successful attestations made by the node key.\",\"_nodeKeyId\":\"Id of the node key which is claiming the reward.\"}},\"constructor\":{\"details\":\"emits a {RewardPerSecondUpdated} event\",\"params\":{\"landAddress\":\"The address of the land contract\",\"maxRewardTimeWindow\":\"The maximum reward time window\",\"referee\":\"The address of the referee contract\",\"rewardPerSecond_\":\"The reward per second\",\"rewardToken\":\"The address of the reward token\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isKycWallet(address)\":{\"params\":{\"wallet\":\"The wallet to be checked\"}},\"onAttest(uint256,uint256)\":{\"params\":{\"_batchNumber\":\"Batch number of the attestation.\",\"_nodeKeyId\":\"Id of the node key.\"}},\"onBatchAttest(uint256,uint256[])\":{\"details\":\"_nodeKeyIds can contain 0 (empty items). We skip over it here.\",\"params\":{\"_batchNumber\":\"Batch number of the attestation.\",\"_nodeKeyIds\":\"Id of the node keys.\"}},\"onFinalize(uint256,uint256,uint256,uint256)\":{\"details\":\"_prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\",\"params\":{\"_batchNumber\":\"Batch number that is being finalized.\",\"_l1NodeConfirmedTimestamp\":\"Timestamp of which the batch is confirmed on the L1.\",\"_nrOfSuccessfulAttestations\":\"Number of node keys which have submitted a valid attestation.\",\"_prevL1NodeConfirmedTimestamp\":\"Timestamp of which the previous batch is confirmed on the L1.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setRewardPerSecond(uint256)\":{\"details\":\"Reverts with {AccessControlUnauthorizedAccount} if the sender is not the operator.Emits a {RewardPerSecondUpdated} event.\",\"params\":{\"newRewardPerSecond\":\"The new new reward per second to be set\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BatchFinalized(uint256,uint256)\":{\"notice\":\"Emitted when batch is finalized.\"},\"Claimed(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when reward is claimed.\"},\"RewardPerSecondUpdated(uint256)\":{\"notice\":\"Emitted when rewardPerSecond is updated.\"}},\"kind\":\"user\",\"methods\":{\"claimReward(uint256,uint256[])\":{\"notice\":\"Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\"},\"constructor\":{\"notice\":\"Constructor\"},\"isKycWallet(address)\":{\"notice\":\"Check if the wallet has been KYCed\"},\"onAttest(uint256,uint256)\":{\"notice\":\"Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\"},\"onBatchAttest(uint256,uint256[])\":{\"notice\":\"Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\"},\"onFinalize(uint256,uint256,uint256,uint256)\":{\"notice\":\"Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\"},\"rewardPerLandOfBatch(uint256)\":{\"notice\":\"batchNumber => reward per land\"},\"rewardsRecipients(uint256,uint256)\":{\"notice\":\"batchNumber => tokenId => recipient\"},\"setRewardPerSecond(uint256)\":{\"notice\":\"Sets the max token supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/land/EDULandRewards.sol\":\"EDULandRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {INodeKey} from \\\"./interfaces/INodeKey.sol\\\";\\nimport {IReferee} from \\\"./interfaces/IReferee.sol\\\";\\nimport {RewardsHelper} from \\\"./RewardsHelper.sol\\\";\\n\\nabstract contract NodeRewardsBase is RewardsHelper {\\n    error OnlyReferee();\\n\\n    IReferee public immutable REFEREE;\\n    INodeKey public immutable NODE_KEY;\\n\\n    modifier onlyReferee() {\\n        if (msg.sender != address(REFEREE)) {\\n            revert OnlyReferee();\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        address _referee,\\n        address _nodeKey,\\n        address _rewardToken\\n    ) RewardsHelper(_rewardToken) {\\n        REFEREE = IReferee(_referee);\\n        NODE_KEY = INodeKey(_nodeKey);\\n    }\\n\\n    /**\\n     * @notice Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyId Id of the node key.\\n     */\\n    function onAttest(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) external onlyReferee {\\n        _onAttest(_batchNumber, _nodeKeyId);\\n    }\\n\\n    /**\\n     * @notice Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyIds Id of the node keys.\\n     *\\n     * @dev _nodeKeyIds can contain 0 (empty items). We skip over it here.\\n     */\\n    function onBatchAttest(\\n        uint256 _batchNumber,\\n        uint256[] calldata _nodeKeyIds\\n    ) external onlyReferee {\\n        for (uint256 i; i < _nodeKeyIds.length; i++) {\\n            if (_nodeKeyIds[i] == 0) continue;\\n            _onAttest(_batchNumber, _nodeKeyIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}\\n     *\\n     * @param _batchNumber Batch number that is being finalized.\\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\\n     *\\n     * @dev _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\\n     */\\n    function onFinalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        uint256 _prevL1NodeConfirmedTimestamp,\\n        uint256 _nrOfSuccessfulAttestations\\n    ) external onlyReferee {\\n        _onFinalize(\\n            _batchNumber,\\n            _l1NodeConfirmedTimestamp,\\n            _prevL1NodeConfirmedTimestamp,\\n            _nrOfSuccessfulAttestations\\n        );\\n    }\\n\\n    /**\\n     * @notice Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}\\n     *\\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\\n     *\\n     * @dev _batchNumbers can contain 0 (empty items). Make sure to skip over it.\\n     */\\n    function claimReward(\\n        uint256 _nodeKeyId,\\n        uint256[] calldata _batchNumbers\\n    ) external onlyReferee {\\n        _claimReward(_nodeKeyId, _batchNumbers);\\n    }\\n\\n    /**\\n     * @dev Override this function if your rewards logic for each\\n     * node key varies depending on other factor.\\n     *\\n     * @param _batchNumber Batch number of the attestation.\\n     * @param _nodeKeyId Id of the node key.\\n     */\\n    function _onAttest(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Override this function if your rewards logic takes into\\n     * account the timestamps of the attestation and number of attestations.\\n     *\\n     * @dev IMPORTANT _prevL1NodeConfirmedTimestamp can be 0 when _batchNumber is the first ever batch being finalized.\\n     *\\n     * @param _batchNumber Batch number that is being finalized.\\n     * @param _l1NodeConfirmedTimestamp Timestamp of which the batch is confirmed on the L1.\\n     * @param _prevL1NodeConfirmedTimestamp Timestamp of which the previous batch is confirmed on the L1.\\n     * @param _nrOfSuccessfulAttestations Number of node keys which have submitted a valid attestation.\\n     */\\n    function _onFinalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        uint256 _prevL1NodeConfirmedTimestamp,\\n        uint256 _nrOfSuccessfulAttestations\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Override this function to handle the reward payment logic.\\n     *\\n     * @dev IMPORTANT _batchNumbers can contain 0 (empty items). Make sure to skip over it.\\n     *\\n     * @param _nodeKeyId Id of the node key which is claiming the reward.\\n     * @param _batchNumbers Batch numbers of successful attestations made by the node key.\\n     */\\n    function _claimReward(\\n        uint256 _nodeKeyId,\\n        uint256[] calldata _batchNumbers\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x19c794ce9255d2d0bb5882afa936119990cca8e9915252041a2a523dae97d596\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/RewardsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract RewardsHelper {\\n    error ETHTransferFailed();\\n\\n    address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable REWARD_TOKEN;\\n\\n    constructor(address _rewardToken) {\\n        REWARD_TOKEN = _rewardToken;\\n    }\\n\\n    function _payReward(address _to, uint256 _amount) internal {\\n        if (REWARD_TOKEN == _ETH) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            if (!success) {\\n                revert ETHTransferFailed();\\n            }\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(REWARD_TOKEN), _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8bab95c195bd087efbe580d34c2e48c5eac785c2d85c18e8877f095ff796880\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract RewardsKYC is AccessControlUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error OnlyKycWallet();\\n\\n    event LogSetKycDisabled(bool _disabled);\\n\\n    bytes32 public constant ADMIN_KYC_CONTROLLER_ROLE =\\n        keccak256(\\\"ADMIN_KYC_CONTROLLER_ROLE\\\");\\n    bytes32 public constant KYC_CONTROLLER_ROLE =\\n        keccak256(\\\"KYC_CONTROLLER_ROLE\\\");\\n    bool public kycDisabled;\\n    EnumerableSet.AddressSet internal _kycWallets;\\n\\n    function __RewardsKYC_init(\\n        address _adminKycController\\n    ) internal onlyInitializing {\\n        _setRoleAdmin(KYC_CONTROLLER_ROLE, ADMIN_KYC_CONTROLLER_ROLE);\\n        _grantRole(ADMIN_KYC_CONTROLLER_ROLE, _adminKycController);\\n    }\\n\\n    function setKycDisabled(\\n        bool _disabled\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        kycDisabled = _disabled;\\n\\n        emit LogSetKycDisabled(_disabled);\\n    }\\n\\n    function addKycWallets(\\n        address[] calldata _wallets\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        for (uint256 i; i < _wallets.length; i++) {\\n            _kycWallets.add(_wallets[i]);\\n        }\\n    }\\n\\n    function removeKycWallets(\\n        address[] calldata _wallets\\n    ) external onlyRole(KYC_CONTROLLER_ROLE) {\\n        for (uint256 i; i < _wallets.length; i++) {\\n            _kycWallets.remove(_wallets[i]);\\n        }\\n    }\\n\\n    function getKycWallets() external view returns (address[] memory) {\\n        return _kycWallets.values();\\n    }\\n\\n    function _isKycWallet(address _wallet) internal view returns (bool) {\\n        return _kycWallets.contains(_wallet);\\n    }\\n\\n    function _onlyKycWallet(address _wallet) internal view {\\n        if (!kycDisabled && !_isKycWallet(_wallet)) {\\n            revert OnlyKycWallet();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x477a94c67c6303aeca8431f47890e7c1534021b44c5000aa5909fa7430f8a703\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/interfaces/INodeKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INodeKey is IERC721 {}\\n\",\"keccak256\":\"0xd4efc98d3f910d0c8e06bc3b25b3e3f66226faeeb2566cafe054d40baedf7489\",\"license\":\"MIT\"},\"@gelatonetwork/node-sale-rewards/contracts/interfaces/IReferee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {INodeKey} from \\\"./INodeKey.sol\\\";\\n\\ninterface IReferee {\\n    struct BatchInfo {\\n        uint256 prevBatchNumber;\\n        uint256 l1NodeConfirmedTimestamp;\\n        uint256 nrOfSuccessfulAttestations;\\n        bytes32 finalL2StateRoot;\\n    }\\n\\n    event LogAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    );\\n    event LogSetNodeRewards(address _nodeRewards);\\n    event LogSetOracle(address _oracle, bool _isOracle);\\n    event LogFinalized(\\n        uint256 _batchNumber,\\n        bytes32 _finalL2StateRoot,\\n        uint256 _nrOfSuccessfulAttestations\\n    );\\n\\n    error AttestFailed();\\n    error InvalidBatchNumber();\\n    error NodeRewardsNotSet();\\n    error NoRewardsToClaim();\\n    error OnlyOracle();\\n\\n    function NODE_KEY() external view returns (INodeKey _nodeKey);\\n\\n    function ATTEST_PERIOD() external view returns (uint256 _attestPeriod);\\n\\n    function getBatchInfo(\\n        uint256 _batchNumber\\n    ) external view returns (BatchInfo memory);\\n\\n    function getAttestedBatchNumbers(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256[] memory);\\n\\n    function getIndexOfUnclaimedBatch(\\n        uint256 _nodeKeyId\\n    ) external view returns (uint256);\\n\\n    function getAttestation(\\n        uint256 _batchNumber,\\n        uint256 _nodeKeyId\\n    ) external view returns (bytes32);\\n\\n    function attest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256 _nodeKeyId\\n    ) external;\\n\\n    function batchAttest(\\n        uint256 _batchNumber,\\n        bytes32 _l2StateRoot,\\n        uint256[] memory _nodeKeyIds\\n    ) external;\\n\\n    function finalize(\\n        uint256 _batchNumber,\\n        uint256 _l1NodeConfirmedTimestamp,\\n        bytes32 _finalL2StateRoot\\n    ) external;\\n\\n    function claimReward(uint256 _nodeKeyId, uint256 _batchesCount) external;\\n\\n    function batchClaimReward(\\n        uint256[] memory _nodeKeyIds,\\n        uint256 _batchesCount\\n    ) external;\\n\\n    function getUnattestedNodeKeyIds(\\n        uint256 _batchNumber,\\n        uint256[] memory _nodeKeyIds\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0dacccecd13e314615ff3020e88f5981edab3fd58d6b5e2d434f5182c1b4ac98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/land/EDULandRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {NodeRewardsBase} from \\\"@gelatonetwork/node-sale-rewards/contracts/NodeRewardsBase.sol\\\";\\nimport {RewardsKYC} from \\\"@gelatonetwork/node-sale-rewards/contracts/RewardsKYC.sol\\\";\\n\\ncontract EDULandRewards is NodeRewardsBase, RewardsKYC {\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant REWARDS_CONTROLLER_ROLE = keccak256(\\\"REWARDS_CONTROLLER_ROLE\\\");\\n    uint256 public immutable MAX_REWARD_TIME_WINDOW;\\n\\n    uint256 public rewardPerSecond;\\n\\n    /// @notice batchNumber => reward per land\\n    mapping(uint256 => uint256) public rewardPerLandOfBatch;\\n    /// @notice batchNumber => tokenId => recipient\\n    mapping(uint256 => mapping(uint256 => address)) public rewardsRecipients;\\n\\n    /// @notice Emitted when rewardPerSecond is updated.\\n    event RewardPerSecondUpdated(uint256 rewardPerSecond);\\n\\n    /// @notice Emitted when batch is finalized.\\n    event BatchFinalized(uint256 indexed batchNumber, uint256 rewardPerLand);\\n\\n    /// @notice Emitted when reward is claimed.\\n    event Claimed(address indexed account, uint256 indexed batchNumber, uint256 indexed tokenId, uint256 amount);\\n\\n    error NoRewardToClaim();\\n\\n    /// @notice Constructor\\n    /// @dev emits a {RewardPerSecondUpdated} event\\n    /// @param maxRewardTimeWindow The maximum reward time window\\n    /// @param referee The address of the referee contract\\n    /// @param landAddress The address of the land contract\\n    /// @param rewardToken The address of the reward token\\n    /// @param rewardPerSecond_ The reward per second\\n    constructor(\\n        uint256 maxRewardTimeWindow,\\n        address referee,\\n        address landAddress,\\n        address rewardToken,\\n        uint256 rewardPerSecond_\\n    ) NodeRewardsBase(referee, landAddress, rewardToken) {\\n        MAX_REWARD_TIME_WINDOW = maxRewardTimeWindow;\\n\\n        rewardPerSecond = rewardPerSecond_;\\n        emit RewardPerSecondUpdated(rewardPerSecond_);\\n\\n        _setRoleAdmin(REWARDS_CONTROLLER_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(KYC_CONTROLLER_ROLE, OWNER_ROLE);\\n\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n    }\\n\\n    /// @notice Sets the max token supply\\n    /// @dev Reverts with {AccessControlUnauthorizedAccount} if the sender is not the operator.\\n    /// @dev Emits a {RewardPerSecondUpdated} event.\\n    /// @param newRewardPerSecond The new new reward per second to be set\\n    function setRewardPerSecond(uint256 newRewardPerSecond) external onlyRole(REWARDS_CONTROLLER_ROLE) {\\n        rewardPerSecond = newRewardPerSecond;\\n        emit RewardPerSecondUpdated(newRewardPerSecond);\\n    }\\n\\n    /// @inheritdoc NodeRewardsBase\\n    function _onAttest(uint256 batchNumber, uint256 tokenId) internal override {\\n        rewardsRecipients[batchNumber][tokenId] = NODE_KEY.ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc NodeRewardsBase\\n    /// @dev Emits a {BatchFinalized} event.\\n    function _onFinalize(\\n        uint256 batchNumber,\\n        uint256 l1NodeConfirmedTimestamp,\\n        uint256 prevL1NodeConfirmedTimestamp,\\n        uint256 nrOfSuccessfulAttestations\\n    ) internal override {\\n        if (nrOfSuccessfulAttestations > 0) {\\n            uint256 rewardTimeWindow = Math.min(l1NodeConfirmedTimestamp - prevL1NodeConfirmedTimestamp, MAX_REWARD_TIME_WINDOW);\\n            uint256 rewardPerLand = (rewardTimeWindow * rewardPerSecond) / nrOfSuccessfulAttestations;\\n            rewardPerLandOfBatch[batchNumber] = rewardPerLand;\\n            emit BatchFinalized(batchNumber, rewardPerLand);\\n        }\\n    }\\n\\n    /// @inheritdoc NodeRewardsBase\\n    /// @dev Reverts if now rewards to claim.\\n    /// @dev Emits a {Claimed} event.\\n    function _claimReward(uint256 tokenId, uint256[] calldata batchNumbers) internal override {\\n        bool hasRewards;\\n        for (uint256 i; i < batchNumbers.length; i++) {\\n            uint256 batchNumber = batchNumbers[i];\\n            if (batchNumber == 0) {\\n                continue;\\n            }\\n\\n            address tokenOwner = rewardsRecipients[batchNumber][tokenId];\\n            delete rewardsRecipients[batchNumber][tokenId];\\n            if (!kycDisabled && !_isKycWallet(tokenOwner)) {\\n                continue;\\n            }\\n\\n            uint256 amount = rewardPerLandOfBatch[batchNumber];\\n            _payReward(tokenOwner, amount);\\n            emit Claimed(tokenOwner, batchNumber, tokenId, amount);\\n            hasRewards = true;\\n        }\\n\\n        if (!hasRewards) {\\n            revert NoRewardToClaim();\\n        }\\n    }\\n\\n    /// @notice Check if the wallet has been KYCed\\n    /// @param wallet The wallet to be checked\\n    function isKycWallet(address wallet) public view returns (bool) {\\n        return _isKycWallet(wallet);\\n    }\\n}\\n\",\"keccak256\":\"0x7d4b32f04f0414200cdf4e42569311e0ad672ecd71cff5b0fc6039b2fb1fdbf6\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":989,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":992,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1522,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1795,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":613,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)608_storage)"},{"astId":908,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":278,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"kycDisabled","offset":0,"slot":"151","type":"t_bool"},{"astId":281,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_kycWallets","offset":0,"slot":"152","type":"t_struct(AddressSet)4919_storage"},{"astId":5232,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"rewardPerSecond","offset":0,"slot":"154","type":"t_uint256"},{"astId":5237,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"rewardPerLandOfBatch","offset":0,"slot":"155","type":"t_mapping(t_uint256,t_uint256)"},{"astId":5244,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"rewardsRecipients","offset":0,"slot":"156","type":"t_mapping(t_uint256,t_mapping(t_uint256,t_address))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)608_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)608_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_mapping(t_uint256,t_address))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => address))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_address)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4919_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":4918,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4604_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)608_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":605,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":607,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)4604_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":4599,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":4603,"contract":"contracts/land/EDULandRewards.sol:EDULandRewards","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"events":{"BatchFinalized(uint256,uint256)":{"notice":"Emitted when batch is finalized."},"Claimed(address,uint256,uint256,uint256)":{"notice":"Emitted when reward is claimed."},"RewardPerSecondUpdated(uint256)":{"notice":"Emitted when rewardPerSecond is updated."}},"kind":"user","methods":{"claimReward(uint256,uint256[])":{"notice":"Called in Referee.claimReward whenever someone claims their reward. {See Referee.sol}"},"constructor":{"notice":"Constructor"},"isKycWallet(address)":{"notice":"Check if the wallet has been KYCed"},"onAttest(uint256,uint256)":{"notice":"Called in Referee.attest whenever an attestation is submitted. {See Referee.sol}"},"onBatchAttest(uint256,uint256[])":{"notice":"Called in Referee.batchAttest whenever multiple attestations are submitted. {See Referee.sol}"},"onFinalize(uint256,uint256,uint256,uint256)":{"notice":"Called in Referee.finalize whenever attestations of a batch are finalized. {See Referee.sol}"},"rewardPerLandOfBatch(uint256)":{"notice":"batchNumber => reward per land"},"rewardsRecipients(uint256,uint256)":{"notice":"batchNumber => tokenId => recipient"},"setRewardPerSecond(uint256)":{"notice":"Sets the max token supply"}},"version":1}}}}}}